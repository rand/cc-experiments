version: '3.8'

services:
  # PostgreSQL test database
  postgres:
    image: postgres:15
    container_name: test-postgres
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    ports:
      - "5432:5432"
    volumes:
      - postgres-test-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test -d testdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: test-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-test-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # RabbitMQ message queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: test-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: test
      RABBITMQ_DEFAULT_PASS: test
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq-test-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - test-network

  # MongoDB (optional, for NoSQL tests)
  mongodb:
    image: mongo:6
    container_name: test-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: test
      MONGO_INITDB_ROOT_PASSWORD: test
      MONGO_INITDB_DATABASE: testdb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-test-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - test-network

  # MySQL (alternative to PostgreSQL)
  mysql:
    image: mysql:8
    container_name: test-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: testdb
      MYSQL_USER: test
      MYSQL_PASSWORD: test
    ports:
      - "3306:3306"
    volumes:
      - mysql-test-data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "test", "-ptest"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - test-network

  # MinIO (S3-compatible object storage)
  minio:
    image: minio/minio:latest
    container_name: test-minio
    environment:
      MINIO_ROOT_USER: test
      MINIO_ROOT_PASSWORD: testtest123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-test-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - test-network

  # Elasticsearch (for search tests)
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: test-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-test-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - test-network

  # Mailhog (email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: test-mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8025"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # WireMock (HTTP service mocking)
  wiremock:
    image: wiremock/wiremock:latest
    container_name: test-wiremock
    ports:
      - "8080:8080"
    command: ["--verbose"]
    volumes:
      - ./wiremock/mappings:/home/wiremock/mappings
      - ./wiremock/__files:/home/wiremock/__files
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/__admin/"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

volumes:
  postgres-test-data:
  redis-test-data:
  rabbitmq-test-data:
  mongodb-test-data:
  mysql-test-data:
  minio-test-data:
  elasticsearch-test-data:

networks:
  test-network:
    driver: bridge
