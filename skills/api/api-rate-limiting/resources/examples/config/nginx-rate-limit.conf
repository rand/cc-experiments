# Nginx Rate Limiting Configuration
#
# Production-ready Nginx configuration for rate limiting APIs
# using the limit_req module.
#
# Features:
# - Multiple rate limit zones
# - Burst handling
# - Custom error responses
# - Per-endpoint limits
# - IP-based and key-based limiting

# ============================================================================
# Rate Limit Zones
# ============================================================================

# Define rate limit zones in http context
http {
    # Zone 1: Global rate limit (10 requests per second per IP)
    # binary_remote_addr is more efficient than remote_addr
    limit_req_zone $binary_remote_addr zone=global:10m rate=10r/s;

    # Zone 2: API rate limit (100 requests per second per IP)
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;

    # Zone 3: Authentication endpoints (strict limit)
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # Zone 4: Expensive operations (very strict limit)
    limit_req_zone $binary_remote_addr zone=expensive:10m rate=1r/s;

    # Zone 5: Per-user rate limit using API key from header
    # Uses map to extract API key
    map $http_x_api_key $api_key_rate_limit {
        default         $http_x_api_key;
        ""              $binary_remote_addr;
    }
    limit_req_zone $api_key_rate_limit zone=per_user:10m rate=50r/s;

    # Zone 6: Per-endpoint rate limit
    map $request_uri $endpoint_limit_key {
        ~^/api/posts     $binary_remote_addr;
        ~^/api/users     $binary_remote_addr;
        default          "";
    }
    limit_req_zone $endpoint_limit_key zone=per_endpoint:10m rate=20r/s;

    # Custom error responses for rate limiting
    limit_req_status 429;

    # Log rate limit rejections
    limit_req_log_level warn;

    # ========================================================================
    # Server Configuration
    # ========================================================================

    server {
        listen 80;
        server_name api.example.com;

        # Error page for rate limiting
        error_page 429 /rate_limit_error.json;

        location = /rate_limit_error.json {
            internal;
            default_type application/json;
            return 429 '{"error":"rate_limit_exceeded","message":"Too many requests. Please slow down."}';
        }

        # ====================================================================
        # Health Check (no rate limit)
        # ====================================================================
        location = /health {
            access_log off;
            return 200 '{"status":"ok"}';
        }

        # ====================================================================
        # Authentication Endpoints (strict rate limit)
        # ====================================================================
        location ~ ^/auth/(login|signup|password-reset) {
            # 5 requests per second with burst of 10
            # nodelay: reject immediately if burst exceeded
            limit_req zone=auth burst=10 nodelay;

            # Add rate limit headers
            add_header X-RateLimit-Limit "5" always;
            add_header X-RateLimit-Zone "auth" always;

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # ====================================================================
        # API Endpoints (moderate rate limit)
        # ====================================================================
        location /api/ {
            # 100 requests per second with burst of 200
            # delay: allow burst but delay excess requests
            limit_req zone=api burst=200 delay=100;

            # Add rate limit headers
            add_header X-RateLimit-Limit "100" always;
            add_header X-RateLimit-Zone "api" always;

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # ====================================================================
        # Expensive Operations (very strict rate limit)
        # ====================================================================
        location ~ ^/api/(reports|exports|analytics) {
            # 1 request per second with burst of 5
            limit_req zone=expensive burst=5 nodelay;

            # Add rate limit headers
            add_header X-RateLimit-Limit "1" always;
            add_header X-RateLimit-Zone "expensive" always;

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # ====================================================================
        # Per-User Rate Limit (using API key)
        # ====================================================================
        location /api/user/ {
            # Check if API key present
            if ($http_x_api_key = "") {
                return 401 '{"error":"unauthorized","message":"API key required"}';
            }

            # 50 requests per second per API key with burst of 100
            limit_req zone=per_user burst=100 delay=50;

            # Add rate limit headers
            add_header X-RateLimit-Limit "50" always;
            add_header X-RateLimit-Zone "per_user" always;

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-API-Key $http_x_api_key;
        }

        # ====================================================================
        # Static Files (relaxed rate limit)
        # ====================================================================
        location /static/ {
            # Global rate limit only
            limit_req zone=global burst=50 nodelay;

            root /var/www;
            expires 1d;
            add_header Cache-Control "public, immutable";
        }
    }

    # ========================================================================
    # Advanced: Multiple Rate Limits
    # ========================================================================
    # Apply multiple rate limits to the same endpoint

    server {
        listen 8080;
        server_name advanced.example.com;

        location /api/posts {
            # Apply both global AND per-endpoint limits
            # Request must pass BOTH to succeed
            limit_req zone=global burst=20 nodelay;
            limit_req zone=per_endpoint burst=40 nodelay;

            proxy_pass http://backend;
        }
    }

    # ========================================================================
    # Advanced: Whitelisting IPs
    # ========================================================================

    geo $limit {
        default         1;
        # Internal IPs (no rate limit)
        10.0.0.0/8      0;
        192.168.0.0/16  0;
        # Trusted partner IPs
        203.0.113.0/24  0;
    }

    map $limit $limit_key {
        0     "";
        1     $binary_remote_addr;
    }

    limit_req_zone $limit_key zone=whitelist:10m rate=100r/s;

    server {
        listen 9090;
        server_name whitelist.example.com;

        location / {
            # Only rate limit non-whitelisted IPs
            limit_req zone=whitelist burst=200 nodelay;
            proxy_pass http://backend;
        }
    }

    # ========================================================================
    # Backend Configuration
    # ========================================================================

    upstream backend {
        server 127.0.0.1:3000;
        server 127.0.0.1:3001;
        server 127.0.0.1:3002;

        # Load balancing
        least_conn;

        # Health checks (Nginx Plus)
        # health_check interval=10s fails=3 passes=2;
    }
}

# ============================================================================
# Configuration Tips
# ============================================================================
#
# 1. Zone Size Calculation:
#    - 1MB zone = ~16,000 unique keys (IPs or API keys)
#    - 10MB zone = ~160,000 unique keys
#    - Adjust based on expected unique clients
#
# 2. Rate Syntax:
#    - 10r/s  = 10 requests per second
#    - 100r/m = 100 requests per minute
#    - 1000r/h = 1000 requests per hour
#
# 3. Burst Handling:
#    - burst=N: Allow up to N requests in queue
#    - nodelay: Reject immediately if burst exceeded
#    - delay=N: Allow up to N without delay, queue the rest
#
# 4. Testing:
#    - Test configuration: nginx -t
#    - Reload: nginx -s reload
#    - Check logs: tail -f /var/log/nginx/error.log
#
# 5. Monitoring:
#    - Use access logs to track rate limit hits
#    - Monitor 429 responses
#    - Set up alerts for excessive rate limiting
#
# ============================================================================
