openapi: 3.0.0

info:
  title: User Management API
  version: 1.0.0
  description: |
    Example REST API demonstrating best practices including:
    - Resource-based URLs
    - Proper HTTP methods and status codes
    - Pagination, filtering, sorting
    - Error handling
    - Authentication
    - Caching
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server
  - url: http://localhost:8000
    description: Local development

tags:
  - name: Users
    description: User management operations
  - name: Health
    description: Health check endpoints

paths:
  /health:
    get:
      summary: Health check
      description: Check API health status
      tags:
        - Health
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time

  /api/users:
    get:
      summary: List users
      description: Retrieve a paginated list of users with optional filtering and sorting
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [active, inactive]
        - name: role
          in: query
          description: Filter by role
          schema:
            type: string
            enum: [user, admin, editor]
        - name: sort
          in: query
          description: Sort field (prefix with - for descending)
          schema:
            type: string
            example: -created_at
      responses:
        '200':
          description: Successful response
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: Rate limit per minute
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: Remaining requests in current window
            X-RateLimit-Reset:
              schema:
                type: integer
              description: Time when rate limit resets (Unix timestamp)
            Cache-Control:
              schema:
                type: string
              description: Cache directives
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

    post:
      summary: Create user
      description: Create a new user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          headers:
            Location:
              schema:
                type: string
              description: URL of the created resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: integer

    get:
      summary: Get user
      description: Retrieve a single user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          headers:
            ETag:
              schema:
                type: string
              description: Entity tag for cache validation
            Cache-Control:
              schema:
                type: string
              description: Cache directives
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      summary: Update user
      description: Replace a user (full update)
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

    patch:
      summary: Partial update user
      description: Update specific fields of a user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPartialUpdate'
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/JsonPatchOperation'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      summary: Delete user
      description: Delete a user
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - role
        - created_at
        - updated_at
        - is_active
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        role:
          type: string
          enum: [user, admin, editor]
          example: user
        created_at:
          type: string
          format: date-time
          example: '2025-10-27T10:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-10-27T10:00:00Z'
        is_active:
          type: boolean
          example: true

    UserCreate:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        role:
          type: string
          enum: [user, admin, editor]
          default: user
        password:
          type: string
          format: password
          minLength: 8
          example: secretpassword

    UserUpdate:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: John Doe Updated
        email:
          type: string
          format: email
          example: john.updated@example.com
        role:
          type: string
          enum: [user, admin, editor]

    UserPartialUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: John Doe Updated
        email:
          type: string
          format: email
          example: john.updated@example.com
        role:
          type: string
          enum: [user, admin, editor]

    UserListResponse:
      type: object
      required:
        - data
        - pagination
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'
        links:
          $ref: '#/components/schemas/PaginationLinks'

    Pagination:
      type: object
      required:
        - limit
        - offset
        - total
        - has_more
      properties:
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0
        total:
          type: integer
          example: 100
        has_more:
          type: boolean
          example: true

    PaginationLinks:
      type: object
      properties:
        self:
          type: string
          format: uri
          example: /api/users?limit=20&offset=0
        first:
          type: string
          format: uri
          example: /api/users?limit=20&offset=0
        prev:
          type: string
          format: uri
          example: /api/users?limit=20&offset=0
        next:
          type: string
          format: uri
          example: /api/users?limit=20&offset=20
        last:
          type: string
          format: uri
          example: /api/users?limit=20&offset=80

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: validation_error
        message:
          type: string
          example: Request validation failed
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
        request_id:
          type: string
          example: req-123456

    JsonPatchOperation:
      type: object
      required:
        - op
        - path
      properties:
        op:
          type: string
          enum: [add, remove, replace, move, copy, test]
        path:
          type: string
          example: /email
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: object
            - type: array
        from:
          type: string
          description: Required for move and copy operations

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: bad_request
            message: Invalid request data

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: unauthorized
            message: Authentication required

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: forbidden
            message: You don't have permission to access this resource

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: not_found
            message: Resource not found

    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: conflict
            message: Resource already exists

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: validation_error
            message: Request validation failed
            details:
              - field: email
                message: Invalid email format
              - field: password
                message: Password must be at least 8 characters

    RateLimitExceeded:
      description: Rate limit exceeded
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds to wait before retrying
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: rate_limit_exceeded
            message: Rate limit exceeded. Try again later.
            retry_after: 60

security:
  - bearerAuth: []
