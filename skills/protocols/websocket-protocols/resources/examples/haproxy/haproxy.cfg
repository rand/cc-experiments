# Production HAProxy WebSocket Configuration
#
# Features:
# - WebSocket ACL and routing
# - Sticky sessions (source-based)
# - TLS/SSL termination
# - Health checks
# - Connection timeouts

global
    log /dev/log local0
    maxconn 50000
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11

defaults
    log global
    mode http
    option httplog
    option dontlognull
    timeout connect 5s
    timeout client 7d
    timeout server 7d
    timeout tunnel 3600s

# Frontend (client-facing)
frontend websocket_front
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/ws.example.com.pem

    # Redirect HTTP to HTTPS
    redirect scheme https if !{ ssl_fc }

    # ACL for WebSocket upgrade
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_path path_beg /ws

    # Use WebSocket backend
    use_backend websocket_back if is_websocket is_websocket_path

    # Default backend
    default_backend web_back

# Backend for WebSocket
backend websocket_back
    # Sticky session using source IP
    balance source
    hash-type consistent

    # Health check
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200

    # Server timeouts for long-lived connections
    timeout server 7d
    timeout tunnel 7d

    # Backend servers
    server ws1 backend1.example.com:8080 check inter 5s rise 2 fall 3
    server ws2 backend2.example.com:8080 check inter 5s rise 2 fall 3
    server ws3 backend3.example.com:8080 check inter 5s rise 2 fall 3

# Backend for regular HTTP
backend web_back
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200

    server web1 backend1.example.com:8081 check
    server web2 backend2.example.com:8081 check

# Stats interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE
