# Nginx HTTP/2 Configuration Examples
#
# Complete configuration examples for enabling and optimizing HTTP/2
# with server push, prioritization, and performance tuning.

# ============================================================================
# Basic HTTP/2 Configuration
# ============================================================================

server {
    listen 443 ssl http2;
    server_name example.com;

    # SSL certificates (required for HTTP/2)
    ssl_certificate /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;

    # SSL protocols (HTTP/2 requires TLS 1.2+)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Basic response
    location / {
        root /var/www/html;
        index index.html;
    }
}

# ============================================================================
# HTTP/2 with Server Push
# ============================================================================

server {
    listen 443 ssl http2;
    server_name example.com;

    ssl_certificate /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;

    # Push critical resources
    location = /index.html {
        # Push CSS and JavaScript before HTML
        http2_push /css/critical.css;
        http2_push /js/app.js;
        http2_push /images/logo.png;

        root /var/www/html;
    }

    # Cache pushed resources aggressively
    location ~* \.(css|js|png|jpg|jpeg|gif|ico)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        root /var/www/html;
    }
}

# ============================================================================
# Conditional Server Push (Cookie-based)
# ============================================================================

server {
    listen 443 ssl http2;
    server_name example.com;

    ssl_certificate /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;

    location = /index.html {
        # Only push if client doesn't have cached version
        if ($cookie_has_assets != "1") {
            http2_push /css/style.css;
            http2_push /js/app.js;
        }

        # Set cookie to indicate client has assets
        add_header Set-Cookie "has_assets=1; Max-Age=31536000; Path=/";
        root /var/www/html;
    }
}

# ============================================================================
# HTTP/2 Performance Tuning
# ============================================================================

http {
    # HTTP/2 push preload from Link headers
    http2_push_preload on;

    # Maximum concurrent streams per connection
    # Default: 128 (unlimited in HTTP/2 spec)
    http2_max_concurrent_streams 256;

    # Maximum size of request header field
    # Default: 16k
    http2_max_field_size 16k;

    # Maximum size of entire request header
    # Default: 64k
    http2_max_header_size 64k;

    # Body read timeout
    http2_recv_timeout 30s;

    # Server settings
    server {
        listen 443 ssl http2;
        server_name example.com;

        ssl_certificate /etc/nginx/ssl/example.com.crt;
        ssl_certificate_key /etc/nginx/ssl/example.com.key;

        # Increase buffer sizes for better performance
        http2_body_preread_size 128k;

        location / {
            root /var/www/html;
        }
    }
}

# ============================================================================
# HTTP/2 with Compression
# ============================================================================

server {
    listen 443 ssl http2;
    server_name example.com;

    ssl_certificate /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;

    # Gzip compression (in addition to HPACK header compression)
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript
               application/x-javascript application/xml+rss
               application/json application/javascript;

    location / {
        root /var/www/html;
    }
}

# ============================================================================
# API Server with HTTP/2
# ============================================================================

upstream api_backend {
    server 127.0.0.1:8000;
    server 127.0.0.1:8001;
    keepalive 32;  # Keep connections alive
}

server {
    listen 443 ssl http2;
    server_name api.example.com;

    ssl_certificate /etc/nginx/ssl/api.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/api.example.com.key;

    # HTTP/2 settings optimized for APIs
    http2_max_concurrent_streams 1000;

    location /api/ {
        proxy_pass http://api_backend;
        proxy_http_version 1.1;

        # Enable keepalive to backend
        proxy_set_header Connection "";

        # Forward client info
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}

# ============================================================================
# Multiple Domains on Same IP (Connection Coalescing)
# ============================================================================

# HTTP/2 allows connection reuse across domains with same IP and certificate

server {
    listen 443 ssl http2;
    server_name example.com www.example.com;

    # Certificate must cover both domains
    ssl_certificate /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;

    location / {
        root /var/www/example;
    }
}

server {
    listen 443 ssl http2;
    server_name api.example.com;

    # Same certificate and IP = connection coalescing
    ssl_certificate /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;

    location / {
        root /var/www/api;
    }
}

# ============================================================================
# HTTP to HTTPS Redirect with HTTP/2
# ============================================================================

server {
    listen 80;
    server_name example.com www.example.com;

    # Redirect all HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name example.com www.example.com;

    ssl_certificate /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;

    # HSTS header (force HTTPS for 1 year)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        root /var/www/html;
    }
}

# ============================================================================
# Testing Configuration
# ============================================================================

# Test HTTP/2 support:
# curl -I --http2 https://example.com

# Test server push:
# nghttp -v https://example.com
# (Look for PUSH_PROMISE frames)

# Test multiplexing:
# h2load -n 1000 -c 10 https://example.com
# (1000 requests, 10 concurrent connections)

# Verify ALPN negotiation:
# openssl s_client -connect example.com:443 -alpn h2
# (Should show: ALPN protocol: h2)
