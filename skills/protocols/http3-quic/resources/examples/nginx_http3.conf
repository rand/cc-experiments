# nginx HTTP/3 Configuration
# Production-ready nginx configuration with HTTP/3 (QUIC) support
#
# Requirements:
#   - nginx mainline with QUIC support (nginx/1.25.0+)
#   - OpenSSL 1.1.1+ or BoringSSL
#   - TLS 1.3 certificates
#
# Build nginx with QUIC:
#   ./configure --with-http_v3_module --with-http_quic_module --with-http_ssl_module
#   make && make install
#
# Test configuration:
#   nginx -t
#
# Reload:
#   nginx -s reload

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'quic=$quic h3=$http3 ssl=$ssl_protocol';

    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;

    # HTTP/3 server
    server {
        # HTTP/3 listener (QUIC over UDP)
        listen 443 quic reuseport;

        # HTTP/2 fallback (for clients without HTTP/3)
        listen 443 ssl http2;

        server_name example.com www.example.com;

        # TLS configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # TLS 1.3 only (required for QUIC)
        ssl_protocols TLSv1.3;

        # Recommended ciphersuites
        ssl_ciphers TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256;
        ssl_prefer_server_ciphers off;

        # SSL session cache
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets on;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/nginx/ssl/chain.pem;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # QUIC parameters
        quic_retry on;              # Enable retry packets (anti-amplification)
        quic_gso on;                # Generic Segmentation Offload (performance)

        # 0-RTT (early data) - use with caution
        # Only enable for idempotent requests (GET, HEAD)
        ssl_early_data on;

        # Advertise HTTP/3 via Alt-Svc header
        add_header Alt-Svc 'h3=":443"; ma=86400' always;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # QUIC connection ID
        add_header X-Protocol $server_protocol always;

        # Root directory
        root /var/www/html;
        index index.html index.htm;

        # Main location
        location / {
            try_files $uri $uri/ =404;

            # Cache static assets
            location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Alt-Svc 'h3=":443"; ma=86400' always;
            }
        }

        # API endpoint (disable 0-RTT for POST)
        location /api/ {
            # Disable early data for non-idempotent requests
            ssl_early_data off;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }

        # QUIC status endpoint
        location /quic-status {
            access_log off;
            return 200 "QUIC: $quic\nHTTP/3: $http3\nProtocol: $server_protocol\n";
            add_header Content-Type text/plain;
        }
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name example.com www.example.com;

        # Redirect to HTTPS
        return 301 https://$host$request_uri;
    }

    # Upstream backend
    upstream backend {
        server 127.0.0.1:8080;
        server 127.0.0.1:8081;

        keepalive 32;
    }
}

# System tuning notes:
# Increase UDP buffer sizes for better QUIC performance:
#   sysctl -w net.core.rmem_max=2500000
#   sysctl -w net.core.wmem_max=2500000
#
# Allow UDP port 443:
#   iptables -A INPUT -p udp --dport 443 -j ACCEPT
#   iptables-save > /etc/iptables/rules.v4
#
# Monitor QUIC connections:
#   ss -u -a | grep :443
#   netstat -anu | grep :443
