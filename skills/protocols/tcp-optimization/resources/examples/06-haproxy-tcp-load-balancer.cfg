# HAProxy TCP Load Balancer Configuration with Performance Tuning
# High-performance Layer 4 load balancing with TCP optimizations
#
# Usage:
#   sudo cp 06-haproxy-tcp-load-balancer.cfg /etc/haproxy/haproxy.cfg
#   sudo haproxy -c -f /etc/haproxy/haproxy.cfg  # Validate
#   sudo systemctl restart haproxy

global
    # Process/thread settings
    maxconn 100000
    nbproc 1
    nbthread 8
    cpu-map auto:1/1-8 0-7

    # Logging
    log /dev/log local0 info
    chroot /var/lib/haproxy
    user haproxy
    group haproxy
    daemon

    # Performance tuning
    tune.bufsize 32768
    tune.maxrewrite 8192
    tune.ssl.default-dh-param 2048

    # Stats socket
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s

defaults
    mode tcp
    log global
    option tcplog
    option dontlognull

    # Timeouts
    timeout connect 5s
    timeout client 50s
    timeout server 50s
    timeout queue 30s

    # Performance
    option tcp-smart-accept
    option tcp-smart-connect

    # Health check defaults
    default-server inter 10s fall 3 rise 2

# Statistics page
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE

# TCP frontend (Layer 4)
frontend tcp_front
    bind *:80 name tcp
    mode tcp
    option tcplog

    # Connection tracking
    tcp-request connection track-sc0 src
    tcp-request connection reject if { sc0_conn_rate gt 100 }

    # Logging
    log-format "%ci:%cp [%t] %ft %b/%s %Tw/%Tc/%Tt %B %ts %ac/%fc/%bc/%sc/%rc %sq/%bq"

    default_backend tcp_back

# TCP backend
backend tcp_back
    mode tcp
    balance leastconn

    # Server options
    option tcp-check
    tcp-check connect

    # Servers (adjust IPs)
    server srv1 192.168.1.10:80 check maxconn 10000
    server srv2 192.168.1.11:80 check maxconn 10000
    server srv3 192.168.1.12:80 check maxconn 10000 backup

# High-performance TCP with Proxy Protocol v2
frontend tcp_proxy_protocol
    bind *:443 name https
    mode tcp
    option tcplog

    # Send client IP to backend
    tcp-request connection send-proxy-v2

    default_backend tcp_proxy_back

backend tcp_proxy_back
    mode tcp
    balance roundrobin

    # Accept Proxy Protocol from frontend
    server srv1 192.168.1.10:443 check send-proxy-v2
    server srv2 192.168.1.11:443 check send-proxy-v2

# Notes:
# - Tune maxconn based on expected load
# - Use nbthread to match CPU cores
# - Enable Proxy Protocol v2 for client IP preservation
# - Use leastconn for even distribution
# - Monitor via stats page at http://<ip>:8404/stats
