name: Production Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  id-token: write

jobs:
  # Validate version consistency
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check version consistency
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          CARGO_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d '"' -f2)

          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "Version mismatch: tag=$TAG_VERSION, Cargo.toml=$CARGO_VERSION"
            exit 1
          fi

          echo "Version validated: $TAG_VERSION"

      - name: Check CHANGELOG
        run: |
          if ! grep -q "${{ github.ref_name }}" CHANGELOG.md; then
            echo "CHANGELOG.md missing entry for ${{ github.ref_name }}"
            exit 1
          fi

  # Build wheels for all platforms
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release --out dist
          manylinux: auto

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # Build source distribution
  build-sdist:
    name: Build source distribution
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # Test wheels
  test-wheels:
    name: Test wheels
    needs: build-wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ['3.8', '3.12']
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install wheel
        shell: bash
        run: |
          pip install production_release --no-index --find-links dist --force-reinstall
          python -c "import production_release; assert production_release.__version__ == '${GITHUB_REF#refs/tags/v}'"

  # Create GitHub Release
  github-release:
    name: Create GitHub Release
    needs: [test-wheels, build-sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Extract changelog
        id: changelog
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          CHANGELOG=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d')
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.changelog.outputs.changelog }}
          files: dist/*
          draft: false
          prerelease: false

  # Publish to PyPI
  pypi-publish:
    name: Publish to PyPI
    needs: [test-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/production-release
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --skip-existing dist/*

  # Create documentation
  docs:
    name: Build and Deploy Docs
    needs: github-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install maturin sphinx sphinx-rtd-theme

      - name: Build package
        run: maturin develop

      - name: Build docs
        run: |
          cd docs
          make html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
