version: '3.8'

services:
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:latest
    container_name: dspy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - dspy-network

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: dspy-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - dspy-network

  # Optional: AlertManager for alerting
  # alertmanager:
  #   image: prom/alertmanager:latest
  #   container_name: dspy-alertmanager
  #   ports:
  #     - "9093:9093"
  #   volumes:
  #     - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
  #     - alertmanager-data:/alertmanager
  #   command:
  #     - '--config.file=/etc/alertmanager/alertmanager.yml'
  #     - '--storage.path=/alertmanager'
  #   restart: unless-stopped
  #   networks:
  #     - dspy-network

  # Optional: Node Exporter for system metrics
  # node-exporter:
  #   image: prom/node-exporter:latest
  #   container_name: dspy-node-exporter
  #   ports:
  #     - "9100:9100"
  #   restart: unless-stopped
  #   networks:
  #     - dspy-network

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  # alertmanager-data:
  #   driver: local

networks:
  dspy-network:
    driver: bridge

# Usage:
#
# Start all services:
#   docker-compose up -d
#
# Stop all services:
#   docker-compose down
#
# View logs:
#   docker-compose logs -f prometheus
#   docker-compose logs -f grafana
#
# Restart a service:
#   docker-compose restart prometheus
#
# Remove volumes (careful - deletes all data):
#   docker-compose down -v
#
# Access services:
#   Prometheus: http://localhost:9090
#   Grafana:    http://localhost:3001 (admin/admin)
#   App:        http://localhost:3000/metrics
