version: '3.8'

services:
  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: production-rag-qdrant
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - rag-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: production-rag-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - rag-network

  # Production RAG service (uncomment when Docker image is built)
  # rag:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: production-rag-service
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - SERVER_HOST=0.0.0.0
  #     - SERVER_PORT=8080
  #     - QDRANT_URL=http://qdrant:6333
  #     - REDIS_URL=redis://redis:6379
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
  #     - LM_MODEL=gpt-3.5-turbo
  #     - RUST_LOG=info
  #   depends_on:
  #     qdrant:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   networks:
  #     - rag-network

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: production-rag-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - rag-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: production-rag-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - rag-network

volumes:
  qdrant_storage:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  rag-network:
    driver: bridge
