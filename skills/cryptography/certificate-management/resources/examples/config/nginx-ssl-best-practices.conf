# Nginx SSL/TLS Best Practices Configuration
#
# Comprehensive Nginx configuration with SSL/TLS best practices,
# certificate management, OCSP stapling, and security headers.
#
# Features:
# - Modern TLS configuration (TLS 1.2/1.3)
# - Strong cipher suites
# - OCSP stapling
# - HSTS and security headers
# - Certificate configuration for Let's Encrypt
# - Automatic HTTP to HTTPS redirect
# - Multiple domain examples

# ==============================================================================
# HTTPS server configuration
# ==============================================================================

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name example.com www.example.com;

    # Document root
    root /var/www/example.com;
    index index.html index.htm;

    # ==============================================================================
    # SSL/TLS Certificates
    # ==============================================================================

    # Let's Encrypt certificates (certbot)
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    # For manual certificate installation:
    # ssl_certificate /etc/ssl/certs/example.com.crt;
    # ssl_certificate_key /etc/ssl/private/example.com.key;

    # ==============================================================================
    # TLS Protocol Configuration
    # ==============================================================================

    # Enable TLS 1.2 and 1.3 only (disable older versions)
    ssl_protocols TLSv1.2 TLSv1.3;

    # Prefer server cipher suites over client's
    ssl_prefer_server_ciphers on;

    # ==============================================================================
    # Cipher Suites
    # ==============================================================================

    # Modern cipher suites (TLS 1.2)
    # - Forward secrecy (ECDHE)
    # - Authenticated encryption (GCM)
    # - Strong key exchange
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305';

    # TLS 1.3 cipher suites (explicitly set, though defaults are good)
    ssl_conf_command Ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256;

    # ==============================================================================
    # Session Resumption
    # ==============================================================================

    # Shared SSL session cache across workers (10MB = ~40,000 sessions)
    ssl_session_cache shared:SSL:10m;

    # Session timeout
    ssl_session_timeout 10m;

    # Disable session tickets (privacy concern, keys not rotated)
    ssl_session_tickets off;

    # ==============================================================================
    # OCSP Stapling (Online Certificate Status Protocol)
    # ==============================================================================

    # Enable OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # Certificate chain for OCSP stapling verification
    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;
    # OR for manual installation:
    # ssl_trusted_certificate /etc/ssl/certs/ca-chain.crt;

    # DNS resolver for OCSP (use your preferred DNS)
    resolver 1.1.1.1 1.0.0.1 valid=300s;
    resolver_timeout 5s;

    # ==============================================================================
    # Diffie-Hellman Parameters
    # ==============================================================================

    # Generate with: openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    # ==============================================================================
    # Security Headers
    # ==============================================================================

    # HTTP Strict Transport Security (HSTS)
    # Force HTTPS for 1 year, including all subdomains
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Prevent MIME sniffing
    add_header X-Content-Type-Options "nosniff" always;

    # XSS protection
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Content Security Policy (adjust for your needs)
    add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.example.com; style-src 'self' 'unsafe-inline' https://cdn.example.com; img-src 'self' data: https:; font-src 'self' data: https://cdn.example.com; frame-ancestors 'self'; base-uri 'self'; form-action 'self'" always;

    # Referrer policy
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Permissions policy (formerly Feature-Policy)
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # ==============================================================================
    # Application Configuration
    # ==============================================================================

    location / {
        try_files $uri $uri/ =404;
    }

    # PHP-FPM example
    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }

    # Reverse proxy example
    location /api/ {
        proxy_pass http://localhost:3000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # ACME challenge location (for Let's Encrypt)
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /var/www/letsencrypt;
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
    }

    # ==============================================================================
    # Logging
    # ==============================================================================

    access_log /var/log/nginx/example.com.access.log;
    error_log /var/log/nginx/example.com.error.log;
}

# ==============================================================================
# HTTP to HTTPS Redirect
# ==============================================================================

server {
    listen 80;
    listen [::]:80;
    server_name example.com www.example.com;

    # ACME challenge location (for Let's Encrypt HTTP-01 validation)
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /var/www/letsencrypt;
    }

    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# ==============================================================================
# Alternative: Wildcard Certificate Configuration
# ==============================================================================

# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name *.example.com example.com;
#
#     # Wildcard certificate
#     ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
#
#     # ... (same SSL configuration as above)
# }

# ==============================================================================
# Multiple Domains with Different Certificates
# ==============================================================================

# server {
#     listen 443 ssl http2;
#     server_name api.example.com;
#
#     ssl_certificate /etc/letsencrypt/live/api.example.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/api.example.com/privkey.pem;
#
#     # ... (same SSL configuration)
# }

# ==============================================================================
# mTLS Configuration (Mutual TLS with client certificates)
# ==============================================================================

# server {
#     listen 443 ssl http2;
#     server_name secure.example.com;
#
#     ssl_certificate /etc/ssl/certs/server.crt;
#     ssl_certificate_key /etc/ssl/private/server.key;
#
#     # Require client certificate
#     ssl_client_certificate /etc/ssl/certs/ca.crt;
#     ssl_verify_client on;
#     ssl_verify_depth 2;
#
#     # Optional client certificate (fallback to other auth)
#     # ssl_verify_client optional;
#
#     location / {
#         # Client certificate info available in variables
#         proxy_set_header X-Client-Cert-DN $ssl_client_s_dn;
#         proxy_set_header X-Client-Cert-Serial $ssl_client_serial;
#         proxy_set_header X-Client-Cert-Verify $ssl_client_verify;
#
#         # Require valid client cert
#         if ($ssl_client_verify != SUCCESS) {
#             return 403;
#         }
#
#         proxy_pass http://backend;
#     }
# }

# ==============================================================================
# SSL Labs A+ Rating Configuration Summary
# ==============================================================================
#
# To achieve SSL Labs A+ rating:
# 1. TLS 1.2 and 1.3 only (no TLS 1.0/1.1, no SSLv2/v3)
# 2. Strong cipher suites (ECDHE, AEAD)
# 3. Forward secrecy (ECDHE)
# 4. OCSP stapling enabled
# 5. HSTS with long max-age (31536000 = 1 year)
# 6. Strong key size (RSA 2048+, ECDSA 256+)
# 7. Certificate chain complete
# 8. No weak ciphers (RC4, 3DES, etc.)
#
# Test with: https://www.ssllabs.com/ssltest/analyze.html?d=example.com

# ==============================================================================
# Certificate Renewal Commands
# ==============================================================================
#
# Certbot renewal (automatic):
#   certbot renew --quiet --post-hook "systemctl reload nginx"
#
# Test renewal:
#   certbot renew --dry-run
#
# Force renewal:
#   certbot renew --cert-name example.com --force-renewal
#
# List certificates:
#   certbot certificates
#
# Manual renewal with reload:
#   certbot renew && nginx -t && systemctl reload nginx
