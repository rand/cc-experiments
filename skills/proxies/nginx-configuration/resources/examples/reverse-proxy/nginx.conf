# Reverse Proxy Configuration with Load Balancing
#
# This configuration demonstrates a production-ready reverse proxy setup
# with load balancing, health checks, and connection pooling.

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Custom log format with upstream timing
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;

    # Backend application servers
    upstream app_backend {
        # Use least connections load balancing
        least_conn;

        # Application servers with health check parameters
        server app1.internal:8080 weight=1 max_fails=3 fail_timeout=30s;
        server app2.internal:8080 weight=1 max_fails=3 fail_timeout=30s;
        server app3.internal:8080 weight=1 max_fails=3 fail_timeout=30s;

        # Backup server (only used when primary servers are down)
        server backup.internal:8080 backup;

        # Keep connections alive to backend
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # API backend with different load balancing
    upstream api_backend {
        # IP hash for session affinity
        ip_hash;

        server api1.internal:3000 max_fails=3 fail_timeout=30s;
        server api2.internal:3000 max_fails=3 fail_timeout=30s;

        keepalive 16;
    }

    # HTTP server (redirect to HTTPS)
    server {
        listen 80;
        listen [::]:80;
        server_name example.com www.example.com;

        # Let's Encrypt challenge location
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect everything else to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name example.com www.example.com;

        # SSL configuration
        ssl_certificate /etc/ssl/certs/example.com.crt;
        ssl_certificate_key /etc/ssl/private/example.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers off;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;

        # Logging
        access_log /var/log/nginx/example.com.access.log main;
        error_log /var/log/nginx/example.com.error.log;

        # Static files (served directly by Nginx)
        location /static/ {
            alias /var/www/example.com/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # API endpoints
        location /api/ {
            proxy_pass http://api_backend/;

            # Enable HTTP/1.1 keepalive to backend
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;

            # Error handling
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
        }

        # Main application
        location / {
            proxy_pass http://app_backend;

            # Enable HTTP/1.1 keepalive
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Error handling with fallback
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # WebSocket support
        location /ws/ {
            proxy_pass http://app_backend;

            # WebSocket headers
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;

            # Longer timeout for WebSocket
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }

        # Nginx status (internal only)
        location /nginx_status {
            stub_status;
            allow 127.0.0.1;
            deny all;
        }
    }
}

# WebSocket connection upgrade map
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}
