# Security-Hardened Nginx Configuration
#
# Production-grade security configuration with rate limiting, IP filtering,
# request validation, and comprehensive security headers.

user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'blocked=$block_user_agent,$block_referer';

    access_log /var/log/nginx/access.log security;

    # Performance
    sendfile on;
    tcp_nopush on;
    keepalive_timeout 30;

    # Security: Hide Nginx version
    server_tokens off;

    # Security: Limit request size
    client_max_body_size 10m;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

    # Security: Timeouts to prevent slowloris
    client_body_timeout 10s;
    client_header_timeout 10s;
    send_timeout 10s;
    keepalive_timeout 30s;

    # Rate limiting zones
    # General traffic: 10 requests per second per IP
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;

    # Login attempts: 5 requests per minute per IP
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

    # API traffic: 30 requests per second per IP
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;

    # Search/expensive operations: 10 requests per second
    limit_req_zone $binary_remote_addr zone=search:10m rate=10r/s;

    # Connection limiting: 10 connections per IP
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Connection limiting: 1000 total connections per server
    limit_conn_zone $server_name zone=perserver:10m;

    # Geo-based IP filtering (example)
    geo $allowed_country {
        default 1;
        # Block specific countries (example)
        # include /etc/nginx/blocked_countries.conf;
    }

    # Block malicious user agents
    map $http_user_agent $block_user_agent {
        default 0;
        ~*bot 0;  # Allow legitimate bots (adjust as needed)
        ~*crawler 0;
        ~*spider 0;
        ~*scan 1;
        ~*hack 1;
        ~*malicious 1;
        ~*sqlmap 1;
        ~*nikto 1;
        ~*masscan 1;
        ~*nmap 1;
        "" 1;  # Block empty user agent
    }

    # Block malicious referers
    map $http_referer $block_referer {
        default 0;
        ~*spam\.com 1;
        ~*malicious\.com 1;
        ~*phishing\.com 1;
    }

    # Detect common attack patterns in URI
    map $request_uri $attack_pattern {
        default 0;
        ~*\.\./\.\. 1;  # Directory traversal
        ~*union.*select 1;  # SQL injection
        ~*base64_encode 1;  # Code injection
        ~*eval\( 1;  # Code injection
        ~*script\> 1;  # XSS
    }

    # Backend
    upstream backend {
        server app1.internal:8080;
        server app2.internal:8080;
        keepalive 16;
    }

    # HTTP server (redirect to HTTPS)
    server {
        listen 80;
        listen [::]:80;
        server_name secure.example.com;

        # ACME challenge only
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server with security hardening
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name secure.example.com;

        # SSL configuration
        ssl_certificate /etc/ssl/certs/secure.example.com.crt;
        ssl_certificate_key /etc/ssl/private/secure.example.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:;" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

        # Remove headers that leak information
        proxy_hide_header X-Powered-By;
        proxy_hide_header X-AspNet-Version;

        # Connection limits
        limit_conn addr 10;
        limit_conn perserver 1000;

        # Block requests without Host header
        if ($host = "") {
            return 444;
        }

        # Block malicious user agents
        if ($block_user_agent) {
            return 403;
        }

        # Block malicious referers
        if ($block_referer) {
            return 403;
        }

        # Block attack patterns
        if ($attack_pattern) {
            return 403;
        }

        # Logging
        access_log /var/log/nginx/secure.example.com.access.log security;
        error_log /var/log/nginx/secure.example.com.error.log;

        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Deny access to backup files
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Login endpoint with strict rate limiting
        location /login {
            limit_req zone=login burst=2 nodelay;
            limit_req_status 429;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Admin area with IP whitelist
        location /admin/ {
            # Allow only specific IPs
            allow 192.168.1.0/24;
            allow 10.0.0.0/8;
            deny all;

            # Additional rate limiting
            limit_req zone=general burst=5 nodelay;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # API endpoints with rate limiting
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            limit_req_status 429;

            # Validate Content-Type for POST/PUT
            if ($request_method ~ ^(POST|PUT)$) {
                set $content_type_valid 0;
                if ($http_content_type ~ "application/json") {
                    set $content_type_valid 1;
                }
                if ($http_content_type ~ "application/x-www-form-urlencoded") {
                    set $content_type_valid 1;
                }
                if ($content_type_valid = 0) {
                    return 415;
                }
            }

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Expensive search operation with rate limiting
        location /search {
            limit_req zone=search burst=5 delay=3;
            limit_req_status 429;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
        }

        # Static files (no rate limiting needed)
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # Main application with general rate limiting
        location / {
            limit_req zone=general burst=20 nodelay;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check (no rate limiting, no logging)
        location = /health {
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }

        # Custom error pages
        error_page 403 /403.html;
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /403.html {
            root /usr/share/nginx/html;
            internal;
        }

        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }

        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
}
