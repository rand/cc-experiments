# High-Performance Nginx Configuration
#
# Optimized for maximum throughput and low latency with tuned buffers,
# connection pooling, and efficient resource usage.

user nginx;

# Use all available CPU cores
worker_processes auto;

# Increase file descriptor limit
worker_rlimit_nofile 65535;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Worker priority (lower = higher priority, range: -20 to 19)
worker_priority -5;

# CPU affinity (bind workers to specific cores)
worker_cpu_affinity auto;

events {
    # Maximum connections per worker
    worker_connections 8192;

    # Use efficient event model (Linux)
    use epoll;

    # Accept multiple connections at once
    multi_accept on;

    # Accept queue (SYN backlog)
    accept_mutex off;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Optimized log format
    log_format perf '$remote_addr [$time_local] "$request" $status '
                    'rt=$request_time uct=$upstream_connect_time '
                    'uht=$upstream_header_time urt=$upstream_response_time';

    # Buffered logging for performance
    access_log /var/log/nginx/access.log perf buffer=64k flush=1m;

    # Maximum file transfers using sendfile
    sendfile on;

    # Send headers and file in one packet (requires sendfile)
    tcp_nopush on;

    # Don't buffer data, send immediately (for keep-alive)
    tcp_nodelay on;

    # Keepalive connections
    keepalive_timeout 65;
    keepalive_requests 1000;

    # Reset timed out connections immediately
    reset_timedout_connection on;

    # Hide Nginx version
    server_tokens off;

    # Hash table sizes
    types_hash_max_size 2048;
    server_names_hash_bucket_size 128;
    server_names_hash_max_size 1024;

    # Client request settings
    client_max_body_size 20m;
    client_body_buffer_size 128k;
    client_header_buffer_size 4k;
    large_client_header_buffers 8 16k;

    # Client timeouts
    client_body_timeout 12s;
    client_header_timeout 12s;
    send_timeout 10s;

    # Output buffering
    output_buffers 2 32k;
    postpone_output 1460;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 5;  # Balance between CPU and compression
    gzip_min_length 256;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml
        application/xml+rss
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    # Disable gzip for IE6
    gzip_disable "msie6";

    # File cache (cache metadata, not content)
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Proxy cache configuration
    proxy_cache_path /var/cache/nginx/cache
        levels=1:2
        keys_zone=cache:200m
        max_size=20g
        inactive=60m
        use_temp_path=off;

    # Backend pool with keepalive
    upstream backend {
        # Use least connections for better distribution
        least_conn;

        # Backend servers
        server backend1.internal:8080 weight=1 max_fails=3 fail_timeout=30s;
        server backend2.internal:8080 weight=1 max_fails=3 fail_timeout=30s;
        server backend3.internal:8080 weight=1 max_fails=3 fail_timeout=30s;
        server backend4.internal:8080 weight=1 max_fails=3 fail_timeout=30s;

        # Keep persistent connections to backends
        keepalive 128;
        keepalive_requests 10000;
        keepalive_timeout 60s;
    }

    server {
        listen 80 reuseport;  # SO_REUSEPORT for better multi-core performance
        listen [::]:80 reuseport;

        # Increase listen backlog
        listen 80 backlog=4096;

        server_name highperf.example.com;

        # Logging (disable for maximum performance if not needed)
        # access_log off;
        access_log /var/log/nginx/highperf.access.log perf buffer=64k flush=1m;
        error_log /var/log/nginx/highperf.error.log;

        # Static files (highly optimized)
        location /static/ {
            alias /var/www/static/;

            # Long browser cache
            expires 1y;
            add_header Cache-Control "public, immutable";

            # Disable access logging
            access_log off;

            # Enable gzip static (pre-compressed files)
            gzip_static on;

            # Open file cache is already enabled globally
        }

        # Cached API responses
        location /api/ {
            # Proxy caching
            proxy_cache cache;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_valid 200 10m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;
            proxy_cache_revalidate on;

            add_header X-Cache-Status $upstream_cache_status;

            # Proxy to backend
            proxy_pass http://backend/;

            # HTTP/1.1 with keepalive
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Minimal required headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;

            # Optimized timeouts
            proxy_connect_timeout 3s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;

            # Proxy buffering (enabled for performance)
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 32 8k;
            proxy_busy_buffers_size 64k;

            # Error handling
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 5s;
        }

        # Main application
        location / {
            proxy_pass http://backend;

            # HTTP/1.1 with keepalive
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Standard headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Optimized timeouts
            proxy_connect_timeout 3s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;

            # Proxy buffering
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 32 8k;

            # Error handling
            proxy_next_upstream error timeout http_502 http_503;
        }

        # Health check (minimal overhead)
        location = /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
    }

    # HTTPS server with performance optimizations
    server {
        listen 443 ssl http2 reuseport backlog=4096;
        listen [::]:443 ssl http2 reuseport;
        server_name highperf.example.com;

        # SSL certificates
        ssl_certificate /etc/ssl/certs/highperf.example.com.crt;
        ssl_certificate_key /etc/ssl/private/highperf.example.com.key;

        # SSL protocols
        ssl_protocols TLSv1.2 TLSv1.3;

        # SSL ciphers (optimized for performance)
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305';
        ssl_prefer_server_ciphers off;

        # SSL session cache (large for high traffic)
        ssl_session_cache shared:SSL:50m;
        ssl_session_timeout 1h;
        ssl_session_tickets off;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # HTTP/2 specific settings
        http2_max_field_size 16k;
        http2_max_header_size 32k;
        http2_max_requests 10000;

        # Same location blocks as HTTP server
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
            gzip_static on;
        }

        location /api/ {
            proxy_cache cache;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_valid 200 10m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

            proxy_pass http://backend/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;

            proxy_buffering on;
            proxy_buffers 32 8k;
        }

        location / {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;

            proxy_buffering on;
            proxy_buffers 32 8k;
        }
    }
}
