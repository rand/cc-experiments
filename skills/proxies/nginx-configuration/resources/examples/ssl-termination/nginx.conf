# SSL/TLS Termination with Best Security Practices
#
# This configuration demonstrates production-grade SSL/TLS termination
# with modern security settings, OCSP stapling, and security headers.

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent"';

    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;

    # Security
    server_tokens off;

    # SSL session cache (shared across workers)
    # 1MB cache = ~4000 sessions
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Disable session tickets for better forward secrecy
    ssl_session_tickets off;

    # Upstream backend
    upstream backend {
        server app1.internal:8080;
        server app2.internal:8080;
        keepalive 16;
    }

    # HTTP server (redirect to HTTPS)
    server {
        listen 80;
        listen [::]:80;
        server_name secure.example.com;

        # ACME challenge for Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server with modern SSL configuration
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name secure.example.com;

        # SSL certificate and key
        ssl_certificate /etc/ssl/certs/secure.example.com.crt;
        ssl_certificate_key /etc/ssl/private/secure.example.com.key;

        # SSL protocols (TLS 1.2 and 1.3 only)
        ssl_protocols TLSv1.2 TLSv1.3;

        # SSL ciphers (Mozilla Modern configuration)
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers off;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        # Trusted certificate for OCSP stapling
        ssl_trusted_certificate /etc/ssl/certs/ca-chain.crt;

        # DNS resolver for OCSP
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # Diffie-Hellman parameter for DHE ciphersuites
        ssl_dhparam /etc/ssl/certs/dhparam.pem;

        # Security headers
        # HSTS (HTTP Strict Transport Security)
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # Prevent clickjacking
        add_header X-Frame-Options "SAMEORIGIN" always;

        # Prevent MIME type sniffing
        add_header X-Content-Type-Options "nosniff" always;

        # XSS protection (legacy, but still recommended)
        add_header X-XSS-Protection "1; mode=block" always;

        # Content Security Policy (adjust for your needs)
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self';" always;

        # Referrer Policy
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Permissions Policy (formerly Feature Policy)
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

        # Logging
        access_log /var/log/nginx/secure.example.com.access.log main;
        error_log /var/log/nginx/secure.example.com.error.log;

        # Proxy to backend
        location / {
            proxy_pass http://backend;

            # HTTP/1.1 with keepalive
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;

            # SSL client certificate info (if using client certs)
            # proxy_set_header SSL-Client-Cert $ssl_client_cert;
            # proxy_set_header SSL-Client-Verify $ssl_client_verify;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
    }

    # Alternative: TLS 1.3 only (most secure, less compatible)
    # server {
    #     listen 443 ssl http2;
    #     server_name tls13.example.com;
    #
    #     ssl_certificate /etc/ssl/certs/tls13.example.com.crt;
    #     ssl_certificate_key /etc/ssl/private/tls13.example.com.key;
    #
    #     ssl_protocols TLSv1.3;
    #     ssl_prefer_server_ciphers off;
    #
    #     # ... rest of configuration
    # }
}
