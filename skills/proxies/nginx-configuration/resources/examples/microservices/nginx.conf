# Microservices API Gateway Configuration
#
# Routes requests to different microservices based on path,
# with service discovery, circuit breaking, and observability.

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/json;

    # Detailed logging for microservices
    log_format microservices '$remote_addr - $remote_user [$time_local] "$request" '
                             '$status $body_bytes_sent '
                             'service=$upstream_addr '
                             'rt=$request_time '
                             'uct=$upstream_connect_time '
                             'uht=$upstream_header_time '
                             'urt=$upstream_response_time '
                             'trace_id=$http_x_trace_id';

    access_log /var/log/nginx/access.log microservices;

    sendfile on;
    tcp_nodelay on;
    keepalive_timeout 65;

    # Service upstreams
    # Auth service
    upstream auth_service {
        least_conn;
        server auth-1.internal:8080 max_fails=3 fail_timeout=30s;
        server auth-2.internal:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # User service
    upstream user_service {
        least_conn;
        server user-1.internal:8081 max_fails=3 fail_timeout=30s;
        server user-2.internal:8081 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Product service
    upstream product_service {
        least_conn;
        server product-1.internal:8082 max_fails=3 fail_timeout=30s;
        server product-2.internal:8082 max_fails=3 fail_timeout=30s;
        server product-3.internal:8082 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Order service
    upstream order_service {
        least_conn;
        server order-1.internal:8083 max_fails=3 fail_timeout=30s;
        server order-2.internal:8083 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Payment service (critical, backup server)
    upstream payment_service {
        least_conn;
        server payment-1.internal:8084 max_fails=2 fail_timeout=20s;
        server payment-2.internal:8084 max_fails=2 fail_timeout=20s;
        server payment-backup.internal:8084 backup;
        keepalive 16;
    }

    # Notification service
    upstream notification_service {
        server notification-1.internal:8085;
        server notification-2.internal:8085;
        keepalive 16;
    }

    # Rate limiting zones per service
    limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=payment:10m rate=5r/s;

    # API Gateway
    server {
        listen 443 ssl http2;
        server_name api.example.com;

        # SSL configuration
        ssl_certificate /etc/ssl/certs/api.example.com.crt;
        ssl_certificate_key /etc/ssl/private/api.example.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000" always;
        add_header X-Content-Type-Options "nosniff" always;

        # Generate trace ID if not present (for distributed tracing)
        set $trace_id $http_x_trace_id;
        if ($trace_id = "") {
            set $trace_id $request_id;
        }

        # Common proxy settings snippet
        location @proxy_settings {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Distributed tracing headers
            proxy_set_header X-Trace-ID $trace_id;
            proxy_set_header X-Request-ID $request_id;

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;

            # Error handling
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
        }

        # Authentication endpoints
        location /auth/ {
            limit_req zone=auth burst=20 nodelay;

            proxy_pass http://auth_service/;
            include proxy_settings;

            # Shorter timeout for auth
            proxy_read_timeout 10s;

            add_header X-Service "auth" always;
        }

        # User service endpoints
        location /users/ {
            limit_req zone=api burst=100 nodelay;

            # Require authentication (check for JWT token)
            # This would typically be done by auth_request module
            # auth_request /auth/verify;

            proxy_pass http://user_service/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Trace-ID $trace_id;

            add_header X-Service "user" always;
        }

        # Product catalog endpoints (cacheable)
        location /products/ {
            limit_req zone=api burst=100 nodelay;

            proxy_pass http://product_service/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Trace-ID $trace_id;

            # Cache product catalog
            proxy_cache_path /var/cache/nginx/products levels=1:2 keys_zone=products:10m;
            proxy_cache products;
            proxy_cache_valid 200 10m;
            proxy_cache_key "$request_uri";

            add_header X-Service "product" always;
            add_header X-Cache-Status $upstream_cache_status always;
        }

        # Order service endpoints
        location /orders/ {
            limit_req zone=api burst=50 nodelay;

            # Require authentication
            # auth_request /auth/verify;

            proxy_pass http://order_service/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Trace-ID $trace_id;

            # Longer timeout for order processing
            proxy_read_timeout 60s;

            add_header X-Service "order" always;
        }

        # Payment service endpoints (critical, strict limits)
        location /payments/ {
            limit_req zone=payment burst=10 nodelay;

            # Require authentication
            # auth_request /auth/verify;

            proxy_pass http://payment_service/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Trace-ID $trace_id;

            # Longer timeout for payment processing
            proxy_read_timeout 90s;

            # Don't retry payments (idempotency concerns)
            proxy_next_upstream off;

            add_header X-Service "payment" always;
        }

        # Notification service endpoints (async, fire-and-forget)
        location /notifications/ {
            limit_req zone=api burst=50 nodelay;

            proxy_pass http://notification_service/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Trace-ID $trace_id;

            # Short timeout for notifications
            proxy_connect_timeout 3s;
            proxy_read_timeout 10s;

            # Ignore errors (notifications are non-critical)
            proxy_intercept_errors on;
            error_page 500 502 503 504 = @notification_fallback;

            add_header X-Service "notification" always;
        }

        # Fallback for notification failures
        location @notification_fallback {
            return 202 '{"status":"accepted","message":"notification queued"}';
            add_header Content-Type application/json;
        }

        # Health check aggregator
        location = /health {
            access_log off;

            content_by_lua_block {
                -- This would require OpenResty/Lua
                -- Aggregate health from all services
                ngx.say('{"status":"healthy","services":["auth","user","product","order","payment","notification"]}')
            }

            # Simple version without Lua
            return 200 '{"status":"healthy"}';
            add_header Content-Type application/json;
        }

        # Service discovery endpoint (internal)
        location = /services {
            allow 10.0.0.0/8;
            deny all;

            return 200 '{"services":["auth","user","product","order","payment","notification"]}';
            add_header Content-Type application/json;
        }

        # Metrics endpoint for monitoring
        location = /metrics {
            allow 10.0.0.0/8;
            deny all;

            # Would integrate with Prometheus or similar
            stub_status;
        }

        # API documentation
        location = /docs {
            alias /usr/share/nginx/html/api-docs.html;
        }

        # Default: return API info
        location = / {
            return 200 '{"name":"Microservices API Gateway","version":"1.0","endpoints":["/auth","/users","/products","/orders","/payments","/notifications"]}';
            add_header Content-Type application/json;
        }
    }
}
