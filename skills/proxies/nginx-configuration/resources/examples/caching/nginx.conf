# Advanced Caching Configuration
#
# Demonstrates production-ready caching strategies including proxy cache,
# cache bypass, stale cache serving, and cache purging.

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" cache=$upstream_cache_status';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    keepalive_timeout 65;

    # Define cache zones
    # API cache: 100MB keys zone, 1GB max size
    proxy_cache_path /var/cache/nginx/api
        levels=1:2
        keys_zone=api_cache:100m
        max_size=1g
        inactive=60m
        use_temp_path=off;

    # Static content cache: 100MB keys zone, 10GB max size
    proxy_cache_path /var/cache/nginx/static
        levels=1:2
        keys_zone=static_cache:100m
        max_size=10g
        inactive=7d
        use_temp_path=off;

    # Dynamic content cache: 50MB keys zone, 500MB max size
    proxy_cache_path /var/cache/nginx/dynamic
        levels=1:2
        keys_zone=dynamic_cache:50m
        max_size=500m
        inactive=30m
        use_temp_path=off;

    # Map to determine if request should bypass cache
    map $http_cookie $no_cache {
        default 0;
        ~*session_id 1;  # Don't cache for logged-in users
        ~*admin 1;       # Don't cache for admin
    }

    # Map cache control header
    map $http_cache_control $bypass_cache {
        default 0;
        ~*no-cache 1;
        ~*no-store 1;
    }

    # Backend servers
    upstream api_backend {
        server api1.internal:8080;
        server api2.internal:8080;
        keepalive 32;
    }

    upstream app_backend {
        server app1.internal:3000;
        server app2.internal:3000;
        keepalive 16;
    }

    server {
        listen 80;
        server_name cache.example.com;

        # API endpoints with caching
        location /api/v1/public/ {
            proxy_pass http://api_backend/;

            # Enable caching
            proxy_cache api_cache;

            # Cache key (include query string for parameter-based APIs)
            proxy_cache_key "$scheme$request_method$host$request_uri";

            # Cache validity periods by status code
            proxy_cache_valid 200 10m;
            proxy_cache_valid 301 302 1h;
            proxy_cache_valid 404 1m;
            proxy_cache_valid any 1m;

            # Use stale cache on backend errors
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

            # Update stale cache in background
            proxy_cache_background_update on;

            # Lock multiple identical requests (prevent cache stampede)
            proxy_cache_lock on;
            proxy_cache_lock_timeout 5s;
            proxy_cache_lock_age 10s;

            # Minimum uses before caching (prevent caching rarely-used content)
            proxy_cache_min_uses 2;

            # Only cache GET and HEAD requests
            proxy_cache_methods GET HEAD;

            # Bypass cache for certain conditions
            proxy_cache_bypass $bypass_cache $arg_nocache;
            proxy_no_cache $bypass_cache;

            # Revalidate cache with backend using conditional requests
            proxy_cache_revalidate on;

            # Add cache status to response header
            add_header X-Cache-Status $upstream_cache_status always;
            add_header X-Cache-Key "$scheme$request_method$host$request_uri" always;

            # Standard proxy settings
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # API endpoints without caching (authenticated)
        location /api/v1/private/ {
            proxy_pass http://api_backend/;

            # Disable caching for private endpoints
            proxy_cache off;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            add_header X-Cache-Status "BYPASS" always;
        }

        # Cached proxied static content
        location /assets/ {
            proxy_pass http://app_backend/assets/;

            proxy_cache static_cache;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_valid 200 7d;
            proxy_cache_valid 404 1h;

            # Serve stale cache if backend is down
            proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;

            # Ignore backend cache headers
            proxy_ignore_headers Cache-Control Expires;

            add_header X-Cache-Status $upstream_cache_status always;

            # Long client-side cache
            expires 7d;
            add_header Cache-Control "public, immutable";
        }

        # Dynamic content with selective caching
        location / {
            proxy_pass http://app_backend;

            proxy_cache dynamic_cache;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_valid 200 5m;

            # Don't cache for logged-in users
            proxy_cache_bypass $no_cache;
            proxy_no_cache $no_cache;

            # Serve stale cache while updating
            proxy_cache_use_stale updating;
            proxy_cache_background_update on;

            add_header X-Cache-Status $upstream_cache_status always;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Cache purge endpoint (restricted to localhost)
        location ~ /purge(/.*) {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;

            # Requires nginx-cache-purge module
            # proxy_cache_purge api_cache "$scheme$request_method$host$1";

            # Alternative: return instructions for manual purge
            return 200 "To purge cache, run:\nrm -rf /var/cache/nginx/api/*\n";
            add_header Content-Type text/plain;
        }

        # Cache status endpoint
        location = /cache-status {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;

            return 200 "Cache directories:\n- API: /var/cache/nginx/api\n- Static: /var/cache/nginx/static\n- Dynamic: /var/cache/nginx/dynamic\n";
            add_header Content-Type text/plain;
        }
    }
}

# Cache status values:
# - MISS: Request not in cache, fetched from backend
# - HIT: Response served from cache
# - EXPIRED: Cache entry expired, fetched from backend
# - STALE: Serving stale cache (backend error or updating)
# - UPDATING: Cache being updated in background
# - REVALIDATED: Cache revalidated with backend (304 Not Modified)
# - BYPASS: Cache bypassed due to proxy_cache_bypass
