# GitHub Actions workflow for SBOM (Software Bill of Materials) generation
# Place in: .github/workflows/sbom.yml

name: Generate SBOM

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  generate-sbom:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install SBOM tools
        run: |
          # Install CycloneDX
          npm install -g @cyclonedx/cyclonedx-npm

          # Install Syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate CycloneDX SBOM (npm)
        run: |
          cyclonedx-npm \
            --output-format json \
            --output-file sbom-cyclonedx.json

      - name: Generate SPDX SBOM (Syft)
        run: |
          syft packages dir:. \
            -o spdx-json \
            --file sbom-spdx.json

      - name: Generate SBOM with Syft (multiple formats)
        run: |
          # CycloneDX format
          syft packages dir:. \
            -o cyclonedx-json \
            --file sbom-syft-cyclonedx.json

          # SPDX format
          syft packages dir:. \
            -o spdx-json \
            --file sbom-syft-spdx.json

          # Table format for human reading
          syft packages dir:. \
            -o table \
            --file sbom-table.txt

      - name: Validate SBOM
        run: |
          # Check if SBOM files are valid JSON
          echo "Validating CycloneDX SBOM..."
          jq empty sbom-cyclonedx.json

          echo "Validating SPDX SBOM..."
          jq empty sbom-spdx.json

          echo "✅ All SBOM files are valid"

      - name: Analyze SBOM
        id: analyze-sbom
        run: |
          # Extract statistics from SBOM
          TOTAL_COMPONENTS=$(jq '.components | length' sbom-cyclonedx.json)
          DIRECT_DEPS=$(jq '[.components[] | select(.scope == "required")] | length' sbom-cyclonedx.json)

          echo "total_components=$TOTAL_COMPONENTS" >> $GITHUB_OUTPUT
          echo "direct_dependencies=$DIRECT_DEPS" >> $GITHUB_OUTPUT

          # Extract license information
          LICENSES=$(jq -r '[.components[].licenses[]?.license.id // "UNKNOWN"] | unique | sort | join(", ")' sbom-cyclonedx.json)
          echo "licenses=$LICENSES" >> $GITHUB_OUTPUT

      - name: Generate SBOM report
        run: |
          cat << EOF > sbom-report.md
          # Software Bill of Materials (SBOM)

          **Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository**: ${{ github.repository }}
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}

          ## Statistics

          - **Total Components**: ${{ steps.analyze-sbom.outputs.total_components }}
          - **Direct Dependencies**: ${{ steps.analyze-sbom.outputs.direct_dependencies }}
          - **Licenses**: ${{ steps.analyze-sbom.outputs.licenses }}

          ## SBOM Formats

          This project provides SBOMs in multiple formats:

          ### CycloneDX
          - Standard format for describing software components
          - Widely supported by security tools
          - File: \`sbom-cyclonedx.json\`

          ### SPDX (Software Package Data Exchange)
          - ISO/IEC 5962:2021 standard
          - Industry-standard format
          - File: \`sbom-spdx.json\`

          ## Usage

          ### Verify with Grype
          \`\`\`bash
          grype sbom:sbom-cyclonedx.json
          \`\`\`

          ### Scan with Trivy
          \`\`\`bash
          trivy sbom sbom-cyclonedx.json
          \`\`\`

          ### View human-readable format
          \`\`\`bash
          cat sbom-table.txt
          \`\`\`

          ## Component List

          \`\`\`
          $(cat sbom-table.txt)
          \`\`\`
          EOF

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: |
            sbom-*.json
            sbom-*.txt
            sbom-report.md
          retention-days: 90

      - name: Attach SBOM to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            sbom-cyclonedx.json
            sbom-spdx.json
            sbom-report.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign SBOM with Cosign (optional)
        if: github.event_name == 'release'
        run: |
          # Install cosign
          curl -L https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o /usr/local/bin/cosign
          chmod +x /usr/local/bin/cosign

          # Sign SBOM
          cosign sign-blob \
            --key env://COSIGN_KEY \
            --output-signature sbom-cyclonedx.json.sig \
            sbom-cyclonedx.json
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

  scan-sbom:
    name: Scan SBOM for Vulnerabilities
    runs-on: ubuntu-latest
    needs: generate-sbom

    steps:
      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom-${{ github.sha }}

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan SBOM with Grype
        run: |
          grype sbom:sbom-cyclonedx.json \
            --output json \
            --file grype-results.json || true

          grype sbom:sbom-cyclonedx.json \
            --output table

      - name: Parse Grype results
        id: parse-grype
        run: |
          if [ -f grype-results.json ]; then
            CRITICAL=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' grype-results.json)
            HIGH=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' grype-results.json)
            MEDIUM=$(jq '[.matches[] | select(.vulnerability.severity == "Medium")] | length' grype-results.json)

            echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high=$HIGH" >> $GITHUB_OUTPUT
            echo "medium=$MEDIUM" >> $GITHUB_OUTPUT
          fi

      - name: Upload Grype results
        uses: actions/upload-artifact@v4
        with:
          name: grype-results-${{ github.sha }}
          path: grype-results.json
          retention-days: 30

      - name: Fail on critical vulnerabilities
        if: steps.parse-grype.outputs.critical > 0
        run: |
          echo "❌ Found ${{ steps.parse-grype.outputs.critical }} critical vulnerabilities in SBOM"
          exit 1
