#!/bin/bash
#
# Automated dependency vulnerability scanning
# Supports Python, Node.js, and Docker containers
#
# Usage: ./scan_dependencies.sh --project-dir /path/to/project --output report.json

set -e

# Default values
PROJECT_DIR="."
OUTPUT_FILE="dependency-scan-results.json"
SCAN_PYTHON=true
SCAN_NODEJS=true
SCAN_DOCKER=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --project-dir)
            PROJECT_DIR="$2"
            shift 2
            ;;
        --output)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        --docker-image)
            DOCKER_IMAGE="$2"
            SCAN_DOCKER=true
            shift 2
            ;;
        --python-only)
            SCAN_NODEJS=false
            shift
            ;;
        --nodejs-only)
            SCAN_PYTHON=false
            shift
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

echo "=== Dependency Vulnerability Scanner ==="
echo "Project directory: $PROJECT_DIR"
echo "Output file: $OUTPUT_FILE"
echo

# Initialize results array
echo "{" > "$OUTPUT_FILE"
echo '  "scan_date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",' >> "$OUTPUT_FILE"
echo '  "project_dir": "'$PROJECT_DIR'",' >> "$OUTPUT_FILE"
echo '  "results": {' >> "$OUTPUT_FILE"

FIRST_RESULT=true

# Scan Python dependencies
if [[ "$SCAN_PYTHON" == "true" ]] && [[ -f "$PROJECT_DIR/requirements.txt" || -f "$PROJECT_DIR/pyproject.toml" ]]; then
    echo "Scanning Python dependencies..."

    # Safety check
    if command -v safety &> /dev/null; then
        echo "  Running Safety..."
        safety check --json --file "$PROJECT_DIR/requirements.txt" > safety-report.json 2>&1 || true

        if [[ "$FIRST_RESULT" == "false" ]]; then
            echo ',' >> "$OUTPUT_FILE"
        fi
        echo '    "safety": ' >> "$OUTPUT_FILE"
        cat safety-report.json >> "$OUTPUT_FILE"
        FIRST_RESULT=false
    fi

    # pip-audit check
    if command -v pip-audit &> /dev/null; then
        echo "  Running pip-audit..."
        pip-audit --requirement "$PROJECT_DIR/requirements.txt" --format json > pip-audit-report.json 2>&1 || true

        if [[ "$FIRST_RESULT" == "false" ]]; then
            echo ',' >> "$OUTPUT_FILE"
        fi
        echo '    "pip_audit": ' >> "$OUTPUT_FILE"
        cat pip-audit-report.json >> "$OUTPUT_FILE"
        FIRST_RESULT=false
    fi
fi

# Scan Node.js dependencies
if [[ "$SCAN_NODEJS" == "true" ]] && [[ -f "$PROJECT_DIR/package.json" ]]; then
    echo "Scanning Node.js dependencies..."

    cd "$PROJECT_DIR"

    # npm audit
    echo "  Running npm audit..."
    npm audit --json > npm-audit-report.json 2>&1 || true

    if [[ "$FIRST_RESULT" == "false" ]]; then
        echo ',' >> "$OUTPUT_FILE"
    fi
    echo '    "npm_audit": ' >> "$OUTPUT_FILE"
    cat npm-audit-report.json >> "$OUTPUT_FILE"
    FIRST_RESULT=false

    # Snyk test (if available)
    if command -v snyk &> /dev/null; then
        echo "  Running Snyk..."
        snyk test --json > snyk-report.json 2>&1 || true

        echo ',' >> "$OUTPUT_FILE"
        echo '    "snyk": ' >> "$OUTPUT_FILE"
        cat snyk-report.json >> "$OUTPUT_FILE"
    fi

    cd - > /dev/null
fi

# Scan Docker image
if [[ "$SCAN_DOCKER" == "true" ]] && [[ -n "$DOCKER_IMAGE" ]]; then
    echo "Scanning Docker image: $DOCKER_IMAGE..."

    # Trivy scan
    if command -v trivy &> /dev/null; then
        echo "  Running Trivy..."
        trivy image --format json --output trivy-report.json "$DOCKER_IMAGE" 2>&1 || true

        if [[ "$FIRST_RESULT" == "false" ]]; then
            echo ',' >> "$OUTPUT_FILE"
        fi
        echo '    "trivy": ' >> "$OUTPUT_FILE"
        cat trivy-report.json >> "$OUTPUT_FILE"
        FIRST_RESULT=false
    fi

    # Grype scan (if available)
    if command -v grype &> /dev/null; then
        echo "  Running Grype..."
        grype "$DOCKER_IMAGE" -o json > grype-report.json 2>&1 || true

        echo ',' >> "$OUTPUT_FILE"
        echo '    "grype": ' >> "$OUTPUT_FILE"
        cat grype-report.json >> "$OUTPUT_FILE"
    fi
fi

# Close JSON
echo '  }' >> "$OUTPUT_FILE"
echo '}' >> "$OUTPUT_FILE"

# Clean up individual reports
rm -f safety-report.json pip-audit-report.json npm-audit-report.json snyk-report.json trivy-report.json grype-report.json

echo
echo "=== Scan Complete ==="
echo "Results saved to: $OUTPUT_FILE"
echo
echo "Summary:"
python3 << EOF
import json
with open('$OUTPUT_FILE', 'r') as f:
    results = json.load(f)
    for tool, data in results.get('results', {}).items():
        if isinstance(data, dict):
            vulns = len(data.get('vulnerabilities', [])) if 'vulnerabilities' in data else 0
            print(f"  {tool}: {vulns} vulnerabilities found")
EOF
