#!/usr/bin/env python3
"""
OWASP Top 10 Vulnerability Testing Suite

Comprehensive automated testing for OWASP Top 10 vulnerabilities.
Extracted from vulnerability-assessment skill for on-demand execution.

Usage:
    python test_owasp_top10.py --target https://example.com --report results.json
    python test_owasp_top10.py --target https://example.com --test A01 --verbose

IMPORTANT: Only test systems you own or have explicit written authorization to test.
"""

import requests
import json
import argparse
import ssl
import socket
from typing import List, Dict, Any
from datetime import datetime


class OWASPTester:
    def __init__(self, target_url: str, verbose: bool = False):
        self.target = target_url.rstrip('/')
        self.verbose = verbose
        self.results = {
            'target': target_url,
            'timestamp': datetime.utcnow().isoformat(),
            'tests': []
        }

    def log(self, message: str):
        """Log message if verbose"""
        if self.verbose:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] {message}")

    def test_broken_access_control(self):
        """A01: Broken Access Control"""
        self.log("Testing A01: Broken Access Control...")

        test_results = {
            'id': 'A01',
            'name': 'Broken Access Control',
            'tests': [],
            'vulnerabilities_found': []
        }

        # Test 1: IDOR (Insecure Direct Object Reference)
        try:
            self.log("  Testing IDOR...")
            # Try accessing resources with different IDs
            for user_id in [1, 2, 42, 999]:
                response = requests.get(
                    f"{self.target}/api/users/{user_id}/profile",
                    timeout=10
                )

                if response.status_code == 200:
                    test_results['tests'].append({
                        'name': 'IDOR Check',
                        'status': 'WARNING',
                        'detail': f'User {user_id} accessible without auth'
                    })
                    test_results['vulnerabilities_found'].append({
                        'type': 'IDOR',
                        'severity': 'HIGH',
                        'endpoint': f'/api/users/{user_id}/profile'
                    })
        except Exception as e:
            self.log(f"    Error testing IDOR: {e}")

        # Test 2: Path traversal
        try:
            self.log("  Testing path traversal...")
            traversal_payloads = [
                "../../../etc/passwd",
                "..%2F..%2F..%2Fetc%2Fpasswd",
                "....//....//....//etc/passwd"
            ]

            for payload in traversal_payloads:
                response = requests.get(
                    f"{self.target}/files/{payload}",
                    timeout=10
                )

                if response.status_code == 200 and 'root:' in response.text:
                    test_results['vulnerabilities_found'].append({
                        'type': 'Path Traversal',
                        'severity': 'CRITICAL',
                        'payload': payload
                    })
        except Exception as e:
            self.log(f"    Error testing path traversal: {e}")

        # Test 3: Privilege escalation
        try:
            self.log("  Testing privilege escalation...")
            response = requests.get(
                f"{self.target}/admin/users",
                timeout=10
            )

            if response.status_code == 200:
                test_results['vulnerabilities_found'].append({
                    'type': 'Missing Authorization',
                    'severity': 'CRITICAL',
                    'endpoint': '/admin/users'
                })
        except Exception as e:
            self.log(f"    Error testing privilege escalation: {e}")

        self.results['tests'].append(test_results)

    def test_cryptographic_failures(self):
        """A02: Cryptographic Failures"""
        self.log("Testing A02: Cryptographic Failures...")

        test_results = {
            'id': 'A02',
            'name': 'Cryptographic Failures',
            'tests': [],
            'vulnerabilities_found': []
        }

        # Test 1: HTTPS enforcement
        try:
            self.log("  Testing HTTPS enforcement...")
            http_url = self.target.replace('https://', 'http://')
            response = requests.get(http_url, allow_redirects=False, timeout=10)

            if response.status_code != 301:
                test_results['vulnerabilities_found'].append({
                    'type': 'Missing HTTPS Redirect',
                    'severity': 'HIGH',
                    'detail': 'HTTP not redirected to HTTPS'
                })
        except Exception as e:
            self.log(f"    Error testing HTTPS: {e}")

        # Test 2: TLS version
        try:
            self.log("  Testing TLS version...")
            hostname = self.target.replace('https://', '').replace('http://', '').split('/')[0]

            context = ssl.create_default_context()
            with socket.create_connection((hostname, 443), timeout=10) as sock:
                with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                    version = ssock.version()

                    if version not in ['TLSv1.2', 'TLSv1.3']:
                        test_results['vulnerabilities_found'].append({
                            'type': 'Weak TLS Version',
                            'severity': 'HIGH',
                            'detail': f'Using {version}'
                        })
        except Exception as e:
            self.log(f"    Error testing TLS: {e}")

        # Test 3: Sensitive data exposure
        try:
            self.log("  Testing sensitive data exposure...")
            response = requests.get(f"{self.target}/api/users/me", timeout=10)

            if response.status_code == 200:
                data = response.json()
                sensitive_fields = ['password', 'password_hash', 'ssn', 'credit_card']

                for field in sensitive_fields:
                    if field in str(data).lower():
                        test_results['vulnerabilities_found'].append({
                            'type': 'Sensitive Data Exposure',
                            'severity': 'CRITICAL',
                            'field': field
                        })
        except Exception as e:
            self.log(f"    Error testing data exposure: {e}")

        self.results['tests'].append(test_results)

    def test_injection(self):
        """A03: Injection"""
        self.log("Testing A03: Injection...")

        test_results = {
            'id': 'A03',
            'name': 'Injection',
            'tests': [],
            'vulnerabilities_found': []
        }

        # SQL Injection payloads
        sql_payloads = [
            "' OR '1'='1",
            "' OR '1'='1' --",
            "'; DROP TABLE users; --",
            "' UNION SELECT NULL, NULL --"
        ]

        # Test SQL injection on login
        try:
            self.log("  Testing SQL injection...")
            for payload in sql_payloads:
                response = requests.post(
                    f"{self.target}/api/login",
                    json={"username": payload, "password": "test"},
                    timeout=10
                )

                if response.status_code == 200 or 'SQL' in response.text.upper():
                    test_results['vulnerabilities_found'].append({
                        'type': 'SQL Injection',
                        'severity': 'CRITICAL',
                        'payload': payload,
                        'endpoint': '/api/login'
                    })
        except Exception as e:
            self.log(f"    Error testing SQL injection: {e}")

        # XSS payloads
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "javascript:alert('XSS')"
        ]

        # Test XSS
        try:
            self.log("  Testing XSS...")
            for payload in xss_payloads:
                response = requests.post(
                    f"{self.target}/api/comments",
                    json={"content": payload},
                    timeout=10
                )

                if '<script>' in response.text or 'onerror=' in response.text:
                    test_results['vulnerabilities_found'].append({
                        'type': 'XSS (Cross-Site Scripting)',
                        'severity': 'HIGH',
                        'payload': payload
                    })
        except Exception as e:
            self.log(f"    Error testing XSS: {e}")

        self.results['tests'].append(test_results)

    def test_security_misconfiguration(self):
        """A05: Security Misconfiguration"""
        self.log("Testing A05: Security Misconfiguration...")

        test_results = {
            'id': 'A05',
            'name': 'Security Misconfiguration',
            'tests': [],
            'vulnerabilities_found': []
        }

        # Test security headers
        try:
            self.log("  Testing security headers...")
            response = requests.get(self.target, timeout=10)

            required_headers = {
                'Strict-Transport-Security': 'HIGH',
                'X-Frame-Options': 'MEDIUM',
                'X-Content-Type-Options': 'MEDIUM',
                'Content-Security-Policy': 'HIGH'
            }

            for header, severity in required_headers.items():
                if header not in response.headers:
                    test_results['vulnerabilities_found'].append({
                        'type': 'Missing Security Header',
                        'severity': severity,
                        'header': header
                    })

            # Check for info disclosure
            if 'X-Powered-By' in response.headers:
                test_results['vulnerabilities_found'].append({
                    'type': 'Information Disclosure',
                    'severity': 'LOW',
                    'detail': f"X-Powered-By: {response.headers['X-Powered-By']}"
                })

        except Exception as e:
            self.log(f"    Error testing headers: {e}")

        self.results['tests'].append(test_results)

    def run_all_tests(self):
        """Run all OWASP Top 10 tests"""
        self.test_broken_access_control()
        self.test_cryptographic_failures()
        self.test_injection()
        self.test_security_misconfiguration()

        # Calculate summary
        total_vulns = sum(
            len(test['vulnerabilities_found'])
            for test in self.results['tests']
        )

        critical = sum(
            1 for test in self.results['tests']
            for vuln in test['vulnerabilities_found']
            if vuln.get('severity') == 'CRITICAL'
        )

        high = sum(
            1 for test in self.results['tests']
            for vuln in test['vulnerabilities_found']
            if vuln.get('severity') == 'HIGH'
        )

        self.results['summary'] = {
            'total_vulnerabilities': total_vulns,
            'critical': critical,
            'high': high,
            'medium': total_vulns - critical - high
        }

        return self.results


def main():
    parser = argparse.ArgumentParser(
        description='OWASP Top 10 Vulnerability Testing Suite'
    )
    parser.add_argument(
        '--target',
        required=True,
        help='Target URL (e.g., https://example.com)'
    )
    parser.add_argument(
        '--report',
        default='owasp-test-results.json',
        help='Output report file (JSON format)'
    )
    parser.add_argument(
        '--test',
        help='Run specific test (e.g., A01, A02)'
    )
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='Enable verbose output'
    )

    args = parser.parse_args()

    print(f"OWASP Top 10 Vulnerability Scanner")
    print(f"Target: {args.target}")
    print(f"Report: {args.report}")
    print()

    tester = OWASPTester(args.target, verbose=args.verbose)

    if args.test:
        # Run specific test
        test_method = f"test_{args.test.lower().replace('-', '_')}"
        if hasattr(tester, test_method):
            getattr(tester, test_method)()
        else:
            print(f"Unknown test: {args.test}")
            return
    else:
        # Run all tests
        tester.run_all_tests()

    # Save results
    with open(args.report, 'w') as f:
        json.dump(tester.results, f, indent=2)

    # Print summary
    print(f"\n{'='*60}")
    print("TEST SUMMARY")
    print(f"{'='*60}")
    print(f"Total vulnerabilities found: {tester.results['summary']['total_vulnerabilities']}")
    print(f"  CRITICAL: {tester.results['summary']['critical']}")
    print(f"  HIGH: {tester.results['summary']['high']}")
    print(f"  MEDIUM: {tester.results['summary']['medium']}")
    print(f"\nFull report saved to: {args.report}")


if __name__ == '__main__':
    main()
