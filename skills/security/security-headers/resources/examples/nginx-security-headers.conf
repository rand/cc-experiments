# Nginx Security Headers Configuration
#
# Include this file in your nginx server block or http context.
# Adjust policies based on your application's requirements.
#
# Usage:
#   server {
#       include /path/to/nginx-security-headers.conf;
#       ...
#   }

# Strict-Transport-Security (HSTS)
# Forces HTTPS connections for 1 year, including subdomains
# Add 'preload' and submit to hstspreload.org for maximum protection
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# Content-Security-Policy (CSP)
# Strict policy - adjust based on your application needs
# This example is for a static site or API
add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; object-src 'none'" always;

# For React/Vue SPA, you may need:
# add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api.example.com; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; object-src 'none'" always;

# For SSR with nonces (requires dynamic generation):
# add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'nonce-$request_id'; style-src 'self' 'nonce-$request_id'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; object-src 'none'" always;

# X-Frame-Options
# Prevents clickjacking by blocking iframe embedding
# Options: DENY (recommended), SAMEORIGIN
add_header X-Frame-Options "DENY" always;

# X-Content-Type-Options
# Prevents MIME type sniffing
add_header X-Content-Type-Options "nosniff" always;

# X-XSS-Protection
# Disable (modern browsers removed XSS auditors, CSP is better)
add_header X-XSS-Protection "0" always;

# Referrer-Policy
# Controls Referer header sent to other origins
# Options: no-referrer, strict-origin-when-cross-origin (recommended), same-origin
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Permissions-Policy
# Controls browser features and APIs
# Restrictive by default - enable features as needed
add_header Permissions-Policy "geolocation=(), camera=(), microphone=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()" always;

# For sites needing geolocation:
# add_header Permissions-Policy "geolocation=(self), camera=(), microphone=()" always;

# Cross-Origin-Embedder-Policy (COEP) - Optional, for SharedArrayBuffer
# add_header Cross-Origin-Embedder-Policy "require-corp" always;

# Cross-Origin-Opener-Policy (COOP) - Optional, isolates browsing context
# add_header Cross-Origin-Opener-Policy "same-origin" always;

# Cross-Origin-Resource-Policy (CORP) - Optional, protects from Spectre attacks
# add_header Cross-Origin-Resource-Policy "same-origin" always;

# Cookie security (if you set cookies in nginx)
# proxy_cookie_path / "/; Secure; HttpOnly; SameSite=Strict";

# Hide nginx version
server_tokens off;

# Additional recommendations:

# 1. For API endpoints, use minimal CSP:
# location /api/ {
#     add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none'" always;
# }

# 2. For static assets with long cache times:
# location ~* \.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot)$ {
#     expires 1y;
#     add_header Cache-Control "public, immutable";
#     # Still include security headers
#     include /path/to/nginx-security-headers.conf;
# }

# 3. For file uploads, use separate domain/subdomain:
# server {
#     server_name uploads.example.com;
#     add_header Content-Security-Policy "default-src 'none'; style-src 'unsafe-inline'" always;
#     add_header X-Content-Type-Options "nosniff" always;
#     # No script execution on upload domain
# }

# 4. For CSP reporting:
# add_header Content-Security-Policy "default-src 'self'; ... ; report-uri /csp-report" always;
# location = /csp-report {
#     proxy_pass http://localhost:3000/csp-report;
#     proxy_set_header Content-Type application/csp-report;
# }

# 5. Test with report-only mode first:
# add_header Content-Security-Policy-Report-Only "..." always;
