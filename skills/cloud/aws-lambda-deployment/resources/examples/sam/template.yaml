AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM deployment example for Lambda functions

# Global configuration for all functions
Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.12
    Tracing: Active
    Environment:
      Variables:
        LOG_LEVEL: INFO
        STAGE: !Ref Stage
    Tags:
      Environment: !Ref Stage
      ManagedBy: SAM

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment stage

Resources:
  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-api
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        ApiKeyRequired: true
      TracingEnabled: true

  # API Lambda Function
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-api-function
      CodeUri: ../python/
      Handler: api_lambda.lambda_handler
      Description: API Gateway integration function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemsTable
      Events:
        GetItems:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items
            Method: GET
        CreateItem:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items
            Method: POST
        GetItem:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items/{id}
            Method: GET
        UpdateItem:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items/{id}
            Method: PUT
        DeleteItem:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items/{id}
            Method: DELETE

  # Stream Processor Function
  StreamProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-stream-processor
      CodeUri: ../node/
      Handler: dynamodb_trigger.handler
      Runtime: nodejs20.x
      Description: DynamoDB stream processor
      Policies:
        - DynamoDBStreamReadPolicy:
            TableName: !Ref ItemsTable
            StreamName: !GetAtt ItemsTable.StreamArn
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotificationTopic.TopicName
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref NotificationTopic
      Events:
        DynamoDBStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt ItemsTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5
            MaximumRetryAttempts: 2
            BisectBatchOnFunctionError: true

  # Scheduled Function
  ScheduledFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-scheduled-function
      CodeUri: ../python/
      Handler: hello_lambda.lambda_handler
      Description: Scheduled function example
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 2 * * ? *)  # Daily at 2 AM UTC
            Description: Daily cleanup job
            Enabled: true

  # DynamoDB Table
  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-items
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: createdAt
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Stage

  # SNS Topic for notifications
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-notifications
      DisplayName: Item Notifications
      Tags:
        - Key: Environment
          Value: !Ref Stage

  # CloudWatch Log Groups with retention
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ApiFunction}
      RetentionInDays: 7

  StreamProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${StreamProcessorFunction}
      RetentionInDays: 7

  # CloudWatch Alarms
  ApiFunctionErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-api-errors
      AlarmDescription: Alert on API function errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ApiFunction

  ApiFunctionThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-api-throttles
      AlarmDescription: Alert on API function throttles
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ApiFunction

  # API Key
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub ${AWS::StackName}-api-key
      Enabled: true

  # Usage Plan
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiGatewayStage
    Properties:
      UsagePlanName: !Sub ${AWS::StackName}-usage-plan
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: !Ref Stage
      Quota:
        Limit: 10000
        Period: DAY
      Throttle:
        BurstLimit: 100
        RateLimit: 50

  # Link API Key to Usage Plan
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
    Export:
      Name: !Sub ${AWS::StackName}-api-url

  ApiKey:
    Description: API Key for accessing the API
    Value: !Ref ApiKey

  TableName:
    Description: DynamoDB table name
    Value: !Ref ItemsTable
    Export:
      Name: !Sub ${AWS::StackName}-table-name

  TopicArn:
    Description: SNS topic ARN
    Value: !Ref NotificationTopic
    Export:
      Name: !Sub ${AWS::StackName}-topic-arn

  ApiFunctionArn:
    Description: API function ARN
    Value: !GetAtt ApiFunction.Arn

  StreamProcessorFunctionArn:
    Description: Stream processor function ARN
    Value: !GetAtt StreamProcessorFunction.Arn
