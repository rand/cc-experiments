name: Deploy to Kubernetes

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'k8s/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  validate:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Validate manifests
        run: |
          kubectl apply --dry-run=client -f k8s/ --recursive

      - name: Run kubeval
        uses: instrumenta/kubeval-action@master
        with:
          files: k8s/

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, validate]
    if: github.event_name == 'pull_request'
    environment:
      name: staging
      url: https://staging.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        run: |
          kubectl apply -f k8s/ -n staging --recursive
          kubectl set image deployment/web-app web=${{ needs.build.outputs.image-tag }} -n staging

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/web-app -n staging --timeout=5m

      - name: Run smoke tests
        run: |
          # Add your smoke tests here
          kubectl run smoke-test --image=curlimages/curl:latest --rm -i --restart=Never -n staging -- \
            curl -f http://web-app/health || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, validate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Deploy to production
        run: |
          kubectl apply -f k8s/ -n production --recursive
          kubectl set image deployment/web-app web=${{ needs.build.outputs.image-tag }} -n production

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/web-app -n production --timeout=10m

      - name: Run smoke tests
        run: |
          # Add your smoke tests here
          kubectl run smoke-test --image=curlimages/curl:latest --rm -i --restart=Never -n production -- \
            curl -f http://web-app/health || exit 1

      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed! Rolling back..."
          kubectl rollout undo deployment/web-app -n production

      - name: Create release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          body: |
            Deployed to production
            Image: ${{ needs.build.outputs.image-tag }}
          draft: false
          prerelease: false
