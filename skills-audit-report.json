{
  "summary": {
    "total_skills": 355,
    "priority_distribution": {
      "high": 123,
      "medium": 219,
      "low": 13
    },
    "resources_status": {
      "with_resources_dir": 0,
      "with_scripts_dir": 3,
      "without_resources": 355
    },
    "content_metrics": {
      "total_code_examples": 5580,
      "total_external_refs": 843,
      "avg_examples_per_skill": 15.72,
      "avg_refs_per_skill": 2.37
    },
    "opportunity_counts": {
      "create_resources_dir": 324,
      "extract_examples": 341,
      "add_test_scripts": 124,
      "validate_examples": 332,
      "add_validation_scripts": 90,
      "create_reference_file": 19
    },
    "category_counts": {
      "ml": 30,
      "math": 19,
      "distributed-systems": 17,
      "elegant-design": 14,
      "debugging": 14,
      "engineering": 14,
      "plt": 13,
      "cloud": 13,
      "database": 11,
      "frontend": 10,
      "formal": 10,
      "mobile": 10,
      "data": 9,
      "diagrams": 8,
      "observability": 8,
      "build-systems": 8,
      "modal": 8,
      "protocols": 8,
      "research": 7,
      "cryptography": 7,
      "api": 7,
      "proxies": 7,
      "caching": 7,
      "root": 6,
      "collaboration": 6,
      "zig": 6,
      "security": 6,
      "testing": 6,
      "deployment": 6,
      "infrastructure": 6,
      "ir": 5,
      "tui": 5,
      "networking": 5,
      "anti-slop": 5,
      "containers": 5,
      "typed-holes-refactor": 5,
      "wasm": 4,
      "product": 4,
      "cicd": 4,
      "realtime": 4,
      "workflow": 4,
      "ebpf": 4
    }
  },
  "skills": [
    {
      "file_path": "security/vulnerability-assessment.md",
      "category": "security",
      "skill_name": "vulnerability-assessment",
      "frontmatter": {
        "name": "security-vulnerability-assessment",
        "description": "Security testing methodologies, OWASP Top 10, vulnerability scanning tools, and penetration testing practices"
      },
      "metrics": {
        "line_count": 714,
        "code_line_count": 130,
        "code_examples": 15,
        "external_refs": 37,
        "tools_mentioned": 5,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "import requests\n\ndef test_broken_access_control():\n    \"\"\"Test for access control vulnerabilities\"\"\"\n\n    # Test 1: IDOR (Insecure Direct Object Reference)\n    # Try accessing another user's resource\n"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "def test_cryptographic_failures():\n    \"\"\"Test for weak cryptography\"\"\"\n\n    # Test 1: Check HTTPS enforcement\n    response = requests.get(\"http://example.com\", allow_redirects=False)\n    assert respo"
        },
        {
          "language": "python",
          "line_count": 69,
          "complexity": "complex",
          "code": "def test_sql_injection():\n    \"\"\"Test for SQL injection vulnerabilities\"\"\"\n\n    # Test payloads\n    payloads = [\n        \"' OR '1'='1\",\n        \"' OR '1'='1' --\",\n        \"'; DROP TABLE users; --\",\n  "
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "medium",
          "code": "def test_insecure_design():\n    \"\"\"Test for design flaws\"\"\"\n\n    # Test 1: Rate limiting\n    for i in range(20):\n        response = requests.post(\n            \"https://api.example.com/login\",\n        "
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "medium",
          "code": "def test_security_misconfiguration():\n    \"\"\"Test for misconfigurations\"\"\"\n\n    # Test 1: Security headers\n    response = requests.get(\"https://example.com\")\n\n    required_headers = [\n        'Strict-"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Python dependencies\npip install safety\nsafety check\n\npip install pip-audit\npip-audit\n\n# Node.js dependencies\nnpm audit\nnpm audit fix\n\n# Check Docker base images\ndocker scan myimage:latest\n\n# Use Sny"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "# Automated dependency checking\nimport requests\nimport json\n\ndef check_dependencies_for_vulnerabilities(requirements_file):\n    \"\"\"Check Python dependencies against OSV database\"\"\"\n\n    with open(requ"
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "medium",
          "code": "def test_authentication_failures():\n    \"\"\"Test authentication mechanisms\"\"\"\n\n    # Test 1: Weak passwords accepted\n    weak_passwords = [\"password\", \"12345678\", \"qwerty\", \"admin\"]\n\n    for pwd in wea"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "medium",
          "code": "def test_software_data_integrity_failures():\n    \"\"\"A08: Software and Data Integrity Failures\"\"\"\n\n    # Test unsigned packages, missing integrity checks\n    response = requests.get(\"https://example.co"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Python: Bandit\npip install bandit\nbandit -r . -f json -o bandit-report.json\n\n# Python: Semgrep\npip install semgrep\nsemgrep --config=auto --json --output=semgrep-report.json\n\n# Python: Pylint securit"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# OWASP ZAP (Zed Attack Proxy)\ndocker run -t owasp/zap2docker-stable zap-baseline.py \\\n    -t https://example.com \\\n    -r zap-report.html\n\n# Burp Suite (commercial)\n# Use for manual penetration testi"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Python: Safety\nsafety check --json --output safety-report.json\n\n# Python: pip-audit\npip-audit --format json --output pip-audit-report.json\n\n# Node.js: npm audit\nnpm audit --json > npm-audit-report.j"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Scan container image\ndocker scan myimage:latest\n\n# Trivy comprehensive scan\ntrivy image --severity HIGH,CRITICAL myimage:latest\n\n# Clair (open source)\ndocker run -d --name clair arminc/clair-local-s"
        },
        {
          "language": "python",
          "line_count": 56,
          "complexity": "complex",
          "code": "import nmap\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef passive_reconnaissance(domain):\n    \"\"\"Gather information without touching target\"\"\"\n\n    # DNS lookup\n    import dns.resolver\n    resolv"
        },
        {
          "language": "yaml",
          "line_count": 38,
          "complexity": "medium",
          "code": "name: Security Scan\n\non: [push, pull_request]\n\njobs:\n  security:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Run Bandit (Python SAST)\n        run: |\n       "
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/users/{user2_id}/profile\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/files/../../etc/passwd\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/admin/users\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/admin/dashboard\""
        },
        {
          "type": "example",
          "url": "http://example.com\""
        },
        {
          "type": "external",
          "url": "https://'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users/me\""
        },
        {
          "type": "example",
          "url": "https://example.com\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/login\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/ping?host={payload}\""
        },
        {
          "type": "example",
          "url": "https://example.com/comments\""
        },
        {
          "type": "example",
          "url": "https://example.com/comments/{comment_id}\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/login\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/login\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/login\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/password-reset\""
        },
        {
          "type": "example",
          "url": "https://example.com\""
        },
        {
          "type": "example",
          "url": "https://example.com/static/\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/login\""
        },
        {
          "type": "external",
          "url": "https://api.osv.dev/v1/query'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/register\""
        },
        {
          "type": "example",
          "url": "https://example.com\""
        },
        {
          "type": "example",
          "url": "https://example.com/login\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/login\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/protected\""
        },
        {
          "type": "example",
          "url": "https://example.com\""
        },
        {
          "type": "external",
          "url": "https://cdn'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/login\""
        },
        {
          "type": "example",
          "url": "http://localhost:8080\""
        },
        {
          "type": "external",
          "url": "http://127.0.0.1\""
        },
        {
          "type": "external",
          "url": "http://169.254.169.254/latest/meta-data/\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/fetch-url\""
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "example",
          "url": "https://example.com/page?id=1\""
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "external",
          "url": "https://crt.sh/?q=%.{domain}&output=json\""
        }
      ],
      "tools_mentioned": [
        "tls",
        "nginx",
        "ssl",
        "jwt",
        "docker"
      ],
      "config_snippets": [
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 100.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "cryptography/tls-configuration.md",
      "category": "cryptography",
      "skill_name": "tls-configuration",
      "frontmatter": {
        "name": "cryptography-tls-configuration",
        "description": "TLS/SSL configuration including TLS 1.2/1.3 setup, cipher suites, security best practices, and server configuration"
      },
      "metrics": {
        "line_count": 586,
        "code_line_count": 155,
        "code_examples": 24,
        "external_refs": 12,
        "tools_mentioned": 5,
        "config_snippets": 10
      },
      "code_examples": [
        {
          "language": "nginx",
          "line_count": 36,
          "complexity": "medium",
          "code": "server {\n    listen 443 ssl http2;\n    server_name example.com;\n\n    # Certificates\n    ssl_certificate /etc/ssl/certs/example.com.crt;\n    ssl_certificate_key /etc/ssl/private/example.com.key;\n\n    #"
        },
        {
          "language": "apache",
          "line_count": 23,
          "complexity": "medium",
          "code": "<VirtualHost *:443>\n    ServerName example.com\n\n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/example.com.key\n    SSLCertificateChai"
        },
        {
          "language": "javascript",
          "line_count": 35,
          "complexity": "medium",
          "code": "const https = require('https');\nconst fs = require('fs');\n\nconst options = {\n    key: fs.readFileSync('/etc/ssl/private/example.com.key'),\n    cert: fs.readFileSync('/etc/ssl/certs/example.com.crt'),\n"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom urllib3.util.ssl_ import create_urllib3_context\n\nclass TLSAdapter(HTTPAdapter):\n    def init_poolmanager(self, *args, **kwargs):\n        "
        },
        {
          "language": "go",
          "line_count": 36,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"crypto/tls\"\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc main() {\n    tlsConfig := &tls.Config{\n        MinVersion: tls.VersionTLS12,\n        MaxVersion: tls.VersionTLS13,\n        Ciph"
        },
        {
          "language": "rust",
          "line_count": 20,
          "complexity": "simple",
          "code": "use reqwest::ClientBuilder;\nuse std::time::Duration;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = ClientBuilder::new()\n        .min_tls_version(reqwest:"
        },
        {
          "language": "nginx",
          "line_count": 18,
          "complexity": "simple",
          "code": "server {\n    listen 443 ssl;\n\n    ssl_certificate /etc/ssl/certs/server.crt;\n    ssl_certificate_key /etc/ssl/private/server.key;\n\n    # Client certificate verification\n    ssl_client_certificate /etc"
        },
        {
          "language": "go",
          "line_count": 43,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"crypto/tls\"\n    \"crypto/x509\"\n    \"io/ioutil\"\n    \"net/http\"\n)\n\nfunc main() {\n    // Load client cert\n    cert, err := tls.LoadX509KeyPair(\"client.crt\", \"client.key\")\n    i"
        },
        {
          "language": "nginx",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Disable session tickets (privacy)\nssl_session_tickets off;\n\n# Or enable with rotation\nssl_session_tickets on;\nssl_session_ticket_key /etc/ssl/ticket_key1.key;\nssl_session_ticket_key /etc/ssl/ticket_"
        },
        {
          "language": "nginx",
          "line_count": 3,
          "complexity": "simple",
          "code": "ssl_session_cache shared:SSL:10m;\nssl_session_timeout 10m;\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u2705 Good: TLS 1.2 and 1.3 only\nssl_protocols TLSv1.2 TLSv1.3;\n\n# \u274c Bad: Old protocols\nssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u2705 Good: Modern ciphers only\nssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305';\n\n# \u274c Bad: Weak ciphers included\nssl_ciphers 'ALL:!aNULL:!eNULL';\n"
        },
        {
          "language": "nginx",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u2705 Good: ECDHE for forward secrecy\nssl_ciphers 'ECDHE-RSA-...';\nssl_prefer_server_ciphers on;\n\n# \u274c Bad: Static RSA key exchange\nssl_ciphers 'RSA-AES128-SHA';\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u2705 Good: Include full chain\nwith open('fullchain.pem') as f:  # cert + intermediate\n    cert = f.read()\n\n# \u274c Bad: Only leaf certificate\nwith open('cert.pem') as f:  # missing intermediate\n    cert = "
        },
        {
          "language": "nginx",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u2705 Good: Enable OCSP stapling\nssl_stapling on;\nssl_stapling_verify on;\nssl_trusted_certificate /etc/ssl/certs/ca-chain.crt;\n\n# \u274c Bad: No OCSP stapling (client must check)\n"
        },
        {
          "language": "nginx",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Force HTTPS for 1 year, including subdomains\nadd_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\n"
        },
        {
          "language": "nginx",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Prevent MIME sniffing\nadd_header X-Content-Type-Options \"nosniff\" always;\n\n# XSS protection\nadd_header X-Frame-Options \"SAMEORIGIN\" always;\nadd_header X-XSS-Protection \"1; mode=block\" always;\n\n# CSP"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "openssl s_client -connect example.com:443 -tls1_2\nopenssl s_client -connect example.com:443 -tls1_3\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Measure handshake time\ncurl -w \"time_appconnect: %{time_appconnect}s\\n\" -o /dev/null -s https://example.com\n\n# Should be < 200ms for TLS 1.3, < 400ms for TLS 1.2\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "openssl s_client -connect example.com:443 -showcerts\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "cat cert.pem intermediate.pem > fullchain.pem\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# SSL Labs\nhttps://www.ssllabs.com/ssltest/analyze.html?d=example.com\n\n# Mozilla Observatory\nhttps://observatory.mozilla.org/analyze/example.com\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Test specific TLS version\nopenssl s_client -connect example.com:443 -tls1_2\nopenssl s_client -connect example.com:443 -tls1_3\n\n# Test cipher suite\nopenssl s_client -connect example.com:443 -cipher '"
        },
        {
          "language": "nginx",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Phase 1: Enable TLS 1.3 alongside 1.2\nssl_protocols TLSv1.2 TLSv1.3;\n\n# Phase 2: Monitor adoption (check logs)\n# Phase 3: Eventually deprecate TLS 1.2 (if possible)\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "https://'"
        },
        {
          "type": "example",
          "url": "https://api.example.com'"
        },
        {
          "type": "example",
          "url": "https://api.example.com\""
        },
        {
          "type": "example",
          "url": "https://api.example.com\""
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "example",
          "url": "https://api.example.com\""
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "example",
          "url": "https://www.ssllabs.com/ssltest/analyze.html?d=example.com"
        },
        {
          "type": "standard",
          "url": "https://observatory.mozilla.org/analyze/example.com"
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "example",
          "url": "https://example.com"
        }
      ],
      "tools_mentioned": [
        "tls",
        "nginx",
        "ssl",
        "openssl",
        "apache"
      ],
      "config_snippets": [
        "nginx",
        "apache",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (apache, nginx), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "24 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 100.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "cryptography/sni-routing.md",
      "category": "cryptography",
      "skill_name": "sni-routing",
      "frontmatter": {
        "name": "cryptography-sni-routing",
        "description": "Server Name Indication (SNI) for multi-domain TLS hosting, routing, and configuration patterns"
      },
      "metrics": {
        "line_count": 511,
        "code_line_count": 128,
        "code_examples": 18,
        "external_refs": 9,
        "tools_mentioned": 5,
        "config_snippets": 8
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "sudo tcpdump -i any -A 'tcp port 443' | grep -i \"server_name\"\n"
        },
        {
          "language": "nginx",
          "line_count": 39,
          "complexity": "medium",
          "code": "# Domain 1\nserver {\n    listen 443 ssl;\n    server_name example.com www.example.com;\n\n    ssl_certificate /etc/ssl/certs/example.com.crt;\n    ssl_certificate_key /etc/ssl/private/example.com.key;\n\n   "
        },
        {
          "language": "nginx",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Route based on SNI to different backends\nmap $ssl_server_name $backend {\n    example.com          backend1:8080;\n    api.example.com      backend2:8080;\n    admin.example.com    backend3:8080;\n    d"
        },
        {
          "language": "apache",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Domain 1\n<VirtualHost *:443>\n    ServerName example.com\n    ServerAlias www.example.com\n\n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/example.com.crt\n    SSLCertificateKeyFile /etc/ssl/pri"
        },
        {
          "language": "go",
          "line_count": 30,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"crypto/tls\"\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc main() {\n    // Load certificates for different domains\n    cert1, _ := tls.LoadX509KeyPair(\"example.com.crt\", \"example.com.key"
        },
        {
          "language": "go",
          "line_count": 14,
          "complexity": "simple",
          "code": "tlsConfig := &tls.Config{\n    GetCertificate: func(hello *tls.ClientHelloInfo) (*tls.Certificate, error) {\n        // Custom logic based on SNI\n        switch hello.ServerName {\n        case \"example."
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "import ssl\nimport socket\n\nhostname = 'example.com'\ncontext = ssl.create_default_context()\n\nwith socket.create_connection((hostname, 443)) as sock:\n    # SNI automatically set from server_hostname para"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "complex",
          "code": "import requests\n\n# SNI automatically extracted from URL\nresponse = requests.get('https://example.com')\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# SNI automatically sent\ncurl https://example.com\n\n# Test different SNI vs Host header\ncurl --resolve example.com:443:192.168.1.1 https://example.com\n\n# Test SNI with different hostname\ncurl --connect"
        },
        {
          "language": "nginx",
          "line_count": 19,
          "complexity": "simple",
          "code": "server {\n    listen 443 ssl;\n    server_name *.example.com;\n\n    # Single wildcard cert for all subdomains\n    ssl_certificate /etc/ssl/certs/wildcard.example.com.crt;\n    ssl_certificate_key /etc/ssl"
        },
        {
          "language": "go",
          "line_count": 46,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"crypto/tls\"\n    \"database/sql\"\n    \"net/http\"\n)\n\ntype CertStore struct {\n    db *sql.DB\n}\n\nfunc (cs *CertStore) GetCertificate(hello *tls.ClientHelloInfo) (*tls.Certificate"
        },
        {
          "language": "nginx",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Catch-all for invalid SNI\nserver {\n    listen 443 ssl default_server;\n    server_name _;\n\n    ssl_certificate /etc/ssl/certs/default.crt;\n    ssl_certificate_key /etc/ssl/private/default.key;\n\n    r"
        },
        {
          "language": "nginx",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Enable ECH (nginx 1.25+)\nssl_ech on;\nssl_ech_key /etc/ssl/ech-key.pem;\n"
        },
        {
          "language": "nginx",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Verify SNI matches Host header\nserver {\n    if ($ssl_server_name != $host) {\n        return 421 \"Mismatch Error\";\n    }\n}\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "openssl s_client -connect example.com:443 -servername example.com -tlsextdebug\n"
        },
        {
          "language": "nginx",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Different IPs for each domain\nserver {\n    listen 192.168.1.10:443 ssl;\n    server_name example.com;\n    ssl_certificate /etc/ssl/certs/example.com.crt;\n}\n\nserver {\n    listen 192.168.1.11:443 ssl;\n"
        },
        {
          "language": "haproxy",
          "line_count": 18,
          "complexity": "simple",
          "code": "frontend https_front\n    bind *:443\n    mode tcp\n    tcp-request inspect-delay 5s\n    tcp-request content accept if { req_ssl_hello_type 1 }\n\n    use_backend example_com if { req_ssl_sni -i example.co"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Test with specific SNI\nopenssl s_client -connect 192.168.1.1:443 -servername example.com\n\n# Test without SNI (should get default cert)\nopenssl s_client -connect 192.168.1.1:443 -noservername\n\n# Test"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://backend1"
        },
        {
          "type": "external",
          "url": "http://backend2"
        },
        {
          "type": "external",
          "url": "http://backend3"
        },
        {
          "type": "external",
          "url": "http://$backend"
        },
        {
          "type": "example",
          "url": "https://example.com'"
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "external",
          "url": "http://$subdomain-backend:8080"
        }
      ],
      "tools_mentioned": [
        "tls",
        "nginx",
        "ssl",
        "openssl",
        "apache"
      ],
      "config_snippets": [
        "nginx",
        "nginx",
        "apache",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (apache, nginx), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 98.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "observability/opentelemetry-integration.md",
      "category": "observability",
      "skill_name": "opentelemetry-integration",
      "frontmatter": {
        "name": "observability-opentelemetry-integration",
        "description": "Integrating OpenTelemetry for unified observability (traces, metrics, logs)"
      },
      "metrics": {
        "line_count": 729,
        "code_line_count": 128,
        "code_examples": 16,
        "external_refs": 8,
        "tools_mentioned": 10,
        "config_snippets": 6
      },
      "code_examples": [
        {
          "language": "yaml",
          "line_count": 95,
          "complexity": "complex",
          "code": "# otel-collector-config.yaml\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\n\n  # Prometheus scraper (if needed)\n  prometheus:\n "
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "# Auto-instrumentation with opentelemetry-instrument CLI\n# Install:\n# pip install opentelemetry-distro opentelemetry-exporter-otlp\n\n# Run with auto-instrumentation:\n# opentelemetry-instrument \\\n#   --"
        },
        {
          "language": "python",
          "line_count": 85,
          "complexity": "complex",
          "code": "from opentelemetry import trace, metrics\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom opentelemetry.exporter.otlp.proto.grpc.tr"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "from opentelemetry import trace, metrics\nfrom opentelemetry.sdk.metrics.view import View\nfrom opentelemetry.sdk.metrics import MeterProvider\n\n# Enable exemplars for histograms\nmeter_provider = MeterPr"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "import logging\nfrom opentelemetry import trace\n\n# Configure structured logging with trace context\nclass TraceContextFilter(logging.Filter):\n    def filter(self, record):\n        span = trace.get_curre"
        },
        {
          "language": "yaml",
          "line_count": 36,
          "complexity": "medium",
          "code": "# Tail-based sampling (smart sampling after trace completes)\nprocessors:\n  tail_sampling:\n    policies:\n      # Always sample errors\n      - name: errors\n        type: status_code\n        status_code:"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "from opentelemetry.sdk.resources import Resource, SERVICE_NAME, SERVICE_VERSION\n\n# Standard semantic conventions\nresource = Resource.create({\n    # Service attributes\n    SERVICE_NAME: \"order-service\""
        },
        {
          "language": "yaml",
          "line_count": 39,
          "complexity": "medium",
          "code": "# docker-compose.yml\nservices:\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:latest\n    volumes:\n      - ./otel-config.yaml:/etc/otel-collector-config.yaml\n    command: [\"--config="
        },
        {
          "language": "yaml",
          "line_count": 26,
          "complexity": "medium",
          "code": "# otel-collector-config.yaml\nexporters:\n  datadog:\n    api:\n      site: datadoghq.com\n      key: ${DD_API_KEY}\n\n    host_metadata:\n      enabled: true\n      hostname: ${HOSTNAME}\n      tags:\n        -"
        },
        {
          "language": "yaml",
          "line_count": 13,
          "complexity": "simple",
          "code": "exporters:\n  otlp/jaeger:\n    endpoint: jaeger:4317\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/jaeger]\n"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Python\npip install opentelemetry-distro opentelemetry-exporter-otlp\n\n# Auto-instrumentation\npip install opentelemetry-instrumentation-flask  # or django, fastapi, etc.\n\n# Node.js\nnpm install @opente"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Docker\ndocker run -v $(pwd)/config.yaml:/etc/otel-collector-config.yaml \\\n  -p 4317:4317 -p 4318:4318 \\\n  otel/opentelemetry-collector-contrib:latest \\\n  --config=/etc/otel-collector-config.yaml\n\n# "
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Exporter endpoint\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318\n\n# Service name\nexport OTEL_SERVICE_NAME=my-service\n\n# Resource attributes\nexport OTEL_RESOURCE_ATTRIBUTES=deployment."
        },
        {
          "language": "yaml",
          "line_count": 16,
          "complexity": "simple",
          "code": "# WRONG: 100% sampling (expensive, high cardinality)\nprocessors:\n  probabilistic_sampler:\n    sampling_percentage: 100\n\n# CORRECT: Tail-based sampling (smart sampling)\nprocessors:\n  tail_sampling:\n   "
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# WRONG: No context about service\nresource = Resource.create({})\n\n# CORRECT: Rich service metadata\nresource = Resource.create({\n    \"service.name\": \"order-service\",\n    \"service.version\": \"1.0.0\",\n   "
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Logs without trace context\nlogger.info(\"Processing order\")\n\n# CORRECT: Logs with trace/span IDs\nlogger.info(\"Processing order\", extra={\n    \"trace_id\": trace.get_current_span().get_span_conte"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://loki:3100/loki/api/v1/push"
        },
        {
          "type": "external",
          "url": "http://otel-collector:4318"
        },
        {
          "type": "external",
          "url": "http://auth-service/validate/{user_id}'"
        },
        {
          "type": "external",
          "url": "http://otel-collector:4317\""
        },
        {
          "type": "external",
          "url": "http://otel-collector:4317\""
        },
        {
          "type": "external",
          "url": "http://otel-collector:4317"
        },
        {
          "type": "github",
          "url": "https://github.com/open-telemetry/opentelemetry-operator/releases/latest/download/opentelemetry-operator.yaml"
        },
        {
          "type": "external",
          "url": "http://otel-collector:4318"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "postgresql",
        "tls",
        "datadog",
        "prometheus",
        "postgres",
        "grafana",
        "mongodb",
        "mysql",
        "docker"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 97.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "protocols/http2-multiplexing.md",
      "category": "protocols",
      "skill_name": "http2-multiplexing",
      "frontmatter": {
        "name": "protocols-http2-multiplexing",
        "description": "HTTP/2 protocol with multiplexing, server push, header compression, and stream prioritization"
      },
      "metrics": {
        "line_count": 486,
        "code_line_count": 106,
        "code_examples": 13,
        "external_refs": 8,
        "tools_mentioned": 5,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "# HTTP/1.1 - requires 6 connections\nconn1.request('GET', '/style.css')\nconn2.request('GET', '/script.js')\nconn3.request('GET', '/image1.png')\nconn4.request('GET', '/image2.png')\nconn5.request('GET', '"
        },
        {
          "language": "nginx",
          "line_count": 11,
          "complexity": "simple",
          "code": "server {\n    listen 443 ssl http2;\n    server_name example.com;\n\n    location = /index.html {\n        http2_push /css/style.css;\n        http2_push /js/script.js;\n        http2_push /images/logo.png;\n"
        },
        {
          "language": "javascript",
          "line_count": 24,
          "complexity": "medium",
          "code": "const http2 = require('http2');\nconst fs = require('fs');\n\nconst server = http2.createSecureServer({\n    key: fs.readFileSync('server-key.pem'),\n    cert: fs.readFileSync('server-cert.pem')\n});\n\nserve"
        },
        {
          "language": "http",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Request 1\nGET /api/users/1 HTTP/1.1\nHost: api.example.com\nUser-Agent: Mozilla/5.0 ...\nAccept: application/json\nAuthorization: Bearer token123\n\n# Request 2 - same headers repeated!\nGET /api/users/2 H"
        },
        {
          "language": "javascript",
          "line_count": 20,
          "complexity": "simple",
          "code": "// Node.js HTTP/2 client\nconst http2 = require('http2');\n\nconst client = http2.connect('https://example.com');\n\n// High priority - CSS (weight 256)\nconst cssStream = client.request({\n    ':path': '/cr"
        },
        {
          "language": "javascript",
          "line_count": 25,
          "complexity": "medium",
          "code": "server.on('stream', (stream, headers) => {\n    const cookieHeader = headers['cookie'] || '';\n    const hasCache = cookieHeader.includes('has_css=1');\n\n    if (!hasCache) {\n        // Push CSS only if "
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "# Python HTTP/2 with flow control\nimport h2.connection\nimport h2.events\n\nconn = h2.connection.H2Connection()\nconn.initiate_connection()\n\n# Set initial window size\nconn.update_settings({\n    h2.setting"
        },
        {
          "language": "go",
          "line_count": 38,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n\n    mux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        // Check if HTT"
        },
        {
          "language": "rust",
          "line_count": 36,
          "complexity": "medium",
          "code": "use hyper::{Body, Client, Request};\nuse hyper::client::HttpConnector;\nuse hyper_tls::HttpsConnector;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create HTTP/2 cl"
        },
        {
          "language": "nginx",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u2705 Good: Enable HTTP/2\nserver {\n    listen 443 ssl http2;\n    server_name example.com;\n\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n}\n"
        },
        {
          "language": "javascript",
          "line_count": 6,
          "complexity": "simple",
          "code": "// \u274c Bad: Pushing everything\nstream.pushStream({ ':path': '/rarely-used-library.js' }, ...);\n\n// \u2705 Good: Only push critical resources\nstream.pushStream({ ':path': '/critical.css' }, ...);\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "curl -I --http2 https://example.com\n# Look for: HTTP/2 200\n\n# Or\nopenssl s_client -connect example.com:443 -alpn h2\n# Look for: ALPN protocol: h2\n"
        },
        {
          "language": "javascript",
          "line_count": 7,
          "complexity": "simple",
          "code": "// Ensure proper cache headers on pushed resources\npushStream.respond({\n    ':status': 200,\n    'cache-control': 'public, max-age=31536000',\n    'content-type': 'text/css'\n});\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com'"
        },
        {
          "type": "example",
          "url": "https://example.com/api/users/1\""
        },
        {
          "type": "example",
          "url": "https://example.com/api/users/2\""
        },
        {
          "type": "example",
          "url": "https://example.com/api/users/3\""
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "example",
          "url": "https://www.example.com"
        },
        {
          "type": "example",
          "url": "https://api.example.com"
        },
        {
          "type": "example",
          "url": "https://example.com"
        }
      ],
      "tools_mentioned": [
        "envoy",
        "tls",
        "nginx",
        "ssl",
        "openssl"
      ],
      "config_snippets": [
        "nginx",
        "nginx"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (nginx), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 97.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "database/redpanda-streaming.md",
      "category": "database",
      "skill_name": "redpanda-streaming",
      "frontmatter": {
        "name": "redpanda-streaming",
        "description": "**Redpanda deployments**: Setting up Kafka-compatible streaming infrastructure"
      },
      "metrics": {
        "line_count": 586,
        "code_line_count": 229,
        "code_examples": 34,
        "external_refs": 8,
        "tools_mentioned": 4,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Create topic with 3 partitions, replication factor 3\nrpk topic create orders -p 3 -r 3\n\n# List topics\nrpk topic list\n\n# Describe topic\nrpk topic describe orders\n\n# Delete topic\nrpk topic delete orde"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "from kafka import KafkaProducer\nimport json\n\nproducer = KafkaProducer(\n    bootstrap_servers=['localhost:9092'],\n    value_serializer=lambda v: json.dumps(v).encode('utf-8'),\n    acks='all',  # Wait f"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "from kafka import KafkaConsumer\nimport json\n\nconsumer = KafkaConsumer(\n    'orders',\n    bootstrap_servers=['localhost:9092'],\n    group_id='order-processor',\n    value_deserializer=lambda m: json.loa"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Each consumer in group processes subset of partitions\n# Group: order-processor\n#   Consumer 1 \u2192 Partition 0\n#   Consumer 2 \u2192 Partition 1\n#   Consumer 3 \u2192 Partition 2\n\n# View consumer groups\nrpk grou"
        },
        {
          "language": "yaml",
          "line_count": 19,
          "complexity": "simple",
          "code": "# docker-compose.yml\nversion: '3.8'\nservices:\n  redpanda:\n    image: redpandadata/redpanda:latest\n    command:\n      - redpanda start\n      - --smp 1\n      - --memory 1G\n      - --overprovisioned\n    "
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "docker-compose up -d\nrpk cluster info --brokers localhost:9092\n"
        },
        {
          "language": "bash",
          "line_count": 25,
          "complexity": "medium",
          "code": "# Install Redpanda operator\nhelm repo add redpanda https://charts.redpanda.com\nhelm install redpanda-operator redpanda/redpanda-operator \\\n  --namespace redpanda-system --create-namespace\n\n# Deploy 3-"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Register Avro schema for topic 'orders-value'\ncurl -X POST http://localhost:8081/subjects/orders-value/versions \\\n  -H 'Content-Type: application/vnd.schemaregistry.v1+json' \\\n  -d '{\n    \"schema\": "
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "from confluent_kafka import SerializingProducer\nfrom confluent_kafka.schema_registry import SchemaRegistryClient\nfrom confluent_kafka.schema_registry.avro import AvroSerializer\n\nschema_str = \"\"\"\n{\n  \""
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "curl -X POST http://localhost:8082/topics/orders \\\n  -H 'Content-Type: application/vnd.kafka.json.v2+json' \\\n  -d '{\n    \"records\": [\n      {\"value\": {\"order_id\": 123, \"amount\": 99.99}}\n    ]\n  }'\n"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Create consumer instance\ncurl -X POST http://localhost:8082/consumers/order-group \\\n  -H 'Content-Type: application/vnd.kafka.v2+json' \\\n  -d '{\n    \"name\": \"consumer1\",\n    \"format\": \"json\",\n    \"a"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Cluster info\nrpk cluster info\n\n# Cluster health\nrpk cluster health\n\n# Cluster config\nrpk cluster config get\nrpk cluster config set log_retention_ms 604800000  # 7 days\n"
        },
        {
          "language": "bash",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Create topic\nrpk topic create <topic> -p <partitions> -r <replicas>\n\n# List topics\nrpk topic list\n\n# Describe topic (partitions, replicas, config)\nrpk topic describe <topic>\n\n# Alter config\nrpk topi"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Create ACL (allow user 'alice' to read topic 'orders')\nrpk acl create --allow-principal User:alice \\\n  --operation read --topic orders\n\n# List ACLs\nrpk acl list\n\n# Delete ACL\nrpk acl delete --allow-"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# List groups\nrpk group list\n\n# Describe group (members, lag)\nrpk group describe <group>\n\n# Seek to offset\nrpk group seek <group> --to start\nrpk group seek <group> --to end\nrpk group seek <group> --to"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# High throughput configuration\nproducer = KafkaProducer(\n    bootstrap_servers=['localhost:9092'],\n    acks='1',              # Only leader ack (faster than 'all')\n    compression_type='lz4', # Compr"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# High throughput configuration\nconsumer = KafkaConsumer(\n    'orders',\n    bootstrap_servers=['localhost:9092'],\n    fetch_min_bytes=1024,       # Wait for 1KB before returning\n    fetch_max_wait_ms="
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Increase retention (7 days)\nrpk cluster config set log_retention_ms 604800000\n\n# Increase segment size (1GB)\nrpk cluster config set log_segment_size 1073741824\n\n# Enable compression\nrpk cluster conf"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Cluster metrics\ncurl http://localhost:9644/metrics | grep redpanda\n\n# Important metrics:\n# - redpanda_kafka_request_latency_seconds\n# - redpanda_kafka_request_bytes_total\n# - redpanda_storage_disk_f"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Cluster health\nrpk cluster health\n\n# Topic lag\nrpk group describe <group>\n\n# Disk usage\nrpk cluster info\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "complex",
          "code": "# Works with any Kafka client library\nfrom kafka import KafkaProducer, KafkaConsumer  # kafka-python\nfrom confluent_kafka import Producer, Consumer  # confluent-kafka-python\nfrom aiokafka import AIOKa"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad: Silent failures\nproducer.send('orders', value=order)\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "future = producer.send('orders', value=order)\ntry:\n    record_metadata = future.get(timeout=10)\n    print(f\"Produced to {record_metadata.topic}:{record_metadata.partition}\")\nexcept Exception as e:\n   "
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad: No lag monitoring\nfor message in consumer:\n    process(message.value)\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Monitor lag regularly\nrpk group describe order-processor\n\n# High lag? Add consumers to group (up to partition count)\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad: Auto-commit can lose messages on crashes\nconsumer = KafkaConsumer(enable_auto_commit=True)\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "consumer = KafkaConsumer(enable_auto_commit=False)\nfor message in consumer:\n    process(message.value)\n    consumer.commit()  # Commit only after processing\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad: Limits to 1 consumer\nrpk topic create orders -p 1\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Good: 3 partitions \u2192 up to 3 parallel consumers\nrpk topic create orders -p 3 -r 3\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad: Breaks when brokers change\nproducer = KafkaProducer(bootstrap_servers=['redpanda-1:9092'])\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "complex",
          "code": "import os\nbrokers = os.getenv('REDPANDA_BROKERS', 'localhost:9092')\nproducer = KafkaProducer(bootstrap_servers=brokers.split(','))\n"
        },
        {
          "language": "bash",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Cluster\nrpk cluster info\nrpk cluster health\nrpk cluster config get\n\n# Topics\nrpk topic create <topic> -p 3 -r 3\nrpk topic list\nrpk topic describe <topic>\nrpk topic delete <topic>\n\n# Produce/Consume\n"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Producer (high throughput)\nproducer = KafkaProducer(\n    bootstrap_servers=['localhost:9092'],\n    acks='all',\n    compression_type='lz4',\n    batch_size=32768,\n    linger_ms=10\n)\n\n# Consumer (relia"
        },
        {
          "language": "yaml",
          "line_count": 12,
          "complexity": "simple",
          "code": "services:\n  redpanda:\n    image: redpandadata/redpanda:latest\n    command:\n      - redpanda start\n      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092\n      - --advertise-kafka-addr P"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://charts.redpanda.com"
        },
        {
          "type": "example",
          "url": "http://localhost:8081/subjects/orders-value/versions"
        },
        {
          "type": "example",
          "url": "http://localhost:8081'}"
        },
        {
          "type": "example",
          "url": "http://localhost:8082/topics/orders"
        },
        {
          "type": "example",
          "url": "http://localhost:8082/consumers/order-group"
        },
        {
          "type": "example",
          "url": "http://localhost:8082/consumers/order-group/instances/consumer1/subscription"
        },
        {
          "type": "example",
          "url": "http://localhost:8082/consumers/order-group/instances/consumer1/records"
        },
        {
          "type": "example",
          "url": "http://localhost:9644/metrics"
        }
      ],
      "tools_mentioned": [
        "apache",
        "postgres",
        "kubernetes",
        "docker"
      ],
      "config_snippets": [
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "34 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 95.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "protocols/protocol-debugging.md",
      "category": "protocols",
      "skill_name": "protocol-debugging",
      "frontmatter": {
        "name": "protocols-protocol-debugging",
        "description": "Debug network protocols using Wireshark, tcpdump, curl, and other tools for HTTP, TCP, UDP, and QUIC"
      },
      "metrics": {
        "line_count": 427,
        "code_line_count": 91,
        "code_examples": 11,
        "external_refs": 9,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Capture all traffic on interface\nsudo tcpdump -i eth0\n\n# Capture HTTP traffic (port 80)\nsudo tcpdump -i eth0 'tcp port 80'\n\n# Capture to file\nsudo tcpdump -i eth0 -w capture.pcap\n\n# Read from file\nt"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Specific host\nsudo tcpdump host example.com\n\n# Source or destination\nsudo tcpdump src 192.168.1.100\nsudo tcpdump dst 192.168.1.100\n\n# TCP SYN packets only\nsudo tcpdump 'tcp[tcpflags] & (tcp-syn) != "
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Verbose output\ncurl -v https://api.example.com\n\n# Include response headers\ncurl -i https://api.example.com\n\n# Timing breakdown\ncurl -w \"@curl-format.txt\" -o /dev/null -s https://api.example.com\n\n# c"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Force HTTP/2\ncurl --http2 https://example.com\n\n# Try HTTP/3\ncurl --http3 https://cloudflare-quic.com\n\n# Show protocol used\ncurl -I --http2 -s -o /dev/null -w '%{http_version}\\n' https://example.com\n"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# 1. Check DNS resolution\nnslookup example.com\ndig example.com\n\n# 2. Test basic connectivity\nping example.com\n\n# 3. Check port is open\nnc -zv example.com 80\ntelnet example.com 80\n\n# 4. Capture handsha"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Measure timing\ncurl -w \"@curl-format.txt\" -o /dev/null -s https://api.example.com\n\n# Example output:\n#   time_namelookup:  0.005s   \u2190 DNS lookup\n#   time_connect:  0.045s      \u2190 TCP handshake\n#   ti"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# tcpdump with verbose\nsudo tcpdump -i eth0 'tcp[tcpflags] & (tcp-push) != 0' -vv\n\n# Wireshark filter\ntcp.analysis.retransmission\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Increase TCP buffer sizes\nsudo sysctl -w net.core.rmem_max=26214400\nsudo sysctl -w net.core.wmem_max=26214400\n\n# Use better congestion control\nsudo sysctl -w net.ipv4.tcp_congestion_control=bbr\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# tcpdump HTTP traffic\nsudo tcpdump -i eth0 -A -s 0 'tcp port 80'\n\n# Filter in Wireshark\nhttp.response.code >= 400\n"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# With openssl\nopenssl s_client -connect example.com:443 -debug\n\n# Key exchange details\nopenssl s_client -connect example.com:443 -showcerts\n\n# Check protocol and cipher\nopenssl s_client -connect exam"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Test with curl\ncurl --http3 https://cloudflare-quic.com -I\n\n# Check Alt-Svc header\ncurl -I https://example.com | grep Alt-Svc\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com"
        },
        {
          "type": "example",
          "url": "https://api.example.com"
        },
        {
          "type": "example",
          "url": "https://api.example.com"
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "external",
          "url": "https://cloudflare-quic.com"
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "example",
          "url": "https://api.example.com"
        },
        {
          "type": "external",
          "url": "https://cloudflare-quic.com"
        },
        {
          "type": "example",
          "url": "https://example.com"
        }
      ],
      "tools_mentioned": [
        "ssl",
        "openssl",
        "tls"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        }
      ],
      "priority_score": 94.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "security/security-headers.md",
      "category": "security",
      "skill_name": "security-headers",
      "frontmatter": {
        "name": "security-security-headers",
        "description": "HTTP security headers including CSP, HSTS, X-Frame-Options, CORS, and other protective headers for web application security"
      },
      "metrics": {
        "line_count": 624,
        "code_line_count": 159,
        "code_examples": 19,
        "external_refs": 30,
        "tools_mentioned": 2,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 45,
          "complexity": "complex",
          "code": "from flask import Flask, make_response\n\napp = Flask(__name__)\n\n@app.after_request\ndef add_security_headers(response):\n    \"\"\"Apply security headers to all responses\"\"\"\n\n    # Prevent clickjacking\n    "
        },
        {
          "language": "python",
          "line_count": 75,
          "complexity": "complex",
          "code": "class CSPBuilder:\n    \"\"\"Build Content Security Policy header\"\"\"\n\n    def __init__(self):\n        self.directives = {\n            'default-src': [\"'self'\"],\n            'script-src': [\"'self'\"],\n     "
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "import secrets\nfrom flask import Flask, render_template, g\n\napp = Flask(__name__)\n\n@app.before_request\ndef generate_csp_nonce():\n    \"\"\"Generate unique nonce for each request\"\"\"\n    g.csp_nonce = secr"
        },
        {
          "language": "html",
          "line_count": 17,
          "complexity": "simple",
          "code": "<!-- Template with nonce -->\n<!DOCTYPE html>\n<html>\n<head>\n    <!-- Inline style with nonce -->\n    <style nonce=\"{{ csp_nonce }}\">\n        body { background: white; }\n    </style>\n</head>\n<body>\n    "
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "@app.route('/csp-violation-report', methods=['POST'])\ndef csp_violation():\n    \"\"\"Handle CSP violation reports\"\"\"\n    import json\n\n    report = request.get_json()\n\n    # Log violation\n    logger.warni"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Basic HSTS\nresponse.headers['Strict-Transport-Security'] = 'max-age=31536000'\n\n# HSTS with subdomains\nresponse.headers['Strict-Transport-Security'] = (\n    'max-age=31536000; includeSubDomains'\n)\n\n#"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "from flask import Flask, redirect, request\n\napp = Flask(__name__)\n\n@app.before_request\ndef redirect_to_https():\n    \"\"\"Enforce HTTPS for all requests\"\"\"\n    if not request.is_secure and app.config.get"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Deny all framing (most secure)\nresponse.headers['X-Frame-Options'] = 'DENY'\n\n# Allow framing from same origin\nresponse.headers['X-Frame-Options'] = 'SAMEORIGIN'\n\n# Allow framing from specific domain"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "from flask_cors import CORS\n\n# Allow all origins (development only)\napp = Flask(__name__)\nCORS(app)  # \u26a0\ufe0f Not for production\n\n# Specific origin\nCORS(app, origins=['https://example.com'])\n\n# Multiple o"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "# \u274c VULNERABLE - Reflecting Origin header\n@app.after_request\ndef vulnerable_cors(response):\n    # Never do this - allows any origin\n    origin = request.headers.get('Origin')\n    response.headers['Acc"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Prevent MIME type sniffing\nresponse.headers['X-Content-Type-Options'] = 'nosniff'\n\n# Ensures browsers respect Content-Type header\n# Prevents IE/Chrome from interpreting files as different type\n"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Don't send referrer\nresponse.headers['Referrer-Policy'] = 'no-referrer'\n\n# Send only origin (no path)\nresponse.headers['Referrer-Policy'] = 'origin'\n\n# Send full URL to same origin, origin to cross-"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Disable all features\nresponse.headers['Permissions-Policy'] = (\n    'geolocation=(), microphone=(), camera=(), '\n    'payment=(), usb=(), magnetometer=(), gyroscope=()'\n)\n\n# Allow specific features "
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Enable XSS filter (legacy browsers)\nresponse.headers['X-XSS-Protection'] = '1; mode=block'\n\n# Note: Modern browsers rely on CSP instead\n# Still useful for older browsers\n"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom starlette.middleware.trustedhost import TrustedHostMiddleware\n\napp = FastAPI()\n\n# CORS\napp.add_middleware(\n    CORSM"
        },
        {
          "language": "javascript",
          "line_count": 29,
          "complexity": "medium",
          "code": "const express = require('express');\nconst helmet = require('helmet');\n\nconst app = express();\n\n// Use Helmet with all defaults\napp.use(helmet());\n\n// Custom configuration\napp.use(helmet({\n  contentSec"
        },
        {
          "language": "nginx",
          "line_count": 31,
          "complexity": "medium",
          "code": "# Security headers in Nginx\nserver {\n    listen 443 ssl http2;\n    server_name example.com;\n\n    # HSTS\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\n"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "import requests\n\ndef test_security_headers():\n    \"\"\"Test if security headers are present\"\"\"\n    response = requests.get('https://example.com')\n\n    # Required headers\n    assert 'Strict-Transport-Sec"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Check headers with curl\ncurl -I https://example.com\n\n# Check with httpie\nhttp HEAD https://example.com\n\n# Online tools:\n# - https://securityheaders.com\n# - https://observatory.mozilla.org\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://cdn.example.com"
        },
        {
          "type": "external",
          "url": "https://fonts.gstatic.com"
        },
        {
          "type": "example",
          "url": "https://api.example.com"
        },
        {
          "type": "external",
          "url": "https://cdn.jsdelivr.net'"
        },
        {
          "type": "external",
          "url": "https://www.googletagmanager.com'"
        },
        {
          "type": "external",
          "url": "https://fonts.googleapis.com'"
        },
        {
          "type": "external",
          "url": "https://cdn.jsdelivr.net"
        },
        {
          "type": "external",
          "url": "https://www.googletagmanager.com"
        },
        {
          "type": "external",
          "url": "http://'"
        },
        {
          "type": "external",
          "url": "https://'"
        },
        {
          "type": "external",
          "url": "https://trusted.com'"
        },
        {
          "type": "external",
          "url": "https://trusted.com\""
        },
        {
          "type": "example",
          "url": "https://example.com']"
        },
        {
          "type": "example",
          "url": "https://app1.example.com'"
        },
        {
          "type": "example",
          "url": "https://app2.example.com']"
        },
        {
          "type": "example",
          "url": "https://app.example.com'"
        },
        {
          "type": "example",
          "url": "https://admin.example.com'"
        },
        {
          "type": "example",
          "url": "https://maps.example.com\""
        },
        {
          "type": "example",
          "url": "https://example.com']"
        },
        {
          "type": "example",
          "url": "https://cdn.example.com\""
        },
        {
          "type": "external",
          "url": "https://cdn.jsdelivr.net\"]"
        },
        {
          "type": "example",
          "url": "https://api.example.com\"]"
        },
        {
          "type": "external",
          "url": "https://fonts.gstatic.com\"]"
        },
        {
          "type": "example",
          "url": "https://cdn.example.com\""
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "example",
          "url": "https://example.com'"
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "external",
          "url": "https://securityheaders.com"
        },
        {
          "type": "standard",
          "url": "https://observatory.mozilla.org"
        }
      ],
      "tools_mentioned": [
        "ssl",
        "nginx"
      ],
      "config_snippets": [
        "nginx"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (nginx), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "19 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 94.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "database/duckdb-analytics.md",
      "category": "database",
      "skill_name": "duckdb-analytics",
      "frontmatter": {
        "name": "duckdb-analytics",
        "description": "Skill for duckdb analytics"
      },
      "metrics": {
        "line_count": 894,
        "code_line_count": 302,
        "code_examples": 33,
        "external_refs": 6,
        "tools_mentioned": 4,
        "config_snippets": 13
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Python\npip install duckdb\n# or with uv\nuv add duckdb\n\n# CLI\nbrew install duckdb\n# or\ncurl -OL https://github.com/duckdb/duckdb/releases/latest/download/duckdb_cli-linux-amd64.zip\nunzip duckdb_cli-li"
        },
        {
          "language": "sql",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- No CREATE TABLE needed!\nSELECT city, COUNT(*), AVG(age)\nFROM 'data/users.csv'\nGROUP BY city\nORDER BY COUNT(*) DESC;\n"
        },
        {
          "language": "sql",
          "line_count": 15,
          "complexity": "simple",
          "code": "-- Single file\nSELECT * FROM 'sales.parquet' WHERE year = 2024;\n\n-- Multiple files (glob pattern)\nSELECT product_id, SUM(revenue)\nFROM 'sales/*.parquet'\nGROUP BY product_id;\n\n-- S3/HTTP files (require"
        },
        {
          "language": "sql",
          "line_count": 8,
          "complexity": "simple",
          "code": "-- JSON array\nSELECT * FROM 'data.json';\n\n-- JSON Lines (newline-delimited)\nSELECT event_type, COUNT(*)\nFROM read_json_auto('events.jsonl')\nGROUP BY event_type;\n"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "import duckdb\n\n# In-memory database\ncon = duckdb.connect()\n\n# Persistent database\ncon = duckdb.connect('analytics.db')\n\n# Execute query\nresult = con.execute(\"SELECT 42 AS answer\").fetchall()\nprint(res"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "import pandas as pd\nimport duckdb\n\n# Create DataFrame\ndf = pd.DataFrame({\n    'name': ['Alice', 'Bob', 'Carol'],\n    'age': [30, 25, 28],\n    'city': ['NYC', 'LA', 'SF']\n})\n\n# Query DataFrame as if it"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "import duckdb\nimport pandas as pd\nimport polars as pl\n\n# Pandas\ndf_pandas = pd.read_csv('data.csv')\nresult = duckdb.query(\"SELECT * FROM df_pandas WHERE age > 25\").df()\n\n# Polars\ndf_polars = pl.read_c"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "import duckdb\n\ncon = duckdb.connect('warehouse.db')\n\n# Create table from CSV\ncon.execute(\"\"\"\n    CREATE TABLE users AS\n    SELECT * FROM read_csv_auto('users.csv')\n\"\"\")\n\n# Create table from Parquet\nco"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Export to Parquet\ncon.execute(\"\"\"\n    COPY (SELECT * FROM users WHERE active = true)\n    TO 'active_users.parquet' (FORMAT PARQUET)\n\"\"\")\n\n# Export to CSV\ncon.execute(\"\"\"\n    COPY users TO 'users.csv"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "medium",
          "code": "# Multi-stage ETL\ncon.execute(\"\"\"\n    -- Stage 1: Clean data\n    CREATE TABLE clean_users AS\n    SELECT\n        LOWER(TRIM(email)) AS email,\n        name,\n        age,\n        created_at::DATE AS sign"
        },
        {
          "language": "sql",
          "line_count": 23,
          "complexity": "medium",
          "code": "SELECT\n    user_id,\n    order_date,\n    amount,\n    -- Running total\n    SUM(amount) OVER (\n        PARTITION BY user_id\n        ORDER BY order_date\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURREN"
        },
        {
          "language": "sql",
          "line_count": 29,
          "complexity": "medium",
          "code": "WITH monthly_sales AS (\n    SELECT\n        DATE_TRUNC('month', order_date) AS month,\n        product_id,\n        SUM(quantity) AS units_sold,\n        SUM(revenue) AS total_revenue\n    FROM sales\n    G"
        },
        {
          "language": "sql",
          "line_count": 13,
          "complexity": "simple",
          "code": "-- Pivot\nPIVOT (\n    SELECT category, year, revenue\n    FROM sales\n) ON year\nUSING SUM(revenue);\n\n-- Unpivot\nUNPIVOT (\n    SELECT * FROM quarterly_sales\n) ON q1, q2, q3, q4\nINTO NAME quarter VALUE rev"
        },
        {
          "language": "sql",
          "line_count": 20,
          "complexity": "simple",
          "code": "-- HTTP/S3 file access\nINSTALL httpfs;\nLOAD httpfs;\n\n-- PostgreSQL scanner\nINSTALL postgres_scanner;\nLOAD postgres_scanner;\n\n-- Spatial/GIS\nINSTALL spatial;\nLOAD spatial;\n\n-- Full-text search\nINSTALL "
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "import duckdb\n\ncon = duckdb.connect()\n\n# Read from PostgreSQL\ncon.execute(\"INSTALL postgres_scanner\")\ncon.execute(\"LOAD postgres_scanner\")\n\nresult = con.execute(\"\"\"\n    SELECT * FROM postgres_scan(\n  "
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "import duckdb\n\ncon = duckdb.connect('analytics.db')\n\n# Create table\ncon.execute(\"\"\"\n    CREATE TABLE events (\n        event_id INTEGER,\n        user_id INTEGER,\n        event_type VARCHAR,\n        tim"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Use EXPLAIN to analyze query plan\nplan = con.execute(\"EXPLAIN SELECT * FROM events WHERE user_id = 123\").fetchall()\nprint(plan)\n\n# Use PRAGMA for optimization settings\ncon.execute(\"PRAGMA threads=8\""
        },
        {
          "language": "sql",
          "line_count": 8,
          "complexity": "simple",
          "code": "-- Export partitioned by date\nCOPY (SELECT * FROM events)\nTO 'events_partitioned'\n(FORMAT PARQUET, PARTITION_BY (DATE_TRUNC('day', timestamp)));\n\n-- Query specific partitions\nSELECT * FROM 'events_par"
        },
        {
          "language": "html",
          "line_count": 31,
          "complexity": "complex",
          "code": "<!DOCTYPE html>\n<html>\n<head>\n    <script src=\"https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm@latest/dist/duckdb-mvp.wasm.js\"></script>\n</head>\n<body>\n    <script type=\"module\">\n        import * as "
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "import duckdb\n\ncon = duckdb.connect()\ncon.execute(\"INSTALL fts\")\ncon.execute(\"LOAD fts\")\n\n# Create FTS index\ncon.execute(\"\"\"\n    CREATE TABLE documents (\n        id INTEGER,\n        title VARCHAR,\n   "
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Start interactive shell\nduckdb\n\n# Open database file\nduckdb analytics.db\n\n# Execute query and exit\nduckdb -c \"SELECT * FROM 'data.csv'\" analytics.db\n\n# Run SQL file\nduckdb analytics.db < script.sql\n"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "import duckdb\n\n# Connect\ncon = duckdb.connect()  # In-memory\ncon = duckdb.connect('file.db')  # Persistent\n\n# Execute\ncon.execute(\"SELECT 42\")\nresult = con.execute(\"SELECT * FROM table\").fetchall()\ndf"
        },
        {
          "language": "sql",
          "line_count": 26,
          "complexity": "medium",
          "code": "-- Date/Time\nDATE_TRUNC('month', timestamp_col)\nEXTRACT(year FROM date_col)\nAGE(end_date, start_date)\n\n-- String\nCONCAT(str1, str2)\nLOWER(str), UPPER(str)\nREGEXP_MATCHES(str, pattern)\n\n-- Aggregate\nCO"
        },
        {
          "language": "sql",
          "line_count": 17,
          "complexity": "simple",
          "code": "-- CSV\nCREATE TABLE t AS SELECT * FROM read_csv_auto('file.csv');\nCOPY table TO 'output.csv' (HEADER, DELIMITER ',');\n\n-- Parquet\nCREATE TABLE t AS SELECT * FROM 'file.parquet';\nCOPY table TO 'output."
        },
        {
          "language": "sql",
          "line_count": 13,
          "complexity": "simple",
          "code": "-- Threads\nPRAGMA threads=8;\n\n-- Memory limit\nPRAGMA memory_limit='4GB';\n\n-- Progress bar\nPRAGMA enable_progress_bar;\n\n-- Show settings\nPRAGMA database_size;\nPRAGMA table_info('table_name');\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# WRONG: High-frequency transactional updates\nfor user_id in range(10000):\n    con.execute(f\"UPDATE users SET last_active = NOW() WHERE id = {user_id}\")\n\n# RIGHT: Use PostgreSQL/MySQL for OLTP, or bat"
        },
        {
          "language": "sql",
          "line_count": 7,
          "complexity": "simple",
          "code": "-- WRONG: Import before querying\nCREATE TABLE data AS SELECT * FROM 'large_file.parquet';\nSELECT AVG(value) FROM data;\n\n-- RIGHT: Query directly\nSELECT AVG(value) FROM 'large_file.parquet';\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Run slow query without investigation\nresult = con.execute(\"SELECT * FROM huge_table WHERE col = 'value'\").fetchall()\n\n# RIGHT: Analyze and optimize\nplan = con.execute(\"EXPLAIN SELECT * FROM h"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# WRONG: Multiple connections to same file without coordination\ncon1 = duckdb.connect('db.db')\ncon2 = duckdb.connect('db.db')\ncon1.execute(\"INSERT INTO table VALUES (1)\")\ncon2.execute(\"INSERT INTO tab"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: Leave connections open\ncon = duckdb.connect('file.db')\ncon.execute(\"SELECT * FROM table\")\n# ... never close\n\n# RIGHT: Use context manager\nwith duckdb.connect('file.db') as con:\n    result = c"
        },
        {
          "language": "sql",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- WRONG: Fetch unnecessary columns\nSELECT * FROM 'huge_file.parquet' WHERE id = 123;\n\n-- RIGHT: Select only needed columns (columnar optimization)\nSELECT id, name, email FROM 'huge_file.parquet' WHER"
        },
        {
          "language": "python",
          "line_count": 71,
          "complexity": "complex",
          "code": "import duckdb\nimport pandas as pd\n\n# Connect to persistent database\ncon = duckdb.connect('sales_analytics.db')\n\n# Load raw data from multiple sources\ncon.execute(\"\"\"\n    CREATE OR REPLACE TABLE raw_sa"
        },
        {
          "language": "python",
          "line_count": 53,
          "complexity": "complex",
          "code": "import duckdb\n\ncon = duckdb.connect()\n\n# Query logs directly (JSON Lines format)\ncon.execute(\"\"\"\n    CREATE VIEW parsed_logs AS\n    SELECT\n        timestamp::TIMESTAMP AS ts,\n        level,\n        me"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/duckdb/duckdb/releases/latest/download/duckdb_cli-linux-amd64.zip"
        },
        {
          "type": "external",
          "url": "https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm@latest/dist/duckdb-mvp.wasm.js\"></script>"
        },
        {
          "type": "external",
          "url": "https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm@latest/dist/duckdb-mvp.wasm.js'"
        },
        {
          "type": "external",
          "url": "https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm@latest/dist/duckdb-mvp.wasm'"
        },
        {
          "type": "example",
          "url": "https://example.com/data.csv'"
        },
        {
          "type": "example",
          "url": "https://example.com/data.csv'"
        }
      ],
      "tools_mentioned": [
        "apache",
        "postgres",
        "mysql",
        "postgresql"
      ],
      "config_snippets": [
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "33 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "15 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 92.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "testing/performance-testing.md",
      "category": "testing",
      "skill_name": "performance-testing",
      "frontmatter": {
        "name": "testing-performance-testing",
        "description": "Measure system performance under load (response time, throughput)"
      },
      "metrics": {
        "line_count": 584,
        "code_line_count": 73,
        "code_examples": 10,
        "external_refs": 12,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "javascript",
          "line_count": 30,
          "complexity": "complex",
          "code": "// load-test.js\nimport http from 'k6/http';\nimport { check, sleep } from 'k6';\n\n// Test configuration\nexport const options = {\n  stages: [\n    { duration: '2m', target: 100 },  // Ramp up to 100 users"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Run test\nk6 run load-test.js\n\n# Output:\n# \u2713 status is 200\n# \u2713 response time < 500ms\n#\n# http_req_duration..........: avg=234ms min=102ms med=215ms max=876ms p(95)=456ms\n# http_req_failed............"
        },
        {
          "language": "javascript",
          "line_count": 51,
          "complexity": "complex",
          "code": "// api-load-test.js\nimport http from 'k6/http';\nimport { check } from 'k6';\n\nexport const options = {\n  stages: [\n    { duration: '1m', target: 50 },\n    { duration: '3m', target: 50 },\n    { duration"
        },
        {
          "language": "javascript",
          "line_count": 33,
          "complexity": "complex",
          "code": "// stress-test.js\nimport http from 'k6/http';\nimport { check } from 'k6';\n\nexport const options = {\n  stages: [\n    { duration: '2m', target: 100 },   // Normal load\n    { duration: '5m', target: 100 "
        },
        {
          "language": "javascript",
          "line_count": 21,
          "complexity": "medium",
          "code": "// spike-test.js\nexport const options = {\n  stages: [\n    { duration: '10s', target: 100 },   // Normal traffic\n    { duration: '1m', target: 100 },\n    { duration: '10s', target: 1400 },  // SPIKE! 1"
        },
        {
          "language": "javascript",
          "line_count": 19,
          "complexity": "simple",
          "code": "// soak-test.js\nexport const options = {\n  stages: [\n    { duration: '5m', target: 100 },   // Ramp up\n    { duration: '24h', target: 100 },  // Sustained load for 24 hours\n    { duration: '5m', targe"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "# locustfile.py\nfrom locust import HttpUser, task, between\n\nclass WebsiteUser(HttpUser):\n    wait_time = between(1, 3)  # Wait 1-3s between requests\n\n    def on_start(self):\n        \"\"\"Run once per us"
        },
        {
          "language": "bash",
          "line_count": 26,
          "complexity": "medium",
          "code": "# Simple load test: 1000 requests, 10 concurrent\nab -n 1000 -c 10 https://api.example.com/\n\n# With POST data\nab -n 1000 -c 10 -p data.json -T application/json https://api.example.com/api/users\n\n# With"
        },
        {
          "language": "xml",
          "line_count": 26,
          "complexity": "medium",
          "code": "<!-- test-plan.jmx (simplified) -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jmeterTestPlan version=\"1.2\">\n  <hashTree>\n    <TestPlan>\n      <stringProp name=\"TestPlan.comments\">API Load Test</stringPr"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Run JMeter test (command line)\njmeter -n -t test-plan.jmx -l results.jtl -e -o report/\n\n# Generate HTML report\njmeter -g results.jtl -o report/\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/auth/login'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/api/users'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/api/users'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/heavy-endpoint'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/'"
        },
        {
          "type": "example",
          "url": "https://api.example.com"
        },
        {
          "type": "example",
          "url": "http://localhost:8089"
        },
        {
          "type": "example",
          "url": "https://api.example.com/"
        },
        {
          "type": "example",
          "url": "https://api.example.com/api/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/protected"
        }
      ],
      "tools_mentioned": [
        "apache"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 92.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "cryptography/certificate-management.md",
      "category": "cryptography",
      "skill_name": "certificate-management",
      "frontmatter": {
        "name": "cryptography-certificate-management",
        "description": "Certificate lifecycle management including rotation, renewal, monitoring, automation with Let's Encrypt and ACME"
      },
      "metrics": {
        "line_count": 574,
        "code_line_count": 200,
        "code_examples": 26,
        "external_refs": 4,
        "tools_mentioned": 7,
        "config_snippets": 8
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Ubuntu/Debian\nsudo apt install certbot python3-certbot-nginx\n\n# macOS\nbrew install certbot\n"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Obtain certificate\nsudo certbot certonly --webroot \\\n    -w /var/www/html \\\n    -d example.com \\\n    -d www.example.com\n\n# Certificates stored in:\n# /etc/letsencrypt/live/example.com/fullchain.pem\n#"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Obtain and install certificate\nsudo certbot --nginx -d example.com -d www.example.com\n\n# Certbot automatically:\n# - Validates domain\n# - Obtains certificate\n# - Updates nginx config\n# - Reloads ngin"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# For wildcard certificates\nsudo certbot certonly --manual \\\n    --preferred-challenges dns \\\n    -d '*.example.com' \\\n    -d example.com\n\n# Add TXT record to DNS:\n# _acme-challenge.example.com \u2192 [pro"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Test renewal\nsudo certbot renew --dry-run\n\n# Setup cron (or systemd timer)\n0 0,12 * * * certbot renew --quiet --post-hook \"systemctl reload nginx\"\n"
        },
        {
          "language": "bash",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Install\ncurl https://get.acme.sh | sh\n\n# Issue certificate (HTTP validation)\nacme.sh --issue -d example.com -w /var/www/html\n\n# Issue wildcard (DNS validation with Cloudflare)\nexport CF_Token=\"your-"
        },
        {
          "language": "ini",
          "line_count": 7,
          "complexity": "simple",
          "code": "[Unit]\nDescription=Certbot Renewal\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/certbot renew --quiet --deploy-hook \"systemctl reload nginx\"\n"
        },
        {
          "language": "ini",
          "line_count": 11,
          "complexity": "simple",
          "code": "[Unit]\nDescription=Certbot Renewal Timer\n\n[Timer]\nOnCalendar=daily\nRandomizedDelaySec=1h\nPersistent=true\n\n[Install]\nWantedBy=timers.target\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "sudo systemctl enable --now certbot-renew.timer\nsudo systemctl list-timers certbot-renew.timer\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml\n"
        },
        {
          "language": "yaml",
          "line_count": 15,
          "complexity": "simple",
          "code": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: admin@example.com\n    privateK"
        },
        {
          "language": "yaml",
          "line_count": 14,
          "complexity": "simple",
          "code": "apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: example-com-tls\n  namespace: default\nspec:\n  secretName: example-com-tls\n  issuerRef:\n    name: letsencrypt-prod\n    kind: ClusterIss"
        },
        {
          "language": "yaml",
          "line_count": 23,
          "complexity": "medium",
          "code": "apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: example\n  annotations:\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  tls:\n  - hosts:\n    - example.com\n    secretName:"
        },
        {
          "language": "python",
          "line_count": 76,
          "complexity": "complex",
          "code": "#!/usr/bin/env python3\nimport subprocess\nimport ssl\nimport socket\nfrom datetime import datetime, timedelta\nimport smtplib\nfrom email.message import EmailMessage\n\ndef check_certificate_expiry(hostname,"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Check expiration date\necho | openssl s_client -connect example.com:443 2>/dev/null | \\\n    openssl x509 -noout -dates\n\n# Days until expiry\necho | openssl s_client -connect example.com:443 2>/dev/nul"
        },
        {
          "language": "yaml",
          "line_count": 24,
          "complexity": "medium",
          "code": "# ssl_exporter\napiVersion: v1\nkind: Service\nmetadata:\n  name: ssl-exporter\nspec:\n  ports:\n  - port: 9219\n  selector:\n    app: ssl-exporter\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ss"
        },
        {
          "language": "yaml",
          "line_count": 11,
          "complexity": "simple",
          "code": "groups:\n- name: certificates\n  rules:\n  - alert: CertificateExpiringSoon\n    expr: ssl_cert_not_after - time() < 86400 * 30\n    labels:\n      severity: warning\n    annotations:\n      summary: \"Certifi"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "import requests\nimport time\n\ndef check_ssl_labs(domain):\n    \"\"\"Check SSL configuration with SSL Labs\"\"\"\n    api_url = \"https://api.ssllabs.com/api/v3/analyze\"\n\n    # Start scan\n    requests.get(api_u"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# 1. Obtain new certificate\ncertbot certonly --webroot -w /var/www/html -d example.com\n\n# 2. Test configuration\nnginx -t\n\n# 3. Reload nginx (no downtime)\nsystemctl reload nginx\n\n# 4. Verify\necho | ope"
        },
        {
          "language": "yaml",
          "line_count": 35,
          "complexity": "medium",
          "code": "---\n- name: Rotate certificates\n  hosts: webservers\n  tasks:\n    - name: Copy new certificate\n      copy:\n        src: \"{{ item }}\"\n        dest: \"/etc/ssl/certs/\"\n        mode: 0644\n      loop:\n     "
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u2705 Good: Renew 30 days before expiry\nif [ $days_remaining -lt 30 ]; then\n    renew_certificate\nfi\n\n# \u274c Bad: Wait until last minute\nif [ $days_remaining -lt 3 ]; then\n    renew_certificate\nfi\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u2705 Good: Multiple monitoring approaches\n- Prometheus metrics\n- Periodic checks\n- Alert 30 days before expiry\n\n# \u274c Bad: No monitoring\n# (certificate expires, site goes down)\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u2705 Good: Backup before rotation\ncp /etc/ssl/certs/example.com.crt /backup/\ncertbot renew\n\n# \u274c Bad: No backup\ncertbot renew\n# (if renewal fails, no fallback)\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "certbot --staging -d example.com\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "certbot certificates\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "certbot renew --dry-run --debug\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://get.acme.sh"
        },
        {
          "type": "github",
          "url": "https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml"
        },
        {
          "type": "external",
          "url": "https://acme-v02.api.letsencrypt.org/directory"
        },
        {
          "type": "external",
          "url": "https://api.ssllabs.com/api/v3/analyze\""
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "ansible",
        "tls",
        "nginx",
        "prometheus",
        "ssl",
        "openssl"
      ],
      "config_snippets": [
        "ini",
        "ini",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml, ini), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "26 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 91.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "cryptography/ssl-legacy.md",
      "category": "cryptography",
      "skill_name": "ssl-legacy",
      "frontmatter": {
        "name": "cryptography-ssl-legacy",
        "description": "Legacy SSL/TLS protocols (SSL 2.0/3.0, TLS 1.0/1.1), vulnerabilities, deprecation, and migration strategies"
      },
      "metrics": {
        "line_count": 460,
        "code_line_count": 101,
        "code_examples": 14,
        "external_refs": 4,
        "tools_mentioned": 5,
        "config_snippets": 7
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Test if SSL 2.0 is enabled (should fail)\nopenssl s_client -connect example.com:443 -ssl2\n"
        },
        {
          "language": "nginx",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Nginx\nssl_protocols TLSv1.2 TLSv1.3;\n\n# Apache\nSSLProtocol -all +TLSv1.2 +TLSv1.3\n"
        },
        {
          "language": "nginx",
          "line_count": 4,
          "complexity": "simple",
          "code": "# \u274c Bad: Includes TLS 1.0\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_ciphers ALL:!aNULL:!eNULL;\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Check server configuration\nopenssl s_client -connect example.com:443 -tls1\nopenssl s_client -connect example.com:443 -tls1_1\n\n# Analyze logs for client versions\nawk '{print $9}' access.log | sort | "
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "import ssl\nimport socket\nfrom collections import Counter\n\ndef check_tls_version(host, port=443):\n    versions = []\n    for version in [ssl.TLSVersion.TLSv1, ssl.TLSVersion.TLSv1_1,\n                   "
        },
        {
          "language": "nginx",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Week 1-2: Log warnings\nmap $ssl_protocol $is_legacy {\n    \"TLSv1\"   \"1\";\n    \"TLSv1.1\" \"1\";\n    default   \"0\";\n}\n\nserver {\n    if ($is_legacy = \"1\") {\n        add_header X-TLS-Deprecated \"true\" alwa"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Count requests by TLS version\nawk '{print $ssl_protocol}' access.log | sort | uniq -c\n\n# Alert on legacy usage\nif grep -q \"TLSv1.0\\|TLSv1.1\" access.log; then\n    echo \"ALERT: Legacy TLS detected\"\nfi"
        },
        {
          "language": "nginx",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Modern endpoint\nserver {\n    listen 443 ssl;\n    server_name api.example.com;\n    ssl_protocols TLSv1.2 TLSv1.3;\n}\n\n# Legacy endpoint (isolated)\nserver {\n    listen 8443 ssl;\n    server_name legacy."
        },
        {
          "language": "nginx",
          "line_count": 14,
          "complexity": "simple",
          "code": "map $http_user_agent $allow_legacy {\n    \"~*MSIE [6-9]\" \"1\";\n    \"~*Windows NT 5\" \"1\";\n    default \"0\";\n}\n\nserver {\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n\n    if ($allow_legacy != \"1\") {\n        ss"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "#!/bin/bash\nHOST=$1\nPORT=${2:-443}\n\nfor version in ssl2 ssl3 tls1 tls1_1 tls1_2 tls1_3; do\n    echo -n \"Testing $version: \"\n    if openssl s_client -connect $HOST:$PORT -$version </dev/null 2>/dev/nul"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Using testssl.sh\n./testssl.sh --protocols example.com\n\n# Using nmap\nnmap --script ssl-enum-ciphers -p 443 example.com\n\n# Using sslscan\nsslscan example.com:443\n"
        },
        {
          "language": "nginx",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u2705 Good: TLS 1.2 minimum\nssl_protocols TLSv1.2 TLSv1.3;\n\n# \u26a0\ufe0f Acceptable: TLS 1.2 only (legacy support)\nssl_protocols TLSv1.2;\n\n# \u274c Bad: Legacy protocols enabled\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Monthly check for legacy protocol usage\n0 0 1 * * /usr/local/bin/check-tls-versions.sh | mail -s \"TLS Audit\" security@example.com\n"
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "# legacy-clients.yaml\nallowed_legacy_clients:\n  - ip: 192.168.1.100\n    reason: \"Legacy medical device - upgrade planned Q3 2025\"\n    approved_by: \"security-team\"\n    expires: \"2025-09-30\"\n"
        }
      ],
      "external_refs": [
        {
          "type": "rfc",
          "reference": "RFC 6176"
        },
        {
          "type": "rfc",
          "reference": "RFC 7568"
        },
        {
          "type": "rfc",
          "reference": "RFC 2246"
        },
        {
          "type": "rfc",
          "reference": "RFC 4346"
        }
      ],
      "tools_mentioned": [
        "tls",
        "nginx",
        "ssl",
        "openssl",
        "apache"
      ],
      "config_snippets": [
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml, nginx), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "2 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 91.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "testing/integration-testing.md",
      "category": "testing",
      "skill_name": "integration-testing",
      "frontmatter": {
        "name": "testing-integration-testing",
        "description": "Test interactions between multiple components or services"
      },
      "metrics": {
        "line_count": 711,
        "code_line_count": 131,
        "code_examples": 16,
        "external_refs": 4,
        "tools_mentioned": 7,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# Python (pytest)\nimport pytest\nfrom sqlalchemy import create_engine\nfrom myapp.models import Base\n\n@pytest.fixture(scope=\"function\")\ndef db_session():\n    engine = create_engine(\"sqlite:///:memory:\")"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# Python (testcontainers)\nfrom testcontainers.postgres import PostgresContainer\nimport pytest\n\n@pytest.fixture(scope=\"module\")\ndef postgres_container():\n    with PostgresContainer(\"postgres:16\") as po"
        },
        {
          "language": "typescript",
          "line_count": 36,
          "complexity": "complex",
          "code": "// TypeScript (testcontainers)\nimport { PostgreSqlContainer } from '@testcontainers/postgresql';\nimport { DataSource } from 'typeorm';\n\ndescribe('UserRepository', () => {\n  let container: PostgreSqlCo"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Python (pytest)\n@pytest.fixture\ndef db_session():\n    connection = engine.connect()\n    transaction = connection.begin()\n    Session = sessionmaker(bind=connection)\n    session = Session()\n\n    yiel"
        },
        {
          "language": "go",
          "line_count": 15,
          "complexity": "simple",
          "code": "// Go\nfunc TestUserRepository(t *testing.T) {\n    db := setupTestDB(t)\n    tx := db.Begin()\n    defer tx.Rollback()\n\n    repo := NewUserRepository(tx)\n    user, err := repo.Create(\"Alice\", \"alice@exam"
        },
        {
          "language": "python",
          "line_count": 45,
          "complexity": "complex",
          "code": "# Python (FastAPI with TestClient)\nfrom fastapi.testclient import TestClient\nfrom myapp.main import app\n\nclient = TestClient(app)\n\ndef test_create_user_endpoint():\n    # Arrange\n    payload = {\n      "
        },
        {
          "language": "typescript",
          "line_count": 39,
          "complexity": "complex",
          "code": "// TypeScript (Express + Supertest)\nimport request from 'supertest';\nimport { app } from './app';\nimport { setupTestDB, teardownTestDB } from './test-helpers';\n\ndescribe('User API', () => {\n  beforeAl"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "# Python (Alembic)\nimport pytest\nfrom alembic import command\nfrom alembic.config import Config\n\ndef test_migrations_run_successfully():\n    config = Config(\"alembic.ini\")\n    config.set_main_option(\"s"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "# Python (fakeredis)\nimport pytest\nfrom fakeredis import FakeRedis\n\n@pytest.fixture\ndef redis_client():\n    return FakeRedis()\n\ndef test_cache_set_get(redis_client):\n    cache = CacheService(redis_cli"
        },
        {
          "language": "typescript",
          "line_count": 19,
          "complexity": "complex",
          "code": "// TypeScript (ioredis-mock)\nimport RedisMock from 'ioredis-mock';\n\ndescribe('CacheService', () => {\n  let redis: RedisMock;\n  let cache: CacheService;\n\n  beforeEach(() => {\n    redis = new RedisMock("
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "# Python (testing with in-memory queue)\nimport pytest\nfrom queue import Queue\n\nclass InMemoryQueue:\n    def __init__(self):\n        self.queue = Queue()\n\n    def publish(self, message):\n        self.q"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "# Python (using requests-mock)\nimport pytest\nimport requests_mock\n\ndef test_weather_api_integration():\n    with requests_mock.Mocker() as m:\n        # Mock external API\n        m.get(\n            \"htt"
        },
        {
          "language": "typescript",
          "line_count": 35,
          "complexity": "complex",
          "code": "// TypeScript (MSW - Mock Service Worker)\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\n\nconst server = setupServer(\n  rest.get('https://api.weather.com/forecast', (req, res, ctx"
        },
        {
          "language": "python",
          "line_count": 48,
          "complexity": "complex",
          "code": "# conftest.py\nimport pytest\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom testcontainers.postgres import PostgresContainer\n\n@pytest.fixture(scope=\"session\")\ndef pos"
        },
        {
          "language": "go",
          "line_count": 63,
          "complexity": "complex",
          "code": "// integration_test.go\npackage repository_test\n\nimport (\n    \"context\"\n    \"testing\"\n\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/require\"\n    \"github.com/testcontainers/"
        },
        {
          "language": "typescript",
          "line_count": 52,
          "complexity": "complex",
          "code": "// test-setup.ts\nimport { DataSource } from 'typeorm';\nimport { PostgreSqlContainer } from '@testcontainers/postgresql';\n\nexport async function setupTestDB(): Promise<DataSource> {\n  const container ="
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://api.weather.com/forecast\""
        },
        {
          "type": "external",
          "url": "https://api.weather.com/forecast\""
        },
        {
          "type": "external",
          "url": "https://api.weather.com/forecast'"
        },
        {
          "type": "external",
          "url": "https://api.weather.com/forecast'"
        }
      ],
      "tools_mentioned": [
        "postgresql",
        "pytest",
        "postgres",
        "ssl",
        "redis",
        "vite",
        "docker"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "15 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 91.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "database/apache-iceberg.md",
      "category": "database",
      "skill_name": "apache-iceberg",
      "frontmatter": {
        "name": "apache-iceberg",
        "description": "Building data lakes with ACID transaction support and schema evolution"
      },
      "metrics": {
        "line_count": 623,
        "code_line_count": 116,
        "code_examples": 16,
        "external_refs": 5,
        "tools_mentioned": 4,
        "config_snippets": 5
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "# PyIceberg with different catalogs\nfrom pyiceberg.catalog import load_catalog\n\n# Hive Metastore\ncatalog = load_catalog(\"hive\",\n    uri=\"thrift://localhost:9083\",\n    warehouse=\"s3://bucket/warehouse\""
        },
        {
          "language": "sql",
          "line_count": 16,
          "complexity": "simple",
          "code": "-- Spark SQL: Create Iceberg table with partitioning\nCREATE TABLE catalog.db.events (\n    event_id BIGINT,\n    user_id STRING,\n    event_type STRING,\n    event_time TIMESTAMP,\n    properties MAP<STRIN"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "from pyiceberg.catalog import load_catalog\nfrom pyiceberg.schema import Schema\nfrom pyiceberg.types import (\n    NestedField, LongType, StringType, TimestampType, MapType\n)\nfrom pyiceberg.partitioning"
        },
        {
          "language": "sql",
          "line_count": 16,
          "complexity": "simple",
          "code": "-- Add column (backward compatible)\nALTER TABLE catalog.db.events\nADD COLUMN session_id STRING;\n\n-- Drop column (forward compatible)\nALTER TABLE catalog.db.events\nDROP COLUMN properties;\n\n-- Rename co"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "from pyiceberg.catalog import load_catalog\nfrom pyiceberg.types import StringType, LongType\n\ncatalog = load_catalog(\"default\")\ntable = catalog.load_table(\"db.events\")\n\n# Add column\nwith table.update_s"
        },
        {
          "language": "sql",
          "line_count": 16,
          "complexity": "simple",
          "code": "-- Initial partitioning by day\nCREATE TABLE catalog.db.logs (\n    log_time TIMESTAMP,\n    message STRING\n)\nUSING iceberg\nPARTITIONED BY (days(log_time));\n\n-- Later: Add hourly partitioning for recent "
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "from pyiceberg.transforms import (\n    YearTransform, MonthTransform, DayTransform, HourTransform,\n    BucketTransform, TruncateTransform\n)\n\n# Date/time transforms\nYearTransform()   # Extract year\nMon"
        },
        {
          "language": "sql",
          "line_count": 26,
          "complexity": "medium",
          "code": "-- Query as of specific timestamp\nSELECT * FROM catalog.db.events\nFOR SYSTEM_TIME AS OF TIMESTAMP '2025-10-01 00:00:00';\n\n-- Query specific snapshot by ID\nSELECT * FROM catalog.db.events\nFOR SYSTEM_VE"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "from datetime import datetime\nfrom pyiceberg.catalog import load_catalog\n\ncatalog = load_catalog(\"default\")\ntable = catalog.load_table(\"db.events\")\n\n# Read current snapshot\ndf = table.scan().to_arrow("
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "from pyiceberg.catalog import load_catalog\nfrom pyiceberg.expressions import And, EqualTo, GreaterThanOrEqual\n\ncatalog = load_catalog(\"default\")\ntable = catalog.load_table(\"db.events\")\n\n# Get current "
        },
        {
          "language": "scala",
          "line_count": 13,
          "complexity": "simple",
          "code": "// Read changes between two snapshots\nval incrementalDF = spark.read\n  .format(\"iceberg\")\n  .option(\"start-snapshot-id\", \"1234567890\")\n  .option(\"end-snapshot-id\", \"1234567891\")\n  .load(\"catalog.db.ev"
        },
        {
          "language": "scala",
          "line_count": 45,
          "complexity": "complex",
          "code": "import org.apache.spark.sql.SparkSession\nimport org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions\n\nval spark = SparkSession.builder()\n  .appName(\"Iceberg ACID\")\n  .config(\"spark.sql.ex"
        },
        {
          "language": "sql",
          "line_count": 28,
          "complexity": "medium",
          "code": "-- Expire old snapshots (free storage)\nCALL catalog.system.expire_snapshots(\n  table => 'db.events',\n  older_than => TIMESTAMP '2025-09-01 00:00:00',\n  retain_last => 10\n);\n\n-- Remove orphan files (un"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "from pyiceberg.catalog import load_catalog\nfrom datetime import datetime, timedelta\n\ncatalog = load_catalog(\"default\")\ntable = catalog.load_table(\"db.events\")\n\n# Expire snapshots older than 30 days\nex"
        },
        {
          "language": "java",
          "line_count": 41,
          "complexity": "complex",
          "code": "import org.apache.flink.table.api.TableEnvironment;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecut"
        },
        {
          "language": "properties",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Write performance\nwrite.format.default=parquet\nwrite.parquet.compression-codec=zstd\nwrite.target-file-size-bytes=536870912  # 512 MB\n\n# Metadata optimization\nwrite.metadata.compression-codec=gzip\nwr"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://catalog-api.example.com\""
        },
        {
          "type": "external",
          "url": "https://catalog-host/path"
        },
        {
          "type": "example",
          "url": "https://api.example.com"
        },
        {
          "type": "external",
          "url": "https://nessie-host/api/v1"
        },
        {
          "type": "example",
          "url": "https://nessie.example.com/api/v1"
        }
      ],
      "tools_mentioned": [
        "apache",
        "postgres",
        "ssl",
        "postgresql"
      ],
      "config_snippets": [
        "sql",
        "sql",
        "sql",
        "sql",
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 90.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "observability/distributed-tracing.md",
      "category": "observability",
      "skill_name": "distributed-tracing",
      "frontmatter": {
        "name": "observability-distributed-tracing",
        "description": "Debugging latency issues in microservices"
      },
      "metrics": {
        "line_count": 607,
        "code_line_count": 98,
        "code_examples": 14,
        "external_refs": 5,
        "tools_mentioned": 4,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 64,
          "complexity": "complex",
          "code": "from opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom opentelemetry.exporter.otlp.proto.grpc.trace_expor"
        },
        {
          "language": "go",
          "line_count": 107,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"time\"\n\n    \"go.opentelemetry.io/otel\"\n    \"go.opentelemetry.io/otel/attribute\"\n    \"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\""
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "from opentelemetry import trace\nfrom opentelemetry.propagate import inject, extract\nimport requests\n\ntracer = trace.get_tracer(__name__)\n\n# Service A: Outgoing request\ndef call_service_b():\n    with t"
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "from opentelemetry import trace\nfrom opentelemetry.trace import Status, StatusCode\n\ntracer = trace.get_tracer(__name__)\n\n@app.post(\"/api/orders\")\nasync def create_order(order: Order):\n    with tracer."
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "from opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.sampling import (\n    TraceIdRatioBased,\n    ParentBased,\n    ALWAYS_ON,\n    ALWAYS_OFF\n)\n\n# 1. Probabilistic sampling ("
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "from opentelemetry.instrumentation.sqlalchemy import SQLAlchemyInstrumentor\nfrom sqlalchemy import create_engine\n\n# Auto-instrument SQLAlchemy\nengine = create_engine(\"postgresql://localhost/mydb\")\nSQL"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Python\npip install opentelemetry-api opentelemetry-sdk\npip install opentelemetry-exporter-otlp\npip install opentelemetry-instrumentation-fastapi\npip install opentelemetry-instrumentation-requests\npi"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "# HTTP\nspan.set_attribute(\"http.method\", \"GET\")\nspan.set_attribute(\"http.url\", \"https://api.example.com/users\")\nspan.set_attribute(\"http.status_code\", 200)\nspan.set_attribute(\"http.route\", \"/users/:id"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# WRONG: Span for every function call\nwith tracer.start_as_current_span(\"add_numbers\"):  # Too granular!\n    result = a + b\n\n# CORRECT: Span for meaningful operations\nwith tracer.start_as_current_span"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: No trace context in HTTP call\nrequests.get(\"http://service-b/api/data\")  # Breaks trace!\n\n# CORRECT: Inject trace context\nheaders = {}\ninject(headers)\nrequests.get(\"http://service-b/api/data\""
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: Span never closed\nspan = tracer.start_span(\"operation\")\ndo_work()\n# span.end() missing!\n\n# CORRECT: Use context manager\nwith tracer.start_as_current_span(\"operation\"):\n    do_work()\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: User ID in span name (high cardinality)\nspan = tracer.start_as_current_span(f\"get_user_{user_id}\")\n\n# CORRECT: User ID as attribute\nspan = tracer.start_as_current_span(\"get_user\")\nspan.set_at"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "# WRONG: Sample before seeing attributes\nsampler = TraceIdRatioBased(0.01)  # Can't see if request is slow/error\n\n# CORRECT: Use tail-based sampling or custom sampler\nclass TailBasedSampler:\n    def s"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Synchronous sleep in async span\nwith tracer.start_as_current_span(\"wait\"):\n    time.sleep(10)  # Blocks event loop!\n\n# CORRECT: Async sleep\nwith tracer.start_as_current_span(\"wait\"):\n    awai"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "http://localhost:4317\""
        },
        {
          "type": "external",
          "url": "http://service-b/api/data\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/users\""
        },
        {
          "type": "external",
          "url": "http://service-b/api/data\""
        },
        {
          "type": "external",
          "url": "http://service-b/api/data\""
        }
      ],
      "tools_mentioned": [
        "postgres",
        "grafana",
        "postgresql",
        "datadog"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 90.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/test-driven-development.md",
      "category": "engineering",
      "skill_name": "test-driven-development",
      "frontmatter": {
        "name": "engineering-test-driven-development",
        "description": "Test-Driven Development methodology, red-green-refactor cycle, unit testing best practices, and mocking strategies"
      },
      "metrics": {
        "line_count": 683,
        "code_line_count": 193,
        "code_examples": 26,
        "external_refs": 5,
        "tools_mentioned": 4,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# RED: Write failing test\ndef test_add_two_numbers():\n    calculator = Calculator()\n    assert calculator.add(2, 3) == 5  # Fails - Calculator doesn't exist\n\n# GREEN: Minimal code to pass\nclass Calcul"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "def test_user_login():\n    # Arrange: Set up test data\n    user = User(email=\"test@example.com\", password=\"secret123\")\n    user.save()\n\n    # Act: Execute the action being tested\n    result = authenti"
        },
        {
          "language": "typescript",
          "line_count": 14,
          "complexity": "simple",
          "code": "describe(\"User Login\", () => {\n  it(\"should authenticate user with correct credentials\", () => {\n    // Given: A registered user\n    const user = createUser({ email: \"test@example.com\", password: \"sec"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "complex",
          "code": "class StubEmailService:\n    def send(self, to, subject, body):\n        return True  # Always succeeds\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "mock_email = Mock()\nservice.send_welcome_email(user)\nmock_email.send.assert_called_once_with(\n    to=\"user@example.com\",\n    subject=\"Welcome!\",\n    body=\"Welcome to our app!\"\n)\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "class FakeDatabase:\n    def __init__(self):\n        self.data = {}\n\n    def save(self, key, value):\n        self.data[key] = value\n\n    def get(self, key):\n        return self.data.get(key)\n"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# RED: Write test first\ndef test_calculate_tax():\n    assert calculate_tax(100, 0.08) == 8.0\n    assert calculate_tax(50, 0.10) == 5.0\n    assert calculate_tax(0, 0.08) == 0.0\n\n# GREEN: Implement\ndef "
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "class UserService:\n    def create_user(self, email):\n        db = PostgresDatabase()  # Hard-coded dependency!\n        email_service = SendGridEmailService()  # Another one!\n\n        user = db.save({\""
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "# RED: Write test with mocks\ndef test_create_user():\n    mock_db = Mock()\n    mock_email = Mock()\n    mock_db.save.return_value = User(id=1, email=\"test@example.com\")\n\n    service = UserService(db=moc"
        },
        {
          "language": "go",
          "line_count": 25,
          "complexity": "medium",
          "code": "func TestCalculateDiscount(t *testing.T) {\n    tests := []struct {\n        name     string\n        amount   float64\n        userType string\n        want     float64\n    }{\n        {\"Premium user, larg"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "import pytest\n\n@pytest.mark.asyncio\nasync def test_fetch_user_data():\n    # Arrange\n    user_id = \"123\"\n    mock_api = AsyncMock()\n    mock_api.get_user.return_value = {\"id\": \"123\", \"name\": \"John\"}\n\n "
        },
        {
          "language": "typescript",
          "line_count": 17,
          "complexity": "simple",
          "code": "describe(\"fetchUserData\", () => {\n  it(\"should fetch user from API\", async () => {\n    // Arrange\n    const mockApi = {\n      getUser: jest.fn().mockResolvedValue({ id: \"123\", name: \"John\" }),\n    };\n"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "def test_divide_by_zero():\n    calculator = Calculator()\n    with pytest.raises(ZeroDivisionError):\n        calculator.divide(10, 0)\n\ndef test_invalid_email():\n    with pytest.raises(ValidationError) "
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "@pytest.mark.parametrize(\"input,expected\", [\n    (\"hello\", \"HELLO\"),\n    (\"WORLD\", \"WORLD\"),\n    (\"TeSt\", \"TEST\"),\n    (\"\", \"\"),\n])\ndef test_uppercase(input, expected):\n    assert uppercase(input) == "
        },
        {
          "language": "typescript",
          "line_count": 8,
          "complexity": "simple",
          "code": "test.each([\n  [1, 1, 2],\n  [2, 2, 4],\n  [5, 3, 8],\n])(\"add(%i, %i) should return %i\", (a, b, expected) => {\n  expect(add(a, b)).toBe(expected);\n});\n"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "medium",
          "code": "@pytest.fixture\ndef sample_user():\n    \"\"\"Create a test user for multiple tests\"\"\"\n    return User(email=\"test@example.com\", name=\"Test User\")\n\n@pytest.fixture\ndef database():\n    \"\"\"Set up and tear d"
        },
        {
          "language": "typescript",
          "line_count": 20,
          "complexity": "simple",
          "code": "describe(\"UserService\", () => {\n  let service: UserService;\n  let mockDb: Database;\n\n  beforeEach(() => {\n    mockDb = createMockDatabase();\n    service = new UserService(mockDb);\n  });\n\n  afterEach(("
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# DON'T: Testing private methods directly\ndef test_private_validation():\n    obj = MyClass()\n    assert obj._validate_input(\"test\") is True  # Testing private method\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# DO: Test through public interface\ndef test_public_method_with_valid_input():\n    obj = MyClass()\n    result = obj.process(\"test\")  # Public method\n    assert result.success is True  # Private valida"
        },
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "# Iteration 1: Empty string\ndef test_empty_string_returns_zero():\n    assert string_calculator(\"\") == 0\n\ndef string_calculator(numbers):\n    return 0  # Minimal code to pass\n\n# Iteration 2: Single num"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "medium",
          "code": "# RED: Test first\ndef test_create_user_endpoint(client):\n    response = client.post(\"/users\", json={\n        \"email\": \"test@example.com\",\n        \"name\": \"Test User\"\n    })\n\n    assert response.status"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "def test_add_returns_sum_of_two_numbers()\ndef test_divide_raises_error_when_divisor_is_zero()\ndef test_create_user_saves_to_database()\ndef test_authenticate_fails_with_invalid_password()\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "complex",
          "code": "# pytest: Most popular Python test framework\npytest tests/\n\n# Coverage\npytest --cov=src --cov-report=html\n\n# Watch mode (rerun on changes)\npytest-watch\n\n# Mocking\nfrom unittest.mock import Mock, patch"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Jest: Popular testing framework\nnpm test\n\n# Watch mode\nnpm test -- --watch\n\n# Coverage\nnpm test -- --coverage\n\n# Mocking\njest.mock('./module')\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Built-in testing\ngo test ./...\n\n# Coverage\ngo test -cover ./...\n\n# Table-driven tests (idiomatic Go)\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Continuous testing\nnpm install -g wallaby.js  # IDE integration\nnpm install -g jest --watch  # CLI watch mode\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530"
        },
        {
          "type": "external",
          "url": "https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627"
        },
        {
          "type": "documentation",
          "url": "https://docs.pytest.org/"
        },
        {
          "type": "external",
          "url": "https://jestjs.io/"
        },
        {
          "type": "external",
          "url": "https://pkg.go.dev/testing"
        }
      ],
      "tools_mentioned": [
        "postgres",
        "pytest",
        "jest",
        "go test"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "26 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 90.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "frontend/nextjs-seo.md",
      "category": "frontend",
      "skill_name": "nextjs-seo",
      "frontmatter": {
        "name": "frontend-nextjs-seo",
        "description": "Implementing SEO for Next.js applications"
      },
      "metrics": {
        "line_count": 721,
        "code_line_count": 143,
        "code_examples": 19,
        "external_refs": 44,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "tsx",
          "line_count": 34,
          "complexity": "complex",
          "code": "// app/page.tsx\nimport type { Metadata } from 'next';\n\nexport const metadata: Metadata = {\n  title: 'Home - My Website',\n  description: 'Welcome to my website. Discover amazing products and services.'"
        },
        {
          "language": "tsx",
          "line_count": 43,
          "complexity": "complex",
          "code": "// app/blog/[slug]/page.tsx\nimport type { Metadata } from 'next';\n\ninterface Props {\n  params: { slug: string };\n}\n\nexport async function generateMetadata({ params }: Props): Promise<Metadata> {\n  // "
        },
        {
          "language": "tsx",
          "line_count": 16,
          "complexity": "complex",
          "code": "// app/layout.tsx\nimport type { Metadata } from 'next';\n\nexport const metadata: Metadata = {\n  title: {\n    default: 'My Website',\n    template: '%s | My Website', // Page title will be \"About | My We"
        },
        {
          "language": "tsx",
          "line_count": 13,
          "complexity": "complex",
          "code": "// app/layout.tsx\nimport type { Viewport } from 'next';\n\nexport const viewport: Viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  maximumScale: 1,\n  themeColor: [\n    { media: '(prefers-color"
        },
        {
          "language": "tsx",
          "line_count": 25,
          "complexity": "complex",
          "code": "// app/page.tsx\nimport type { Metadata } from 'next';\n\nexport const metadata: Metadata = {\n  title: 'Product Name',\n  description: 'Product description',\n  openGraph: {\n    type: 'website',\n    url: '"
        },
        {
          "language": "tsx",
          "line_count": 11,
          "complexity": "simple",
          "code": "export const metadata: Metadata = {\n  twitter: {\n    card: 'summary_large_image', // or 'summary', 'app', 'player'\n    site: '@mywebsite',\n    creator: '@johndoe',\n    title: 'Product Name',\n    descr"
        },
        {
          "language": "tsx",
          "line_count": 26,
          "complexity": "medium",
          "code": "// app/blog/[slug]/page.tsx\nexport async function generateMetadata({ params }: Props): Promise<Metadata> {\n  const post = await getPost(params.slug);\n\n  return {\n    openGraph: {\n      type: 'article'"
        },
        {
          "language": "tsx",
          "line_count": 34,
          "complexity": "medium",
          "code": "// app/layout.tsx\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  const organizationSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'Organization',\n  "
        },
        {
          "language": "tsx",
          "line_count": 45,
          "complexity": "medium",
          "code": "// app/blog/[slug]/page.tsx\nexport default async function BlogPostPage({ params }: Props) {\n  const post = await getPost(params.slug);\n\n  const articleSchema = {\n    '@context': 'https://schema.org',\n"
        },
        {
          "language": "tsx",
          "line_count": 46,
          "complexity": "medium",
          "code": "// app/products/[id]/page.tsx\nexport default async function ProductPage({ params }: Props) {\n  const product = await getProduct(params.id);\n\n  const productSchema = {\n    '@context': 'https://schema.o"
        },
        {
          "language": "tsx",
          "line_count": 32,
          "complexity": "medium",
          "code": "// app/blog/[category]/[slug]/page.tsx\nconst breadcrumbSchema = {\n  '@context': 'https://schema.org',\n  '@type': 'BreadcrumbList',\n  itemListElement: [\n    {\n      '@type': 'ListItem',\n      position:"
        },
        {
          "language": "tsx",
          "line_count": 26,
          "complexity": "complex",
          "code": "// app/sitemap.ts\nimport { MetadataRoute } from 'next';\n\nexport default function sitemap(): MetadataRoute.Sitemap {\n  return [\n    {\n      url: 'https://example.com',\n      lastModified: new Date(),\n "
        },
        {
          "language": "tsx",
          "line_count": 34,
          "complexity": "complex",
          "code": "// app/sitemap.ts\nimport { MetadataRoute } from 'next';\n\nexport default async function sitemap(): Promise<MetadataRoute.Sitemap> {\n  // Fetch dynamic content\n  const posts = await getPosts();\n  const "
        },
        {
          "language": "tsx",
          "line_count": 23,
          "complexity": "complex",
          "code": "// app/sitemap.ts (index sitemap)\nimport { MetadataRoute } from 'next';\n\nexport default function sitemap(): MetadataRoute.Sitemap {\n  return [\n    {\n      url: 'https://example.com/sitemap/posts.xml',"
        },
        {
          "language": "tsx",
          "line_count": 14,
          "complexity": "complex",
          "code": "// app/robots.ts\nimport { MetadataRoute } from 'next';\n\nexport default function robots(): MetadataRoute.Robots {\n  return {\n    rules: {\n      userAgent: '*',\n      allow: '/',\n      disallow: ['/api/"
        },
        {
          "language": "tsx",
          "line_count": 16,
          "complexity": "complex",
          "code": "// app/robots.ts\nimport { MetadataRoute } from 'next';\n\nexport default function robots(): MetadataRoute.Robots {\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  return {\n    rules: {\n"
        },
        {
          "language": "tsx",
          "line_count": 11,
          "complexity": "complex",
          "code": "// app/blog/[slug]/page.tsx\nimport type { Metadata } from 'next';\n\nexport async function generateMetadata({ params }: Props): Promise<Metadata> {\n  return {\n    alternates: {\n      canonical: `https:/"
        },
        {
          "language": "tsx",
          "line_count": 7,
          "complexity": "simple",
          "code": "// If content exists at multiple URLs, point to primary\nexport const metadata: Metadata = {\n  alternates: {\n    canonical: 'https://example.com/primary-url',\n  },\n};\n"
        },
        {
          "language": "tsx",
          "line_count": 19,
          "complexity": "simple",
          "code": "export const metadata: Metadata = {\n  title: 'Page Title',\n  description: 'Page description',\n  openGraph: {\n    title: 'Page Title',\n    description: 'Page description',\n    images: ['/og-image.jpg']"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com/authors/john'"
        },
        {
          "type": "example",
          "url": "https://example.com'"
        },
        {
          "type": "example",
          "url": "https://example.com'"
        },
        {
          "type": "example",
          "url": "https://example.com/es'"
        },
        {
          "type": "example",
          "url": "https://example.com'"
        },
        {
          "type": "example",
          "url": "https://example.com/og-image.jpg'"
        },
        {
          "type": "example",
          "url": "https://example.com/twitter-image.jpg']"
        },
        {
          "type": "example",
          "url": "https://example.com/blog/${params.slug}`"
        },
        {
          "type": "external",
          "url": "https://schema.org'"
        },
        {
          "type": "example",
          "url": "https://example.com'"
        },
        {
          "type": "example",
          "url": "https://example.com/logo.png'"
        },
        {
          "type": "external",
          "url": "https://twitter.com/mycompany'"
        },
        {
          "type": "external",
          "url": "https://facebook.com/mycompany'"
        },
        {
          "type": "external",
          "url": "https://linkedin.com/company/mycompany'"
        },
        {
          "type": "external",
          "url": "https://schema.org'"
        },
        {
          "type": "example",
          "url": "https://example.com/logo.png'"
        },
        {
          "type": "example",
          "url": "https://example.com/blog/${params.slug}`"
        },
        {
          "type": "external",
          "url": "https://schema.org'"
        },
        {
          "type": "example",
          "url": "https://example.com/products/${params.id}`"
        },
        {
          "type": "external",
          "url": "https://schema.org/InStock'"
        },
        {
          "type": "external",
          "url": "https://schema.org/OutOfStock'"
        },
        {
          "type": "external",
          "url": "https://schema.org'"
        },
        {
          "type": "example",
          "url": "https://example.com'"
        },
        {
          "type": "example",
          "url": "https://example.com/blog'"
        },
        {
          "type": "example",
          "url": "https://example.com/blog/${category}`"
        },
        {
          "type": "example",
          "url": "https://example.com/blog/${category}/${slug}`"
        },
        {
          "type": "example",
          "url": "https://example.com'"
        },
        {
          "type": "example",
          "url": "https://example.com/about'"
        },
        {
          "type": "example",
          "url": "https://example.com/blog'"
        },
        {
          "type": "example",
          "url": "https://example.com/blog/${post.slug}`"
        },
        {
          "type": "example",
          "url": "https://example.com/products/${product.id}`"
        },
        {
          "type": "example",
          "url": "https://example.com'"
        },
        {
          "type": "example",
          "url": "https://example.com/sitemap/posts.xml'"
        },
        {
          "type": "example",
          "url": "https://example.com/sitemap/products.xml'"
        },
        {
          "type": "example",
          "url": "https://example.com/blog/${post.slug}`"
        },
        {
          "type": "example",
          "url": "https://example.com/sitemap.xml'"
        },
        {
          "type": "example",
          "url": "https://example.com/sitemap.xml'"
        },
        {
          "type": "example",
          "url": "https://example.com/blog/${params.slug}`"
        },
        {
          "type": "example",
          "url": "https://example.com/primary-url'"
        },
        {
          "type": "example",
          "url": "https://example.com/blog/how-to-optimize-images"
        },
        {
          "type": "example",
          "url": "https://example.com/products/laptops/macbook-pro-2024"
        },
        {
          "type": "example",
          "url": "https://example.com/blog?id=12345"
        },
        {
          "type": "example",
          "url": "https://example.com/p/1a2b3c"
        },
        {
          "type": "example",
          "url": "https://example.com/page'"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "19 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "16 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 90.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "protocols/http3-quic.md",
      "category": "protocols",
      "skill_name": "http3-quic",
      "frontmatter": {
        "name": "protocols-http3-quic",
        "description": "HTTP/3 and QUIC protocol with UDP transport, 0-RTT, connection migration, and improved performance"
      },
      "metrics": {
        "line_count": 513,
        "code_line_count": 107,
        "code_examples": 14,
        "external_refs": 6,
        "tools_mentioned": 3,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "go",
          "line_count": 21,
          "complexity": "complex",
          "code": "// Go QUIC server with 0-RTT\npackage main\n\nimport (\n    \"github.com/lucas-clemente/quic-go\"\n    \"github.com/lucas-clemente/quic-go/http3\"\n)\n\nfunc main() {\n    server := http3.Server{\n        Addr: \":4"
        },
        {
          "language": "go",
          "line_count": 15,
          "complexity": "simple",
          "code": "client := &http.Client{\n    Transport: &http3.RoundTripper{\n        TLSClientConfig: &tls.Config{\n            // Store session tickets for 0-RTT\n            ClientSessionCache: tls.NewLRUClientSession"
        },
        {
          "language": "javascript",
          "line_count": 16,
          "complexity": "simple",
          "code": "// Node.js QUIC client with migration\nconst { QuicSocket } = require('quic');\n\nconst socket = new QuicSocket({ client: { /* ... */ } });\n\nsocket.on('sessionReady', (session) => {\n    console.log('QUIC"
        },
        {
          "language": "rust",
          "line_count": 20,
          "complexity": "simple",
          "code": "// Rust QUIC with custom congestion control\nuse quiche::Config;\n\nlet mut config = Config::new(quiche::PROTOCOL_VERSION)?;\n\n// Use BBR for high-bandwidth networks\nconfig.set_cc_algorithm(quiche::Conges"
        },
        {
          "language": "nginx",
          "line_count": 20,
          "complexity": "simple",
          "code": "server {\n    listen 443 quic reuseport;\n    listen 443 ssl http2;\n\n    server_name example.com;\n\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n\n    # Enable HTTP/3\n "
        },
        {
          "language": "javascript",
          "line_count": 16,
          "complexity": "simple",
          "code": "// Cloudflare automatically uses HTTP/3\nexport default {\n    async fetch(request) {\n        // Check if request came via HTTP/3\n        const httpVersion = request.cf?.httpProtocol;\n\n        return ne"
        },
        {
          "language": "go",
          "line_count": 35,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"crypto/tls\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n\n    \"github.com/lucas-clemente/quic-go/http3\"\n)\n\nfunc main() {\n    // Create HTTP/3 client\n    client := &http.Client{\n      "
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "import asyncio\nfrom aioquic.asyncio import connect\nfrom aioquic.quic.configuration import QuicConfiguration\n\nasync def fetch_http3(url):\n    # Configure QUIC\n    configuration = QuicConfiguration(\n   "
        },
        {
          "language": "nginx",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u2705 Good: Support both HTTP/3 and HTTP/2\nserver {\n    listen 443 quic reuseport;\n    listen 443 ssl http2;  # Fallback\n\n    add_header Alt-Svc 'h3=\":443\"; ma=86400';\n}\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c Bad: Non-idempotent request in 0-RTT\n@app.route('/transfer-money', methods=['POST'])\ndef transfer():\n    # Could be replayed!\n    transfer_money(from_user, to_user, amount)\n\n# \u2705 Good: Only idempot"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Allow UDP port 443 for QUIC\niptables -A INPUT -p udp --dport 443 -j ACCEPT\niptables -A OUTPUT -p udp --sport 443 -j ACCEPT\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Test if UDP port 443 is open\nnc -zuv example.com 443\n\n# Check with curl\ncurl --http3 https://cloudflare-quic.com\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "curl -I https://example.com\n# Look for: Alt-Svc: h3=\":443\"; ma=86400\n\n# If missing, check server config\n"
        },
        {
          "language": "go",
          "line_count": 6,
          "complexity": "simple",
          "code": "config := &quic.Config{\n    // Enable connection migration\n    DisablePathMTUDiscovery: false,\n    MaxIdleTimeout: 30 * time.Second,\n}\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/data\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/more-data\""
        },
        {
          "type": "external",
          "url": "https://cloudflare-quic.com\""
        },
        {
          "type": "example",
          "url": "https://example.com\""
        },
        {
          "type": "external",
          "url": "https://cloudflare-quic.com"
        },
        {
          "type": "example",
          "url": "https://example.com"
        }
      ],
      "tools_mentioned": [
        "ssl",
        "nginx",
        "tls"
      ],
      "config_snippets": [
        "nginx",
        "nginx"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (nginx), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "3 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 90.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/technical-debt.md",
      "category": "engineering",
      "skill_name": "technical-debt",
      "frontmatter": {
        "name": "engineering-technical-debt",
        "description": "Identifying, measuring, tracking, and managing technical debt strategically and systematically"
      },
      "metrics": {
        "line_count": 508,
        "code_line_count": 78,
        "code_examples": 10,
        "external_refs": 7,
        "tools_mentioned": 2,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 26,
          "complexity": "medium",
          "code": "# Example: Duplicated validation logic (Principal: 1 day to refactor)\n\n# File 1\ndef create_user(email):\n    if \"@\" not in email:  # Duplicated\n        raise ValueError(\"Invalid email\")\n    # ... save "
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Python: Code complexity\nradon cc src/ -a -nb  # Cyclomatic complexity\nradon mi src/         # Maintainability index\n\n# JavaScript: ESLint complexity rules\neslint --max-complexity=10 src/\n\n# Code dup"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Debt Item: Duplicated email validation (3 places)\nComplexity = 2  # Simple validation logic\nImpact = 4      # Used in 10+ features\nFrequency = 5   # Changed weekly\nEase of Fix = 4 # Easy - extract t"
        },
        {
          "language": "markdown",
          "line_count": 29,
          "complexity": "medium",
          "code": "# Technical Debt Register\n\n## High Priority (Score > 50)\n\n### TD-001: Monolithic Database\n- **Debt Score**: 75\n- **Principal**: 4 weeks\n- **Interest**: 1 day/week (slow queries, deployment bottleneck)"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "# Every PR: Small improvements\n# Before\ndef process_user(email, name, age, address, phone):  # Too many params\n    # ... 50 lines of code\n\n# After (in PR for unrelated feature)\nclass UserData:\n    def"
        },
        {
          "language": "markdown",
          "line_count": 13,
          "complexity": "simple",
          "code": "## Definition of Done\n\nCode Complete:\n- [ ] Feature implemented\n- [ ] Unit tests written (80%+ coverage)\n- [ ] Integration tests added\n- [ ] Documentation updated\n- [ ] Code reviewed\n- [ ] No TODO/FIX"
        },
        {
          "language": "yaml",
          "line_count": 15,
          "complexity": "simple",
          "code": "# .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/psf/black\n    hooks:\n      - id: black  # Formatting\n\n  - repo: https://github.com/pycqa/flake8\n    hooks:\n      - id: flake8  # Linting\n "
        },
        {
          "language": "yaml",
          "line_count": 14,
          "complexity": "simple",
          "code": "# .github/workflows/quality.yml\n- name: Check code quality\n  run: |\n    radon cc src/ -a -nb --total-average-threshold=B\n    radon mi src/ --min=C\n\n- name: Check test coverage\n  run: |\n    pytest --co"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Duplicated validation everywhere\ndef create_user(email, password):\n    if not email or \"@\" not in email:\n        raise ValueError(\"Invalid email\")\n    if len(password) < 8:\n        raise ValueError("
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "# Extracted validation (DRY)\nclass EmailValidator:\n    @staticmethod\n    def validate(email: str) -> None:\n        if not email or \"@\" not in email:\n            raise ValueError(\"Invalid email\")\n\nclas"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/psf/black"
        },
        {
          "type": "github",
          "url": "https://github.com/pycqa/flake8"
        },
        {
          "type": "github",
          "url": "https://github.com/pre-commit/mirrors-mypy"
        },
        {
          "type": "external",
          "url": "https://martinfowler.com/bliki/TechnicalDebt.html"
        },
        {
          "type": "external",
          "url": "https://www.construx.com/blog/managing-technical-debt/"
        },
        {
          "type": "external",
          "url": "https://stackoverflow.blog/2023/02/27/the-human-cost-of-tech-debt/"
        },
        {
          "type": "external",
          "url": "https://martinfowler.com/bliki/TechnicalDebtQuadrant.html"
        }
      ],
      "tools_mentioned": [
        "pytest",
        "vite"
      ],
      "config_snippets": [
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 89.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/rfc-technical-design.md",
      "category": "engineering",
      "skill_name": "rfc-technical-design",
      "frontmatter": {
        "name": "engineering-rfc-technical-design",
        "description": "Architecture proposals, technical diagrams, API design, trade-off analysis, and migration strategies for RFCs"
      },
      "metrics": {
        "line_count": 746,
        "code_line_count": 101,
        "code_examples": 17,
        "external_refs": 3,
        "tools_mentioned": 9,
        "config_snippets": 7
      },
      "code_examples": [
        {
          "language": "markdown",
          "line_count": 5,
          "complexity": "simple",
          "code": "## System Architecture: Real-Time Analytics Platform\n\n### Container Diagram (C4 Level 2)\n\n"
        },
        {
          "language": "markdown",
          "line_count": 3,
          "complexity": "simple",
          "code": "## Sequence Diagram: User Signup Flow\n\n"
        },
        {
          "language": "markdown",
          "line_count": 31,
          "complexity": "medium",
          "code": "## Trade-Off Analysis: Caching Strategy\n\n### Options Evaluated\n\n| Criterion | Redis (In-Memory) | Postgres (DB Cache) | Memcached | CDN (CloudFront) |\n|-----------|-------------------|----------------"
        },
        {
          "language": "markdown",
          "line_count": 16,
          "complexity": "simple",
          "code": "## API Design: User Management\n\n### Base URL\n- Production: `https://api.example.com`\n- Staging: `https://api-staging.example.com`\n\n### Versioning Strategy\n- URI versioning: `/v1/users`, `/v2/users`\n- "
        },
        {
          "language": "json",
          "line_count": 7,
          "complexity": "simple",
          "code": "{\n  \"user_id\": \"usr_abc123\",\n  \"email\": \"user@example.com\",\n  \"display_name\": \"John Doe\",\n  \"created_at\": \"2025-10-25T14:30:00Z\"\n}\n"
        },
        {
          "language": "json",
          "line_count": 10,
          "complexity": "simple",
          "code": "{\n  \"error_code\": \"VALIDATION_ERROR\",\n  \"error_message\": \"Invalid input\",\n  \"request_id\": \"req_xyz789\",\n  \"field_errors\": {\n    \"email\": \"Email already in use\",\n    \"password\": \"Password must include "
        },
        {
          "language": "json",
          "line_count": 12,
          "complexity": "simple",
          "code": "{\n  \"user_id\": \"usr_abc123\",\n  \"email\": \"user@example.com\",\n  \"display_name\": \"John Doe\",\n  \"profile_photo_url\": \"https://cdn.example.com/photos/abc123.jpg\",\n  \"created_at\": \"2025-10-25T14:30:00Z\",\n  "
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "simple",
          "code": "{\n  \"error_code\": \"USER_NOT_FOUND\",\n  \"error_message\": \"User with ID usr_abc123 not found\",\n  \"request_id\": \"req_xyz789\"\n}\n"
        },
        {
          "language": "json",
          "line_count": 2,
          "complexity": "simple",
          "code": "{\"created_at\": 1698249600}\n"
        },
        {
          "language": "json",
          "line_count": 2,
          "complexity": "simple",
          "code": "{\"created_at\": \"2025-10-25T14:30:00Z\"}\n"
        },
        {
          "language": "markdown",
          "line_count": 4,
          "complexity": "simple",
          "code": "## Database Schema: User Authentication\n\n### Current Schema (v1)\n"
        },
        {
          "language": "sql",
          "line_count": 13,
          "complexity": "simple",
          "code": "-- Migration: Add email verification columns\nALTER TABLE users\n  ADD COLUMN email_verified BOOLEAN DEFAULT FALSE,\n  ADD COLUMN email_verify_token VARCHAR(255),\n  ADD COLUMN email_verify_sent_at TIMEST"
        },
        {
          "language": "markdown",
          "line_count": 48,
          "complexity": "medium",
          "code": "## Migration: Monolith \u2192 Microservices (Auth Service)\n\n### Current State\n- Monolithic Rails app handles everything (auth, users, projects)\n- Auth logic mixed with business logic (tight coupling)\n- 100"
        },
        {
          "language": "markdown",
          "line_count": 34,
          "complexity": "medium",
          "code": "## Performance Benchmark: Caching Strategy\n\n### Test Setup\n- Dataset: 1M user records\n- Query: `GET /users/:id/profile` (fetch user + projects)\n- Load: 1,000 requests/sec (sustained)\n- Tool: Apache Be"
        },
        {
          "language": "markdown",
          "line_count": 40,
          "complexity": "medium",
          "code": "## Failure Mode Analysis: Payment Processing\n\n### Failure Scenarios\n\n#### 1. Stripe API Down\n**Probability**: Low (99.99% uptime SLA)\n**Impact**: High (no payments processed)\n**Mitigation**:\n- Detect:"
        },
        {
          "language": "markdown",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u274c NEVER:\nWe'll use MongoDB for the database.\n\n# \u2705 CORRECT:\n## Database Options\n1. **PostgreSQL**: ACID, relations, complex queries (chosen)\n2. **MongoDB**: Flexible schema, horizontal scaling\n   - R"
        },
        {
          "language": "markdown",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c Don't:\nRedis is faster, so we'll use it for caching.\n\n# \u2705 Correct:\n## Benchmark Results\n- Redis: 8ms p95 latency, 8k req/s throughput\n- Postgres: 120ms p95 latency, 800 req/s throughput\n- **Decisi"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com`"
        },
        {
          "type": "example",
          "url": "https://api-staging.example.com`"
        },
        {
          "type": "example",
          "url": "https://cdn.example.com/photos/abc123.jpg\""
        }
      ],
      "tools_mentioned": [
        "postgresql",
        "tls",
        "nginx",
        "postgres",
        "ssl",
        "mongodb",
        "jwt",
        "redis",
        "apache"
      ],
      "config_snippets": [
        "json",
        "json",
        "json",
        "json",
        "json",
        "json",
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql, json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 89.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/code-quality.md",
      "category": "engineering",
      "skill_name": "code-quality",
      "frontmatter": {
        "name": "engineering-code-quality",
        "description": "Code quality metrics, maintainability principles, SOLID design, code smells detection, and quality measurement"
      },
      "metrics": {
        "line_count": 731,
        "code_line_count": 210,
        "code_examples": 24,
        "external_refs": 4,
        "tools_mentioned": 4,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "# Bad: User class does too much\nclass User:\n    def save_to_database(self): ...\n    def send_email(self): ...\n    def generate_pdf_report(self): ...\n    def validate_password(self): ...\n\n# Good: Each "
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "# Bad: Must modify class to add new payment method\nclass PaymentProcessor:\n    def process(self, method: str, amount: float):\n        if method == \"credit_card\":\n            # Credit card logic\n      "
        },
        {
          "language": "typescript",
          "line_count": 31,
          "complexity": "complex",
          "code": "// Bad: Violates LSP\nclass Rectangle {\n  width: number;\n  height: number;\n  setWidth(w: number) { this.width = w; }\n  setHeight(h: number) { this.height = h; }\n  area(): number { return this.width * t"
        },
        {
          "language": "go",
          "line_count": 32,
          "complexity": "medium",
          "code": "// Bad: Fat interface\ntype Worker interface {\n    Work()\n    Eat()\n    Sleep()\n}\n\ntype Robot struct{}\n\nfunc (r Robot) Work() { /* ... */ }\nfunc (r Robot) Eat() { /* Robots don't eat! */ }\nfunc (r Robo"
        },
        {
          "language": "typescript",
          "line_count": 34,
          "complexity": "complex",
          "code": "// Bad: High-level module depends on low-level module\nclass MySQLDatabase {\n  save(data: string) { /* MySQL specific */ }\n}\n\nclass UserService {\n  private db = new MySQLDatabase();  // Tight coupling!"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Smell: Magic Numbers\ndef calculate_price(quantity):\n    return quantity * 19.99 * 1.08  # What are these?\n\n# Fixed: Named Constants\nPRICE_PER_ITEM = 19.99\nTAX_RATE = 1.08\n\ndef calculate_price(quanti"
        },
        {
          "language": "typescript",
          "line_count": 22,
          "complexity": "medium",
          "code": "// Smell: Long Parameter List\nfunction createUser(\n  name: string,\n  email: string,\n  age: number,\n  address: string,\n  phone: string,\n  company: string\n) { }\n\n// Fixed: Parameter Object\ninterface Use"
        },
        {
          "language": "go",
          "line_count": 32,
          "complexity": "medium",
          "code": "// Smell: Nested Conditionals\nfunc processOrder(order Order) error {\n    if order.IsValid() {\n        if order.HasInventory() {\n            if order.PaymentSucceeded() {\n                if order.Shipp"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Complexity: 1 (simple)\ndef add(a, b):\n    return a + b\n\n# Complexity: 4 (moderate)\ndef get_discount(user_type, purchase_amount):\n    if user_type == \"premium\":\n        if purchase_amount > 100:\n    "
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Good coverage targets:\n# - Critical business logic: 90%+\n# - General codebase: 70-80%\n# - UI/Glue code: 50-60%\n\npytest --cov=myapp --cov-report=html\n# coverage: 78% (good!)\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# High churn = potential quality issues\ngit log --format=format: --name-only | sort | uniq -c | sort -rn | head -10\n\n# Example output:\n#  47 src/utils/helpers.py  # Too much churn!\n#  12 src/models/us"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Bad: Long function (100+ lines)\ndef process_order(order):\n    # 100 lines of mixed concerns\n\n# Good: Small, focused functions\ndef process_order(order):\n    validate_order(order)\n    charge_payment(o"
        },
        {
          "language": "typescript",
          "line_count": 10,
          "complexity": "simple",
          "code": "// Bad: Unclear names\nlet d: number;  // What is d?\nlet tmp: string;  // Temporary what?\nlet data: any[];  // What kind of data?\n\n// Good: Descriptive names\nlet daysUntilExpiration: number;\nlet userEm"
        },
        {
          "language": "go",
          "line_count": 13,
          "complexity": "simple",
          "code": "// Bad: Redundant comment\n// Increment i by 1\ni++\n\n// Bad: Outdated comment\n// Calculate tax rate (7%)\ntaxRate := 0.08  // Comment is wrong!\n\n// Good: Explain WHY, not WHAT\n// Use exponential backoff "
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Bad: Silently swallowing errors\ntry:\n    user = get_user(user_id)\nexcept:\n    pass  # What happened?\n\n# Good: Specific error handling\ntry:\n    user = get_user(user_id)\nexcept UserNotFoundError as e:"
        },
        {
          "language": "go",
          "line_count": 9,
          "complexity": "simple",
          "code": "// Bad: Ignoring errors\nuser, _ := getUser(userID)  // What if it fails?\n\n// Good: Explicit error handling\nuser, err := getUser(userID)\nif err != nil {\n    return fmt.Errorf(\"failed to get user %d: %w"
        },
        {
          "language": "rust",
          "line_count": 12,
          "complexity": "simple",
          "code": "// Bad: Unwrapping everywhere\nlet user = get_user(user_id).unwrap();  // Panics on error!\n\n// Good: Propagating errors\nlet user = get_user(user_id)?;  // Returns early if error\n\n// Or: Pattern matchin"
        },
        {
          "language": "typescript",
          "line_count": 17,
          "complexity": "complex",
          "code": "class UserService {\n  async createUser(email: string): Promise<User> {\n    // Hard-coded dependency!\n    const db = new MySQLDatabase();\n    const emailService = new SendGridEmailService();\n    const "
        },
        {
          "language": "typescript",
          "line_count": 33,
          "complexity": "complex",
          "code": "interface Database {\n  save(data: any): Promise<User>;\n}\n\ninterface EmailService {\n  send(to: string, subject: string): Promise<void>;\n}\n\ninterface Logger {\n  info(message: string): void;\n}\n\nclass Use"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Bad: Low cohesion - unrelated functions\ndef calculate_tax(amount): ...\ndef send_email(to, subject): ...\ndef hash_password(password): ...\n\n# Good: High cohesion - related functions\n# tax_calculator.p"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Linting\nflake8 src/\npylint src/\n\n# Type checking\nmypy src/\n\n# Code quality\nradon cc src/ -a  # Cyclomatic complexity\nradon mi src/     # Maintainability index\n\n# Security\nbandit -r src/\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Linting\neslint src/\n\n# Type checking\ntsc --noEmit\n\n# Code quality\nnpx complexity-report src/\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Linting\ngolangci-lint run\n\n# Cyclomatic complexity\ngocyclo -over 10 .\n\n# Security\ngosec ./...\n"
        },
        {
          "language": "yaml",
          "line_count": 27,
          "complexity": "medium",
          "code": "# .github/workflows/quality.yml\nname: Code Quality\non: [pull_request]\n\njobs:\n  quality:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Run linters\n        run: "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"
        },
        {
          "type": "external",
          "url": "https://en.wikipedia.org/wiki/SOLID"
        },
        {
          "type": "external",
          "url": "https://refactoring.guru/refactoring/smells"
        },
        {
          "type": "external",
          "url": "https://en.wikipedia.org/wiki/Cyclomatic_complexity"
        }
      ],
      "tools_mentioned": [
        "pytest",
        "postgres",
        "mysql",
        "jest"
      ],
      "config_snippets": [
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "24 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 89.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "frontend/frontend-performance.md",
      "category": "frontend",
      "skill_name": "frontend-performance",
      "frontmatter": {
        "name": "frontend-frontend-performance",
        "description": "Optimizing application performance"
      },
      "metrics": {
        "line_count": 753,
        "code_line_count": 211,
        "code_examples": 26,
        "external_refs": 6,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Next.js\nnpm run build\n# Output shows bundle sizes\n\n# Webpack Bundle Analyzer\nnpm install --save-dev webpack-bundle-analyzer\n\n# Vite\nnpm run build\nvite-bundle-visualizer\n"
        },
        {
          "language": "tsx",
          "line_count": 6,
          "complexity": "simple",
          "code": "// app/dashboard/page.tsx\n// Automatically code-split by route\nexport default function Dashboard() {\n  return <div>Dashboard</div>;\n}\n"
        },
        {
          "language": "tsx",
          "line_count": 15,
          "complexity": "complex",
          "code": "import { lazy, Suspense } from 'react';\n\n// Lazy load heavy component\nconst HeavyChart = lazy(() => import('./components/HeavyChart'));\n\nfunction Dashboard() {\n  return (\n    <div>\n      <Suspense fal"
        },
        {
          "language": "tsx",
          "line_count": 6,
          "complexity": "simple",
          "code": "// Load library only when needed\nasync function handleExport() {\n  const { exportToPDF } = await import('./lib/pdf-export');\n  exportToPDF(data);\n}\n"
        },
        {
          "language": "tsx",
          "line_count": 11,
          "complexity": "complex",
          "code": "// \u274c Bad: Imports entire library\nimport _ from 'lodash';\n_.debounce(fn, 300);\n\n// \u2705 Good: Import only what you need\nimport debounce from 'lodash/debounce';\ndebounce(fn, 300);\n\n// \u2705 Better: Use modern "
        },
        {
          "language": "tsx",
          "line_count": 7,
          "complexity": "complex",
          "code": "// \u274c Bad: Importing unused code\nimport { Button, Card, Table, Modal, Tabs } from 'ui-library';\n// Only using Button\n\n// \u2705 Good: Only import what's used\nimport { Button } from 'ui-library';\n"
        },
        {
          "language": "tsx",
          "line_count": 23,
          "complexity": "complex",
          "code": "import Image from 'next/image';\n\n// \u274c Bad: Regular img tag\n<img src=\"/photo.jpg\" alt=\"Photo\" />\n\n// \u2705 Good: Next.js Image (automatic optimization)\n<Image\n  src=\"/photo.jpg\"\n  alt=\"Photo\"\n  width={800}"
        },
        {
          "language": "tsx",
          "line_count": 9,
          "complexity": "simple",
          "code": "// Images (native)\n<img src=\"photo.jpg\" loading=\"lazy\" alt=\"Photo\" />\n\n// Next.js Image (lazy by default)\n<Image src=\"/photo.jpg\" alt=\"Photo\" width={800} height={600} />\n\n// Eager loading (above fold)"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Compress images\nnpx @squoosh/cli --webp auto *.jpg\n\n# Optimize SVGs\nnpx svgo *.svg\n\n# Generate responsive images\nnpx sharp-cli resize 800 600 --input photo.jpg --output photo-800.jpg\n"
        },
        {
          "language": "tsx",
          "line_count": 22,
          "complexity": "complex",
          "code": "import { debounce } from 'es-toolkit';\n\nfunction SearchInput() {\n  const [query, setQuery] = useState('');\n\n  // Debounce API calls\n  const debouncedSearch = useMemo(\n    () => debounce((value: string"
        },
        {
          "language": "tsx",
          "line_count": 18,
          "complexity": "complex",
          "code": "import { throttle } from 'es-toolkit';\n\nfunction ScrollTracker() {\n  const handleScroll = useMemo(\n    () => throttle(() => {\n      console.log('Scroll position:', window.scrollY);\n    }, 100),\n    []"
        },
        {
          "language": "tsx",
          "line_count": 39,
          "complexity": "complex",
          "code": "import { memo, useMemo, useCallback } from 'react';\n\n// Memoize expensive component\nconst ExpensiveList = memo(function ExpensiveList({ items }: { items: Item[] }) {\n  return (\n    <ul>\n      {items.m"
        },
        {
          "language": "tsx",
          "line_count": 34,
          "complexity": "complex",
          "code": "import { useVirtualizer } from '@tanstack/react-virtual';\n\nfunction VirtualList({ items }: { items: Item[] }) {\n  const parentRef = useRef<HTMLDivElement>(null);\n\n  const virtualizer = useVirtualizer("
        },
        {
          "language": "tsx",
          "line_count": 13,
          "complexity": "simple",
          "code": "// app/layout.tsx\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html>\n      <head>\n        {/* Inline critical CSS */}\n        <style dangerouslySet"
        },
        {
          "language": "tsx",
          "line_count": 10,
          "complexity": "simple",
          "code": "// \u274c Bad: Inline styles (no caching, creates new object every render)\n<div style={{ color: 'red', fontSize: 16 }}>Text</div>\n\n// \u2705 Good: CSS modules or Tailwind (cached, reusable)\n<div className=\"text"
        },
        {
          "language": "tsx",
          "line_count": 10,
          "complexity": "simple",
          "code": "// Tailwind CSS (automatic purging)\n// tailwind.config.js\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx}',\n    './components/**/*.{js,ts,jsx,tsx}',\n  ],\n  // Purges unused classes in "
        },
        {
          "language": "tsx",
          "line_count": 23,
          "complexity": "complex",
          "code": "import Link from 'next/link';\n\n// Next.js prefetches linked pages on hover\n<Link href=\"/dashboard\" prefetch={true}>\n  Dashboard\n</Link>\n\n// Manual prefetch\nimport { useRouter } from 'next/navigation';"
        },
        {
          "language": "tsx",
          "line_count": 20,
          "complexity": "simple",
          "code": "// app/layout.tsx\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html>\n      <head>\n        {/* Preconnect to external domains */}\n        <link rel="
        },
        {
          "language": "tsx",
          "line_count": 20,
          "complexity": "simple",
          "code": "// Next.js fetch with caching\nasync function getData() {\n  // Static (cached forever)\n  const res = await fetch('https://api.example.com/data', {\n    cache: 'force-cache'\n  });\n\n  // Dynamic (no cache"
        },
        {
          "language": "tsx",
          "line_count": 23,
          "complexity": "complex",
          "code": "// \u2705 Server Component (default)\nasync function PostList() {\n  const posts = await getPosts(); // Fetches on server\n\n  return (\n    <div>\n      {posts.map(post => (\n        <PostCard key={post.id} post"
        },
        {
          "language": "tsx",
          "line_count": 22,
          "complexity": "complex",
          "code": "import { Suspense } from 'react';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n\n      {/* Fast component renders immediately */}\n      <UserGreeting />\n\n      {/* Sl"
        },
        {
          "language": "tsx",
          "line_count": 33,
          "complexity": "complex",
          "code": "// app/components/WebVitals.tsx\n'use client';\n\nimport { useReportWebVitals } from 'next/web-vitals';\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    console.log(metric);\n\n    // "
        },
        {
          "language": "tsx",
          "line_count": 18,
          "complexity": "complex",
          "code": "// React DevTools Profiler\nimport { Profiler } from 'react';\n\nfunction onRenderCallback(\n  id: string,\n  phase: 'mount' | 'update',\n  actualDuration: number,\n  baseDuration: number,\n  startTime: numbe"
        },
        {
          "language": "tsx",
          "line_count": 10,
          "complexity": "simple",
          "code": "// Measure custom metrics\nperformance.mark('data-fetch-start');\nawait fetchData();\nperformance.mark('data-fetch-end');\n\nperformance.measure('data-fetch', 'data-fetch-start', 'data-fetch-end');\n\nconst "
        },
        {
          "language": "tsx",
          "line_count": 32,
          "complexity": "complex",
          "code": "// app/layout.tsx\nimport { Inter, Roboto_Mono } from 'next/font/google';\n\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-inter',\n});\n\nconst robotoMono = Roboto_Mono"
        },
        {
          "language": "css",
          "line_count": 14,
          "complexity": "simple",
          "code": "/* font-display: swap - Show fallback, swap when loaded */\n@font-face {\n  font-family: 'CustomFont';\n  src: url('/fonts/custom.woff2');\n  font-display: swap;\n}\n\n/* font-display: optional - Use only if"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://fonts.googleapis.com\""
        },
        {
          "type": "example",
          "url": "https://api.example.com\""
        },
        {
          "type": "example",
          "url": "https://cdn.example.com\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/data'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/data'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/data'"
        }
      ],
      "tools_mentioned": [
        "vite",
        "webpack"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "26 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "14 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 88.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "security/secrets-management.md",
      "category": "security",
      "skill_name": "secrets-management",
      "frontmatter": {
        "name": "security-secrets-management",
        "description": "Secrets management patterns including vaults, environment variables, key rotation, and secure credential handling for applications"
      },
      "metrics": {
        "line_count": 714,
        "code_line_count": 133,
        "code_examples": 16,
        "external_refs": 2,
        "tools_mentioned": 6,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "\"\"\"\nSecrets are sensitive data that must be protected:\n- API keys and tokens\n- Database passwords\n- Encryption keys\n- TLS/SSL certificates\n- OAuth client secrets\n- Service account credentials\n- Signin"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "import os\nfrom typing import Optional\n\n# Basic usage\nDATABASE_URL = os.environ['DATABASE_URL']  # Raises KeyError if missing\nAPI_KEY = os.environ.get('API_KEY')  # Returns None if missing\nAPI_KEY = os"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "# .env file (NEVER commit to git)\nDATABASE_URL=postgresql://user:password@localhost/db\nAPI_KEY=sk_test_abc123\nSTRIPE_SECRET=sk_test_def456\nDEBUG=true\n\n# Load with python-dotenv\nfrom dotenv import load"
        },
        {
          "language": "gitignore",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Never commit secrets\n.env\n.env.local\n.env.*.local\nsecrets.json\ncredentials.json\n*.pem\n*.key\n"
        },
        {
          "language": "python",
          "line_count": 58,
          "complexity": "complex",
          "code": "import hvac\nfrom typing import Dict, Any\n\nclass VaultClient:\n    \"\"\"HashiCorp Vault client wrapper\"\"\"\n\n    def __init__(self, url: str = None, token: str = None):\n        self.url = url or os.environ["
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "class VaultAppRoleClient:\n    \"\"\"Vault client using AppRole authentication\"\"\"\n\n    def __init__(self, role_id: str, secret_id: str, url: str = None):\n        self.url = url or os.environ['VAULT_ADDR']"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "medium",
          "code": "def get_dynamic_db_credentials(vault_client, role: str):\n    \"\"\"Get short-lived database credentials from Vault\"\"\"\n\n    # Vault generates credentials on-demand\n    response = vault_client.client.secre"
        },
        {
          "language": "python",
          "line_count": 68,
          "complexity": "complex",
          "code": "import boto3\nimport json\nfrom botocore.exceptions import ClientError\n\nclass AWSSecretsManager:\n    \"\"\"AWS Secrets Manager client\"\"\"\n\n    def __init__(self, region_name: str = 'us-east-1'):\n        sel"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "from functools import lru_cache\nimport time\n\nclass CachedSecretsManager:\n    \"\"\"Cache secrets to reduce API calls\"\"\"\n\n    def __init__(self, secrets_manager):\n        self.secrets_manager = secrets_ma"
        },
        {
          "language": "python",
          "line_count": 58,
          "complexity": "complex",
          "code": "from google.cloud import secretmanager\n\nclass GCPSecretsManager:\n    \"\"\"Google Cloud Secret Manager client\"\"\"\n\n    def __init__(self, project_id: str):\n        self.project_id = project_id\n        sel"
        },
        {
          "language": "python",
          "line_count": 69,
          "complexity": "complex",
          "code": "from datetime import datetime, timedelta\nfrom typing import Callable\n\nclass KeyRotationService:\n    \"\"\"Automated key rotation service\"\"\"\n\n    def __init__(self, secrets_manager, notification_service=N"
        },
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "class ZeroDowntimeRotation:\n    \"\"\"Rotate secrets without downtime\"\"\"\n\n    def __init__(self, secrets_manager):\n        self.secrets_manager = secrets_manager\n\n    def rotate_with_overlap(self, secret"
        },
        {
          "language": "yaml",
          "line_count": 24,
          "complexity": "medium",
          "code": "# .github/workflows/deploy.yml\nname: Deploy\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Deploy to product"
        },
        {
          "language": "yaml",
          "line_count": 23,
          "complexity": "medium",
          "code": "# .github/workflows/deploy.yml\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Import Secrets from Vault\n        uses: hashicorp/vault-action@v2"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "# \u274c VULNERABLE - Hardcoded secrets\nAPI_KEY = \"sk_live_abc123def456\"\n\n# \u274c VULNERABLE - Secrets in comments\n# Production API key: sk_live_abc123def456\n\n# \u274c VULNERABLE - Secrets in error messages\ntry:\n  "
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# git-secrets (prevent committing secrets)\ngit secrets --install\ngit secrets --register-aws\ngit secrets --scan\n\n# truffleHog (scan repository history)\ntrufflehog git https://github.com/user/repo\n\n# de"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://vault.example.com"
        },
        {
          "type": "github",
          "url": "https://github.com/user/repo"
        }
      ],
      "tools_mentioned": [
        "postgresql",
        "vault",
        "tls",
        "oauth",
        "postgres",
        "ssl"
      ],
      "config_snippets": [
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "14 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 88.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "api/api-authentication.md",
      "category": "api",
      "skill_name": "api-authentication",
      "frontmatter": {
        "name": "api-api-authentication",
        "description": "Implementing API authentication for new services"
      },
      "metrics": {
        "line_count": 792,
        "code_line_count": 127,
        "code_examples": 18,
        "external_refs": 6,
        "tools_mentioned": 2,
        "config_snippets": 3
      },
      "code_examples": [
        {
          "language": "json",
          "line_count": 5,
          "complexity": "simple",
          "code": "{\n  \"alg\": \"HS256\",  // Algorithm (HS256, RS256)\n  \"typ\": \"JWT\"     // Token type\n}\n"
        },
        {
          "language": "json",
          "line_count": 12,
          "complexity": "simple",
          "code": "{\n  \"sub\": \"1234567890\",        // Subject (user ID)\n  \"name\": \"John Doe\",         // Custom claim\n  \"email\": \"john@example.com\", // Custom claim\n  \"role\": \"admin\",            // Custom claim\n  \"iat\":"
        },
        {
          "language": "javascript",
          "line_count": 12,
          "complexity": "simple",
          "code": "// HS256 (symmetric)\nHMACSHA256(\n  base64UrlEncode(header) + \".\" + base64UrlEncode(payload),\n  secret_key\n)\n\n// RS256 (asymmetric)\nRSASHA256(\n  base64UrlEncode(header) + \".\" + base64UrlEncode(payload)"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "import jwt\nfrom datetime import datetime, timedelta\n\n# Generate token\ndef create_token(user_id: int, role: str) -> str:\n    payload = {\n        \"sub\": str(user_id),\n        \"role\": role,\n        \"iat\""
        },
        {
          "language": "typescript",
          "line_count": 25,
          "complexity": "complex",
          "code": "import jwt from 'jsonwebtoken';\n\n// Generate token\nfunction createToken(userId: string, role: string): string {\n  return jwt.sign(\n    { sub: userId, role },\n    process.env.JWT_SECRET,\n    { expiresI"
        },
        {
          "language": "go",
          "line_count": 39,
          "complexity": "complex",
          "code": "import (\n    \"time\"\n    \"github.com/golang-jwt/jwt/v5\"\n)\n\ntype Claims struct {\n    UserID int    `json:\"sub\"`\n    Role   string `json:\"role\"`\n    jwt.RegisteredClaims\n}\n\n// Generate token\nfunc CreateT"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "from authlib.integrations.flask_client import OAuth\n\noauth = OAuth(app)\noauth.register(\n    'google',\n    client_id='YOUR_CLIENT_ID',\n    client_secret='YOUR_CLIENT_SECRET',\n    server_metadata_url='h"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "import requests\n\n# Get access token\nresponse = requests.post('https://auth.example.com/oauth/token', data={\n    'grant_type': 'client_credentials',\n    'client_id': 'your_client_id',\n    'client_secre"
        },
        {
          "language": "typescript",
          "line_count": 16,
          "complexity": "simple",
          "code": "async function refreshAccessToken(refreshToken: string): Promise<string> {\n  const response = await fetch('https://auth.example.com/oauth/token', {\n    method: 'POST',\n    headers: { 'Content-Type': '"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "import secrets\nimport hashlib\nfrom datetime import datetime\n\n# Generate API key\ndef generate_api_key() -> tuple[str, str]:\n    # Generate random key\n    key = secrets.token_urlsafe(32)  # 32 bytes = 2"
        },
        {
          "language": "sql",
          "line_count": 16,
          "complexity": "simple",
          "code": "CREATE TABLE api_keys (\n    id SERIAL PRIMARY KEY,\n    key_hash VARCHAR(64) NOT NULL UNIQUE,  -- SHA-256 hash\n    user_id INT NOT NULL,\n    name VARCHAR(255),                      -- Key description\n "
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "from fastapi import Security, HTTPException, status\nfrom fastapi.security import APIKeyHeader\nimport hashlib\n\napi_key_header = APIKeyHeader(name=\"X-API-Key\", auto_error=False)\n\nasync def validate_api_"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "from fastapi import Response\n\n@app.post('/login')\nasync def login(response: Response, credentials: LoginRequest):\n    # Validate credentials\n    user = authenticate(credentials.email, credentials.pass"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "GET /api/user/profile HTTP/1.1\nHost: api.example.com\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "GET /api/data HTTP/1.1\nHost: api.example.com\nX-API-Key: sk_live_abc123def456...\n"
        },
        {
          "language": "typescript",
          "line_count": 25,
          "complexity": "medium",
          "code": "let accessToken = '...';\nlet refreshToken = '...';\nlet tokenExpiry = Date.now() + 3600000; // 1 hour\n\n// Interceptor to refresh token before requests\nasync function getValidToken(): Promise<string> {\n"
        },
        {
          "language": "typescript",
          "line_count": 28,
          "complexity": "medium",
          "code": "async function apiRequest(url: string, options: RequestInit = {}) {\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      ...options.headers,\n      'Authorization': `Bearer ${acce"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "import pyotp\nimport qrcode\nfrom io import BytesIO\n\n# Generate MFA secret for user\ndef setup_mfa(user_id: int) -> dict:\n    secret = pyotp.random_base32()\n\n    # Store secret in database (encrypted)\n  "
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com\""
        },
        {
          "type": "example",
          "url": "https://app.example.com\""
        },
        {
          "type": "external",
          "url": "https://accounts.google.com/.well-known/openid-configuration'"
        },
        {
          "type": "example",
          "url": "https://auth.example.com/oauth/token'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/resource'"
        },
        {
          "type": "example",
          "url": "https://auth.example.com/oauth/token'"
        }
      ],
      "tools_mentioned": [
        "jwt",
        "oauth"
      ],
      "config_snippets": [
        "json",
        "json",
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql, json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 88.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "infrastructure/kubernetes-basics.md",
      "category": "infrastructure",
      "skill_name": "kubernetes-basics",
      "frontmatter": {
        "name": "infrastructure-kubernetes-basics",
        "description": "Deploying containerized applications at scale"
      },
      "metrics": {
        "line_count": 788,
        "code_line_count": 190,
        "code_examples": 19,
        "external_refs": 2,
        "tools_mentioned": 7,
        "config_snippets": 17
      },
      "code_examples": [
        {
          "language": "yaml",
          "line_count": 39,
          "complexity": "medium",
          "code": "# pod.yaml - Smallest deployable unit\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod\n  labels:\n    app: nginx\n    environment: production\nspec:\n  containers:\n  - name: nginx\n    image: nginx:1.2"
        },
        {
          "language": "yaml",
          "line_count": 62,
          "complexity": "complex",
          "code": "# deployment.yaml - Manages ReplicaSets and rolling updates\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-app\n  labels:\n    app: web-app\nspec:\n  replicas: 3\n  strategy:\n    type: RollingU"
        },
        {
          "language": "yaml",
          "line_count": 45,
          "complexity": "medium",
          "code": "# service-clusterip.yaml - Internal service\napiVersion: v1\nkind: Service\nmetadata:\n  name: web-app-service\nspec:\n  type: ClusterIP  # Only accessible within cluster\n  selector:\n    app: web-app\n  port"
        },
        {
          "language": "yaml",
          "line_count": 62,
          "complexity": "complex",
          "code": "# configmap.yaml - Configuration data\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-config\ndata:\n  # Key-value pairs\n  log_level: \"info\"\n  max_connections: \"100\"\n\n  # File-like keys\n  config.js"
        },
        {
          "language": "yaml",
          "line_count": 42,
          "complexity": "medium",
          "code": "# secret.yaml - Sensitive data (base64 encoded)\napiVersion: v1\nkind: Secret\nmetadata:\n  name: db-credentials\ntype: Opaque\ndata:\n  username: YWRtaW4=  # echo -n 'admin' | base64\n  password: cGFzc3dvcmQ"
        },
        {
          "language": "yaml",
          "line_count": 33,
          "complexity": "medium",
          "code": "# ingress.yaml - HTTP/HTTPS routing\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: app-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    cert-manager.io/cl"
        },
        {
          "language": "yaml",
          "line_count": 32,
          "complexity": "medium",
          "code": "# Sidecar pattern - logging container\napiVersion: v1\nkind: Pod\nmetadata:\n  name: web-app-with-logging\nspec:\n  containers:\n  # Main application container\n  - name: web-app\n    image: myapp:1.0\n    port"
        },
        {
          "language": "yaml",
          "line_count": 31,
          "complexity": "medium",
          "code": "# cronjob.yaml - Scheduled jobs\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: daily-backup\nspec:\n  schedule: \"0 2 * * *\"  # Daily at 2 AM UTC\n  successfulJobsHistoryLimit: 3\n  failedJobsHistory"
        },
        {
          "language": "yaml",
          "line_count": 39,
          "complexity": "medium",
          "code": "# hpa.yaml - Auto-scaling based on metrics\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: web-app-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n "
        },
        {
          "language": "yaml",
          "line_count": 41,
          "complexity": "medium",
          "code": "# statefulset.yaml - For stateful applications\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: postgres\nspec:\n  serviceName: postgres-headless\n  replicas: 3\n  selector:\n    matchLabels:\n      "
        },
        {
          "language": "yaml",
          "line_count": 34,
          "complexity": "medium",
          "code": "# networkpolicy.yaml - Network segmentation\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: api-network-policy\nspec:\n  podSelector:\n    matchLabels:\n      app: api\n  policyTypes"
        },
        {
          "language": "bash",
          "line_count": 60,
          "complexity": "complex",
          "code": "# Cluster info\nkubectl cluster-info\nkubectl get nodes\nkubectl top nodes\n\n# Pods\nkubectl get pods\nkubectl get pods -o wide\nkubectl describe pod <pod-name>\nkubectl logs <pod-name>\nkubectl logs <pod-name"
        },
        {
          "language": "yaml",
          "line_count": 17,
          "complexity": "simple",
          "code": "resources:\n  requests:\n    memory: \"256Mi\"  # Guaranteed\n    cpu: \"500m\"      # 0.5 CPU cores\n  limits:\n    memory: \"512Mi\"  # Maximum\n    cpu: \"1000m\"     # 1 CPU core\n\n# CPU units:\n# 1 CPU = 1000m ("
        },
        {
          "language": "yaml",
          "line_count": 20,
          "complexity": "simple",
          "code": "# \u274c NEVER: Run as root without necessity\nspec:\n  containers:\n  - name: app\n    image: myapp:1.0\n    # No securityContext - runs as root\n\n# \u2705 CORRECT: Run as non-root user\nspec:\n  securityContext:\n    "
        },
        {
          "language": "yaml",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u274c NEVER: Use 'latest' tag in production\nspec:\n  containers:\n  - name: app\n    image: myapp:latest  # Unpredictable\n\n# \u2705 CORRECT: Use specific version tags\nspec:\n  containers:\n  - name: app\n    image"
        },
        {
          "language": "yaml",
          "line_count": 20,
          "complexity": "simple",
          "code": "# \u274c NEVER: Ignore resource limits\nspec:\n  containers:\n  - name: app\n    image: myapp:1.0\n    # No resources defined - can consume unlimited\n\n# \u2705 CORRECT: Always define resources\nspec:\n  containers:\n  "
        },
        {
          "language": "yaml",
          "line_count": 15,
          "complexity": "simple",
          "code": "# \u274c Don't expose secrets in environment variables unnecessarily\nenv:\n- name: DB_PASSWORD\n  value: \"hardcoded-password\"  # Visible in pod spec\n\n# \u2705 CORRECT: Use secrets and mount as files when possible"
        },
        {
          "language": "yaml",
          "line_count": 25,
          "complexity": "medium",
          "code": "# \u274c Don't skip health checks\nspec:\n  containers:\n  - name: app\n    image: myapp:1.0\n    # No liveness or readiness probes\n\n# \u2705 CORRECT: Always implement health checks\nspec:\n  containers:\n  - name: app"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u274c Don't apply without reviewing\nkubectl apply -f manifest.yaml  # No validation\n\n# \u2705 CORRECT: Validate and review first\nkubectl apply -f manifest.yaml --dry-run=client -o yaml\nkubectl diff -f manife"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com\""
        },
        {
          "type": "external",
          "url": "http://backend:8080"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "postgresql",
        "tls",
        "nginx",
        "postgres",
        "terraform",
        "docker"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "19 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 88.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/continuous-integration.md",
      "category": "engineering",
      "skill_name": "continuous-integration",
      "frontmatter": {
        "name": "engineering-continuous-integration",
        "description": "CI/CD pipeline design, automated testing, deployment strategies, and continuous delivery best practices"
      },
      "metrics": {
        "line_count": 589,
        "code_line_count": 142,
        "code_examples": 14,
        "external_refs": 6,
        "tools_mentioned": 2,
        "config_snippets": 11
      },
      "code_examples": [
        {
          "language": "yaml",
          "line_count": 41,
          "complexity": "medium",
          "code": "# .github/workflows/ci.yml\nname: CI Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions"
        },
        {
          "language": "yaml",
          "line_count": 66,
          "complexity": "complex",
          "code": "# .github/workflows/pipeline.yml\nname: Full Pipeline\n\non:\n  push:\n    branches: [main]\n\njobs:\n  # Stage 1: Build\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      "
        },
        {
          "language": "yaml",
          "line_count": 25,
          "complexity": "medium",
          "code": "- name: Check code coverage\n  run: |\n    pytest --cov=src --cov-fail-under=80\n    # Fails if coverage < 80%\n\n- name: Check code complexity\n  run: |\n    radon cc src/ -a -nb --total-average-threshold=B"
        },
        {
          "language": "yaml",
          "line_count": 27,
          "complexity": "medium",
          "code": "# Blue-Green deployment strategy\n- name: Deploy to green environment\n  run: |\n    # Deploy new version to \"green\" environment\n    kubectl apply -f k8s/green/ -n production\n\n- name: Run smoke tests on "
        },
        {
          "language": "yaml",
          "line_count": 30,
          "complexity": "medium",
          "code": "# Gradual rollout to production\n- name: Deploy canary (5% traffic)\n  run: |\n    kubectl set image deployment/myapp-canary \\\n      myapp=myapp:${{ github.sha }}\n    kubectl scale deployment/myapp-canar"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "# Deploy with feature disabled\nfrom feature_flags import is_enabled\n\n@app.route(\"/api/users\")\ndef get_users():\n    if is_enabled(\"new_user_endpoint\"):\n        return new_get_users()  # New implementat"
        },
        {
          "language": "yaml",
          "line_count": 25,
          "complexity": "medium",
          "code": "- name: Deploy new version\n  id: deploy\n  run: |\n    kubectl set image deployment/myapp myapp:${{ github.sha }}\n    kubectl rollout status deployment/myapp\n\n- name: Monitor deployment\n  id: monitor\n  "
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "- name: Install dependencies\n  run: npm install  # Downloads every time\n\n- name: Run all tests\n  run: npm test     # Runs everything\n"
        },
        {
          "language": "yaml",
          "line_count": 20,
          "complexity": "simple",
          "code": "- name: Cache dependencies\n  uses: actions/cache@v3\n  with:\n    path: ~/.npm\n    key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n\n- name: Install dependencies\n  run: npm ci  # Fast"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "name: CI\non: [push, pull_request]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: npm test\n"
        },
        {
          "language": "yaml",
          "line_count": 17,
          "complexity": "simple",
          "code": "# .gitlab-ci.yml\nstages:\n  - test\n  - deploy\n\ntest:\n  stage: test\n  script:\n    - npm test\n\ndeploy:\n  stage: deploy\n  script:\n    - kubectl apply -f k8s/\n  only:\n    - main\n"
        },
        {
          "language": "yaml",
          "line_count": 15,
          "complexity": "simple",
          "code": "# .circleci/config.yml\nversion: 2.1\njobs:\n  test:\n    docker:\n      - image: node:18\n    steps:\n      - checkout\n      - run: npm test\n\nworkflows:\n  test-deploy:\n    jobs:\n      - test\n"
        },
        {
          "language": "groovy",
          "line_count": 16,
          "complexity": "simple",
          "code": "pipeline {\n    agent any\n    stages {\n        stage('Test') {\n            steps {\n                sh 'npm test'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                sh"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "@app.route(\"/health\")\ndef health():\n    return {\n        \"status\": \"healthy\",\n        \"version\": os.getenv(\"VERSION\"),\n        \"database\": check_database(),\n        \"cache\": check_cache(),\n    }\n\n@app"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://green.myapp.com/health"
        },
        {
          "type": "external",
          "url": "https://green.myapp.com"
        },
        {
          "type": "external",
          "url": "https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912"
        },
        {
          "type": "external",
          "url": "https://www.amazon.com/Phoenix-Project-DevOps-Helping-Business/dp/0988262592"
        },
        {
          "type": "external",
          "url": "https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339"
        },
        {
          "type": "github",
          "url": "https://docs.github.com/en/actions"
        }
      ],
      "tools_mentioned": [
        "pytest",
        "docker"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 88.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "protocols/http-fundamentals.md",
      "category": "protocols",
      "skill_name": "http-fundamentals",
      "frontmatter": {
        "name": "protocols-http-fundamentals",
        "description": "HTTP/1.1 protocol fundamentals including methods, headers, status codes, and request/response cycle"
      },
      "metrics": {
        "line_count": 515,
        "code_line_count": 169,
        "code_examples": 29,
        "external_refs": 7,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "http",
          "line_count": 7,
          "complexity": "simple",
          "code": "GET /api/users/123 HTTP/1.1\nHost: api.example.com\nUser-Agent: Mozilla/5.0\nAccept: application/json\nAuthorization: Bearer eyJhbGc...\nConnection: keep-alive\n"
        },
        {
          "language": "http",
          "line_count": 8,
          "complexity": "simple",
          "code": "HTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 156\nCache-Control: max-age=3600\nConnection: keep-alive\n\n{\"id\": 123, \"name\": \"Alice\", \"email\": \"alice@example.com\"}\n"
        },
        {
          "language": "http",
          "line_count": 4,
          "complexity": "simple",
          "code": "GET /api/users/123 HTTP/1.1\nHEAD /api/users/123 HTTP/1.1\nOPTIONS /api/users HTTP/1.1\n"
        },
        {
          "language": "http",
          "line_count": 3,
          "complexity": "simple",
          "code": "PUT /api/users/123 HTTP/1.1\nDELETE /api/users/123 HTTP/1.1\n"
        },
        {
          "language": "http",
          "line_count": 3,
          "complexity": "simple",
          "code": "POST /api/users HTTP/1.1\nPATCH /api/users/123 HTTP/1.1\n"
        },
        {
          "language": "http",
          "line_count": 4,
          "complexity": "simple",
          "code": "GET /page1 HTTP/1.0\nHost: example.com\nConnection: keep-alive\n"
        },
        {
          "language": "http",
          "line_count": 4,
          "complexity": "simple",
          "code": "GET /page1 HTTP/1.1\nHost: example.com\nConnection: keep-alive\n"
        },
        {
          "language": "http",
          "line_count": 4,
          "complexity": "simple",
          "code": "GET /page1 HTTP/1.1\nHost: example.com\nConnection: close\n"
        },
        {
          "language": "http",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c Bad: Ignoring client preferences\nGET /api/users/123 HTTP/1.1\nHost: api.example.com\n\nResponse:\nContent-Type: application/xml\n"
        },
        {
          "language": "http",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u2705 Good: Respecting Accept header\nGET /api/users/123 HTTP/1.1\nHost: api.example.com\nAccept: application/json\n\nResponse:\nContent-Type: application/json\n"
        },
        {
          "language": "http",
          "line_count": 4,
          "complexity": "simple",
          "code": "# \u274c Bad: Always downloading full resource\nGET /api/users/123 HTTP/1.1\nHost: api.example.com\n"
        },
        {
          "language": "http",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u2705 Good: Using ETags\nGET /api/users/123 HTTP/1.1\nHost: api.example.com\nIf-None-Match: \"33a64df551425fcc55e4d42a148795d9f25f89d4\"\n\nResponse if unchanged:\nHTTP/1.1 304 Not Modified\nETag: \"33a64df551425"
        },
        {
          "language": "http",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u2705 Request first 1000 bytes\nGET /files/video.mp4 HTTP/1.1\nHost: cdn.example.com\nRange: bytes=0-999\n\nResponse:\nHTTP/1.1 206 Partial Content\nContent-Range: bytes 0-999/50000\nContent-Length: 1000\n\n[Firs"
        },
        {
          "language": "http",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Preflight request\nOPTIONS /api/users HTTP/1.1\nHost: api.example.com\nOrigin: https://webapp.example.com\nAccess-Control-Request-Method: POST\n\nResponse:\nHTTP/1.1 204 No Content\nAccess-Control-Allow-Ori"
        },
        {
          "language": "http",
          "line_count": 3,
          "complexity": "simple",
          "code": "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nCookie: session_id=abc123; user_pref=dark_mode\n"
        },
        {
          "language": "http",
          "line_count": 4,
          "complexity": "simple",
          "code": "Accept: application/json, text/plain\nAccept-Language: en-US, en;q=0.9, es;q=0.8\nAccept-Encoding: gzip, deflate, br\n"
        },
        {
          "language": "http",
          "line_count": 4,
          "complexity": "simple",
          "code": "If-None-Match: \"686897696a7c876b7e\"\nIf-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT\nCache-Control: no-cache\n"
        },
        {
          "language": "http",
          "line_count": 4,
          "complexity": "simple",
          "code": "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)\nReferer: https://previous-page.com\nHost: api.example.com\n"
        },
        {
          "language": "http",
          "line_count": 5,
          "complexity": "simple",
          "code": "Content-Type: application/json; charset=utf-8\nContent-Length: 1234\nContent-Encoding: gzip\nContent-Language: en\n"
        },
        {
          "language": "http",
          "line_count": 5,
          "complexity": "simple",
          "code": "Cache-Control: public, max-age=3600\nETag: \"686897696a7c876b7e\"\nExpires: Wed, 21 Oct 2015 07:28:00 GMT\nLast-Modified: Wed, 21 Oct 2015 06:28:00 GMT\n"
        },
        {
          "language": "http",
          "line_count": 5,
          "complexity": "simple",
          "code": "Strict-Transport-Security: max-age=31536000; includeSubDomains\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nContent-Security-Policy: default-src 'self'\n"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "from flask import Flask, request, jsonify, make_response\nfrom datetime import datetime, timedelta\n\napp = Flask(__name__)\n\n@app.route('/api/users/<int:user_id>', methods=['GET'])\ndef get_user(user_id):"
        },
        {
          "language": "go",
          "line_count": 52,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n    \"time\"\n)\n\nfunc main() {\n    // Create client with timeouts\n    client := &http.Client{\n        Timeout: 10 "
        },
        {
          "language": "http",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c Bad: Using GET for state-changing operations\nGET /api/users/123/delete HTTP/1.1\n\n# \u2705 Good: Using DELETE\nDELETE /api/users/123 HTTP/1.1\n"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# \u274c Bad: Always returning 200\n@app.route('/api/users', methods=['POST'])\ndef create_user():\n    if invalid_data:\n        return jsonify({\"error\": \"Invalid\"}), 200  # Wrong!\n\n# \u2705 Good: Appropriate stat"
        },
        {
          "language": "http",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u2705 Good: Explicit content type\nPOST /api/users HTTP/1.1\nContent-Type: application/json; charset=utf-8\n\n{\"name\": \"Alice\"}\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "complex",
          "code": "# \u2705 Good: Reuse connection\nimport requests\n\nsession = requests.Session()\nfor i in range(10):\n    response = session.get(f'https://api.example.com/users/{i}')\n    # Connection reused across requests\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Debug with curl verbose\ncurl -v https://api.example.com/users\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Set explicit timeouts\nresponse = requests.get(url, timeout=(3.0, 10.0))  # (connect, read)\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://webapp.example.com"
        },
        {
          "type": "example",
          "url": "https://webapp.example.com"
        },
        {
          "type": "external",
          "url": "https://previous-page.com"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users/123\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/users\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/users/{i}'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        }
      ],
      "tools_mentioned": [
        "tls"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "29 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "3 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 87.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/code-review.md",
      "category": "engineering",
      "skill_name": "code-review",
      "frontmatter": {
        "name": "engineering-code-review",
        "description": "Code review practices, PR etiquette, constructive feedback, automation tools, and effective review workflows"
      },
      "metrics": {
        "line_count": 550,
        "code_line_count": 127,
        "code_examples": 17,
        "external_refs": 8,
        "tools_mentioned": 0,
        "config_snippets": 3
      },
      "code_examples": [
        {
          "language": "markdown",
          "line_count": 26,
          "complexity": "medium",
          "code": "## What Changed\nAdded user profile photo upload with S3 storage and CloudFront CDN.\n\n## Why\nUsers have requested profile photos (50+ tickets). Unblocks social\nfeatures planned for Q1 2025.\n\n## How\n- N"
        },
        {
          "language": "markdown",
          "line_count": 6,
          "complexity": "simple",
          "code": "## What Changed\nAdded profile photos.\n\n## Testing\nTested manually, works fine.\n"
        },
        {
          "language": "markdown",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Asking Questions\n\u2753 What happens if the user uploads a 20MB file? Should we validate\nsize on the client side too?\n\n# Suggesting Improvements\n\ud83d\udca1 Consider extracting this validation logic into a separat"
        },
        {
          "language": "python",
          "line_count": 2,
          "complexity": "simple",
          "code": "filename = f\"{user_id}_{uuid4()}.jpg\"\n"
        },
        {
          "language": "markdown",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Too Vague\nThis doesn't look right.\n\n# Overly Critical\nThis is terrible. Did you even test this?\n\n# Nitpicking Without Tools\nPlease add spaces around operators. (Use automated formatter instead!)\n\n# "
        },
        {
          "language": "markdown",
          "line_count": 34,
          "complexity": "medium",
          "code": "## Functionality\n- [ ] Code does what PR description claims\n- [ ] Edge cases handled (null, empty, large inputs)\n- [ ] Error cases handled gracefully\n\n## Testing\n- [ ] Unit tests added for new logic\n-"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Bad: One massive PR\nPR #1: \"Implement entire authentication system\" (2000 lines)\n  - Database models\n  - API endpoints\n  - Frontend components\n  - Tests\n  - Documentation\n\n# Good: Multiple focused P"
        },
        {
          "language": "yaml",
          "line_count": 21,
          "complexity": "medium",
          "code": "# .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: ch"
        },
        {
          "language": "yaml",
          "line_count": 28,
          "complexity": "medium",
          "code": "# .github/workflows/pr-checks.yml\nname: PR Checks\non: [pull_request]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run linters\n        run: |\n   "
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "# codecov.yml\ncoverage:\n  status:\n    project:\n      default:\n        target: 80%  # Fail PR if coverage drops below 80%\n        threshold: 2%  # Allow 2% decrease\n"
        },
        {
          "language": "markdown",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Original Feedback\n@reviewer: This should use dependency injection instead of direct\ninstantiation.\n\n# Author Response\n@author: I considered that, but this is a one-off utility function\nthat's only c"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# PR: Implement entire user management system (1500 lines)\n# - User model, authentication, authorization, profile, settings\n# - Impossible to review thoroughly\n"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "# PR 1: Add User model and migrations (100 lines)\nclass User(models.Model):\n    email = models.EmailField(unique=True)\n    password_hash = models.CharField(max_length=255)\n    created_at = models.Date"
        },
        {
          "language": "go",
          "line_count": 8,
          "complexity": "simple",
          "code": "func TestUser(t *testing.T) {\n    // What is this testing?\n    u := User{Email: \"test@example.com\"}\n    if u.Email != \"test@example.com\" {\n        t.Fail()\n    }\n}\n"
        },
        {
          "language": "go",
          "line_count": 22,
          "complexity": "medium",
          "code": "func TestUserEmailValidation(t *testing.T) {\n    tests := []struct {\n        name    string\n        email   string\n        wantErr bool\n    }{\n        {name: \"valid email\", email: \"user@example.com\", "
        },
        {
          "language": "typescript",
          "line_count": 10,
          "complexity": "simple",
          "code": "// Bad: 800-line component doing everything\nexport function UserDashboard() {\n  // Authentication logic\n  // Data fetching\n  // Form handling\n  // Validation\n  // Rendering\n  // Hard to review!\n}\n"
        },
        {
          "language": "typescript",
          "line_count": 17,
          "complexity": "simple",
          "code": "// Good: Small, focused components\nexport function UserDashboard() {\n  const { user } = useAuth();\n  const { profile, loading } = useUserProfile(user.id);\n\n  if (loading) return <LoadingSpinner />;\n\n "
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/pre-commit/pre-commit-hooks"
        },
        {
          "type": "github",
          "url": "https://github.com/psf/black"
        },
        {
          "type": "github",
          "url": "https://github.com/pycqa/flake8"
        },
        {
          "type": "github",
          "url": "https://github.com/pre-commit/mirrors-eslint"
        },
        {
          "type": "external",
          "url": "https://google.github.io/eng-practices/review/"
        },
        {
          "type": "external",
          "url": "https://learn.microsoft.com/en-us/azure/devops/repos/git/review-pull-requests"
        },
        {
          "type": "external",
          "url": "https://conventionalcomments.org/"
        },
        {
          "type": "github",
          "url": "https://docs.github.com/en/pull-requests/collaborating-with-pull-requests"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 87.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/rfc-structure-format.md",
      "category": "engineering",
      "skill_name": "rfc-structure-format",
      "frontmatter": {
        "name": "engineering-rfc-structure-format",
        "description": "RFC document structure, templates, formatting conventions, and versioning for technical design documents"
      },
      "metrics": {
        "line_count": 622,
        "code_line_count": 65,
        "code_examples": 8,
        "external_refs": 2,
        "tools_mentioned": 9,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "markdown",
          "line_count": 16,
          "complexity": "simple",
          "code": "# RFC-001: Add User Profile Photo Upload\n\n**Author**: Jane Doe (@jane)\n**Created**: 2025-10-25\n**Status**: Draft \u2192 In Review \u2192 Approved\n**Reviewers**: @alice (backend), @bob (frontend), @charlie (secu"
        },
        {
          "language": "markdown",
          "line_count": 43,
          "complexity": "medium",
          "code": "# RFC-042: Real-Time Collaborative Editing System\n\n## Metadata\n- **RFC Number**: 042\n- **Title**: Real-Time Collaborative Editing System\n- **Author**: Alex Chen (@alex)\n- **Contributors**: @jordan (ba"
        },
        {
          "language": "json",
          "line_count": 23,
          "complexity": "medium",
          "code": "// Client \u2192 Server: Edit operation\n{\n  \"type\": \"operation\",\n  \"doc_id\": \"abc123\",\n  \"operation\": {\n    \"position\": 42,\n    \"insert\": \"Hello\",\n    \"version\": 15\n  },\n  \"client_id\": \"user-xyz\"\n}\n\n// Ser"
        },
        {
          "language": "markdown",
          "line_count": 53,
          "complexity": "complex",
          "code": "# ADR-005: Use PostgreSQL Over MongoDB for User Data\n\n**Date**: 2025-10-25\n**Status**: Accepted\n**Deciders**: @alice (backend lead), @bob (architect)\n**Consulted**: @charlie (DBA), @dana (product)\n\n##"
        },
        {
          "language": "markdown",
          "line_count": 14,
          "complexity": "simple",
          "code": "## Version History\n\n| Version | Date | Author | Summary of Changes |\n|---------|------|--------|--------------------|\n| 1.3 | 2025-10-26 | @alex | Added security section per @charlie's feedback |\n| 1."
        },
        {
          "language": "markdown",
          "line_count": 22,
          "complexity": "medium",
          "code": "## DACI Framework\n\n**Driver**: @alex\n- Responsible for RFC creation and pushing to decision\n- Collects feedback and drives consensus\n- Updates RFC based on input\n\n**Approver**: @engineering-lead\n- Fin"
        },
        {
          "language": "markdown",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c NEVER:\n## Proposed Solution\nWe'll use Redis for caching and WebSockets for real-time updates.\n\n# \u2705 CORRECT:\n## Problem Statement\nAPI response times are >2 seconds due to repeated database queries "
        },
        {
          "language": "markdown",
          "line_count": 19,
          "complexity": "simple",
          "code": "# \u274c Don't:\nWe'll use PostgreSQL for the database.\n\n# \u2705 Correct:\n## Database Choice: PostgreSQL\n\n**Alternatives Considered**:\n1. **PostgreSQL** (chosen): ACID, complex queries, team familiarity\n   - Pr"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://operational-transformation.github.io/"
        },
        {
          "type": "github",
          "url": "https://github.com/Operational-Transformation/ot.js"
        }
      ],
      "tools_mentioned": [
        "postgresql",
        "postgres",
        "consul",
        "sentry",
        "grafana",
        "mongodb",
        "jwt",
        "redis",
        "mysql"
      ],
      "config_snippets": [
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 87.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "observability/alerting-strategy.md",
      "category": "observability",
      "skill_name": "alerting-strategy",
      "frontmatter": {
        "name": "observability-alerting-strategy",
        "description": "Setting up production monitoring and on-call rotation"
      },
      "metrics": {
        "line_count": 574,
        "code_line_count": 119,
        "code_examples": 13,
        "external_refs": 5,
        "tools_mentioned": 2,
        "config_snippets": 12
      },
      "code_examples": [
        {
          "language": "yaml",
          "line_count": 54,
          "complexity": "complex",
          "code": "# SLO: 99.9% success rate (error budget: 0.1%)\n# Alert if burning budget 10x faster (1% error rate)\n\ngroups:\n  - name: slo_alerts\n    interval: 30s\n    rules:\n      # Fast burn (1 hour window)\n      -"
        },
        {
          "language": "yaml",
          "line_count": 29,
          "complexity": "medium",
          "code": "groups:\n  - name: latency_alerts\n    rules:\n      # P95 latency above SLO\n      - alert: HighLatencyP95\n        expr: |\n          histogram_quantile(0.95,\n            sum by (le) (rate(http_request_du"
        },
        {
          "language": "yaml",
          "line_count": 36,
          "complexity": "medium",
          "code": "groups:\n  - name: resource_alerts\n    rules:\n      # CPU usage high\n      - alert: HighCPUUsage\n        expr: |\n          100 - (avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "from prometheus_client import Counter, generate_latest\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\nerrors_total = Counter(\n    'api_errors_total',\n    'Total API errors',\n    ['endpoint',"
        },
        {
          "language": "yaml",
          "line_count": 66,
          "complexity": "complex",
          "code": "# alertmanager.yml\nglobal:\n  resolve_timeout: 5m\n\nroute:\n  # Default receiver\n  receiver: team-slack\n\n  # Group alerts by cluster and alertname\n  group_by: ['cluster', 'alertname']\n\n  # Wait before se"
        },
        {
          "language": "yaml",
          "line_count": 22,
          "complexity": "medium",
          "code": "groups:\n  - name: service_alerts\n    rules:\n      - alert: ServiceDown\n        expr: up{job=\"api-service\"} == 0\n        for: 1m\n        labels:\n          severity: critical\n        annotations:\n      "
        },
        {
          "language": "yaml",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Error rate\nrate(errors_total[5m]) / rate(requests_total[5m]) > 0.01  # 1%\n\n# Latency (P95)\nhistogram_quantile(0.95, rate(latency_bucket[5m])) > 1.0  # 1s\n\n# Availability\nup == 0  # Service down\n\n# C"
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "# WRONG: Too many alerts, too sensitive\n- alert: CPUHigh\n  expr: cpu_usage > 50  # Fires constantly!\n  for: 1m\n\n# CORRECT: Reasonable threshold, longer window\n- alert: CPUCritical\n  expr: cpu_usage > "
        },
        {
          "language": "yaml",
          "line_count": 12,
          "complexity": "simple",
          "code": "# WRONG: FYI alert (not actionable)\n- alert: RequestsIncreased\n  expr: rate(requests_total[5m]) > 100\n  annotations:\n    summary: \"Requests increased\"\n\n# CORRECT: Actionable alert with impact\n- alert:"
        },
        {
          "language": "yaml",
          "line_count": 14,
          "complexity": "simple",
          "code": "# WRONG: Vague alert\n- alert: Error\n  expr: errors_total > 0\n  annotations:\n    summary: \"Error occurred\"\n\n# CORRECT: Context-rich alert\n- alert: PaymentServiceErrors\n  expr: rate(errors_total{service"
        },
        {
          "language": "yaml",
          "line_count": 12,
          "complexity": "simple",
          "code": "# WRONG: Individual alert per instance\n- alert: HighMemory\n  expr: memory_usage > 90\n  # Fires 100x for 100 instances!\n\n# CORRECT: Grouped alert\nroute:\n  group_by: ['alertname', 'cluster']\n  group_wai"
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "# WRONG: Alert on CPU (cause)\n- alert: HighCPU\n  expr: cpu_usage > 80\n  # So what? Is service degraded?\n\n# CORRECT: Alert on latency (symptom)\n- alert: HighLatency\n  expr: p95_latency > 1.0\n  # Clear "
        },
        {
          "language": "yaml",
          "line_count": 15,
          "complexity": "simple",
          "code": "# WRONG: Single notification channel\nreceiver: team-slack\n\n# CORRECT: Escalation chain\nroutes:\n  - match:\n      severity: critical\n    receiver: pagerduty-primary\n    routes:\n      - match:\n          "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://hooks.slack.com/services/XXX'"
        },
        {
          "type": "external",
          "url": "https://hooks.slack.com/services/YYY'"
        },
        {
          "type": "example",
          "url": "https://wiki.example.com/runbooks/service-down\""
        },
        {
          "type": "example",
          "url": "https://grafana.example.com/d/service-overview\""
        },
        {
          "type": "example",
          "url": "https://wiki.example.com/payment-errors\""
        }
      ],
      "tools_mentioned": [
        "grafana",
        "prometheus"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 86.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "api/api-authorization.md",
      "category": "api",
      "skill_name": "api-authorization",
      "frontmatter": {
        "name": "api-api-authorization",
        "description": "Implementing authorization logic in APIs"
      },
      "metrics": {
        "line_count": 748,
        "code_line_count": 171,
        "code_examples": 25,
        "external_refs": 1,
        "tools_mentioned": 5,
        "config_snippets": 9
      },
      "code_examples": [
        {
          "language": "json",
          "line_count": 8,
          "complexity": "simple",
          "code": "{\n  \"document_123\": {\n    \"alice\": [\"read\", \"write\"],\n    \"bob\": [\"read\"],\n    \"editors_group\": [\"read\", \"write\", \"delete\"]\n  }\n}\n"
        },
        {
          "language": "json",
          "line_count": 13,
          "complexity": "simple",
          "code": "{\n  \"roles\": {\n    \"admin\": [\"users:read\", \"users:write\", \"users:delete\", \"posts:*\"],\n    \"editor\": [\"posts:read\", \"posts:write\", \"posts:delete\"],\n    \"viewer\": [\"posts:read\"]\n  },\n  \"users\": {\n    \"a"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Policy: Users can edit their own posts during business hours\nif (\n    user.id == post.author_id\n    and current_time >= \"09:00\"\n    and current_time <= \"17:00\"\n    and user.department == post.depart"
        },
        {
          "language": "sql",
          "line_count": 35,
          "complexity": "medium",
          "code": "-- Users table\nCREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  email VARCHAR(255) UNIQUE NOT NULL\n);\n\n-- Roles table\nCREATE TABLE roles (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(50) UNIQUE NOT NULL,  "
        },
        {
          "language": "sql",
          "line_count": 11,
          "complexity": "simple",
          "code": "-- Check if user has permission\nSELECT EXISTS (\n  SELECT 1\n  FROM user_roles ur\n  JOIN role_permissions rp ON ur.role_id = rp.role_id\n  JOIN permissions p ON rp.permission_id = p.id\n  WHERE ur.user_id"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "from functools import wraps\nfrom fastapi import HTTPException, Depends\n\ndef require_permission(resource: str, action: str):\n    \"\"\"Decorator to check permissions\"\"\"\n    def decorator(func):\n        @w"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "@app.put(\"/posts/{post_id}\")\n@require_permission(\"posts\", \"write\")\nasync def update_post(post_id: int, current_user: User):\n    post = await db.fetch_one(\"SELECT * FROM posts WHERE id = $1\", [post_id]"
        },
        {
          "language": "sql",
          "line_count": 14,
          "complexity": "simple",
          "code": "-- Add scope to permissions\nALTER TABLE role_permissions ADD COLUMN scope VARCHAR(50);\n-- scope values: \"all\", \"own\", \"department\"\n\n-- Check with scope\nSELECT\n  p.action,\n  rp.scope\nFROM user_roles ur"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "def check_resource_permission(user, resource, action, resource_obj):\n    perms = get_user_permissions(user, resource, action)\n\n    for perm in perms:\n        if perm.scope == \"all\":\n            return"
        },
        {
          "language": "sql",
          "line_count": 9,
          "complexity": "simple",
          "code": "-- Add parent_role_id for hierarchy\nALTER TABLE roles ADD COLUMN parent_role_id INT REFERENCES roles(id);\n\n-- Example hierarchy\nINSERT INTO roles (name, parent_role_id) VALUES\n  ('employee', NULL),\n  "
        },
        {
          "language": "sql",
          "line_count": 23,
          "complexity": "medium",
          "code": "-- Recursive CTE to get all inherited permissions\nWITH RECURSIVE role_hierarchy AS (\n  -- Base: User's direct roles\n  SELECT r.id, r.name, r.parent_role_id\n  FROM user_roles ur\n  JOIN roles r ON ur.ro"
        },
        {
          "language": "rego",
          "line_count": 18,
          "complexity": "simple",
          "code": "package app.authz\n\n# Allow if user is admin\nallow {\n  input.user.role == \"admin\"\n}\n\n# Allow if user owns the resource\nallow {\n  input.user.id == input.resource.owner_id\n}\n\n# Allow if user is in same d"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "import requests\n\ndef check_permission(user, resource, action):\n    policy_input = {\n        \"user\": {\n            \"id\": user.id,\n            \"role\": user.role,\n            \"department\": user.departmen"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "import casbin\n\n# Load model and policy\nenforcer = casbin.Enforcer(\"model.conf\", \"policy.csv\")\n\n# Check permission\nif enforcer.enforce(\"alice\", \"posts\", \"write\"):\n    print(\"Allowed\")\nelse:\n    print(\""
        },
        {
          "language": "ini",
          "line_count": 15,
          "complexity": "simple",
          "code": "[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == "
        },
        {
          "language": "csv",
          "line_count": 6,
          "complexity": "simple",
          "code": "p, admin, posts, *\np, editor, posts, write\np, editor, posts, read\ng, alice, admin\ng, bob, editor\n"
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "simple",
          "code": "{\n  \"sub\": \"alice\",\n  \"role\": \"editor\",\n  \"scopes\": [\"posts:read\", \"posts:write\", \"users:read\"]\n}\n"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "def require_scope(required_scope: str):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, token=Depends(get_token), **kwargs):\n            scopes = token.get(\"scopes\", [])"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# \u274c BAD: Only checks authentication\n@app.delete(\"/posts/{post_id}\")\nasync def delete_post(post_id: int, current_user=Depends(get_current_user)):\n    await db.execute(\"DELETE FROM posts WHERE id = $1\","
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u2705 GOOD: Checks both authentication and authorization\n@app.delete(\"/posts/{post_id}\")\nasync def delete_post(post_id: int, current_user=Depends(get_current_user)):\n    post = await db.fetch_one(\"SELEC"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# \u274c BAD: Anyone can access any invoice\n@app.get(\"/invoices/{invoice_id}\")\nasync def get_invoice(invoice_id: int, current_user=Depends(get_current_user)):\n    return await db.fetch_one(\"SELECT * FROM i"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u2705 GOOD: Only owner can access invoice\n@app.get(\"/invoices/{invoice_id}\")\nasync def get_invoice(invoice_id: int, current_user=Depends(get_current_user)):\n    invoice = await db.fetch_one(\n        \"SE"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# \u274c BAD: Users can make themselves admin\n@app.put(\"/users/{user_id}/role\")\nasync def update_role(user_id: int, role: str, current_user=Depends(get_current_user)):\n    await db.execute(\"UPDATE users SE"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u2705 GOOD: Only admins can assign roles\n@app.put(\"/users/{user_id}/role\")\n@require_permission(\"users\", \"manage_roles\")\nasync def update_role(user_id: int, role: str, current_user=Depends(get_current_us"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Hybrid approach: Cache non-critical, query critical\nif action in [\"delete\", \"admin_access\"]:\n    # Always query database for critical actions\n    has_perm = await db.fetch_one(query)\nelse:\n    # Use"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://opa:8181/v1/data/app/authz/allow\""
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "postgresql",
        "oauth",
        "postgres",
        "jwt"
      ],
      "config_snippets": [
        "json",
        "json",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "ini",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql, json, ini), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "25 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 86.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "database/database-selection.md",
      "category": "database",
      "skill_name": "database-selection",
      "frontmatter": {
        "name": "database-database-selection",
        "description": "Starting new projects and choosing database technology"
      },
      "metrics": {
        "line_count": 762,
        "code_line_count": 94,
        "code_examples": 12,
        "external_refs": 0,
        "tools_mentioned": 5,
        "config_snippets": 4
      },
      "code_examples": [
        {
          "language": "sql",
          "line_count": 15,
          "complexity": "simple",
          "code": "-- Complex query with JOINs, aggregations, CTEs\nWITH top_customers AS (\n  SELECT user_id, SUM(total) as spent\n  FROM orders\n  WHERE created_at > NOW() - INTERVAL '1 year'\n  GROUP BY user_id\n  ORDER BY"
        },
        {
          "language": "javascript",
          "line_count": 13,
          "complexity": "simple",
          "code": "// Embedded document (no JOIN needed)\n{\n  \"_id\": ObjectId(\"...\"),\n  \"user\": \"alice\",\n  \"cart\": {\n    \"items\": [\n      { \"product\": \"Widget\", \"price\": 29.99, \"qty\": 2 },\n      { \"product\": \"Gadget\", \"p"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Cache user session\nSET session:abc123 '{\"user_id\": 42, \"email\": \"alice@example.com\"}' EX 3600\n\n# Rate limiting\nINCR ratelimit:user:42\nEXPIRE ratelimit:user:42 60\n\n# Leaderboard\nZADD leaderboard 9500"
        },
        {
          "language": "sql",
          "line_count": 5,
          "complexity": "simple",
          "code": "BEGIN;\n  UPDATE accounts SET balance = balance - 100 WHERE id = 1;\n  UPDATE accounts SET balance = balance + 100 WHERE id = 2;\nCOMMIT;  -- Both succeed or both fail\n"
        },
        {
          "language": "javascript",
          "line_count": 7,
          "complexity": "simple",
          "code": "// Write may return before replication completes\ndb.users.updateOne(\n  { _id: ObjectId(\"...\") },\n  { $inc: { post_count: 1 } }\n)\n// Other replicas may see stale data temporarily\n"
        },
        {
          "language": "sql",
          "line_count": 12,
          "complexity": "simple",
          "code": "-- Denormalized for reads (PostgreSQL)\nCREATE MATERIALIZED VIEW user_stats AS\nSELECT\n  user_id,\n  COUNT(DISTINCT order_id) as order_count,\n  SUM(total) as lifetime_value\nFROM orders\nGROUP BY user_id;\n"
        },
        {
          "language": "javascript",
          "line_count": 9,
          "complexity": "simple",
          "code": "// Append-only event log (MongoDB)\ndb.events.insertOne({\n  event_type: \"page_view\",\n  user_id: 42,\n  page: \"/products/123\",\n  timestamp: new Date()\n})\n// No updates, only inserts\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "def get_user(user_id):\n    # Try cache first\n    cached = redis.get(f\"user:{user_id}\")\n    if cached:\n        return json.loads(cached)\n\n    # Cache miss, query database\n    user = db.query(\"SELECT * "
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Write to PostgreSQL\ndb.execute(\"INSERT INTO products (name, description) VALUES (%s, %s)\", [name, desc])\n\n# Async sync to Elasticsearch\nelasticsearch.index(\n    index=\"products\",\n    document={\"name"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Write events to MongoDB (append-only log)\nevents.insert_one({\n    \"event_type\": \"order_placed\",\n    \"order_id\": 123,\n    \"user_id\": 42,\n    \"timestamp\": datetime.now()\n})\n\n# Aggregate to PostgreSQL "
        },
        {
          "language": "sql",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- Before (PostgreSQL)\nSELECT u.name, p.title, p.content\nFROM users u\nJOIN posts p ON p.user_id = u.id\nWHERE u.id = 42;\n"
        },
        {
          "language": "javascript",
          "line_count": 10,
          "complexity": "simple",
          "code": "// After (MongoDB, embedded)\n{\n  \"_id\": ObjectId(\"...\"),\n  \"title\": \"My Post\",\n  \"content\": \"...\",\n  \"author\": {\n    \"name\": \"Alice\"  // Embedded\n  }\n}\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgresql",
        "postgres",
        "mongodb",
        "redis",
        "mysql"
      ],
      "config_snippets": [
        "sql",
        "sql",
        "sql",
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "12 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        }
      ],
      "priority_score": 85.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "infrastructure/infrastructure-security.md",
      "category": "infrastructure",
      "skill_name": "infrastructure-security",
      "frontmatter": {
        "name": "infrastructure-infrastructure-security",
        "description": "Setting up IAM roles and policies"
      },
      "metrics": {
        "line_count": 803,
        "code_line_count": 133,
        "code_examples": 15,
        "external_refs": 0,
        "tools_mentioned": 6,
        "config_snippets": 5
      },
      "code_examples": [
        {
          "language": "json",
          "line_count": 55,
          "complexity": "complex",
          "code": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"LambdaDynamoDBAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"dynamodb:GetItem\",\n        \"dynamodb:PutItem\",\n        \"dyn"
        },
        {
          "language": "json",
          "line_count": 33,
          "complexity": "medium",
          "code": "// Trust policy - who can assume this role\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"A"
        },
        {
          "language": "hcl",
          "line_count": 96,
          "complexity": "complex",
          "code": "# Terraform - Web tier security group\nresource \"aws_security_group\" \"web\" {\n  name        = \"web-tier-sg\"\n  description = \"Security group for web tier\"\n  vpc_id      = var.vpc_id\n\n  # Inbound rules\n  "
        },
        {
          "language": "python",
          "line_count": 83,
          "complexity": "complex",
          "code": "# AWS Secrets Manager\nimport boto3\nimport json\nfrom botocore.exceptions import ClientError\n\ndef get_secret(secret_name, region_name=\"us-east-1\"):\n    \"\"\"Retrieve secret from AWS Secrets Manager\"\"\"\n   "
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "# S3 encryption at rest\nimport boto3\n\ns3 = boto3.client('s3')\n\n# Server-side encryption with S3-managed keys (SSE-S3)\ns3.put_object(\n    Bucket='my-bucket',\n    Key='file.txt',\n    Body=b'data',\n    S"
        },
        {
          "language": "hcl",
          "line_count": 58,
          "complexity": "complex",
          "code": "# Terraform - Network ACL for public subnet\nresource \"aws_network_acl\" \"public\" {\n  vpc_id     = var.vpc_id\n  subnet_ids = var.public_subnet_ids\n\n  # Inbound rules\n  ingress {\n    rule_no    = 100\n   "
        },
        {
          "language": "json",
          "line_count": 31,
          "complexity": "medium",
          "code": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"SpecificResourceAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"dynamodb:GetItem\",\n        \"dynamodb:PutItem\"\n      ],\n  "
        },
        {
          "language": "json",
          "line_count": 34,
          "complexity": "medium",
          "code": "// Require MFA for sensitive operations\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AllowViewAccountInfo\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:GetAccountPassw"
        },
        {
          "language": "hcl",
          "line_count": 44,
          "complexity": "medium",
          "code": "# Private access to AWS services without internet gateway\nresource \"aws_vpc_endpoint\" \"s3\" {\n  vpc_id       = var.vpc_id\n  service_name = \"com.amazonaws.us-east-1.s3\"\n\n  route_table_ids = var.private_"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "# AWS Certificate Manager\nimport boto3\n\nacm = boto3.client('acm')\n\n# Request certificate\nresponse = acm.request_certificate(\n    DomainName='example.com',\n    SubjectAlternativeNames=[\n        '*.exam"
        },
        {
          "language": "python",
          "line_count": 55,
          "complexity": "complex",
          "code": "# Lambda authorizer for API Gateway\nimport json\n\ndef lambda_handler(event, context):\n    \"\"\"\n    Custom authorizer for API Gateway\n    Validates JWT or API key\n    \"\"\"\n    token = event['authorization"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Enable MFA for root account\n# Create IAM users instead of using root\n# Use groups to assign permissions\n# Grant least privilege\n# Use roles for applications\n# Rotate credentials regularly\n# Enable C"
        },
        {
          "language": "json",
          "line_count": 17,
          "complexity": "simple",
          "code": "// \u274c NEVER: Use wildcard permissions in production\n{\n  \"Effect\": \"Allow\",\n  \"Action\": \"*\",\n  \"Resource\": \"*\"\n}\n\n// \u2705 CORRECT: Specific permissions\n{\n  \"Effect\": \"Allow\",\n  \"Action\": [\n    \"s3:GetObjec"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "# \u274c NEVER: Hardcode credentials\nAWS_ACCESS_KEY = \"AKIAIOSFODNN7EXAMPLE\"\nAWS_SECRET_KEY = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n\n# \u2705 CORRECT: Use IAM roles or environment variables\nimport boto3\n# "
        },
        {
          "language": "hcl",
          "line_count": 20,
          "complexity": "simple",
          "code": "# \u274c NEVER: Open security groups to 0.0.0.0/0 for SSH\nresource \"aws_security_group_rule\" \"ssh\" {\n  type              = \"ingress\"\n  from_port         = 22\n  to_port           = 22\n  protocol          = "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "kubernetes",
        "postgresql",
        "tls",
        "postgres",
        "jwt",
        "terraform"
      ],
      "config_snippets": [
        "json",
        "json",
        "json",
        "json",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 85.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/rfc-consensus-building.md",
      "category": "engineering",
      "skill_name": "rfc-consensus-building",
      "frontmatter": {
        "name": "engineering-rfc-consensus-building",
        "description": "Stakeholder identification, feedback collection, consensus building, and approval processes for RFCs"
      },
      "metrics": {
        "line_count": 545,
        "code_line_count": 74,
        "code_examples": 11,
        "external_refs": 0,
        "tools_mentioned": 6,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "markdown",
          "line_count": 37,
          "complexity": "medium",
          "code": "## Stakeholder Map: Real-Time Collaboration RFC\n\n### DACI Roles\n\n**Driver**: @alex (backend engineer)\n- Owns RFC creation and updates\n- Drives consensus and decision\n\n**Approver**: @engineering-lead ("
        },
        {
          "language": "markdown",
          "line_count": 27,
          "complexity": "medium",
          "code": "## Review Request: RFC-042 Real-Time Collaboration\n\nHi @jordan, @taylor, @charlie,\n\nI've completed the draft for **RFC-042: Real-Time Collaboration**.\nPlease review by **Friday, Nov 1** and provide fe"
        },
        {
          "language": "markdown",
          "line_count": 42,
          "complexity": "medium",
          "code": "## Design Review: RFC-042 Real-Time Collaboration\n\n**Date**: 2025-11-02, 2:00 PM - 3:00 PM\n**Location**: Zoom [link] / Conference Room B\n**Attendees**: @alex (driver), @jordan, @taylor, @charlie, @sam"
        },
        {
          "language": "markdown",
          "line_count": 43,
          "complexity": "medium",
          "code": "## Disagreement: Database Choice (Postgres vs MongoDB)\n\n### Positions\n**@alice (Backend Lead)**: Prefers PostgreSQL\n- Rationale: ACID transactions required for billing\n- Concern: MongoDB lacks strong "
        },
        {
          "language": "markdown",
          "line_count": 34,
          "complexity": "medium",
          "code": "## Escalation: Real-Time Collaboration - Performance Concerns\n\n### Deadlock Scenario\n- @jordan (Backend): \"OT is too complex, will cause bugs\"\n- @alex (Driver): \"OT is industry standard, proven by Goo"
        },
        {
          "language": "markdown",
          "line_count": 32,
          "complexity": "medium",
          "code": "## Feedback Integration Log\n\n### Feedback Received (2025-11-01)\n\n**@jordan (Backend)**: \"What's the fallback if Redis goes down?\"\n- **Type**: Blocking concern\n- **Action**: Added Section 6.3 (Failure "
        },
        {
          "language": "markdown",
          "line_count": 31,
          "complexity": "medium",
          "code": "## RFC Approval Checklist\n\n### Pre-Approval Requirements\n- [x] All contributors have reviewed RFC\n- [x] Blocking concerns addressed\n- [x] Alternatives documented and evaluated\n- [x] Risks and mitigati"
        },
        {
          "language": "markdown",
          "line_count": 37,
          "complexity": "medium",
          "code": "## Announcement: RFC-042 Real-Time Collaboration - APPROVED\n\n**To**: engineering@company.com, product@company.com\n**From**: @alex\n**Date**: 2025-11-03\n\nHi team,\n\nGreat news! **RFC-042: Real-Time Colla"
        },
        {
          "language": "markdown",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c NEVER:\nWrite RFC \u2192 Send to engineering-lead for approval \u2192 Skip team review\n\n# \u2705 CORRECT:\nWrite RFC \u2192 Identify stakeholders (DACI) \u2192 Collect feedback \u2192 Address concerns \u2192 Seek approval\n"
        },
        {
          "language": "markdown",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c Don't:\n\"Please review when you have time\"\n\n# \u2705 Correct:\n\"Please review by Friday, Nov 1 (5 business days)\"\n"
        },
        {
          "language": "markdown",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c Don't:\nReviewer: \"This won't scale\"\nAuthor: \"You're wrong, it will\"\n\n# \u2705 Correct:\nReviewer: \"This won't scale\"\nAuthor: \"Can you elaborate? What scale are you concerned about?\"\n[Discuss, update RFC"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgresql",
        "postgres",
        "mongodb",
        "redis",
        "consul",
        "vite"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 85.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/rfc-decision-documentation.md",
      "category": "engineering",
      "skill_name": "rfc-decision-documentation",
      "frontmatter": {
        "name": "engineering-rfc-decision-documentation",
        "description": "Architecture Decision Records (ADRs), decision rationale, status tracking, and post-implementation review"
      },
      "metrics": {
        "line_count": 656,
        "code_line_count": 93,
        "code_examples": 11,
        "external_refs": 0,
        "tools_mentioned": 7,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "markdown",
          "line_count": 57,
          "complexity": "complex",
          "code": "# ADR-012: Use JWT for API Authentication\n\n**Date**: 2025-10-25\n**Status**: Accepted\n**Deciders**: @alice (backend lead), @bob (security)\n\n## Context\nWe need to authenticate API requests from web and "
        },
        {
          "language": "markdown",
          "line_count": 107,
          "complexity": "complex",
          "code": "# ADR-018: Migrate from Monolith to Microservices\n\n**Date**: 2025-10-25\n**Status**: Accepted\n**Last Updated**: 2025-10-26\n\n## DACI\n\n**Driver**: @alex (backend architect)\n- Responsible for RFC and impl"
        },
        {
          "language": "markdown",
          "line_count": 25,
          "complexity": "medium",
          "code": "# ADR-005: Use PostgreSQL Over MongoDB\n\n**Status**: Implemented\n**Created**: 2025-01-15\n**Accepted**: 2025-01-20\n**Implemented**: 2025-02-10\n**Last Reviewed**: 2025-10-25\n\n## Status History\n\n| Date | "
        },
        {
          "language": "markdown",
          "line_count": 26,
          "complexity": "medium",
          "code": "# ADR-003: Use Redis for Session Storage\n\n**Status**: Superseded by ADR-012 (JWT Authentication)\n**Created**: 2024-06-01\n**Accepted**: 2024-06-10\n**Implemented**: 2024-07-01\n**Superseded**: 2025-10-25"
        },
        {
          "language": "markdown",
          "line_count": 27,
          "complexity": "medium",
          "code": "# ADR-008: Deploy on Heroku\n\n**Status**: Deprecated (No Longer Valid)\n**Created**: 2023-03-15\n**Accepted**: 2023-03-20\n**Implemented**: 2023-04-01\n**Deprecated**: 2025-06-15\n\n## Deprecation Notice\n\u26a0\ufe0f "
        },
        {
          "language": "markdown",
          "line_count": 39,
          "complexity": "medium",
          "code": "# ADR-014: Use GraphQL for Public API (REJECTED)\n\n**Status**: Rejected\n**Created**: 2025-05-10\n**Rejected**: 2025-05-20\n**Deciders**: @alice (backend lead), @bob (CTO)\n\n## Context\nWe evaluated GraphQL"
        },
        {
          "language": "markdown",
          "line_count": 40,
          "complexity": "medium",
          "code": "# RFC-042: Real-Time Collaboration\n\n[... RFC content ...]\n\n---\n\n## Changelog\n\n### Version 1.3 (2025-10-26) - Final\n- **Added**: Security section (rate limiting, auth)\n- **Changed**: WebSocket server f"
        },
        {
          "language": "markdown",
          "line_count": 69,
          "complexity": "complex",
          "code": "# Post-Implementation Review: ADR-012 JWT Authentication\n\n**Review Date**: 2025-10-25 (6 months post-implementation)\n**Participants**: @alice (backend lead), @bob (security), @charlie (DevOps), @dana "
        },
        {
          "language": "markdown",
          "line_count": 18,
          "complexity": "simple",
          "code": "# \u274c NEVER:\n## Decision\nWe will use PostgreSQL.\n\n# \u2705 CORRECT:\n## Decision\nWe will use PostgreSQL.\n\n## Rationale\n- ACID transactions required for billing (compliance)\n- Rich query capabilities (JOINs, w"
        },
        {
          "language": "markdown",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c Don't:\n[Delete ADR-003 after it's superseded]\n\n# \u2705 Correct:\nKeep ADR-003 with \"Superseded\" status and link to ADR-012\n"
        },
        {
          "language": "markdown",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c Don't:\nImplement decision \u2192 Move on to next task\n\n# \u2705 Correct:\nImplement decision \u2192 Wait 3-6 months \u2192 Conduct review \u2192 Document learnings\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "kubernetes",
        "postgresql",
        "oauth",
        "postgres",
        "mongodb",
        "jwt",
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 85.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "database/mongodb-document-design.md",
      "category": "database",
      "skill_name": "mongodb-document-design",
      "frontmatter": {
        "name": "database-mongodb-document-design",
        "description": "Designing MongoDB schemas"
      },
      "metrics": {
        "line_count": 682,
        "code_line_count": 195,
        "code_examples": 25,
        "external_refs": 1,
        "tools_mentioned": 4,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "javascript",
          "line_count": 7,
          "complexity": "simple",
          "code": "{\n  \"_id\": ObjectId(\"507f1f77bcf86cd799439011\"),\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\",\n  \"created_at\": ISODate(\"2024-01-15T10:30:00Z\")\n}\n"
        },
        {
          "language": "javascript",
          "line_count": 13,
          "complexity": "simple",
          "code": "// User document with embedded address\n{\n  \"_id\": ObjectId(\"...\"),\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\",\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"San Francisco\",\n    \"stat"
        },
        {
          "language": "javascript",
          "line_count": 15,
          "complexity": "simple",
          "code": "// User document\n{\n  \"_id\": ObjectId(\"507f1f77bcf86cd799439011\"),\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\"\n}\n\n// Order document with reference\n{\n  \"_id\": ObjectId(\"...\"),\n  \"user_id\": ObjectI"
        },
        {
          "language": "javascript",
          "line_count": 12,
          "complexity": "simple",
          "code": "{\n  \"_id\": ObjectId(\"...\"),\n  \"email\": \"alice@example.com\",\n  \"profile\": {\n    \"first_name\": \"Alice\",\n    \"last_name\": \"Smith\",\n    \"bio\": \"Software engineer\",\n    \"avatar_url\": \"https://...\"\n  },\n  \""
        },
        {
          "language": "javascript",
          "line_count": 19,
          "complexity": "simple",
          "code": "{\n  \"_id\": ObjectId(\"...\"),\n  \"title\": \"My Blog Post\",\n  \"content\": \"Lorem ipsum...\",\n  \"author\": \"Alice\",\n  \"comments\": [\n    {\n      \"author\": \"Bob\",\n      \"text\": \"Great post!\",\n      \"created_at\":"
        },
        {
          "language": "javascript",
          "line_count": 19,
          "complexity": "simple",
          "code": "// Product document\n{\n  \"_id\": ObjectId(\"...\"),\n  \"name\": \"Widget\",\n  \"price\": 29.99,\n  \"recent_reviews\": [  // Embed first 10 for quick display\n    {\n      \"user\": \"Alice\",\n      \"rating\": 5,\n      \""
        },
        {
          "language": "javascript",
          "line_count": 17,
          "complexity": "simple",
          "code": "// Product document\n{\n  \"_id\": ObjectId(\"...\"),\n  \"name\": \"Widget\",\n  \"price\": 29.99,\n  \"review_count\": 150\n}\n\n// Reviews collection\n{\n  \"_id\": ObjectId(\"...\"),\n  \"product_id\": ObjectId(\"...\"),  // Re"
        },
        {
          "language": "javascript",
          "line_count": 10,
          "complexity": "simple",
          "code": "db.products.aggregate([\n  { $match: { _id: ObjectId(\"...\") } },\n  { $lookup: {\n      from: \"reviews\",\n      localField: \"_id\",\n      foreignField: \"product_id\",\n      as: \"reviews\"\n  }}\n])\n"
        },
        {
          "language": "javascript",
          "line_count": 19,
          "complexity": "simple",
          "code": "// User document\n{\n  \"_id\": ObjectId(\"507f1f77bcf86cd799439011\"),\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\"\n}\n\n// Orders collection\n{\n  \"_id\": ObjectId(\"...\"),\n  \"user_id\": ObjectId(\"507f1f77b"
        },
        {
          "language": "javascript",
          "line_count": 28,
          "complexity": "medium",
          "code": "// User document\n{\n  \"_id\": ObjectId(\"...\"),\n  \"name\": \"Alice\",\n  \"role_ids\": [\n    ObjectId(\"role1\"),\n    ObjectId(\"role2\")\n  ]\n}\n\n// Roles collection\n{\n  \"_id\": ObjectId(\"role1\"),\n  \"name\": \"admin\","
        },
        {
          "language": "javascript",
          "line_count": 13,
          "complexity": "simple",
          "code": "// Users\n{ \"_id\": ObjectId(\"user1\"), \"name\": \"Alice\" }\n\n// Roles\n{ \"_id\": ObjectId(\"role1\"), \"name\": \"admin\" }\n\n// User-Roles junction\n{\n  \"user_id\": ObjectId(\"user1\"),\n  \"role_id\": ObjectId(\"role1\"),"
        },
        {
          "language": "javascript",
          "line_count": 11,
          "complexity": "simple",
          "code": "// \u274c BAD: Unbounded array\n{\n  \"_id\": ObjectId(\"...\"),\n  \"user\": \"Alice\",\n  \"posts\": [  // Could grow to thousands\n    { \"title\": \"Post 1\", \"content\": \"...\" },\n    { \"title\": \"Post 2\", \"content\": \"...\""
        },
        {
          "language": "javascript",
          "line_count": 7,
          "complexity": "simple",
          "code": "// User\n{ \"_id\": ObjectId(\"user1\"), \"name\": \"Alice\" }\n\n// Posts (separate collection)\n{ \"_id\": ObjectId(\"...\"), \"user_id\": ObjectId(\"user1\"), \"title\": \"Post 1\" }\n{ \"_id\": ObjectId(\"...\"), \"user_id\": O"
        },
        {
          "language": "javascript",
          "line_count": 16,
          "complexity": "simple",
          "code": "// Instead of one document per reading:\n// { sensor_id: 1, reading: 23.5, timestamp: ... }\n\n// Bucket readings by hour:\n{\n  \"_id\": ObjectId(\"...\"),\n  \"sensor_id\": 1,\n  \"bucket_hour\": ISODate(\"2024-01-"
        },
        {
          "language": "javascript",
          "line_count": 21,
          "complexity": "medium",
          "code": "// For products with < 100 reviews: embed\n{\n  \"_id\": ObjectId(\"product1\"),\n  \"name\": \"Widget\",\n  \"reviews\": [\n    { \"user\": \"Alice\", \"rating\": 5, \"text\": \"...\" }\n  ],\n  \"review_count\": 10\n}\n\n// For pr"
        },
        {
          "language": "javascript",
          "line_count": 29,
          "complexity": "medium",
          "code": "db.createCollection(\"users\", {\n  validator: {\n    $jsonSchema: {\n      bsonType: \"object\",\n      required: [\"email\", \"name\", \"created_at\"],\n      properties: {\n        email: {\n          bsonType: \"st"
        },
        {
          "language": "javascript",
          "line_count": 3,
          "complexity": "simple",
          "code": "db.users.createIndex({ email: 1 })  // Ascending\ndb.users.createIndex({ created_at: -1 })  // Descending\n"
        },
        {
          "language": "javascript",
          "line_count": 2,
          "complexity": "simple",
          "code": "db.orders.createIndex({ user_id: 1, created_at: -1 })\n"
        },
        {
          "language": "javascript",
          "line_count": 2,
          "complexity": "simple",
          "code": "db.users.createIndex({ email: 1 }, { unique: true })\n"
        },
        {
          "language": "javascript",
          "line_count": 2,
          "complexity": "simple",
          "code": "db.users.createIndex({ phone: 1 }, { sparse: true })\n"
        },
        {
          "language": "javascript",
          "line_count": 5,
          "complexity": "simple",
          "code": "db.sessions.createIndex(\n  { created_at: 1 },\n  { expireAfterSeconds: 3600 }  // Delete after 1 hour\n)\n"
        },
        {
          "language": "javascript",
          "line_count": 5,
          "complexity": "simple",
          "code": "db.posts.createIndex({ title: \"text\", content: \"text\" })\n\n// Search\ndb.posts.find({ $text: { $search: \"mongodb tutorial\" } })\n"
        },
        {
          "language": "sql",
          "line_count": 4,
          "complexity": "simple",
          "code": "CREATE TABLE users (id, name, email);\nCREATE TABLE posts (id, user_id, title, content);\nCREATE TABLE comments (id, post_id, user_id, text);\n"
        },
        {
          "language": "javascript",
          "line_count": 18,
          "complexity": "simple",
          "code": "// posts collection\n{\n  \"_id\": ObjectId(\"...\"),\n  \"title\": \"My Post\",\n  \"content\": \"...\",\n  \"author\": {  // Embedded user (denormalized)\n    \"name\": \"Alice\",\n    \"email\": \"alice@example.com\"\n  },\n  \"c"
        },
        {
          "language": "javascript",
          "line_count": 19,
          "complexity": "simple",
          "code": "// users collection\n{ \"_id\": ObjectId(\"user1\"), \"name\": \"Alice\", \"email\": \"...\" }\n\n// posts collection\n{\n  \"_id\": ObjectId(\"post1\"),\n  \"user_id\": ObjectId(\"user1\"),  // Reference\n  \"title\": \"My Post\","
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://...\""
        }
      ],
      "tools_mentioned": [
        "postgres",
        "postgresql",
        "mongodb",
        "redis"
      ],
      "config_snippets": [
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "25 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "3 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 84.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/consensus-raft.md",
      "category": "distributed-systems",
      "skill_name": "consensus-raft",
      "frontmatter": {
        "name": "distributed-systems-consensus-raft",
        "description": "RAFT consensus algorithm including leader election, log replication, safety guarantees, and implementation patterns"
      },
      "metrics": {
        "line_count": 541,
        "code_line_count": 72,
        "code_examples": 9,
        "external_refs": 1,
        "tools_mentioned": 4,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 56,
          "complexity": "complex",
          "code": "class RaftNode:\n    def __init__(self):\n        self.state = \"follower\"\n        self.current_term = 0\n        self.voted_for = None\n        self.election_timeout = random.randint(150, 300)  # ms\n\n    "
        },
        {
          "language": "python",
          "line_count": 65,
          "complexity": "complex",
          "code": "class LogEntry:\n    def __init__(self, term, command):\n        self.term = term\n        self.command = command\n\nclass RaftNode:\n    def __init__(self):\n        self.log = []  # List of LogEntry\n      "
        },
        {
          "language": "python",
          "line_count": 54,
          "complexity": "complex",
          "code": "class RaftLeader(RaftNode):\n    def replicate_log(self):\n        \"\"\"Send AppendEntries to all followers\"\"\"\n        for follower_id in self.cluster_nodes:\n            if follower_id == self.node_id:\n  "
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Start etcd cluster (3 nodes)\netcd --name node1 --initial-cluster node1=http://10.0.1.1:2380,node2=http://10.0.1.2:2380,node3=http://10.0.1.3:2380\n"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "import etcd3\n\netcd = etcd3.client(host='localhost', port=2379)\n\n# Write (goes through RAFT consensus)\netcd.put('/config/setting', 'value')\n\n# Read (consistent read from leader)\nvalue, metadata = etcd."
        },
        {
          "language": "go",
          "line_count": 36,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"context\"\n    \"time\"\n    clientv3 \"go.etcd.io/etcd/client/v3\"\n)\n\nfunc main() {\n    cli, _ := clientv3.New(clientv3.Config{\n        Endpoints:   []string{\"localhost:2379\"},\n "
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "class ConfigManager:\n    \"\"\"Use RAFT for distributed configuration\"\"\"\n\n    def __init__(self, etcd_client):\n        self.etcd = etcd_client\n\n    def set_config(self, key, value):\n        \"\"\"Set config"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "import etcd3\nimport time\n\nclass LeaderElection:\n    \"\"\"Distributed leader election using etcd\"\"\"\n\n    def __init__(self, etcd_client, name):\n        self.etcd = etcd_client\n        self.name = name\n  "
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "medium",
          "code": "def test_network_partition():\n    \"\"\"Test RAFT behavior during network partition\"\"\"\n    cluster = RaftCluster(nodes=5)\n\n    # Normal operation\n    cluster.write('key1', 'value1')\n    assert cluster.re"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://10.0.1.1:2380,node2=http://10.0.1.2:2380,node3=http://10.0.1.3:2380"
        }
      ],
      "tools_mentioned": [
        "etcd",
        "kubernetes",
        "pytest",
        "consul"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 84.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "testing/e2e-testing.md",
      "category": "testing",
      "skill_name": "e2e-testing",
      "frontmatter": {
        "name": "testing-e2e-testing",
        "description": "Test complete user workflows from UI to backend"
      },
      "metrics": {
        "line_count": 651,
        "code_line_count": 111,
        "code_examples": 16,
        "external_refs": 5,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 35,
          "complexity": "complex",
          "code": "// \u274c WITHOUT POM: Brittle, duplicated selectors\ntest('user login', async ({ page }) => {\n  await page.goto('https://example.com/login');\n  await page.fill('#username', 'alice');\n  await page.fill('#pa"
        },
        {
          "language": "typescript",
          "line_count": 9,
          "complexity": "simple",
          "code": "// Playwright auto-waits for:\n// 1. Element to be visible\n// 2. Element to be enabled\n// 3. Element to be stable (not animating)\n\nawait page.click('button'); // Waits automatically\nawait page.fill('in"
        },
        {
          "language": "typescript",
          "line_count": 18,
          "complexity": "simple",
          "code": "// Wait for element\nawait page.waitForSelector('.dynamic-content', { state: 'visible' });\n\n// Wait for network idle\nawait page.waitForLoadState('networkidle');\n\n// Wait for custom condition\nawait page"
        },
        {
          "language": "typescript",
          "line_count": 17,
          "complexity": "simple",
          "code": "async function waitForCondition(\n  condition: () => Promise<boolean>,\n  timeout = 5000\n) {\n  const startTime = Date.now();\n  while (Date.now() - startTime < timeout) {\n    if (await condition()) retur"
        },
        {
          "language": "typescript",
          "line_count": 31,
          "complexity": "complex",
          "code": "// pages/LoginPage.ts\nexport class LoginPage {\n  constructor(private page: Page) {}\n\n  // Selectors\n  private usernameInput = '#username';\n  private passwordInput = '#password';\n  private submitButton"
        },
        {
          "language": "typescript",
          "line_count": 42,
          "complexity": "complex",
          "code": "// components/Header.ts\nexport class Header {\n  constructor(private page: Page) {}\n\n  async logout() {\n    await this.page.click('.user-menu');\n    await this.page.click('.logout-button');\n  }\n\n  asyn"
        },
        {
          "language": "typescript",
          "line_count": 45,
          "complexity": "medium",
          "code": "// Mock API responses\ntest('displays users from API', async ({ page }) => {\n  // Intercept and mock API\n  await page.route('**/api/users', route => {\n    route.fulfill({\n      status: 200,\n      conte"
        },
        {
          "language": "typescript",
          "line_count": 29,
          "complexity": "medium",
          "code": "// global-setup.ts\nasync function globalSetup() {\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  await page.goto('https://example.com/login');\n  await page.fill("
        },
        {
          "language": "typescript",
          "line_count": 18,
          "complexity": "simple",
          "code": "// fixtures/auth.ts\nexport const test = base.extend({\n  authenticatedPage: async ({ page }, use) => {\n    await page.goto('/login');\n    await page.fill('#username', 'admin');\n    await page.fill('#pa"
        },
        {
          "language": "typescript",
          "line_count": 38,
          "complexity": "medium",
          "code": "// Playwright visual comparison\ntest('homepage visual regression', async ({ page }) => {\n  await page.goto('/');\n  await expect(page).toHaveScreenshot('homepage.png', {\n    fullPage: true,\n    maxDiff"
        },
        {
          "language": "typescript",
          "line_count": 10,
          "complexity": "simple",
          "code": "test('upload profile picture', async ({ page }) => {\n  await page.goto('/profile');\n\n  const fileInput = page.locator('input[type=\"file\"]');\n  await fileInput.setInputFiles('path/to/image.png');\n\n  aw"
        },
        {
          "language": "typescript",
          "line_count": 11,
          "complexity": "simple",
          "code": "test('reorder items with drag and drop', async ({ page }) => {\n  await page.goto('/kanban');\n\n  const source = page.locator('.task[data-id=\"1\"]');\n  const target = page.locator('.column[data-status=\"d"
        },
        {
          "language": "typescript",
          "line_count": 11,
          "complexity": "simple",
          "code": "test('navigate menu with keyboard', async ({ page }) => {\n  await page.goto('/');\n\n  await page.keyboard.press('Tab'); // Focus first element\n  await page.keyboard.press('Enter'); // Activate\n  await "
        },
        {
          "language": "typescript",
          "line_count": 51,
          "complexity": "complex",
          "code": "// playwright.config.ts\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  fullyParallel: true,\n  workers: process.env.CI ? 1 : undefined,\n  retrie"
        },
        {
          "language": "typescript",
          "line_count": 46,
          "complexity": "medium",
          "code": "// cypress/e2e/user-journey.cy.ts\ndescribe('User Journey', () => {\n  beforeEach(() => {\n    cy.visit('/');\n  });\n\n  it('completes purchase flow', () => {\n    // Search\n    cy.get('input[name=\"search\"]"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "# test_user_journey.py\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expecte"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com/login'"
        },
        {
          "type": "example",
          "url": "https://example.com/login'"
        },
        {
          "type": "example",
          "url": "https://example.com/login'"
        },
        {
          "type": "example",
          "url": "http://localhost:3000'"
        },
        {
          "type": "example",
          "url": "https://example.com/login\""
        }
      ],
      "tools_mentioned": [
        "pytest"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 84.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "infrastructure/cost-optimization.md",
      "category": "infrastructure",
      "skill_name": "cost-optimization",
      "frontmatter": {
        "name": "infrastructure-cost-optimization",
        "description": "Cloud costs are growing unexpectedly"
      },
      "metrics": {
        "line_count": 757,
        "code_line_count": 109,
        "code_examples": 15,
        "external_refs": 1,
        "tools_mentioned": 4,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 47,
          "complexity": "complex",
          "code": "# AWS Lambda optimization\n# Problem: Over-provisioned memory\n\n# \u274c Expensive: 3008 MB memory\ndef lambda_handler(event, context):\n    # Function uses ~512 MB\n    process_data(event)\n    return {'statusC"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Analyze CloudWatch metrics for right-sizing\naws cloudwatch get-metric-statistics \\\n  --namespace AWS/EC2 \\\n  --metric-name CPUUtilization \\\n  --dimensions Name=InstanceId,Value=i-1234567890abcdef0 \\"
        },
        {
          "language": "python",
          "line_count": 45,
          "complexity": "medium",
          "code": "# Calculate savings with Reserved Instances\ndef calculate_ri_savings(instance_type, hours_per_month=730):\n    \"\"\"\n    Calculate potential savings with Reserved Instances\n\n    Pricing examples (us-east"
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "# Use Spot Instances for fault-tolerant workloads\nimport boto3\n\nec2 = boto3.client('ec2')\n\n# Request Spot Instances\nresponse = ec2.request_spot_instances(\n    InstanceCount=5,\n    LaunchSpecification="
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "# Auto Scaling policy for cost optimization\nimport boto3\n\nautoscaling = boto3.client('autoscaling')\n\n# Target tracking scaling policy\nresponse = autoscaling.put_scaling_policy(\n    AutoScalingGroupNam"
        },
        {
          "language": "python",
          "line_count": 60,
          "complexity": "complex",
          "code": "# S3 Lifecycle policies for cost optimization\nimport boto3\n\ns3 = boto3.client('s3')\n\nlifecycle_config = {\n    'Rules': [\n        {\n            'Id': 'archive-old-logs',\n            'Status': 'Enabled'"
        },
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "# RDS optimization strategies\n\n# 1. Right-size instance\n# Current: db.r5.2xlarge (8 vCPU, 64 GB) - $1.344/hour\n# If CPU < 30% and memory < 40GB\n# Recommended: db.r5.xlarge (4 vCPU, 32 GB) - $0.672/hou"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "# Set up billing alerts\nimport boto3\n\ncloudwatch = boto3.client('cloudwatch', region_name='us-east-1')  # Must be us-east-1\nsns = boto3.client('sns')\n\n# Create SNS topic for alerts\ntopic_response = sn"
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "# Implement comprehensive tagging strategy\nimport boto3\n\ndef tag_resources():\n    \"\"\"Apply cost allocation tags to all resources\"\"\"\n\n    ec2 = boto3.client('ec2')\n\n    # Tag EC2 instances\n    ec2.crea"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "medium",
          "code": "# Optimize Lambda for cost\ndef optimize_lambda_cost():\n    \"\"\"Best practices for Lambda cost optimization\"\"\"\n\n    # 1. Right-size memory (affects CPU allocation)\n    # Test different configurations to"
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "medium",
          "code": "# Choose cost-effective regions\nREGIONAL_PRICING = {\n    'us-east-1': {  # N. Virginia (cheapest)\n        'ec2_t3_medium': 0.0416,\n        'lambda_gb_second': 0.0000166667,\n        's3_standard': 0.02"
        },
        {
          "language": "python",
          "line_count": 68,
          "complexity": "complex",
          "code": "# Identify and terminate idle resources\nimport boto3\nfrom datetime import datetime, timedelta\n\ndef find_idle_resources():\n    \"\"\"Identify idle resources consuming costs\"\"\"\n\n    ec2 = boto3.client('ec2"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# \u274c NEVER: Leave resources running 24/7 in dev/test\n# Cost: t3.medium * 730 hours = $30.37/month\n# If only used 8 hours/day, 5 days/week = ~$9/month\n# Waste: ~$21/month per instance\n\n# \u2705 CORRECT: Sche"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c NEVER: Store everything in S3 Standard\n# If 1 TB of logs accessed once per month\n# S3 Standard: $23/month\n# S3 Glacier: $4/month + retrieval costs\n# Waste: ~$19/month\n\n# \u2705 CORRECT: Use lifecycle p"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c NEVER: Over-provision Lambda memory\n# 3008 MB when function uses 512 MB\n# Waste: ~95% of memory cost\n\n# \u2705 CORRECT: Use AWS Lambda Power Tuning\n# https://github.com/alexcasalboni/aws-lambda-power-t"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/alexcasalboni/aws-lambda-power-tuning"
        }
      ],
      "tools_mentioned": [
        "terraform",
        "postgres",
        "postgresql",
        "kubernetes"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 84.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "cryptography/pki-fundamentals.md",
      "category": "cryptography",
      "skill_name": "pki-fundamentals",
      "frontmatter": {
        "name": "cryptography-pki-fundamentals",
        "description": "PKI fundamentals including certificate authorities, chains of trust, X.509 certificates, and certificate lifecycle"
      },
      "metrics": {
        "line_count": 334,
        "code_line_count": 89,
        "code_examples": 14,
        "external_refs": 2,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# View certificate details\nopenssl x509 -in cert.pem -text -noout\n\n# Check expiration\nopenssl x509 -in cert.pem -enddate -noout\n\n# Verify chain\nopenssl verify -CAfile chain.pem cert.pem\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Generate private key\nopenssl genrsa -out private-key.pem 2048\n\n# Create self-signed certificate\nopenssl req -new -x509 -key private-key.pem -out cert.pem -days 365 \\\n  -subj \"/CN=test.example.com/O="
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Generate private key\nopenssl genrsa -out private-key.pem 2048\n\n# Create CSR\nopenssl req -new -key private-key.pem -out request.csr \\\n  -subj \"/CN=example.com/O=Example Inc/C=US\"\n\n# Send CSR to CA fo"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Create CA private key\nopenssl genrsa -out ca-key.pem 4096\n\n# Create CA certificate (self-signed)\nopenssl req -new -x509 -days 3650 -key ca-key.pem -out ca-cert.pem \\\n  -subj \"/CN=My CA/O=Trust Corp\""
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "import ssl\nimport socket\nfrom datetime import datetime\n\ndef validate_certificate(hostname, port=443):\n    context = ssl.create_default_context()\n\n    with socket.create_connection((hostname, port)) as"
        },
        {
          "language": "go",
          "line_count": 43,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"crypto/sha256\"\n    \"crypto/tls\"\n    \"crypto/x509\"\n    \"encoding/hex\"\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc verifyPinnedCert(rawCerts [][]byte, verifiedChains [][]*x509.Certifica"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Check expiration (90 days before expiry)\nif [ $(openssl x509 -enddate -noout -in cert.pem | \\\n      cut -d= -f2 | date -f- +%s) -lt $(date -d \"+90 days\" +%s) ]; then\n    echo \"Certificate needs rene"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Check CRL\nopenssl crl -in crl.pem -text -noout\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Check certificate status via OCSP\nopenssl ocsp -issuer ca-cert.pem -cert cert.pem \\\n  -url http://ocsp.example.com -CAfile ca-cert.pem\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c Bad: Weak 1024-bit RSA\nopenssl genrsa -out key.pem 1024\n\n# \u2705 Good: Strong 2048-bit RSA or better\nopenssl genrsa -out key.pem 2048\n\n# \u2705 Better: ECC (faster, smaller, equally secure)\nopenssl ecparam"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c Bad: Certificate in code\ncert = \"\"\"-----BEGIN CERTIFICATE-----\nMIIBkTCB+wIJAKHHCgK...\n-----END CERTIFICATE-----\"\"\"\n\n# \u2705 Good: Certificate from secure storage\nwith open('/etc/ssl/certs/cert.pem') a"
        },
        {
          "language": "go",
          "line_count": 14,
          "complexity": "simple",
          "code": "// \u2705 Good: Verify full chain\nroots := x509.NewCertPool()\nroots.AppendCertsFromPEM(rootCA)\n\nopts := x509.VerifyOptions{\n    Roots:     roots,\n    DNSName:   \"example.com\",\n}\n\n_, err := cert.Verify(opts"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "openssl x509 -in cert.pem -noout -dates\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "openssl s_client -connect example.com:443 -showcerts\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com\""
        },
        {
          "type": "example",
          "url": "http://ocsp.example.com"
        }
      ],
      "tools_mentioned": [
        "ssl",
        "openssl",
        "tls"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "2 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 84.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "api/api-error-handling.md",
      "category": "api",
      "skill_name": "api-error-handling",
      "frontmatter": {
        "name": "api-api-error-handling",
        "description": "Designing error responses for REST APIs"
      },
      "metrics": {
        "line_count": 704,
        "code_line_count": 96,
        "code_examples": 13,
        "external_refs": 6,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 34,
          "complexity": "medium",
          "code": "interface ErrorResponse {\n  code: string;              // Machine-readable error code\n  message: string;           // Human-readable message\n  details?: ErrorDetail[];   // Additional context\n  trace_"
        },
        {
          "language": "python",
          "line_count": 90,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, HTTPException, Request\nfrom fastapi.responses import JSONResponse\nfrom fastapi.exceptions import RequestValidationError\nfrom pydantic import BaseModel, ValidationError\nfro"
        },
        {
          "language": "python",
          "line_count": 47,
          "complexity": "complex",
          "code": "from enum import IntEnum\n\nclass HTTPStatus(IntEnum):\n    # 2xx Success\n    OK = 200                    # Request succeeded\n    CREATED = 201               # Resource created\n    NO_CONTENT = 204      "
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "from pydantic import BaseModel, Field, validator, EmailStr\nfrom typing import List\n\nclass UserCreate(BaseModel):\n    email: EmailStr\n    password: str = Field(..., min_length=8, max_length=100)\n    ag"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "class ErrorMessages:\n    \"\"\"Centralized error messages\"\"\"\n\n    EMAIL_INVALID = \"Please enter a valid email address\"\n    EMAIL_EXISTS = \"An account with this email already exists\"\n\n    PASSWORD_TOO_SHO"
        },
        {
          "language": "python",
          "line_count": 64,
          "complexity": "complex",
          "code": "class APIError(Exception):\n    def __init__(\n        self,\n        code: str,\n        user_message: str,\n        dev_message: Optional[str] = None,\n        status_code: int = 500,\n        details: Opt"
        },
        {
          "language": "python",
          "line_count": 45,
          "complexity": "complex",
          "code": "from fastapi import Request\nimport logging\nimport uuid\n\nlogger = logging.getLogger(__name__)\n\n@app.middleware(\"http\")\nasync def add_trace_id(request: Request, call_next):\n    # Generate or extract tra"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "import structlog\n\nlogger = structlog.get_logger()\n\nasync def log_error(\n    error: Exception,\n    trace_id: str,\n    request: Request,\n    user_id: Optional[str] = None\n):\n    \"\"\"Log error with full c"
        },
        {
          "language": "python",
          "line_count": 55,
          "complexity": "complex",
          "code": "from pydantic import BaseModel, HttpUrl\nfrom typing import Optional, Dict, Any\n\nclass ProblemDetail(BaseModel):\n    \"\"\"RFC 7807 Problem Details for HTTP APIs\"\"\"\n\n    type: str                         "
        },
        {
          "language": "python",
          "line_count": 62,
          "complexity": "complex",
          "code": "from typing import Dict\nfrom enum import Enum\n\nclass Language(str, Enum):\n    EN = \"en\"\n    ES = \"es\"\n    FR = \"fr\"\n\nERROR_MESSAGES: Dict[str, Dict[Language, str]] = {\n    \"USER_NOT_FOUND\": {\n        "
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "medium",
          "code": "# \u274c BAD - Exposes internal details\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: str):\n    try:\n        result = await db.execute(f\"SELECT * FROM users WHERE id = {user_id}\")\n    except Exc"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "class ErrorCode:\n    \"\"\"Centralized error code definitions\"\"\"\n\n    # Authentication & Authorization\n    UNAUTHORIZED = \"UNAUTHORIZED\"\n    INVALID_CREDENTIALS = \"INVALID_CREDENTIALS\"\n    TOKEN_EXPIRED "
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "class ErrorTemplates:\n    @staticmethod\n    def not_found(resource: str, identifier: str) -> APIError:\n        return APIError(\n            code=ErrorCode.NOT_FOUND,\n            user_message=f\"{resour"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/errors/validation\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/errors/validation\""
        },
        {
          "type": "rfc",
          "reference": "RFC 7807"
        },
        {
          "type": "rfc",
          "reference": "RFC 7807"
        },
        {
          "type": "rfc",
          "reference": "RFC 7807"
        },
        {
          "type": "rfc",
          "reference": "rfc7807"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 84.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "observability/production-incident-debugging.md",
      "category": "observability",
      "skill_name": "production-incident-debugging",
      "frontmatter": {
        "name": "observability-production-incident-debugging",
        "description": "Debugging production incidents using observability data (logs, metrics, traces)"
      },
      "metrics": {
        "line_count": 566,
        "code_line_count": 103,
        "code_examples": 16,
        "external_refs": 3,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "promql",
          "line_count": 22,
          "complexity": "medium",
          "code": "# 1. CHECK RATE: Sudden drop or spike?\nsum(rate(http_requests_total[5m])) by (service)\n\n# 2. CHECK ERRORS: Error rate increase?\nsum(rate(http_requests_total{status=~\"5..\"}[5m])) by (service)\n/\nsum(rat"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Find errors around incident time\nkubectl logs -l app=order-service --since=30m | grep -i error\n\n# Example output:\n# 2025-10-26 10:15:32 ERROR [trace_id=abc123] Database connection timeout\n# 2025-10-"
        },
        {
          "language": "promql",
          "line_count": 9,
          "complexity": "simple",
          "code": "# How many errors?\nsum(rate(logs_total{level=\"error\", service=\"order-service\"}[5m]))\n\n# Which endpoint?\nsum by (endpoint) (rate(http_requests_total{status=\"500\", service=\"order-service\"}[5m]))\n\n# When"
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "import uuid\nimport logging\nfrom flask import Flask, request, g\n\napp = Flask(__name__)\n\n@app.before_request\ndef set_correlation_id():\n    # Extract or generate correlation ID\n    correlation_id = reque"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "import logging\nfrom opentelemetry import trace\nfrom sqlalchemy import event, create_engine\n\ntracer = trace.get_tracer(__name__)\nlogger = logging.getLogger(__name__)\n\nengine = create_engine('postgresql"
        },
        {
          "language": "markdown",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Incident: Payment Gateway Timeout (2025-10-26)\n\n## Symptoms\n- Users unable to complete checkout\n- Error: \"Payment processing failed, please try again\"\n- Alert: `payment_errors_rate > 5%`\n\n## Detecti"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "   kubectl logs -l app=payment-service --since=30m | grep ERROR\n   "
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "   kubectl get pods -l app=payment-gateway\n   "
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "   kubectl rollout restart deployment/payment-gateway\n   "
        },
        {
          "language": "promql",
          "line_count": 2,
          "complexity": "simple",
          "code": "   payment_gateway_health\n   "
        },
        {
          "language": "markdown",
          "line_count": 51,
          "complexity": "complex",
          "code": "# Postmortem: Payment Gateway Outage (2025-10-26)\n\n## Incident Summary\n- **Date**: 2025-10-26 10:14 - 10:45 UTC\n- **Duration**: 31 minutes\n- **Severity**: SEV-2 (Revenue impact)\n- **Impact**: 15% of c"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Check pod health\nkubectl get pods -l app=service-name\n\n# View recent logs\nkubectl logs -l app=service-name --since=30m --tail=100\n\n# Stream logs\nkubectl logs -f -l app=service-name\n\n# Get pod metric"
        },
        {
          "language": "promql",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Error rate (percentage)\nsum(rate(http_requests_total{status=~\"5..\"}[5m])) by (service)\n/\nsum(rate(http_requests_total[5m])) by (service)\n* 100\n\n# Latency increase (current vs 1h ago)\nhistogram_quant"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# WRONG: No request tracking across services\ndef call_service_a():\n    requests.post('http://service-a/api')\n\ndef call_service_b():\n    requests.post('http://service-b/api')\n\n# CORRECT: Propagate corr"
        },
        {
          "language": "markdown",
          "line_count": 12,
          "complexity": "simple",
          "code": "# WRONG: Blame-focused\n## Root Cause\nBob deployed buggy code without testing.\n\n# CORRECT: System-focused\n## Root Cause\nDeployment pipeline lacked integration tests, allowing buggy SDK update to reach "
        },
        {
          "language": "markdown",
          "line_count": 12,
          "complexity": "simple",
          "code": "# WRONG: No ownership or deadlines\n## Action Items\n- Add alerts\n- Fix bug\n- Update runbook\n\n# CORRECT: Clear ownership and deadlines\n## Action Items\n1. **[P0]** Add memory alerts (Owner: @alice, Due: "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://inventory-service/check'"
        },
        {
          "type": "external",
          "url": "http://service-a/api'"
        },
        {
          "type": "external",
          "url": "http://service-b/api'"
        }
      ],
      "tools_mentioned": [
        "postgres",
        "postgresql"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 83.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "database/database-connection-pooling.md",
      "category": "database",
      "skill_name": "database-connection-pooling",
      "frontmatter": {
        "name": "database-database-connection-pooling",
        "description": "Configuring database connections for applications"
      },
      "metrics": {
        "line_count": 524,
        "code_line_count": 110,
        "code_examples": 17,
        "external_refs": 0,
        "tools_mentioned": 4,
        "config_snippets": 3
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# SQLAlchemy example\nengine = create_engine(\n    \"postgresql://...\",\n    pool_size=10  # Max 10 connections\n)\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "engine = create_engine(\n    \"postgresql://...\",\n    pool_size=10,\n    max_overflow=5  # Up to 15 total connections\n)\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "engine = create_engine(\n    \"postgresql://...\",\n    pool_timeout=30  # Wait up to 30 seconds\n)\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "engine = create_engine(\n    \"postgresql://...\",\n    pool_recycle=3600  # Recycle after 1 hour\n)\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "engine = create_engine(\n    \"postgresql://...\",\n    pool_pre_ping=True  # Test connection before use\n)\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "from sqlalchemy import create_engine\n\nengine = create_engine(\n    \"postgresql://user:pass@localhost/db\",\n    pool_size=10,            # Base pool size\n    max_overflow=5,          # Burst capacity\n   "
        },
        {
          "language": "typescript",
          "line_count": 18,
          "complexity": "simple",
          "code": "// In schema.prisma\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// Connection string with pool params\nDATABASE_URL=\"postgresql://user:pass@localhost/db?schema=public&"
        },
        {
          "language": "go",
          "line_count": 16,
          "complexity": "complex",
          "code": "import (\n    \"gorm.io/driver/postgres\"\n    \"gorm.io/gorm\"\n)\n\ndsn := \"host=localhost user=postgres password=pass dbname=db\"\ndb, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\nsqlDB, err := db.DB"
        },
        {
          "language": "rust",
          "line_count": 12,
          "complexity": "simple",
          "code": "use diesel::r2d2::{self, ConnectionManager};\nuse diesel::pg::PgConnection;\n\nlet manager = ConnectionManager::<PgConnection>::new(database_url);\n\nlet pool = r2d2::Pool::builder()\n    .max_size(10)     "
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# settings.py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'db',\n        'USER': 'user',\n        'PASSWORD': 'pass',\n        'HOST': 'localhost',\n "
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# SQLAlchemy: Check pool status\nprint(engine.pool.status())\n# Output: Pool size: 10  Connections in pool: 2 Current Overflow: 0 Current Checked out connections: 8\n\n# Log pool events\nengine = create_en"
        },
        {
          "language": "python",
          "line_count": 2,
          "complexity": "simple",
          "code": "engine = create_engine(\"...\", pool_size=20, max_overflow=10)\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u274c BAD: Connection leak\nconn = engine.connect()\nresult = conn.execute(query)\n# Connection never returned!\n\n# \u2705 GOOD: Use context manager\nwith engine.connect() as conn:\n    result = conn.execute(query"
        },
        {
          "language": "ini",
          "line_count": 10,
          "complexity": "simple",
          "code": "# pgbouncer.ini\n[databases]\nmydb = host=localhost dbname=mydb\n\n[pgbouncer]\npool_mode = transaction  # Or session, statement\nmax_client_conn = 1000   # Client connections\ndefault_pool_size = 20   # Con"
        },
        {
          "language": "sql",
          "line_count": 11,
          "complexity": "simple",
          "code": "-- Check current connections\nSELECT count(*), state\nFROM pg_stat_activity\nWHERE datname = 'mydb'\nGROUP BY state;\n\n-- Check connection age\nSELECT now() - backend_start AS age, query\nFROM pg_stat_activi"
        },
        {
          "language": "sql",
          "line_count": 3,
          "complexity": "simple",
          "code": "SHOW PROCESSLIST;\nSHOW STATUS LIKE 'Threads_connected';\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "from sqlalchemy import create_engine\n\nengine = create_engine(\n    \"postgresql://user:pass@host/db\",\n    pool_size=20,               # Base pool\n    max_overflow=10,            # Burst capacity\n    poo"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "ssl",
        "postgres",
        "mysql",
        "postgresql"
      ],
      "config_snippets": [
        "ini",
        "sql",
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql, ini), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "3 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 83.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/domain-driven-design.md",
      "category": "engineering",
      "skill_name": "domain-driven-design",
      "frontmatter": {
        "name": "engineering-domain-driven-design",
        "description": "Domain-Driven Design patterns, bounded contexts, aggregates, entities, value objects, and strategic design"
      },
      "metrics": {
        "line_count": 666,
        "code_line_count": 112,
        "code_examples": 15,
        "external_refs": 4,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "# Bad: Technical jargon disconnected from business\nclass DataProcessor:\n    def execute(self, input_params):\n        result = self.algorithm(input_params)\n        self.persist(result)\n\n# Good: Busines"
        },
        {
          "language": "typescript",
          "line_count": 13,
          "complexity": "complex",
          "code": "class Order {\n  private id: OrderId;  // Identity\n  private customerId: CustomerId;\n  private items: OrderItem[];\n  private status: OrderStatus;\n  private total: Money;\n\n  // Identity matters - same I"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\n\n@dataclass(frozen=True)  # Immutable\nclass Money:\n    amount: Decimal\n    currency: str\n\n    def add(self, other: Money) -> Money:\n        if self.currency != other."
        },
        {
          "language": "go",
          "line_count": 24,
          "complexity": "medium",
          "code": "// Order Aggregate Root\ntype Order struct {\n    id         OrderID         // Identity\n    customerID CustomerID\n    items      []OrderItem     // Internal entities\n    status     OrderStatus\n    tota"
        },
        {
          "language": "typescript",
          "line_count": 13,
          "complexity": "complex",
          "code": "interface OrderRepository {\n  findById(id: OrderId): Promise<Order | null>;\n  save(order: Order): Promise<void>;\n  findByCustomer(customerId: CustomerId): Promise<Order[]>;\n}\n\n// Implementation hidden"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "class PricingService:\n    \"\"\"Domain service for complex pricing logic\"\"\"\n\n    def calculate_order_total(\n        self,\n        items: List[OrderItem],\n        customer: Customer,\n        promotion: Op"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "class Order:\n    def __init__(self, order_id: OrderId):\n        self.id = order_id  # Identity\n        self.items: List[OrderItem] = []\n        self.created_at = datetime.now()\n\n    def __eq__(self, o"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "@dataclass(frozen=True)  # Immutable\nclass Address:\n    street: str\n    city: str\n    state: str\n    zip_code: str\n\n    def __post_init__(self):\n        if not self.zip_code or len(self.zip_code) != 5"
        },
        {
          "language": "typescript",
          "line_count": 7,
          "complexity": "simple",
          "code": "// Can modify OrderItem directly - invariants can break!\nconst order = orderRepo.findById(\"123\");\nconst item = orderItemRepo.findById(\"456\");\nitem.quantity = 0;  // Violates business rule!\nitem.price "
        },
        {
          "language": "typescript",
          "line_count": 31,
          "complexity": "complex",
          "code": "class Order {  // Aggregate Root\n  private items: OrderItem[] = [];\n\n  addItem(product: Product, quantity: number): void {\n    if (quantity <= 0) {\n      throw new Error(\"Quantity must be positive\");\n"
        },
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom datetime import datetime\n\n@dataclass(frozen=True)\nclass OrderPlaced:\n    \"\"\"Domain event: Something that happened in the domain\"\"\"\n    order_id: str\n    customer"
        },
        {
          "language": "typescript",
          "line_count": 29,
          "complexity": "complex",
          "code": "// Encapsulate business rules in reusable specifications\ninterface Specification<T> {\n  isSatisfiedBy(candidate: T): boolean;\n  and(other: Specification<T>): Specification<T>;\n  or(other: Specificatio"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "class OrderFactory:\n    \"\"\"Create complex aggregates with valid initial state\"\"\"\n\n    def create_order(\n        self,\n        customer: Customer,\n        items: List[Tuple[Product, int]],\n        ship"
        },
        {
          "language": "go",
          "line_count": 50,
          "complexity": "medium",
          "code": "// Protect our domain from external system's model\ntype ExternalPaymentService struct {\n    client *ThirdPartyAPI\n}\n\n// External model (we don't control)\ntype ThirdPartyPaymentResponse struct {\n    Tx"
        },
        {
          "language": "python",
          "line_count": 86,
          "complexity": "complex",
          "code": "# Value Objects\n@dataclass(frozen=True)\nclass Money:\n    amount: Decimal\n    currency: str\n\n    def add(self, other: Money) -> Money:\n        if self.currency != other.currency:\n            raise Valu"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215"
        },
        {
          "type": "external",
          "url": "https://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577"
        },
        {
          "type": "external",
          "url": "https://martinfowler.com/tags/domain%20driven%20design.html"
        },
        {
          "type": "external",
          "url": "https://martinfowler.com/bliki/BoundedContext.html"
        }
      ],
      "tools_mentioned": [
        "postgres"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "14 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 83.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "security/authentication.md",
      "category": "security",
      "skill_name": "authentication",
      "frontmatter": {
        "name": "security-authentication",
        "description": "Authentication patterns including JWT, OAuth2, sessions, and multi-factor authentication for secure user identity verification"
      },
      "metrics": {
        "line_count": 566,
        "code_line_count": 115,
        "code_examples": 15,
        "external_refs": 1,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Authentication: Verify user identity\ndef authenticate(username: str, password: str) -> User:\n    user = db.get_user_by_username(username)\n    if user and verify_password(password, user.password_hash"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c Plain text storage\nuser.password = request.password\n\n# \u274c Weak hashing (MD5, SHA1)\nuser.password = hashlib.md5(request.password.encode()).hexdigest()\n\n# \u274c No salt\nuser.password = hashlib.sha256(req"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "import bcrypt\nfrom argon2 import PasswordHasher\n\n# \u2705 bcrypt (widely used, battle-tested)\ndef hash_password_bcrypt(password: str) -> bytes:\n    salt = bcrypt.gensalt(rounds=12)  # Cost factor\n    retur"
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "import re\nfrom typing import List\n\ndef validate_password_strength(password: str) -> tuple[bool, List[str]]:\n    \"\"\"\n    Validate password meets security requirements.\n    Returns (is_valid, list_of_er"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "import secrets\nfrom datetime import datetime, timedelta\n\n# Step 1: Generate reset token\ndef create_password_reset_token(user_id: int) -> str:\n    token = secrets.token_urlsafe(32)\n    expiry = datetim"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "from flask import Flask, session, request\nfrom datetime import timedelta\n\napp = Flask(__name__)\napp.secret_key = 'your-secret-key'  # Use environment variable\napp.permanent_session_lifetime = timedelt"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "from flask import Flask\nfrom flask_session import Session\n\napp = Flask(__name__)\n\n# Configure secure session\napp.config.update(\n    SESSION_COOKIE_SECURE=True,      # HTTPS only\n    SESSION_COOKIE_HTT"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "import jwt\nfrom datetime import datetime, timedelta\n\nSECRET_KEY = \"your-secret-key\"\n\ndef create_jwt(user_id: int) -> str:\n    payload = {\n        \"sub\": str(user_id),\n        \"iat\": datetime.utcnow(),"
        },
        {
          "language": "python",
          "line_count": 53,
          "complexity": "complex",
          "code": "import pyotp\nimport qrcode\nfrom io import BytesIO\n\nclass MFAService:\n    @staticmethod\n    def setup_totp(user: User) -> dict:\n        \"\"\"Generate TOTP secret and QR code for user\"\"\"\n        secret = "
        },
        {
          "language": "python",
          "line_count": 45,
          "complexity": "complex",
          "code": "from flask import Flask, request, session\n\n@app.route('/login', methods=['POST'])\ndef login():\n    credentials = request.json\n\n    # Step 1: Verify username/password\n    user = authenticate(credential"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "import secrets\n\ndef generate_backup_codes(count: int = 10) -> List[str]:\n    \"\"\"Generate one-time backup codes\"\"\"\n    codes = [secrets.token_hex(4) for _ in range(count)]  # 8-char codes\n\n    # Store "
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "from authlib.integrations.flask_client import OAuth\n\noauth = OAuth(app)\n\n# Register OAuth provider\noauth.register(\n    'google',\n    client_id='YOUR_CLIENT_ID',\n    client_secret='YOUR_CLIENT_SECRET',"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "from datetime import datetime, timedelta\n\ndef check_login_attempts(username: str) -> bool:\n    \"\"\"Check if account is locked due to failed attempts\"\"\"\n    attempts = db.fetch_one(\"\"\"\n        SELECT CO"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "from flask_limiter import Limiter\n\nlimiter = Limiter(app, key_func=get_remote_address)\n\n@app.route('/login', methods=['POST'])\n@limiter.limit(\"5 per minute\")  # Rate limit\ndef login():\n    # Check acc"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "from flask import session\n\n@app.route('/login', methods=['POST'])\ndef login():\n    # Authenticate user\n    user = authenticate(...)\n\n    # Regenerate session ID\n    session.regenerate()\n\n    session['"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://accounts.google.com/.well-known/openid-configuration'"
        }
      ],
      "tools_mentioned": [
        "jwt",
        "oauth",
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 82.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "security/authorization.md",
      "category": "security",
      "skill_name": "authorization",
      "frontmatter": {
        "name": "security-authorization",
        "description": "Authorization models including RBAC, ABAC, policy engines, and access control patterns for securing resources"
      },
      "metrics": {
        "line_count": 647,
        "code_line_count": 154,
        "code_examples": 18,
        "external_refs": 1,
        "tools_mentioned": 3,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# After authentication\nuser = authenticate(token)\n\n# Before allowing action\nif not user.can(\"delete\", post):\n    raise ForbiddenError(\"You cannot delete this post\")\n\n# Perform action\ndelete_post(post)"
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "from enum import Enum\nfrom typing import Set\n\nclass Role(Enum):\n    ADMIN = \"admin\"\n    EDITOR = \"editor\"\n    VIEWER = \"viewer\"\n\nclass User:\n    def __init__(self, id: int, username: str, roles: Set[R"
        },
        {
          "language": "sql",
          "line_count": 43,
          "complexity": "medium",
          "code": "-- Users table\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(255) UNIQUE NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Roles ta"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "from typing import Dict, Set\n\nclass RoleHierarchy:\n    \"\"\"Implement role inheritance\"\"\"\n\n    def __init__(self):\n        # Define role hierarchy (child -> parents)\n        self.hierarchy: Dict[Role, S"
        },
        {
          "language": "python",
          "line_count": 82,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Any, Dict\nfrom datetime import datetime\n\n@dataclass\nclass Resource:\n    id: int\n    type: str\n    owner_id: int\n    department: str\n    classificat"
        },
        {
          "language": "rego",
          "line_count": 30,
          "complexity": "complex",
          "code": "package authz\n\nimport future.keywords.if\n\n# Default deny\ndefault allow := false\n\n# Allow admins everything\nallow if {\n    input.user.roles[_] == \"admin\"\n}\n\n# Allow resource owners\nallow if {\n    input"
        },
        {
          "language": "python",
          "line_count": 47,
          "complexity": "complex",
          "code": "import requests\nimport json\n\nclass OPAClient:\n    def __init__(self, opa_url: str = \"http://localhost:8181\"):\n        self.opa_url = opa_url\n\n    def authorize(self, user: Dict, action: str, resource:"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "import casbin\n\n# Model definition (RBAC with domains)\nmodel_config = \"\"\"\n[request_definition]\nr = sub, dom, obj, act\n\n[policy_definition]\np = sub, dom, obj, act\n\n[role_definition]\ng = _, _, _\n\n[policy"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "from fastapi import HTTPException, Depends\n\nasync def get_current_user() -> User:\n    # Extract from JWT, session, etc.\n    pass\n\nasync def get_post_or_404(post_id: int) -> Post:\n    post = await db.g"
        },
        {
          "language": "sql",
          "line_count": 18,
          "complexity": "simple",
          "code": "-- Enable RLS on table\nALTER TABLE documents ENABLE ROW LEVEL SECURITY;\n\n-- Policy: Users can only see their own documents\nCREATE POLICY user_documents ON documents\n    FOR SELECT\n    USING (owner_id "
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Set user context in application\nasync def set_user_context(user: User):\n    await db.execute(f\"SET LOCAL app.user_id = {user.id}\")\n    await db.execute(f\"SET LOCAL app.user_role = '{user.role}'\")\n\n#"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "from functools import wraps\nfrom flask import request, jsonify\n\ndef require_permission(permission: str):\n    \"\"\"Decorator to require specific permission\"\"\"\n    def decorator(f):\n        @wraps(f)\n    "
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, Depends, HTTPException\n\napp = FastAPI()\n\nasync def check_permission(\n    required_permission: str,\n    user: User = Depends(get_current_user)\n):\n    \"\"\"Dependency for perm"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "from fastapi import Header, HTTPException\n\nasync def get_tenant_id(x_tenant_id: str = Header(...)) -> str:\n    \"\"\"Extract tenant ID from header\"\"\"\n    tenant = await db.get_tenant(x_tenant_id)\n    if "
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "@app.get(\"/users/{user_id}/profile\")\ndef get_profile(user_id: int):\n    # \u274c No authorization check\n    profile = db.get_user_profile(user_id)\n    return profile\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "@app.get(\"/users/{user_id}/profile\")\ndef get_profile(\n    user_id: int,\n    current_user: User = Depends(get_current_user)\n):\n    # \u2705 Check authorization\n    if user_id != current_user.id and not curr"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "@app.post(\"/users/{user_id}/role\")\ndef update_role(user_id: int, role: str):\n    # \u274c Any authenticated user can make anyone admin\n    db.update_user_role(user_id, role)\n"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "@app.post(\"/users/{user_id}/role\")\n@require_permission(\"manage_users\")\ndef update_role(\n    user_id: int,\n    role: str,\n    current_user: User = Depends(get_current_user)\n):\n    # \u2705 Only admins can u"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "http://localhost:8181\""
        }
      ],
      "tools_mentioned": [
        "postgres",
        "postgresql",
        "jwt"
      ],
      "config_snippets": [
        "sql",
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 82.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "observability/metrics-instrumentation.md",
      "category": "observability",
      "skill_name": "metrics-instrumentation",
      "frontmatter": {
        "name": "observability-metrics-instrumentation",
        "description": "Instrumenting applications for observability"
      },
      "metrics": {
        "line_count": 638,
        "code_line_count": 136,
        "code_examples": 16,
        "external_refs": 1,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 80,
          "complexity": "complex",
          "code": "from prometheus_client import Counter, Histogram, Gauge, Summary\nfrom prometheus_client import start_http_server\nimport time\nfrom functools import wraps\n\n# Define metrics\nhttp_requests_total = Counter"
        },
        {
          "language": "go",
          "line_count": 81,
          "complexity": "complex",
          "code": "package metrics\n\nimport (\n    \"net/http\"\n    \"time\"\n\n    \"github.com/prometheus/client_golang/prometheus\"\n    \"github.com/prometheus/client_golang/prometheus/promauto\"\n    \"github.com/prometheus/clien"
        },
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "from prometheus_client import Counter, Histogram, Gauge\n\n# Business metrics\norders_total = Counter(\n    'orders_total',\n    'Total orders placed',\n    ['product_category', 'payment_method']\n)\n\norder_v"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "from statsd import StatsClient\nfrom functools import wraps\nimport time\n\nstatsd = StatsClient(host='localhost', port=8125, prefix='myapp')\n\ndef track_timing(metric_name: str):\n    \"\"\"Decorator to track"
        },
        {
          "language": "promql",
          "line_count": 26,
          "complexity": "medium",
          "code": "# 95th percentile latency\nhistogram_quantile(0.95,\n  rate(http_request_duration_seconds_bucket[5m])\n)\n\n# 99th percentile by endpoint\nhistogram_quantile(0.99,\n  sum by (endpoint, le) (\n    rate(http_re"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "from prometheus_client import Counter\n\n# Good: Bounded labels\napi_requests = Counter(\n    'api_requests_total',\n    'API requests',\n    ['method', 'endpoint', 'status', 'region']\n)\n\n# Method: 4 values"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Python\npip install prometheus-client\n\n# Go\ngo get github.com/prometheus/client_golang/prometheus\n\n# Rust\ncargo add prometheus\n\n# Node.js\nnpm install prom-client\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Python\npip install statsd\n\n# Node.js\nnpm install node-statsd\n\n# Go\ngo get github.com/cactus/go-statsd-client/statsd\n"
        },
        {
          "language": "promql",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Rate (per-second average over time window)\nrate(metric[5m])\n\n# Increase (total increase over time window)\nincrease(metric[1h])\n\n# Sum (aggregate across labels)\nsum(metric) by (label)\n\n# Average\navg("
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Latency (seconds)\nbuckets=[0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1.0, 2.5, 5.0, 10.0]\n\n# Request size (bytes)\nbuckets=[100, 1000, 10_000, 100_000, 1_000_000, 10_000_000]\n\n# Duration (milliseconds)\nbuc"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# WRONG: User ID has millions of unique values\nrequests_total = Counter(\n    'requests_total',\n    'Total requests',\n    ['user_id']  # 1M users = 1M time series!\n)\n\n# CORRECT: Use low-cardinality lab"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: Ambiguous units\nrequest_duration = Histogram('request_duration', 'Request duration')\n\n# CORRECT: Explicit units\nrequest_duration_seconds = Histogram(\n    'request_duration_seconds',\n    'Requ"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Gauge for monotonic value\nrequests_processed = Gauge('requests_processed', 'Requests processed')\nrequests_processed.inc()  # Resets on restart!\n\n# CORRECT: Counter for monotonic value\nrequest"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# WRONG: Summary (cannot aggregate across instances)\nlatency_summary = Summary(\n    'latency_summary',\n    'Request latency summary'\n)\n\n# CORRECT: Histogram (aggregates across instances)\nlatency_histo"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# WRONG: 6 labels = cardinality explosion\nmetric = Counter(\n    'api_requests',\n    'API requests',\n    ['method', 'endpoint', 'status', 'region', 'customer', 'version']\n)\n\n# CORRECT: 3-4 essential la"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Inconsistent naming\nmetric1 = Counter('requests', 'Requests', ['http_method'])\nmetric2 = Counter('errors', 'Errors', ['method'])\n\n# CORRECT: Consistent naming\nmetric1 = Counter('requests_tota"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "http://localhost:8000/metrics"
        }
      ],
      "tools_mentioned": [
        "grafana",
        "prometheus",
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 82.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "testing/unit-testing-patterns.md",
      "category": "testing",
      "skill_name": "unit-testing-patterns",
      "frontmatter": {
        "name": "testing-unit-testing-patterns",
        "description": "Write isolated tests for individual functions, classes, or modules"
      },
      "metrics": {
        "line_count": 601,
        "code_line_count": 182,
        "code_examples": 19,
        "external_refs": 1,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Python (pytest)\ndef test_calculate_discount():\n    # Arrange\n    cart = ShoppingCart()\n    cart.add_item(Item(\"Laptop\", price=1000))\n    discount_service = DiscountService(rate=0.1)\n\n    # Act\n    f"
        },
        {
          "language": "typescript",
          "line_count": 16,
          "complexity": "simple",
          "code": "// TypeScript (Vitest)\ndescribe('calculateDiscount', () => {\n  it('applies 10% discount correctly', () => {\n    // Arrange\n    const cart = new ShoppingCart();\n    cart.addItem(new Item('Laptop', 1000"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "# Python (unittest.mock)\nfrom unittest.mock import Mock, patch, MagicMock\n\n# STUB: Returns predetermined values\nemail_service = Mock()\nemail_service.send_email.return_value = True\n\n# MOCK: Verifies in"
        },
        {
          "language": "typescript",
          "line_count": 23,
          "complexity": "complex",
          "code": "// TypeScript (Vitest)\nimport { vi } from 'vitest';\n\n// STUB\nconst emailService = {\n  sendEmail: vi.fn().mockResolvedValue(true)\n};\n\n// MOCK\nconst emailService = {\n  sendEmail: vi.fn()\n};\nawait userSe"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "# Python (pytest)\nimport pytest\n\n@pytest.mark.parametrize(\"input,expected\", [\n    (0, 0),\n    (1, 1),\n    (2, 4),\n    (3, 9),\n    (-2, 4),\n])\ndef test_square(input, expected):\n    assert square(input)"
        },
        {
          "language": "rust",
          "line_count": 21,
          "complexity": "medium",
          "code": "// Rust\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_square() {\n        let cases = vec![\n            (0, 0),\n            (1, 1),\n            (2, 4),\n            (3, 9),\n       "
        },
        {
          "language": "go",
          "line_count": 22,
          "complexity": "medium",
          "code": "// Go (table-driven tests)\nfunc TestSquare(t *testing.T) {\n    tests := []struct {\n        name     string\n        input    int\n        expected int\n    }{\n        {\"zero\", 0, 0},\n        {\"positive\","
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "# Python (pytest-asyncio)\nimport pytest\n\n@pytest.mark.asyncio\nasync def test_fetch_user():\n    # Arrange\n    user_id = 123\n    mock_api = Mock()\n    mock_api.get_user = AsyncMock(return_value={\"id\": 1"
        },
        {
          "language": "typescript",
          "line_count": 27,
          "complexity": "medium",
          "code": "// TypeScript (Vitest)\ndescribe('fetchUser', () => {\n  it('fetches user data', async () => {\n    // Arrange\n    const mockApi = {\n      getUser: vi.fn().mockResolvedValue({ id: 123, name: 'Alice' })\n "
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "# Python\nimport pytest\n\ndef test_divide_by_zero():\n    with pytest.raises(ZeroDivisionError):\n        divide(10, 0)\n\ndef test_invalid_input_message():\n    with pytest.raises(ValueError, match=\"must be"
        },
        {
          "language": "typescript",
          "line_count": 12,
          "complexity": "simple",
          "code": "// TypeScript\ndescribe('error handling', () => {\n  it('throws on divide by zero', () => {\n    expect(() => divide(10, 0)).toThrow('Division by zero');\n  });\n\n  it('returns null on invalid input', () ="
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "# Python (pytest fixtures)\nimport pytest\n\n@pytest.fixture\ndef user():\n    \"\"\"Provides a test user instance\"\"\"\n    return User(id=1, name=\"Alice\", email=\"alice@example.com\")\n\n@pytest.fixture\ndef databa"
        },
        {
          "language": "typescript",
          "line_count": 25,
          "complexity": "complex",
          "code": "// TypeScript (Vitest)\nimport { describe, it, beforeEach, afterEach } from 'vitest';\n\ndescribe('UserService', () => {\n  let database: Database;\n  let userService: UserService;\n\n  beforeEach(() => {\n  "
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c WRONG: Testing private methods directly\ndef test_private_validate_email():\n    service = UserService()\n    assert service._validate_email(\"test@example.com\") is True\n\n# \u2705 CORRECT: Test through pub"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Python\ndef test_cart_state_changes():\n    # Arrange\n    cart = ShoppingCart()\n    item = Item(\"Laptop\", 1000)\n\n    # Act & Assert: Initial state\n    assert cart.item_count == 0\n    assert cart.total"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "# test_calculator.py\nimport pytest\nfrom calculator import Calculator\n\nclass TestCalculator:\n    def test_add(self):\n        calc = Calculator()\n        assert calc.add(2, 3) == 5\n\n    def test_subtrac"
        },
        {
          "language": "rust",
          "line_count": 34,
          "complexity": "medium",
          "code": "// lib.rs\npub fn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_add() {\n        assert_eq!(add(2, 3), 5);\n    }\n\n    #[test]\n    #[should"
        },
        {
          "language": "go",
          "line_count": 33,
          "complexity": "complex",
          "code": "// calculator_test.go\npackage calculator\n\nimport \"testing\"\n\nfunc TestAdd(t *testing.T) {\n    result := Add(2, 3)\n    if result != 5 {\n        t.Errorf(\"Add(2, 3) = %d; want 5\", result)\n    }\n}\n\nfunc T"
        },
        {
          "language": "typescript",
          "line_count": 21,
          "complexity": "complex",
          "code": "// calculator.test.ts\nimport { describe, it, expect } from 'vitest';\nimport { Calculator } from './calculator';\n\ndescribe('Calculator', () => {\n  it('adds two numbers', () => {\n    const calc = new Ca"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/users/123'"
        }
      ],
      "tools_mentioned": [
        "jest",
        "pytest",
        "vite"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "19 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "14 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 82.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/distributed-locks.md",
      "category": "distributed-systems",
      "skill_name": "distributed-locks",
      "frontmatter": {
        "name": "distributed-systems-distributed-locks",
        "description": "Distributed locking patterns including Redis Redlock, ZooKeeper locks, lease-based locking, and fencing tokens"
      },
      "metrics": {
        "line_count": 437,
        "code_line_count": 93,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 61,
          "complexity": "complex",
          "code": "import redis\nimport time\nimport uuid\n\nclass RedisLock:\n    \"\"\"Simple Redis-based distributed lock\"\"\"\n\n    def __init__(self, redis_client, lock_name, ttl=10):\n        self.redis = redis_client\n       "
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "import redis\nimport time\n\nclass Redlock:\n    \"\"\"Redlock algorithm across multiple Redis instances\"\"\"\n\n    def __init__(self, redis_instances):\n        self.redis_instances = redis_instances\n        se"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "from kazoo.client import KazooClient\nfrom kazoo.recipe.lock import Lock\n\nclass ZooKeeperLock:\n    \"\"\"Distributed lock using ZooKeeper\"\"\"\n\n    def __init__(self, zk_hosts, lock_path):\n        self.zk ="
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "class FencedLock:\n    \"\"\"Lock with monotonically increasing fencing token\"\"\"\n\n    def __init__(self):\n        self.current_token = 0\n        self.lock_holder = None\n\n    def acquire(self, client_id):\n"
        },
        {
          "language": "python",
          "line_count": 67,
          "complexity": "complex",
          "code": "import time\n\nclass LeaseLock:\n    \"\"\"Lock with lease (time-based ownership)\"\"\"\n\n    def __init__(self, ttl=10):\n        self.ttl = ttl\n        self.lease_end = 0\n        self.holder = None\n\n    def ac"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u2705 Good: Timeout to prevent deadlock\nif lock.acquire(timeout=30):\n    try:\n        work()\n    finally:\n        lock.release()\n\n# \u274c Bad: Infinite wait\nlock.acquire()  # Could hang forever\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u2705 Good: Always release\ntry:\n    lock.acquire()\n    work()\nfinally:\n    lock.release()\n\n# \u274c Bad: Exception leaves lock held\nlock.acquire()\nwork()  # Exception \u2192 lock never released!\nlock.release()\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u2705 Good: TTL longer than max work time\nlock = RedisLock(redis_client, \"resource\", ttl=60)  # 60s for 30s job\n\n# \u274c Bad: TTL too short\nlock = RedisLock(redis_client, \"resource\", ttl=1)  # Expires durin"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "complex",
          "code": "import etcd3\n\netcd = etcd3.client()\n\nwith etcd.lock('my-lock', ttl=60):\n    # Critical section\n    process_resource()\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "import consul\n\nc = consul.Consul()\n\nsession = c.session.create(ttl=60)\n\nif c.kv.put('locks/my-resource', 'holder', acquire=session):\n    try:\n        # Critical section\n        process_resource()\n    "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "etcd",
        "consul",
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 81.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/cap-theorem.md",
      "category": "distributed-systems",
      "skill_name": "cap-theorem",
      "frontmatter": {
        "name": "distributed-systems-cap-theorem",
        "description": "CAP theorem fundamentals, consistency vs availability trade-offs, and practical implications for distributed system design"
      },
      "metrics": {
        "line_count": 404,
        "code_line_count": 41,
        "code_examples": 7,
        "external_refs": 0,
        "tools_mentioned": 6,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# CP system: Returns error if can't guarantee consistency\ntry:\n    balance = bank_db.get_balance(account_id)\n    if balance >= amount:\n        bank_db.withdraw(account_id, amount)  # Blocks during par"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# AP system: Always returns data, may be stale\nuser_profile = cache.get(user_id)  # Returns even if stale\nif user_profile is None:\n    user_profile = eventual_consistency_db.get(user_id)  # Best effor"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "class SocialMediaFeed:\n    \"\"\"AP system: Always available, eventually consistent\"\"\"\n\n    def post_update(self, user_id, content):\n        # Write to multiple regions asynchronously\n        for region "
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "class BankAccount:\n    \"\"\"CP system: Strongly consistent, may be unavailable\"\"\"\n\n    def transfer(self, from_account, to_account, amount):\n        # Distributed transaction with 2PC\n        transactio"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "class HybridSystem:\n    \"\"\"Different consistency for different data\"\"\"\n\n    def write_user_profile(self, user_id, profile):\n        # AP: Profile updates can be eventually consistent\n        self.ap_s"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "from cassandra.cluster import Cluster\nfrom cassandra.query import SimpleStatement\nfrom cassandra import ConsistencyLevel\n\ncluster = Cluster(['node1', 'node2', 'node3'])\nsession = cluster.connect('my_k"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "import subprocess\nimport time\n\ndef simulate_partition(node_ips):\n    \"\"\"Block network traffic between nodes\"\"\"\n    for ip in node_ips:\n        subprocess.run([\n            'iptables', '-A', 'INPUT', '"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "kubernetes",
        "postgresql",
        "postgres",
        "mongodb",
        "consul",
        "etcd"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "7 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 81.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "testing/test-coverage-strategy.md",
      "category": "testing",
      "skill_name": "test-coverage-strategy",
      "frontmatter": {
        "name": "testing-test-coverage-strategy",
        "description": "Determine what code needs testing vs what to skip"
      },
      "metrics": {
        "line_count": 609,
        "code_line_count": 205,
        "code_examples": 21,
        "external_refs": 0,
        "tools_mentioned": 3,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "def calculate_discount(price, discount_percent):\n    if discount_percent > 0:           # Line executed\n        return price * (1 - discount_percent / 100)  # Line executed\n    return price           "
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "def validate_age(age):\n    if age < 0:          # Branch 1: True path\n        return False     # Covered\n    elif age < 18:       # Branch 2: True path\n        return False     # Covered\n    else:    "
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "def function_a():\n    pass\n\ndef function_b():\n    pass\n\n# Test calls function_a only \u2192 50% function coverage\n"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "def process(x, y):\n    if x > 0:\n        if y > 0:\n            return \"both positive\"\n        else:\n            return \"x positive, y not\"\n    else:\n        if y > 0:\n            return \"y positive, x"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Python\npytest --cov=myapp --cov-report=html tests/\n\n# JavaScript\nnpm test -- --coverage\n\n# Go\ngo test -cover ./...\n\n# Rust\ncargo tarpaulin --out Html\n"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# coverage.py report shows:\n# myapp/payment.py     45%    Lines 23-45, 67-89 not covered\n\n# Look at payment.py:\ndef process_payment(amount, method):\n    if method == \"credit_card\":\n        return proc"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "def test_process_payment_paypal():\n    result = process_payment(100, \"paypal\")\n    assert result.status == \"success\"\n\ndef test_process_payment_bitcoin():\n    result = process_payment(100, \"bitcoin\")\n "
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Original code\ndef is_adult(age):\n    return age >= 18\n\n# Test\ndef test_is_adult():\n    assert is_adult(18) is True\n    assert is_adult(17) is False\n\n# Mutation 1: Change >= to >\ndef is_adult(age):\n "
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Python (mutmut)\npip install mutmut\nmutmut run\nmutmut results\n\n# JavaScript (Stryker)\nnpm install --save-dev @stryker-mutator/core\nnpx stryker run\n\n# Example output:\n# Mutant 1: Changed >= to > \u2192 SUR"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "medium",
          "code": "# E-commerce checkout flow\ndef checkout(cart, user, payment_method):\n    # CRITICAL: Calculate total (money involved)\n    total = calculate_total(cart)\n\n    # CRITICAL: Apply discounts (business logic"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# .coveragerc (Python)\n[run]\nbranch = True\nsource = myapp\n\n[report]\nprecision = 2\nfail_under = 80  # CI fails if coverage drops below 80%\n\n# Track coverage over time\n# Week 1: 65%\n# Week 2: 70% (added"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "#!/bin/bash\n# .git/hooks/pre-push\n\n# Run tests with coverage\ncoverage run -m pytest\ncoverage report --fail-under=80\n\nif [ $? -ne 0 ]; then\n    echo \"\u274c Coverage below 80%, push rejected\"\n    exit 1\nfi\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "# Exclude debug code\nif DEBUG:  # pragma: no cover\n    print(f\"Debug: {variable}\")\n\n# Exclude abstract methods\nclass BaseRepository:\n    def find_by_id(self, id: int):\n        raise NotImplementedErro"
        },
        {
          "language": "typescript",
          "line_count": 11,
          "complexity": "simple",
          "code": "// TypeScript/JavaScript (Istanbul)\n/* istanbul ignore next */\nfunction debugLog(message: string) {\n  console.log(message);\n}\n\n/* istanbul ignore else */\nif (process.env.NODE_ENV === 'development') {\n"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "medium",
          "code": "# Install\npip install pytest-cov\n\n# Run with coverage\npytest --cov=myapp --cov-report=term-missing tests/\n\n# Generate HTML report\npytest --cov=myapp --cov-report=html tests/\n# Open htmlcov/index.html\n"
        },
        {
          "language": "json",
          "line_count": 31,
          "complexity": "medium",
          "code": "// package.json\n{\n  \"scripts\": {\n    \"test\": \"vitest\",\n    \"test:coverage\": \"vitest --coverage\"\n  },\n  \"devDependencies\": {\n    \"@vitest/coverage-v8\": \"^1.0.0\"\n  }\n}\n\n// vitest.config.ts\nexport defaul"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Run coverage\nnpm run test:coverage\n\n# Output:\n# File         | % Stmts | % Branch | % Funcs | % Lines |\n# -------------|---------|----------|---------|---------|\n# user.ts      |   85.71 |       75 "
        },
        {
          "language": "go",
          "line_count": 23,
          "complexity": "medium",
          "code": "// Run with coverage\ngo test -cover ./...\n\n// Generate coverage profile\ngo test -coverprofile=coverage.out ./...\n\n// View coverage in browser\ngo tool cover -html=coverage.out\n\n// Coverage for specific"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Install\ncargo install cargo-tarpaulin\n\n# Run coverage\ncargo tarpaulin --out Html\n\n# Output to terminal\ncargo tarpaulin --out Stdout\n\n# Configuration (Cargo.toml or tarpaulin.toml)\n[tarpaulin]\nignore"
        },
        {
          "language": "bash",
          "line_count": 28,
          "complexity": "medium",
          "code": "# Install\npip install mutmut\n\n# Run mutation testing\nmutmut run\n\n# View results\nmutmut results\n\n# Show surviving mutants\nmutmut show\n\n# Example output:\n# Mutant 1 (SURVIVED):\n# --- src/calculator.py\n#"
        },
        {
          "language": "bash",
          "line_count": 26,
          "complexity": "medium",
          "code": "# Install\nnpm install --save-dev @stryker-mutator/core\n\n# Initialize\nnpx stryker init\n\n# Run\nnpx stryker run\n\n# Example stryker.conf.json\n{\n  \"mutate\": [\"src/**/*.ts\"],\n  \"testRunner\": \"vitest\",\n  \"co"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "pytest",
        "vite",
        "go test"
      ],
      "config_snippets": [
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "21 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 81.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "api/graphql-schema-design.md",
      "category": "api",
      "skill_name": "graphql-schema-design",
      "frontmatter": {
        "name": "api-graphql-schema-design",
        "description": "Designing GraphQL APIs from scratch"
      },
      "metrics": {
        "line_count": 468,
        "code_line_count": 154,
        "code_examples": 18,
        "external_refs": 0,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "graphql",
          "line_count": 15,
          "complexity": "simple",
          "code": "type User {\n  id: ID!                    # Non-null ID\n  email: String!             # Non-null String\n  age: Int                   # Nullable Int\n  isActive: Boolean!         # Non-null Boolean\n  crea"
        },
        {
          "language": "graphql",
          "line_count": 27,
          "complexity": "medium",
          "code": "type Query {\n  user(id: ID!): User\n  posts(limit: Int, after: String): PostConnection!\n}\n\ntype Mutation {\n  createPost(input: CreatePostInput!): CreatePostPayload!\n  updatePost(id: ID!, input: UpdateP"
        },
        {
          "language": "graphql",
          "line_count": 6,
          "complexity": "simple",
          "code": "type Subscription {\n  postCreated: Post!\n  postUpdated(postId: ID!): Post!\n  commentAdded(postId: ID!): Comment!\n}\n"
        },
        {
          "language": "javascript",
          "line_count": 18,
          "complexity": "simple",
          "code": "const { PubSub } = require('graphql-subscriptions');\nconst pubsub = new PubSub();\n\nconst resolvers = {\n  Subscription: {\n    postCreated: {\n      subscribe: () => pubsub.asyncIterator(['POST_CREATED']"
        },
        {
          "language": "javascript",
          "line_count": 8,
          "complexity": "simple",
          "code": "// This resolver is called 10 times (once per post)\nPost: {\n  author: async (post, args, context) => {\n    // N+1: 1 query for posts + 10 queries for authors\n    return await db.query('SELECT * FROM u"
        },
        {
          "language": "javascript",
          "line_count": 29,
          "complexity": "medium",
          "code": "const DataLoader = require('dataloader');\n\n// Batch function: receives array of IDs, returns array of users\nconst batchGetUsers = async (userIds) => {\n  const users = await db.query(\n    'SELECT * FRO"
        },
        {
          "language": "javascript",
          "line_count": 18,
          "complexity": "simple",
          "code": "// \u2705 CORRECT: Create loaders in context (per-request)\ncontext: ({ req }) => ({\n  loaders: {\n    userLoader: new DataLoader(batchGetUsers),\n    postLoader: new DataLoader(batchGetPosts)\n  }\n})\n\n// \u274c WR"
        },
        {
          "language": "javascript",
          "line_count": 21,
          "complexity": "medium",
          "code": "Mutation: {\n  createPost: async (parent, { input }, context) => {\n    const errors = [];\n\n    if (input.title.length < 5) {\n      errors.push({ field: 'title', message: 'Title too short' });\n    }\n\n  "
        },
        {
          "language": "javascript",
          "line_count": 16,
          "complexity": "simple",
          "code": "const { AuthenticationError, UserInputError } = require('apollo-server');\n\nQuery: {\n  user: async (parent, { id }, context) => {\n    if (!context.user) {\n      throw new AuthenticationError('Must be l"
        },
        {
          "language": "graphql",
          "line_count": 19,
          "complexity": "simple",
          "code": "type Query {\n  posts(first: Int = 10, after: String): PostConnection!\n}\n\ntype PostConnection {\n  edges: [PostEdge!]!\n  pageInfo: PageInfo!\n}\n\ntype PostEdge {\n  node: Post!\n  cursor: String!\n}\n\ntype Pa"
        },
        {
          "language": "javascript",
          "line_count": 31,
          "complexity": "medium",
          "code": "Query: {\n  posts: async (parent, { first = 10, after }) => {\n    const cursor = after ? decodeCursor(after) : 0;\n\n    // Fetch one extra to check hasNextPage\n    const posts = await db.query(\n      'S"
        },
        {
          "language": "graphql",
          "line_count": 9,
          "complexity": "simple",
          "code": "type Query {\n  posts(limit: Int = 10, offset: Int = 0): PostPage!\n}\n\ntype PostPage {\n  items: [Post!]!\n  total: Int!\n}\n"
        },
        {
          "language": "javascript",
          "line_count": 22,
          "complexity": "medium",
          "code": "const resolvers = {\n  Query: {\n    users: async (parent, args, context) => {\n      // Query-level auth\n      if (!context.user?.isAdmin) {\n        throw new AuthenticationError('Admin only');\n      }\n"
        },
        {
          "language": "graphql",
          "line_count": 18,
          "complexity": "simple",
          "code": "directive @auth(requires: Role = USER) on FIELD_DEFINITION\n\nenum Role {\n  USER\n  ADMIN\n}\n\ntype Query {\n  posts: [Post!]!\n  users: [User!]! @auth(requires: ADMIN)\n}\n\ntype User {\n  id: ID!\n  name: Strin"
        },
        {
          "language": "graphql",
          "line_count": 21,
          "complexity": "medium",
          "code": "interface Searchable {\n  id: ID!\n  title: String!\n}\n\ntype Post implements Searchable {\n  id: ID!\n  title: String!\n  content: String!\n}\n\ntype Video implements Searchable {\n  id: ID!\n  title: String!\n  "
        },
        {
          "language": "javascript",
          "line_count": 8,
          "complexity": "simple",
          "code": "Searchable: {\n  __resolveType(obj) {\n    if (obj.content) return 'Post';\n    if (obj.url) return 'Video';\n    return null;\n  }\n}\n"
        },
        {
          "language": "graphql",
          "line_count": 6,
          "complexity": "simple",
          "code": "union SearchResult = Post | Video | User\n\ntype Query {\n  search(query: String!): [SearchResult!]!\n}\n"
        },
        {
          "language": "graphql",
          "line_count": 9,
          "complexity": "simple",
          "code": "query Search($query: String!) {\n  search(query: $query) {\n    __typename\n    ... on Post { title content }\n    ... on Video { title url }\n    ... on User { name email }\n  }\n}\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "jwt",
        "oauth"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 81.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "api/api-rate-limiting.md",
      "category": "api",
      "skill_name": "api-rate-limiting",
      "frontmatter": {
        "name": "api-api-rate-limiting",
        "description": "Implementing rate limiting for APIs"
      },
      "metrics": {
        "line_count": 771,
        "code_line_count": 125,
        "code_examples": 18,
        "external_refs": 0,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Critical/Auth endpoints - strictest limits\nPOST /login              # 5 requests/minute per IP\nPOST /signup             # 3 requests/hour per IP\nPOST /password-reset     # 3 requests/hour per user\n\n"
        },
        {
          "language": "python",
          "line_count": 82,
          "complexity": "complex",
          "code": "import time\nimport redis\n\nclass TokenBucket:\n    def __init__(self, redis_client: redis.Redis, key: str,\n                 capacity: int, refill_rate: float):\n        \"\"\"\n        capacity: Maximum toke"
        },
        {
          "language": "python",
          "line_count": 56,
          "complexity": "complex",
          "code": "class LeakyBucket:\n    def __init__(self, redis_client: redis.Redis, key: str,\n                 capacity: int, leak_rate: float):\n        \"\"\"\n        capacity: Maximum queue size\n        leak_rate: Re"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "class FixedWindow:\n    def __init__(self, redis_client: redis.Redis, key: str,\n                 limit: int, window_seconds: int):\n        self.redis = redis_client\n        self.key = f\"rate_limit:fixe"
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "class SlidingWindow:\n    def __init__(self, redis_client: redis.Redis, key: str,\n                 limit: int, window_seconds: int):\n        self.redis = redis_client\n        self.key = f\"rate_limit:sl"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "import redis\n\n# Single instance\nredis_client = redis.Redis(\n    host='localhost',\n    port=6379,\n    db=0,\n    decode_responses=True\n)\n\n# Redis Cluster\nfrom redis.cluster import RedisCluster\n\nredis_cl"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "import time\nfrom collections import defaultdict\nfrom threading import Lock\n\nclass InMemoryRateLimiter:\n    def __init__(self):\n        self.limits = defaultdict(lambda: {'count': 0, 'reset': 0})\n     "
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "# PostgreSQL example\nimport psycopg2\nfrom datetime import datetime, timedelta\n\ndef check_rate_limit(user_id: int, limit: int, window_minutes: int) -> bool:\n    conn = psycopg2.connect(\"dbname=myapp\")\n"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\ndef add_rate_limit_headers(response, limiter, key: str):\n    \"\"\"Add rate limit headers to response\"\"\"\n    response.headers['X-RateLimi"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "def get_rate_limit_key(request) -> str:\n    # Authenticated users\n    if request.user.is_authenticated:\n        return f\"user:{request.user.id}\"\n\n    # API key users\n    api_key = request.headers.get("
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "def get_client_ip(request) -> str:\n    \"\"\"Get real client IP (behind proxy)\"\"\"\n    # Check proxy headers\n    if request.headers.get('X-Forwarded-For'):\n        return request.headers['X-Forwarded-For'"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "medium",
          "code": "RATE_LIMITS = {\n    'free': {'requests_per_minute': 60, 'requests_per_day': 1000},\n    'basic': {'requests_per_minute': 300, 'requests_per_day': 10000},\n    'premium': {'requests_per_minute': 1000, 'r"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "medium",
          "code": "def get_priority_level(request) -> int:\n    \"\"\"Determine request priority (higher = more important)\"\"\"\n    if request.user.tier == 'enterprise':\n        return 3\n    elif request.user.tier == 'premium"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "import asyncio\nfrom collections import deque\n\nclass RateLimitQueue:\n    def __init__(self, rate: int):\n        self.rate = rate\n        self.queue = deque()\n        self.processing = False\n\n    async "
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "from flask import jsonify\n\ndef rate_limit_exceeded_response(limiter, key: str):\n    reset_time = limiter.get_reset_time()\n    retry_after = reset_time - int(time.time())\n\n    response = jsonify({\n    "
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c BAD - Allows 200 requests in 1 second (burst at boundary)\nlimiter = FixedWindow(redis_client, key, limit=100, window_seconds=60)\n\n# \u2705 GOOD - Use sliding window or token bucket\nlimiter = SlidingWin"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c BAD - Crashes on Redis failure\nif limiter.allow_request():\n    return response\n\n# \u2705 GOOD - Fail open (allow request) on errors\ntry:\n    if not limiter.allow_request():\n        return rate_limit_ex"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u2705 GOOD - Exempt monitoring endpoints\nEXEMPT_PATHS = ['/health', '/metrics', '/status']\n\n@app.before_request\ndef check_rate_limit():\n    if request.path in EXEMPT_PATHS:\n        return None  # Skip r"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "postgresql",
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "12 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 81.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "protocols/protocol-selection.md",
      "category": "protocols",
      "skill_name": "protocol-selection",
      "frontmatter": {
        "name": "protocols-protocol-selection",
        "description": "Guide for selecting appropriate network protocols (HTTP/1.1, HTTP/2, HTTP/3, TCP, UDP, QUIC) based on use case"
      },
      "metrics": {
        "line_count": 329,
        "code_line_count": 47,
        "code_examples": 8,
        "external_refs": 2,
        "tools_mentioned": 2,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "javascript",
          "line_count": 13,
          "complexity": "simple",
          "code": "// WebRTC uses UDP for media, TCP for signaling\nconst pc = new RTCPeerConnection();\n\n// Media over UDP\npc.addTrack(videoTrack);\npc.addTrack(audioTrack);\n\n// Data channel (QUIC-like)\nconst dataChannel "
        },
        {
          "language": "nginx",
          "line_count": 11,
          "complexity": "simple",
          "code": "server {\n    listen 443 ssl http2;\n    listen 443 quic reuseport;\n\n    add_header Alt-Svc 'h3=\":443\"; ma=86400';\n\n    location /api {\n        proxy_pass http://backend;\n    }\n}\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Player position: UDP (lossy)\nudp_socket.sendto(f\"POS:{x},{y},{z}\".encode(), server)\n\n# Chat messages: TCP (reliable)\ntcp_socket.send(f\"CHAT:{message}\".encode())\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "import requests\n\n# HTTP/2 with range support\nresponse = requests.get(\n    'https://cdn.example.com/large-file.zip',\n    headers={'Range': 'bytes=0-1048576'},  # First 1MB\n    stream=True\n)\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Player position over TCP\nsock.send(b\"POS:100,200\")  # If lost, blocks everything!\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Player position over UDP\nsock.sendto(b\"POS:100,200\", server)  # Loss OK, keep going\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Payment transaction over UDP\nsock.sendto(b\"TRANSFER:$1000\", server)  # Might be lost!\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Payment over TCP\nsock.send(b\"TRANSFER:$1000\")  # Guaranteed delivery\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "example",
          "url": "https://cdn.example.com/large-file.zip'"
        }
      ],
      "tools_mentioned": [
        "ssl",
        "nginx"
      ],
      "config_snippets": [
        "nginx"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (nginx), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 81.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/refactoring-patterns.md",
      "category": "engineering",
      "skill_name": "refactoring-patterns",
      "frontmatter": {
        "name": "engineering-refactoring-patterns",
        "description": "Refactoring techniques, when to refactor, safe refactoring strategies, and code improvement patterns"
      },
      "metrics": {
        "line_count": 716,
        "code_line_count": 224,
        "code_examples": 26,
        "external_refs": 4,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "def print_owing(invoice):\n    print(\"***********************\")\n    print(\"**** Customer Owes ****\")\n    print(\"***********************\")\n\n    outstanding = 0.0\n    for order in invoice.orders:\n       "
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "def print_owing(invoice):\n    print_banner()\n    outstanding = calculate_outstanding(invoice)\n    print_details(invoice, outstanding)\n\ndef print_banner():\n    print(\"***********************\")\n    prin"
        },
        {
          "language": "typescript",
          "line_count": 8,
          "complexity": "simple",
          "code": "function calculatePrice(quantity: number): number {\n  return quantity * 29.99 * 1.08;  // What are these?\n}\n\nfunction checkStock(quantity: number): boolean {\n  return quantity < 100;  // What does 100"
        },
        {
          "language": "typescript",
          "line_count": 12,
          "complexity": "simple",
          "code": "const PRICE_PER_ITEM = 29.99;\nconst TAX_RATE = 1.08;\nconst LOW_STOCK_THRESHOLD = 100;\n\nfunction calculatePrice(quantity: number): number {\n  return quantity * PRICE_PER_ITEM * TAX_RATE;\n}\n\nfunction ch"
        },
        {
          "language": "go",
          "line_count": 14,
          "complexity": "simple",
          "code": "func GetPayAmount(employee Employee) (float64, error) {\n    var result float64\n    if employee.IsSeparated {\n        result = 0\n    } else {\n        if employee.IsRetired {\n            result = employ"
        },
        {
          "language": "go",
          "line_count": 10,
          "complexity": "simple",
          "code": "func GetPayAmount(employee Employee) (float64, error) {\n    if employee.IsSeparated {\n        return 0, nil\n    }\n    if employee.IsRetired {\n        return employee.Pension, nil\n    }\n    return empl"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "class User:\n    def __init__(self, name, email, address, city, state, zip_code):\n        self.name = name\n        self.email = email\n        self.address = address\n        self.city = city\n        sel"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "class Address:\n    def __init__(self, street, city, state, zip_code):\n        self.street = street\n        self.city = city\n        self.state = state\n        self.zip_code = zip_code\n\n    def get_ful"
        },
        {
          "language": "typescript",
          "line_count": 15,
          "complexity": "complex",
          "code": "class Employee {\n  type: string;  // \"engineer\", \"manager\", \"salesperson\"\n\n  getBonus(): number {\n    if (this.type === \"engineer\") {\n      return this.salary * 0.10;\n    } else if (this.type === \"man"
        },
        {
          "language": "typescript",
          "line_count": 27,
          "complexity": "complex",
          "code": "abstract class Employee {\n  constructor(protected salary: number) {}\n  abstract getBonus(): number;\n}\n\nclass Engineer extends Employee {\n  getBonus(): number {\n    return this.salary * 0.10;\n  }\n}\n\ncl"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "def create_invoice(customer_name, customer_email, customer_address,\n                  item_name, item_price, item_quantity,\n                  tax_rate, discount_rate):\n    # 8 parameters is too many!\n"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\n\n@dataclass\nclass Customer:\n    name: str\n    email: str\n    address: str\n\n@dataclass\nclass LineItem:\n    name: str\n    price: float\n    quantity: int\n\n@dataclass\ncla"
        },
        {
          "language": "go",
          "line_count": 11,
          "complexity": "simple",
          "code": "func CalculateShipping(order Order, method string) float64 {\n    if method == \"standard\" {\n        return order.Weight * 0.50\n    } else if method == \"express\" {\n        return order.Weight * 1.50 + 1"
        },
        {
          "language": "go",
          "line_count": 23,
          "complexity": "medium",
          "code": "type ShippingStrategy interface {\n    Calculate(order Order) float64\n}\n\ntype StandardShipping struct{}\nfunc (s StandardShipping) Calculate(order Order) float64 {\n    return order.Weight * 0.50\n}\n\ntype"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "def process_payment(amount):\n    # Old implementation - keeping just in case\n    # def old_process_payment():\n    #     charge_credit_card(amount)\n    #     send_receipt()\n\n    # Current implementatio"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "def process_payment(amount):\n    result = payment_gateway.process(amount)\n    if result.success:\n        send_receipt()\n    return result\n\n# Old code deleted - it's in git history if needed!\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Before\nif date.before(SUMMER_START) or date.after(SUMMER_END):\n    charge = quantity * winter_rate + winter_service_charge\nelse:\n    charge = quantity * summer_rate\n\n# After\nif is_winter(date):\n    "
        },
        {
          "language": "typescript",
          "line_count": 17,
          "complexity": "simple",
          "code": "// Before\nif (isSpecialDeal()) {\n  total = price * 0.95;\n  send();\n} else {\n  total = price * 0.98;\n  send();\n}\n\n// After\nif (isSpecialDeal()) {\n  total = price * 0.95;\n} else {\n  total = price * 0.98"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Before\nbase_price = quantity * item_price\ndiscount = get_discount(base_price, season)\n\n# After\ndiscount = get_discount(quantity, item_price, season)\n\ndef get_discount(quantity, item_price, season):\n"
        },
        {
          "language": "go",
          "line_count": 8,
          "complexity": "simple",
          "code": "// Before\nlow := daysTempRange.GetLow()\nhigh := daysTempRange.GetHigh()\nwithinPlan := plan.WithinRange(low, high)\n\n// After\nwithinPlan := plan.WithinRange(daysTempRange)\n"
        },
        {
          "language": "typescript",
          "line_count": 15,
          "complexity": "simple",
          "code": "// Before\nconst row = [\"Liverpool\", 15];\nconst name = row[0];\nconst wins = row[1];\n\n// After\ninterface Team {\n  name: string;\n  wins: number;\n}\n\nconst team: Team = { name: \"Liverpool\", wins: 15 };\ncon"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "# Before\nclass Person:\n    name: str  # Public field\n\nperson.name = \"John\"\n\n# After\nclass Person:\n    def __init__(self):\n        self._name: str = \"\"\n\n    @property\n    def name(self) -> str:\n       "
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Step 1: Write tests that capture current behavior (even if wrong)\ndef test_legacy_payment_calculation():\n    # Document current behavior, even if buggy\n    result = calculate_payment(100, \"premium\")"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Python: Rename symbol across codebase\nrope --refactor rename old_name new_name\n\n# Python: Extract method\nrope --refactor extract_method\n\n# Go: Rename\ngopls rename -w old_name new_name\n\n# TypeScript:"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Python\npip install mutmut\nmutmut run\n\n# Check if tests catch intentional bugs\n# If mutation score is low, tests are weak!\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "def test_invoice_output_unchanged(snapshot):\n    invoice = create_test_invoice()\n    output = render_invoice(invoice)\n    snapshot.assert_match(output)  # Fails if output changes\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://refactoring.com/"
        },
        {
          "type": "external",
          "url": "https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052"
        },
        {
          "type": "external",
          "url": "https://refactoring.guru/refactoring/catalog"
        },
        {
          "type": "external",
          "url": "https://refactoring.com/catalog/extractFunction.html"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "26 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 81.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/functional-programming.md",
      "category": "engineering",
      "skill_name": "functional-programming",
      "frontmatter": {
        "name": "engineering-functional-programming",
        "description": "Functional programming principles, immutability, pure functions, higher-order functions, and FP patterns"
      },
      "metrics": {
        "line_count": 584,
        "code_line_count": 219,
        "code_examples": 23,
        "external_refs": 4,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Pure function\ndef add(a: int, b: int) -> int:\n    return a + b\n\n# Always returns same result for same inputs\nassert add(2, 3) == 5\nassert add(2, 3) == 5  # Deterministic!\n\n# Impure function (side ef"
        },
        {
          "language": "typescript",
          "line_count": 9,
          "complexity": "simple",
          "code": "// Mutable (bad)\nconst user = { name: \"John\", age: 30 };\nuser.age = 31;  // Mutation!\n\n// Immutable (good)\nconst user = { name: \"John\", age: 30 };\nconst olderUser = { ...user, age: 31 };  // New objec"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Mutable bug\ndef add_item(cart: List[str], item: str) -> List[str]:\n    cart.append(item)  # Mutates input!\n    return cart\n\nmy_cart = [\"apple\"]\nnew_cart = add_item(my_cart, \"banana\")\nprint(my_cart) "
        },
        {
          "language": "javascript",
          "line_count": 13,
          "complexity": "simple",
          "code": "// map: transform each element\nconst numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(n => n * 2);\n// [2, 4, 6, 8]\n\n// filter: select elements\nconst evens = numbers.filter(n => n % 2 === 0);\n// [2,"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "def compose(f, g):\n    return lambda x: f(g(x))\n\ndef add_one(x):\n    return x + 1\n\ndef double(x):\n    return x * 2\n\n# Compose functions\nadd_one_then_double = compose(double, add_one)\nresult = add_one_"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Imperative\nnumbers = [1, 2, 3, 4, 5]\nresult = []\nfor n in numbers:\n    if n % 2 == 0:\n        result.append(n * 2)\nprint(result)  # [4, 8]\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Functional\nnumbers = [1, 2, 3, 4, 5]\nresult = list(\n    map(lambda n: n * 2,\n        filter(lambda n: n % 2 == 0, numbers))\n)\nprint(result)  # [4, 8]\n\n# Even better: List comprehension\nresult = [n *"
        },
        {
          "language": "javascript",
          "line_count": 21,
          "complexity": "medium",
          "code": "// Not curried\nfunction add(a, b, c) {\n  return a + b + c;\n}\nadd(1, 2, 3);  // 6\n\n// Curried\nfunction addCurried(a) {\n  return function(b) {\n    return function(c) {\n      return a + b + c;\n    };\n  }"
        },
        {
          "language": "typescript",
          "line_count": 12,
          "complexity": "simple",
          "code": "// Reusable validators\nconst hasMinLength = (min: number) => (str: string) => str.length >= min;\nconst hasMaxLength = (max: number) => (str: string) => str.length <= max;\n\nconst isValidUsername = hasM"
        },
        {
          "language": "typescript",
          "line_count": 19,
          "complexity": "simple",
          "code": "// Bad: Mutation\nconst user = {\n  name: \"John\",\n  address: {\n    city: \"Boston\",\n    zip: \"02101\"\n  }\n};\nuser.address.city = \"Cambridge\";  // Mutation!\n\n// Good: Immutable\nconst updatedUser = {\n  ...u"
        },
        {
          "language": "typescript",
          "line_count": 7,
          "complexity": "complex",
          "code": "import produce from \"immer\";\n\nconst updatedUser = produce(user, draft => {\n  draft.address.city = \"Cambridge\";\n  // Looks like mutation, but returns new object!\n});\n"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "def add_one(x):\n    return x + 1\n\ndef double(x):\n    return x * 2\n\ndef square(x):\n    return x ** 2\n\n# Nested calls (hard to read)\nresult = square(double(add_one(5)))  # ((5 + 1) * 2)^2 = 144\n\n# Compo"
        },
        {
          "language": "javascript",
          "line_count": 9,
          "complexity": "simple",
          "code": "// Without pipe\nconst result = square(double(addOne(5)));\n\n// With pipe (future JS syntax)\nconst result = 5\n  |> addOne\n  |> double\n  |> square;\n"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "from typing import Optional, TypeVar, Callable\n\nT = TypeVar('T')\nU = TypeVar('U')\n\nclass Maybe:\n    def __init__(self, value: Optional[T]):\n        self._value = value\n\n    def map(self, fn: Callable["
        },
        {
          "language": "typescript",
          "line_count": 37,
          "complexity": "complex",
          "code": "class Result<T, E> {\n  constructor(\n    private value?: T,\n    private error?: E\n  ) {}\n\n  static ok<T>(value: T): Result<T, never> {\n    return new Result(value, undefined);\n  }\n\n  static err<E>(erro"
        },
        {
          "language": "go",
          "line_count": 13,
          "complexity": "simple",
          "code": "// Functor: List\nfunc Map[T, U any](xs []T, f func(T) U) []U {\n    result := make([]U, len(xs))\n    for i, x := range xs {\n        result[i] = f(x)\n    }\n    return result\n}\n\nnumbers := []int{1, 2, 3}"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "def sum_list(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return total\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "def sum_list(numbers):\n    if not numbers:\n        return 0\n    return numbers[0] + sum_list(numbers[1:])\n\n# Tail-recursive (optimizable)\ndef sum_list_tail(numbers, acc=0):\n    if not numbers:\n       "
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Eager (loads all into memory)\ndef squares_eager(n):\n    return [x**2 for x in range(n)]\n\nsquares = squares_eager(1000000)  # Memory intensive!\n\n# Lazy (generates on demand)\ndef squares_lazy(n):\n    "
        },
        {
          "language": "javascript",
          "line_count": 29,
          "complexity": "medium",
          "code": "// Infinite stream\nfunction* naturals() {\n  let n = 0;\n  while (true) {\n    yield n++;\n  }\n}\n\nfunction* map(stream, fn) {\n  for (const value of stream) {\n    yield fn(value);\n  }\n}\n\nfunction* take(str"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "from functools import reduce\nfrom itertools import chain, groupby\n\n# Reduce\nsum = reduce(lambda acc, x: acc + x, [1, 2, 3, 4], 0)\n\n# Chain iterables\ncombined = chain([1, 2], [3, 4], [5, 6])\n\n# Group b"
        },
        {
          "language": "typescript",
          "line_count": 10,
          "complexity": "complex",
          "code": "import { compose, map, filter } from \"lodash/fp\";\n\nconst process = compose(\n  map((x: number) => x * 2),\n  filter((x: number) => x > 5)\n);\n\nconst result = process([1, 3, 5, 7, 9]);\n// [14, 18]\n"
        },
        {
          "language": "rust",
          "line_count": 7,
          "complexity": "simple",
          "code": "let result: Vec<i32> = vec![1, 2, 3, 4, 5]\n    .iter()\n    .filter(|&x| x % 2 == 0)\n    .map(|&x| x * 2)\n    .collect();\n// [4, 8]\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://www.manning.com/books/functional-programming-in-javascript"
        },
        {
          "type": "external",
          "url": "https://mostly-adequate.gitbook.io/mostly-adequate-guide/"
        },
        {
          "type": "external",
          "url": "https://www.coursera.org/learn/scala-functional-programming"
        },
        {
          "type": "external",
          "url": "https://ramdajs.com/"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "23 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 81.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/design-patterns.md",
      "category": "engineering",
      "skill_name": "design-patterns",
      "frontmatter": {
        "name": "engineering-design-patterns",
        "description": "Gang of Four design patterns, when to use each pattern, implementation examples, and anti-patterns"
      },
      "metrics": {
        "line_count": 714,
        "code_line_count": 111,
        "code_examples": 11,
        "external_refs": 4,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "from abc import ABC, abstractmethod\n\n# Product\nclass Button(ABC):\n    @abstractmethod\n    def render(self) -> str:\n        pass\n\nclass HTMLButton(Button):\n    def render(self) -> str:\n        return \""
        },
        {
          "language": "typescript",
          "line_count": 47,
          "complexity": "complex",
          "code": "class Car {\n  constructor(\n    public engine: string,\n    public seats: number,\n    public gps: boolean,\n    public tripComputer: boolean\n  ) {}\n}\n\nclass CarBuilder {\n  private engine: string = \"V4\";\n"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "class Database:\n    _instance = None\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n            cls._instance._initialize()\n        return cl"
        },
        {
          "language": "go",
          "line_count": 36,
          "complexity": "medium",
          "code": "// Target interface (what client expects)\ntype MediaPlayer interface {\n    Play(audioType string, fileName string)\n}\n\n// Adaptee (existing incompatible class)\ntype VLCPlayer struct{}\n\nfunc (v *VLCPlay"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "# Component\nclass Coffee:\n    def cost(self) -> float:\n        return 2.0\n\n    def description(self) -> str:\n        return \"Coffee\"\n\n# Decorators\nclass MilkDecorator:\n    def __init__(self, coffee: C"
        },
        {
          "language": "typescript",
          "line_count": 38,
          "complexity": "complex",
          "code": "// Complex subsystem\nclass CPU {\n  freeze() { console.log(\"CPU: Freeze\"); }\n  jump(position: number) { console.log(`CPU: Jump to ${position}`); }\n  execute() { console.log(\"CPU: Execute\"); }\n}\n\nclass "
        },
        {
          "language": "python",
          "line_count": 50,
          "complexity": "complex",
          "code": "from abc import ABC, abstractmethod\n\n# Strategy interface\nclass PaymentStrategy(ABC):\n    @abstractmethod\n    def pay(self, amount: float) -> None:\n        pass\n\n# Concrete strategies\nclass CreditCard"
        },
        {
          "language": "typescript",
          "line_count": 51,
          "complexity": "complex",
          "code": "interface Observer {\n  update(temperature: number): void;\n}\n\nclass WeatherStation {\n  private observers: Observer[] = [];\n  private temperature: number = 0;\n\n  attach(observer: Observer): void {\n    t"
        },
        {
          "language": "go",
          "line_count": 60,
          "complexity": "complex",
          "code": "// Command interface\ntype Command interface {\n    Execute()\n    Undo()\n}\n\n// Receiver\ntype Light struct {\n    isOn bool\n}\n\nfunc (l *Light) TurnOn() {\n    l.isOn = true\n    fmt.Println(\"Light is ON\")\n}"
        },
        {
          "language": "python",
          "line_count": 50,
          "complexity": "complex",
          "code": "from abc import ABC, abstractmethod\n\nclass DataMiner(ABC):\n    def mine(self, path: str) -> None:\n        \"\"\"Template method\"\"\"\n        file = self.open_file(path)\n        data = self.extract_data(fil"
        },
        {
          "language": "typescript",
          "line_count": 45,
          "complexity": "complex",
          "code": "abstract class Handler {\n  private next: Handler | null = null;\n\n  setNext(handler: Handler): Handler {\n    this.next = handler;\n    return handler;\n  }\n\n  handle(request: string): string | null {\n   "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612"
        },
        {
          "type": "external",
          "url": "https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124"
        },
        {
          "type": "external",
          "url": "https://www.amazon.com/Refactoring-Patterns-Joshua-Kerievsky/dp/0321213351"
        },
        {
          "type": "external",
          "url": "https://refactoring.guru/design-patterns"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 81.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "observability/structured-logging.md",
      "category": "observability",
      "skill_name": "structured-logging",
      "frontmatter": {
        "name": "observability-structured-logging",
        "description": "Setting up application logging infrastructure"
      },
      "metrics": {
        "line_count": 594,
        "code_line_count": 124,
        "code_examples": 15,
        "external_refs": 1,
        "tools_mentioned": 2,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "json",
          "line_count": 10,
          "complexity": "simple",
          "code": "{\n  \"timestamp\": \"2025-10-18T10:23:45.123Z\",\n  \"level\": \"info\",\n  \"message\": \"user_login\",\n  \"user_email\": \"john@example.com\",\n  \"ip_address\": \"192.168.1.1\",\n  \"service\": \"auth\",\n  \"trace_id\": \"a1b2c3"
        },
        {
          "language": "python",
          "line_count": 98,
          "complexity": "complex",
          "code": "import logging\nimport json\nimport uuid\nfrom datetime import datetime\nfrom contextvars import ContextVar\n\n# Context variable for correlation ID\ncorrelation_id: ContextVar[str] = ContextVar('correlation"
        },
        {
          "language": "go",
          "line_count": 92,
          "complexity": "complex",
          "code": "package logger\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"os\"\n    \"time\"\n\n    \"github.com/google/uuid\"\n)\n\ntype Level string\n\nconst (\n    LevelTrace Level = \"trace\"\n    LevelDebug Level = \"debug\""
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, Request\nfrom uuid import uuid4\nfrom contextvars import ContextVar\nimport logging\n\napp = FastAPI()\ncorrelation_id_var: ContextVar[str] = ContextVar('correlation_id')\n\n@app."
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "import logging\nfrom pythonjsonlogger import jsonlogger\n\nclass LokiFormatter(jsonlogger.JsonFormatter):\n    \"\"\"Formatter optimized for Grafana Loki.\"\"\"\n\n    def add_fields(self, log_record, record, mes"
        },
        {
          "language": "rust",
          "line_count": 34,
          "complexity": "medium",
          "code": "use serde_json::json;\nuse tracing::{info, error, span, Level};\nuse tracing_subscriber::{fmt, prelude::*};\nuse uuid::Uuid;\n\nfn setup_logging() {\n    tracing_subscriber::registry()\n        .with(fmt::la"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "complex",
          "code": "# Standard library (built-in)\nimport logging\nimport json\n\n# JSON formatter\npip install python-json-logger\n\n# Structured logging library\npip install structlog\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "go get -u go.uber.org/zap              # Fast structured logging\ngo get -u github.com/sirupsen/logrus   # Structured logging\ngo get -u github.com/rs/zerolog        # Zero-allocation JSON logger\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Add to Cargo.toml\n[dependencies]\ntracing = \"0.1\"\ntracing-subscriber = { version = \"0.3\", features = [\"json\"] }\nserde_json = \"1.0\"\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: PII in logs\nlogger.info(f\"User password: {password}\")\nlogger.info(f\"Credit card: {card_number}\")\n\n# CORRECT: Redact sensitive data\nlogger.info(f\"User authenticated\", extra={\"user_id\": user_id"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Loses structure\nlogger.info(f\"User {user_id} logged in from {ip}\")\n\n# CORRECT: Structured fields\nlogger.info(\"user_login\", extra={\"user_id\": user_id, \"ip\": ip})\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: Log spam\nfor item in items:  # 10,000 items\n    logger.info(f\"Processing {item}\")\n\n# CORRECT: Batch logging\nlogger.info(f\"Processing batch\", extra={\"count\": len(items)})\n# ... process items\nl"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# WRONG: String-only exception\ntry:\n    process()\nexcept Exception as e:\n    logger.error(f\"Error: {e}\")\n\n# CORRECT: Structured with context\ntry:\n    process()\nexcept Exception as e:\n    logger.error("
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: Logging in tight loop\nfor i in range(1_000_000):\n    logger.debug(f\"Iteration {i}\")\n    compute()\n\n# CORRECT: Sample or aggregate\nif i % 10_000 == 0:\n    logger.debug(f\"Progress: {i} iteratio"
        },
        {
          "language": "yaml",
          "line_count": 13,
          "complexity": "simple",
          "code": "# WRONG: High cardinality labels\nlabels:\n  service: api\n  user_id: user_123  # Millions of unique values!\n  trace_id: abc123   # Billions of unique values!\n\n# CORRECT: Low cardinality labels\nlabels:\n "
        }
      ],
      "external_refs": [
        {
          "type": "rfc",
          "reference": "RFC3339"
        }
      ],
      "tools_mentioned": [
        "datadog",
        "grafana"
      ],
      "config_snippets": [
        "json",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml, json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 80.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "proxies/traefik-configuration.md",
      "category": "proxies",
      "skill_name": "traefik-configuration",
      "frontmatter": {
        "name": "proxies-traefik-configuration",
        "description": "Traefik configuration including dynamic service discovery, middleware chains, automatic Let's Encrypt, Docker/Kubernetes integration, and cloud-native routing"
      },
      "metrics": {
        "line_count": 645,
        "code_line_count": 152,
        "code_examples": 16,
        "external_refs": 10,
        "tools_mentioned": 11,
        "config_snippets": 15
      },
      "code_examples": [
        {
          "language": "yaml",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Core Traefik settings\nentryPoints:\n  web:\n    address: \":80\"\n  websecure:\n    address: \":443\"\n\nproviders:\n  docker:\n    endpoint: \"unix:///var/run/docker.sock\"\n    exposedByDefault: false\n"
        },
        {
          "language": "yaml",
          "line_count": 47,
          "complexity": "medium",
          "code": "# docker-compose.yml\nversion: '3.8'\n\nservices:\n  traefik:\n    image: traefik:v2.10\n    command:\n      - \"--api.insecure=true\"\n      - \"--providers.docker=true\"\n      - \"--providers.docker.exposedbydef"
        },
        {
          "language": "yaml",
          "line_count": 30,
          "complexity": "medium",
          "code": "services:\n  api:\n    image: api:latest\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.api.rule=Host(`api.example.com`)\"\n      - \"traefik.http.routers.api.entrypoints=websecure"
        },
        {
          "language": "yaml",
          "line_count": 32,
          "complexity": "medium",
          "code": "services:\n  web:\n    image: web:latest\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.web.rule=Host(`example.com`)\"\n      - \"traefik.http.routers.web.entrypoints=websecure\"\n  "
        },
        {
          "language": "yaml",
          "line_count": 71,
          "complexity": "complex",
          "code": "# Global configuration\nglobal:\n  checkNewVersion: true\n  sendAnonymousUsage: false\n\n# API and dashboard\napi:\n  dashboard: true\n  insecure: false  # Use middleware for auth in production\n\n# Entry point"
        },
        {
          "language": "yaml",
          "line_count": 43,
          "complexity": "medium",
          "code": "# dynamic/services.yml\nhttp:\n  services:\n    # Round-robin (default)\n    app-service:\n      loadBalancer:\n        servers:\n          - url: \"http://app1:8080\"\n          - url: \"http://app2:8080\"\n     "
        },
        {
          "language": "yaml",
          "line_count": 65,
          "complexity": "complex",
          "code": "# dynamic/middleware.yml\nhttp:\n  middlewares:\n    # Rate limiting\n    api-rate-limit:\n      rateLimit:\n        average: 100\n        period: 1s\n        burst: 50\n\n    # IP whitelist\n    ip-whitelist:\n "
        },
        {
          "language": "yaml",
          "line_count": 29,
          "complexity": "medium",
          "code": "apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: app-ingress\n  annotations:\n    traefik.ingress.kubernetes.io/router.entrypoints: websecure\n    traefik.ingress.kubernetes.io/router.tls"
        },
        {
          "language": "yaml",
          "line_count": 43,
          "complexity": "medium",
          "code": "# IngressRoute\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: app-ingressroute\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - match: Host(`example.com`) && PathPre"
        },
        {
          "language": "yaml",
          "line_count": 27,
          "complexity": "medium",
          "code": "services:\n  app-v1:\n    image: app:v1\n    deploy:\n      replicas: 3\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.services.app-v1.loadbalancer.server.port=8080\"\n      - \"traefik.http"
        },
        {
          "language": "yaml",
          "line_count": 23,
          "complexity": "medium",
          "code": "# traefik.yml\nentryPoints:\n  postgres:\n    address: \":5432\"\n  mysql:\n    address: \":3306\"\n\n# dynamic/tcp.yml\ntcp:\n  routers:\n    postgres-router:\n      entryPoints:\n        - postgres\n      rule: \"Hos"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "labels:\n  - \"traefik.http.services.app.loadbalancer.healthcheck.path=/health\"\n  - \"traefik.http.services.app.loadbalancer.healthcheck.interval=10s\"\n  - \"traefik.http.services.app.loadbalancer.healthch"
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Dashboard with middleware auth\nlabels:\n  - \"traefik.http.routers.dashboard.rule=Host(`traefik.example.com`)\"\n  - \"traefik.http.routers.dashboard.service=api@internal\"\n  - \"traefik.http.routers.dashb"
        },
        {
          "language": "yaml",
          "line_count": 16,
          "complexity": "simple",
          "code": "services:\n  traefik:\n    networks:\n      - traefik-public\n\n  app:\n    networks:\n      - traefik-public\n      - internal\n\nnetworks:\n  traefik-public:\n    external: true\n  internal:\n    internal: true\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Check Traefik logs\ndocker logs traefik\n\n# Verify provider configuration\ndocker exec traefik cat /etc/traefik/traefik.yml\n\n# Check service labels\ndocker inspect app | grep traefik\n"
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Use staging environment for testing\ncertificatesResolvers:\n  letsencrypt:\n    acme:\n      caServer: https://acme-staging-v02.api.letsencrypt.org/directory\n      email: admin@example.com\n      storag"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://app1:8080\""
        },
        {
          "type": "external",
          "url": "http://app2:8080\""
        },
        {
          "type": "external",
          "url": "http://app3:8080\""
        },
        {
          "type": "external",
          "url": "http://app1:8080\""
        },
        {
          "type": "external",
          "url": "http://app2:8080\""
        },
        {
          "type": "external",
          "url": "http://app3:8080\""
        },
        {
          "type": "external",
          "url": "http://app1:8080\""
        },
        {
          "type": "external",
          "url": "http://app2:8080\""
        },
        {
          "type": "example",
          "url": "https://example.com\""
        },
        {
          "type": "external",
          "url": "https://acme-staging-v02.api.letsencrypt.org/directory"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "traefik",
        "tls",
        "nginx",
        "prometheus",
        "postgres",
        "ssl",
        "consul",
        "etcd",
        "mysql",
        "docker"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 80.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "proxies/reverse-proxy.md",
      "category": "proxies",
      "skill_name": "reverse-proxy",
      "frontmatter": {
        "name": "proxies-reverse-proxy",
        "description": "Reverse proxy patterns including load balancing, SSL termination, request routing, health checks, and high availability configurations"
      },
      "metrics": {
        "line_count": 682,
        "code_line_count": 146,
        "code_examples": 17,
        "external_refs": 17,
        "tools_mentioned": 5,
        "config_snippets": 12
      },
      "code_examples": [
        {
          "language": "nginx",
          "line_count": 25,
          "complexity": "medium",
          "code": "# \u2705 Good: SSL termination at proxy\nupstream backend {\n    server backend1.internal:8080;\n    server backend2.internal:8080;\n    server backend3.internal:8080;\n}\n\nserver {\n    listen 443 ssl http2;\n   "
        },
        {
          "language": "nginx",
          "line_count": 20,
          "complexity": "simple",
          "code": "upstream backend {\n    server backend1.internal:8080 max_fails=3 fail_timeout=30s;\n    server backend2.internal:8080 max_fails=3 fail_timeout=30s;\n    server backend3.internal:8080 backup;  # Only use"
        },
        {
          "language": "nginx",
          "line_count": 36,
          "complexity": "medium",
          "code": "upstream api_backend {\n    server api1.internal:8080;\n    server api2.internal:8080;\n}\n\nupstream web_backend {\n    server web1.internal:3000;\n    server web2.internal:3000;\n}\n\nupstream admin_backend {"
        },
        {
          "language": "python",
          "line_count": 85,
          "complexity": "complex",
          "code": "import asyncio\nfrom aiohttp import web, ClientSession\nfrom typing import List\nimport itertools\n\nclass ReverseProxy:\n    def __init__(self, backends: List[str]):\n        self.backends = backends\n      "
        },
        {
          "language": "go",
          "line_count": 141,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"log\"\n    \"net\"\n    \"net/http\"\n    \"net/http/httputil\"\n    \"net/url\"\n    \"sync\"\n    \"time\"\n)\n\ntype Backend struct {\n    URL          *url.URL\n    Alive        bool\n    mux  "
        },
        {
          "language": "caddy",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Caddyfile - Simple reverse proxy with auto HTTPS\nexample.com {\n    reverse_proxy backend1:8080 backend2:8080 backend3:8080 {\n        lb_policy round_robin\n        health_uri /health\n        health_i"
        },
        {
          "language": "nginx",
          "line_count": 13,
          "complexity": "simple",
          "code": "upstream backend {\n    ip_hash;  # Same IP \u2192 same backend\n    server backend1.internal:8080;\n    server backend2.internal:8080;\n}\n\n# Or using cookies\nupstream backend {\n    server backend1.internal:80"
        },
        {
          "language": "nginx",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Define rate limit zone\nlimit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;\n\nserver {\n    listen 80;\n\n    location /api/ {\n        limit_req zone=api_limit burst=20 nodelay;\n\n        pr"
        },
        {
          "language": "nginx",
          "line_count": 16,
          "complexity": "simple",
          "code": "server {\n    listen 80;\n\n    # Buffer large uploads\n    client_body_buffer_size 128k;\n    client_max_body_size 10m;\n\n    location / {\n        proxy_pass http://backend;\n        proxy_buffering on;\n   "
        },
        {
          "language": "nginx",
          "line_count": 18,
          "complexity": "simple",
          "code": "upstream websocket_backend {\n    server ws1.internal:8080;\n    server ws2.internal:8080;\n}\n\nserver {\n    listen 80;\n\n    location /ws/ {\n        proxy_pass http://websocket_backend;\n        proxy_http"
        },
        {
          "language": "nginx",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u2705 Good: Preserve client information\nlocation / {\n    proxy_pass http://backend;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $pr"
        },
        {
          "language": "nginx",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u2705 Good: Prevent hanging connections\nlocation / {\n    proxy_pass http://backend;\n    proxy_connect_timeout 5s;\n    proxy_send_timeout 10s;\n    proxy_read_timeout 10s;\n}\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u2705 Good: Active health monitoring\nasync def health_check_loop(backends: List[str]):\n    while True:\n        for backend in backends:\n            try:\n                async with session.get(f\"{backend"
        },
        {
          "language": "nginx",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Add retry logic and backup servers\nupstream backend {\n    server backend1.internal:8080 max_fails=3 fail_timeout=30s;\n    server backend2.internal:8080 max_fails=3 fail_timeout=30s;\n    server backu"
        },
        {
          "language": "nginx",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Nginx configuration\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "# Backend application (Flask)\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    # Get real client IP\n    client_ip = request.headers.get('X-Real-IP') or \\\n     "
        },
        {
          "language": "nginx",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Cookie-based sticky sessions\nupstream backend {\n    server backend1.internal:8080;\n    server backend2.internal:8080;\n    sticky cookie srv_id expires=1h;\n}\n\n# Or IP-based\nupstream backend {\n    ip_"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://api_backend/"
        },
        {
          "type": "external",
          "url": "http://admin_backend/"
        },
        {
          "type": "external",
          "url": "http://web_backend"
        },
        {
          "type": "external",
          "url": "http://backend1:8080\""
        },
        {
          "type": "external",
          "url": "http://backend2:8080\""
        },
        {
          "type": "external",
          "url": "http://backend3:8080\""
        },
        {
          "type": "example",
          "url": "http://localhost:8081\""
        },
        {
          "type": "example",
          "url": "http://localhost:8082\""
        },
        {
          "type": "example",
          "url": "http://localhost:8083\""
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://websocket_backend"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://backend"
        }
      ],
      "tools_mentioned": [
        "envoy",
        "tls",
        "traefik",
        "nginx",
        "ssl"
      ],
      "config_snippets": [
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (nginx), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 80.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "infrastructure/cloudflare-workers.md",
      "category": "infrastructure",
      "skill_name": "cloudflare-workers",
      "frontmatter": {
        "name": "infrastructure-cloudflare-workers",
        "description": "Building serverless APIs at the edge (low latency globally)"
      },
      "metrics": {
        "line_count": 710,
        "code_line_count": 124,
        "code_examples": 16,
        "external_refs": 2,
        "tools_mentioned": 1,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "javascript",
          "line_count": 24,
          "complexity": "medium",
          "code": "// src/index.js - Simple worker\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n\n    // Simple routing\n    if (url.pathname === '/api/hello') {\n      return n"
        },
        {
          "language": "toml",
          "line_count": 38,
          "complexity": "medium",
          "code": "# wrangler.toml\nname = \"my-worker\"\nmain = \"src/index.js\"\ncompatibility_date = \"2024-01-01\"\n\n# Environment variables\n[vars]\nENVIRONMENT = \"production\"\nAPI_VERSION = \"v1\"\n\n# KV Namespace bindings\n[[kv_n"
        },
        {
          "language": "typescript",
          "line_count": 77,
          "complexity": "complex",
          "code": "// src/index.ts - TypeScript worker\ninterface Env {\n  CACHE: KVNamespace;\n  API_KEY: string;\n  ENVIRONMENT: string;\n}\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext)"
        },
        {
          "language": "typescript",
          "line_count": 46,
          "complexity": "medium",
          "code": "// KV operations\ninterface Env {\n  CACHE: KVNamespace;\n}\n\nexport default {\n  async fetch(request: Request, env: Env): Promise<Response> {\n    const url = new URL(request.url);\n    const key = url.sear"
        },
        {
          "language": "typescript",
          "line_count": 59,
          "complexity": "complex",
          "code": "// src/counter.ts - Durable Object\nexport class Counter {\n  state: DurableObjectState;\n  value: number;\n\n  constructor(state: DurableObjectState, env: Env) {\n    this.state = state;\n    this.value = 0"
        },
        {
          "language": "typescript",
          "line_count": 50,
          "complexity": "medium",
          "code": "// R2 bucket operations\ninterface Env {\n  ASSETS: R2Bucket;\n}\n\nexport default {\n  async fetch(request: Request, env: Env): Promise<Response> {\n    const url = new URL(request.url);\n    const key = url"
        },
        {
          "language": "typescript",
          "line_count": 24,
          "complexity": "medium",
          "code": "// Cache API with edge caching\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    const cache = caches.default;\n\n    // Try to get from cache\n  "
        },
        {
          "language": "typescript",
          "line_count": 25,
          "complexity": "medium",
          "code": "// Rewrite requests to different origins\nexport default {\n  async fetch(request: Request): Promise<Response> {\n    const url = new URL(request.url);\n\n    // API proxy\n    if (url.pathname.startsWith('"
        },
        {
          "language": "typescript",
          "line_count": 32,
          "complexity": "medium",
          "code": "// A/B testing with cookie-based variants\nexport default {\n  async fetch(request: Request): Promise<Response> {\n    const url = new URL(request.url);\n\n    // Check for existing variant cookie\n    let "
        },
        {
          "language": "typescript",
          "line_count": 43,
          "complexity": "complex",
          "code": "// Rate limiting with Durable Objects\nexport class RateLimiter {\n  state: DurableObjectState;\n  requests: Map<string, number[]>;\n\n  constructor(state: DurableObjectState) {\n    this.state = state;\n   "
        },
        {
          "language": "typescript",
          "line_count": 31,
          "complexity": "medium",
          "code": "// Image transformation\nexport default {\n  async fetch(request: Request): Promise<Response> {\n    const url = new URL(request.url);\n\n    // Parse resize parameters\n    const width = parseInt(url.searc"
        },
        {
          "language": "bash",
          "line_count": 33,
          "complexity": "medium",
          "code": "# Development\nwrangler dev                    # Local development server\nwrangler dev --remote           # Remote development (actual edge)\n\n# Deployment\nwrangler deploy                 # Deploy to pr"
        },
        {
          "language": "typescript",
          "line_count": 17,
          "complexity": "simple",
          "code": "// \u274c NEVER: Store secrets in code\nconst API_KEY = \"sk-1234567890abcdef\";  // NEVER\n\n// \u2705 CORRECT: Use environment bindings\ninterface Env {\n  API_KEY: string;  // Set with: wrangler secret put API_KEY\n"
        },
        {
          "language": "typescript",
          "line_count": 15,
          "complexity": "simple",
          "code": "// \u274c NEVER: Perform blocking operations\nexport default {\n  async fetch(request: Request): Promise<Response> {\n    // CPU-intensive synchronous work\n    let result = 0;\n    for (let i = 0; i < 10000000"
        },
        {
          "language": "typescript",
          "line_count": 23,
          "complexity": "medium",
          "code": "// \u274c NEVER: Use global state\nlet counter = 0;  // Not shared across requests!\n\nexport default {\n  async fetch(request: Request): Promise<Response> {\n    counter++;  // Each request gets own isolate\n  "
        },
        {
          "language": "typescript",
          "line_count": 19,
          "complexity": "simple",
          "code": "// \u274c Don't forget CORS headers\nexport default {\n  async fetch(request: Request): Promise<Response> {\n    return Response.json({ data: 'value' });\n    // Browser will block cross-origin requests\n  }\n};"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/data'"
        },
        {
          "type": "external",
          "url": "https://origin.com/${variant}${url.pathname}`"
        }
      ],
      "tools_mentioned": [
        "terraform"
      ],
      "config_snippets": [
        "toml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (toml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 80.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "api/api-versioning.md",
      "category": "api",
      "skill_name": "api-versioning",
      "frontmatter": {
        "name": "api-api-versioning",
        "description": "Planning API changes and deciding on versioning approach"
      },
      "metrics": {
        "line_count": 631,
        "code_line_count": 149,
        "code_examples": 21,
        "external_refs": 3,
        "tools_mentioned": 0,
        "config_snippets": 7
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "from fastapi import FastAPI\n\napp = FastAPI()\n\n# Version 1\n@app.get(\"/v1/users/{user_id}\")\nasync def get_user_v1(user_id: int):\n    return {\"id\": user_id, \"name\": \"Alice\"}\n\n# Version 2 (with email fiel"
        },
        {
          "language": "http",
          "line_count": 3,
          "complexity": "simple",
          "code": "GET /users/123\nAccept: application/vnd.api.v2+json\n"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, Header, HTTPException\n\napp = FastAPI()\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(\n    user_id: int,\n    accept: str = Header(default=\"application/vnd.api.v1+json\")\n"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(\n    user_id: int,\n    api_version: int = Query(default=1)\n):\n    if api_version == 2:\n        retu"
        },
        {
          "language": "http",
          "line_count": 3,
          "complexity": "simple",
          "code": "GET /users/123\nX-API-Version: 2\n"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, Header\n\napp = FastAPI()\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(\n    user_id: int,\n    x_api_version: int = Header(default=1)\n):\n    if x_api_version == 2:\n      "
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "simple",
          "code": "// Before\n{\"name\": \"Alice\"}\n\n// After (optional email)\n{\"name\": \"Alice\", \"email\": \"alice@example.com\"}\n"
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "simple",
          "code": "// Before\n{\"id\": 1, \"name\": \"Alice\"}\n\n// After (added email)\n{\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\"}\n"
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "simple",
          "code": "// Before\n{\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\"}\n\n// After (removed email) - BREAKS CLIENTS\n{\"id\": 1, \"name\": \"Alice\"}\n"
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "simple",
          "code": "// Before\n{\"user_id\": 1}\n\n// After - BREAKS CLIENTS\n{\"id\": 1}\n"
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "simple",
          "code": "// Before\n{\"created_at\": \"2025-01-15\"}\n\n// After - BREAKS CLIENTS\n{\"created_at\": 1736899200}\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "from fastapi import Response\n\n@app.get(\"/v1/users/{user_id}\")\nasync def get_user_v1(user_id: int, response: Response):\n    # Add deprecation warning\n    response.headers[\"Deprecation\"] = \"true\"\n    re"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "@app.get(\"/v1/users/{user_id}\")\nasync def get_user_v1(user_id: int, response: Response):\n    response.headers[\"X-Deprecation-Warning\"] = \"v1 will sunset on 2025-07-01\"\n\n    return {\n        \"id\": user"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "@app.get(\"/v1/users/{user_id}\")\nasync def get_user_v1(user_id: int):\n    raise HTTPException(\n        status_code=410,\n        detail={\n            \"error\": \"This API version has been sunset\",\n       "
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# v1/users.py\n@router.get(\"/v1/users/{user_id}\")\nasync def get_user_v1(user_id: int):\n    return {\"id\": user_id, \"name\": \"Alice\"}\n\n# v2/users.py\n@router.get(\"/v2/users/{user_id}\")\nasync def get_user_v"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# core/users.py\ndef get_user_data(user_id: int):\n    return {\n        \"id\": user_id,\n        \"name\": \"Alice\",\n        \"email\": \"alice@example.com\"\n    }\n\n# api/v1.py\n@app.get(\"/v1/users/{user_id}\")\nas"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "from functools import wraps\n\ndef version_aware(func):\n    @wraps(func)\n    async def wrapper(user_id: int, version: int = 1):\n        data = await func(user_id)\n\n        if version == 1:\n            #"
        },
        {
          "language": "json",
          "line_count": 9,
          "complexity": "simple",
          "code": "// Version 1\n{\"id\": 1, \"name\": \"Alice\"}\n\n// Version 1.1 (backward compatible)\n{\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\"}\n\n// Version 1.2 (still backward compatible)\n{\"id\": 1, \"name\": \"Al"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "complex",
          "code": "from pydantic import BaseModel, Field\n\nclass User(BaseModel):\n    id: int\n    name: str\n    email: str = Field(default=\"noreply@example.com\")  # Default for old clients\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "complex",
          "code": "from pydantic import BaseModel, Field\n\nclass User(BaseModel):\n    user_id: int = Field(alias=\"id\")  # Accept both \"id\" and \"user_id\"\n    name: str\n"
        },
        {
          "language": "json",
          "line_count": 3,
          "complexity": "simple",
          "code": "{\"id\": 1, \"name\": \"Alice\"}         // Old clients\n{\"user_id\": 1, \"name\": \"Alice\"}    // New clients\n"
        }
      ],
      "external_refs": [
        {
          "type": "documentation",
          "url": "https://docs.api.com/v1-to-v2"
        },
        {
          "type": "documentation",
          "url": "https://docs.api.com/v1-to-v2\""
        },
        {
          "type": "documentation",
          "url": "https://docs.api.com/v1-to-v2\""
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [
        "json",
        "json",
        "json",
        "json",
        "json",
        "json",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "21 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "protocols/tcp-fundamentals.md",
      "category": "protocols",
      "skill_name": "tcp-fundamentals",
      "frontmatter": {
        "name": "protocols-tcp-fundamentals",
        "description": "TCP protocol fundamentals including three-way handshake, flow control, congestion control, and reliability"
      },
      "metrics": {
        "line_count": 388,
        "code_line_count": 97,
        "code_examples": 13,
        "external_refs": 3,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "import socket\n\n# Create TCP socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Connect triggers three-way handshake\nsock.connect(('example.com', 80))\n\n# Send HTTP request\nsock.sendall("
        },
        {
          "language": "go",
          "line_count": 22,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"net\"\n    \"syscall\"\n)\n\nfunc setTCPBuffers(conn net.Conn) error {\n    tcpConn := conn.(*net.TCPConn)\n    rawConn, _ := tcpConn.SyscallConn()\n\n    return rawConn.Control(func("
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# View current congestion control\nsysctl net.ipv4.tcp_congestion_control\n# cubic\n\n# Change to BBR\nsudo sysctl -w net.ipv4.tcp_congestion_control=bbr\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Adaptive RTO (Retransmission Timeout)\nRTT_measured = measure_round_trip_time()\nSRTT = 0.875 * SRTT + 0.125 * RTT_measured  # Smoothed RTT\nRTTVAR = 0.75 * RTTVAR + 0.25 * abs(SRTT - RTT_measured)\nRTO"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "import socket\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Enable keep-alive\nsock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n\n# Keep-alive settings (Linux)\nsock.setsockopt(s"
        },
        {
          "language": "go",
          "line_count": 10,
          "complexity": "simple",
          "code": "// Disable Nagle's algorithm for low latency\nconn, _ := net.Dial(\"tcp\", \"game-server.com:9000\")\ntcpConn := conn.(*net.TCPConn)\n\n// Disable buffering (TCP_NODELAY)\ntcpConn.SetNoDelay(true)\n\n// Send imm"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "import requests\nfrom requests.adapters import HTTPAdapter\n\n# Create session with connection pooling\nsession = requests.Session()\nadapter = HTTPAdapter(\n    pool_connections=10,    # Connection pools\n "
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Increase buffer sizes\nsudo sysctl -w net.core.rmem_max=26214400      # 25MB\nsudo sysctl -w net.core.wmem_max=26214400\nsudo sysctl -w net.ipv4.tcp_rmem=\"4096 87380 26214400\"\nsudo sysctl -w net.ipv4.t"
        },
        {
          "language": "rust",
          "line_count": 20,
          "complexity": "simple",
          "code": "use tokio::net::TcpStream;\nuse socket2::{Socket, Domain, Type, Protocol};\n\n// Create socket with custom options\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, Some(Protocol::TCP))?;\n\n// Set buff"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Check if port is listening\nnetstat -tuln | grep :80\n\n# Test connectivity\ntelnet example.com 80\nnc -zv example.com 80\n\n# Check firewall\nsudo iptables -L -n | grep 80\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Trace route\ntraceroute example.com\n\n# TCP dump\nsudo tcpdump -i eth0 'tcp port 80'\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# View TCP statistics\nss -ti\n\n# Example output:\n#  cwnd:10 rtt:45/30 ato:40 mss:1460 retrans:0/5\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Enable BBR\necho \"net.ipv4.tcp_congestion_control=bbr\" | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://'"
        },
        {
          "type": "external",
          "url": "https://'"
        },
        {
          "type": "example",
          "url": "http://api.example.com/data/{i}'"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "database/redis-data-structures.md",
      "category": "database",
      "skill_name": "redis-data-structures",
      "frontmatter": {
        "name": "database-redis-data-structures",
        "description": "Implementing caching layers"
      },
      "metrics": {
        "line_count": 604,
        "code_line_count": 177,
        "code_examples": 22,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Set/Get\nSET user:123:name \"Alice\"\nGET user:123:name  # \"Alice\"\n\n# With expiration (TTL)\nSETEX session:abc123 3600 \"user_data\"  # Expires in 3600 seconds\n\n# Increment (atomic counter)\nINCR page:views"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "import redis\nimport json\n\nr = redis.Redis()\n\n# Cache miss: fetch from API and cache\ndef get_user(user_id):\n    cache_key = f\"user:{user_id}\"\n    cached = r.get(cache_key)\n\n    if cached:\n        retur"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Set multiple fields\nHSET user:123 name \"Alice\" email \"alice@example.com\" age 30\n\n# Get single field\nHGET user:123 name  # \"Alice\"\n\n# Get all fields\nHGETALL user:123  # {name: \"Alice\", email: \"alice@"
        },
        {
          "language": "bash",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Push to left (prepend)\nLPUSH queue:tasks \"task1\"\nLPUSH queue:tasks \"task2\"\n\n# Push to right (append)\nRPUSH queue:tasks \"task3\"\n\n# Pop from left (FIFO queue)\nLPOP queue:tasks  # \"task2\"\n\n# Pop from r"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Add new activity, keep last 100\ndef add_activity(user_id, activity):\n    key = f\"feed:{user_id}\"\n    r.lpush(key, activity)\n    r.ltrim(key, 0, 99)  # Keep only 100 most recent\n\n# Get recent 20 acti"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Add members\nSADD tags:post:123 \"python\" \"redis\" \"tutorial\"\n\n# Check membership\nSISMEMBER tags:post:123 \"python\"  # 1 (true)\n\n# Get all members\nSMEMBERS tags:post:123  # [\"python\", \"redis\", \"tutorial"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Find mutual friends\nuser1_friends = r.smembers(\"friends:user1\")\nuser2_friends = r.smembers(\"friends:user2\")\ncommon = r.sinter(\"friends:user1\", \"friends:user2\")\n"
        },
        {
          "language": "bash",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Add members with scores\nZADD leaderboard 100 \"alice\" 200 \"bob\" 150 \"charlie\"\n\n# Get rank (0-based, ascending)\nZRANK leaderboard \"alice\"  # 0 (lowest score)\n\n# Get reverse rank (descending)\nZREVRANK "
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Add player score\ndef add_score(player, score):\n    r.zadd(\"leaderboard\", {player: score})\n\n# Get top 10\ndef get_top_10():\n    return r.zrevrange(\"leaderboard\", 0, 9, withscores=True)\n\n# Get player r"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "def get_user(user_id):\n    cache_key = f\"user:{user_id}\"\n\n    # 1. Try cache\n    cached = r.get(cache_key)\n    if cached:\n        return json.loads(cached)\n\n    # 2. Cache miss: fetch from DB\n    user"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "def update_user(user_id, data):\n    # 1. Update database\n    db.execute(\"UPDATE users SET ... WHERE id = ?\", user_id, data)\n\n    # 2. Update cache\n    cache_key = f\"user:{user_id}\"\n    r.setex(cache_k"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "def update_user(user_id, data):\n    # 1. Update cache immediately\n    cache_key = f\"user:{user_id}\"\n    r.setex(cache_key, 3600, json.dumps(data))\n\n    # 2. Queue database write (background worker)\n  "
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "def get_user(user_id):\n    cache_key = f\"user:{user_id}\"\n    cached = r.get(cache_key)\n\n    if cached:\n        ttl = r.ttl(cache_key)\n        if ttl < 600:  # Less than 10 min left\n            # Refre"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "import uuid\n\ndef create_session(user_id):\n    session_id = str(uuid.uuid4())\n    session_key = f\"session:{session_id}\"\n\n    session_data = {\"user_id\": user_id, \"created_at\": time.time()}\n    r.setex(s"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "def is_rate_limited(user_id, limit=100, window=60):\n    key = f\"rate_limit:{user_id}\"\n    now = time.time()\n\n    # Remove old entries outside window\n    r.zremrangebyscore(key, 0, now - window)\n\n    #"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "def update_score(player, score):\n    r.zadd(\"leaderboard\", {player: score})\n\ndef get_top_10():\n    return r.zrevrange(\"leaderboard\", 0, 9, withscores=True)\n\ndef get_player_rank(player):\n    rank = r.z"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Publisher\ndef send_notification(channel, message):\n    r.publish(channel, message)\n\n# Subscriber\ndef listen_notifications(channel):\n    pubsub = r.pubsub()\n    pubsub.subscribe(channel)\n\n    for mes"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "medium",
          "code": "def acquire_lock(resource, timeout=10):\n    lock_key = f\"lock:{resource}\"\n    lock_value = str(uuid.uuid4())\n\n    # SET NX (only if not exists) EX (with expiration)\n    acquired = r.set(lock_key, lock"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Set with expiration\nSETEX key 3600 \"value\"\n\n# Set expiration on existing key\nEXPIRE key 3600\n\n# Check TTL\nTTL key  # Returns seconds remaining, -1 if no expiration, -2 if key doesn't exist\n\n# Remove"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Set in redis.conf\nmaxmemory 2gb\nmaxmemory-policy allkeys-lru\n"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Use Hashes for objects (more compact)\nHSET user:123 name \"Alice\" email \"alice@example.com\"  # Better than JSON string\n\n# Use short key names\n# \u274c user:profile:123:details\n# \u2705 u:123\n\n# Compress large "
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# General\nKEYS pattern        # Find keys (avoid in production)\nSCAN cursor         # Iterate keys (production-safe)\nEXISTS key          # Check existence\nDEL key             # Delete key\nEXPIRE key s"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "22 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "database/postgres-schema-design.md",
      "category": "database",
      "skill_name": "postgres-schema-design",
      "frontmatter": {
        "name": "database-postgres-schema-design",
        "description": "Designing new database schemas"
      },
      "metrics": {
        "line_count": 662,
        "code_line_count": 172,
        "code_examples": 23,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 23
      },
      "code_examples": [
        {
          "language": "sql",
          "line_count": 19,
          "complexity": "simple",
          "code": "-- \u274c VIOLATES 1NF: Multiple emails in one column\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    emails VARCHAR(500)  -- 'alice@example.com, alice@work.com'\n);\n\n-- \u2705 1NF: Atomi"
        },
        {
          "language": "sql",
          "line_count": 20,
          "complexity": "simple",
          "code": "-- \u274c VIOLATES 2NF: teacher_name depends only on teacher_id, not (student_id, teacher_id)\nCREATE TABLE enrollments (\n    student_id INT,\n    teacher_id INT,\n    teacher_name VARCHAR(100),  -- Partial d"
        },
        {
          "language": "sql",
          "line_count": 21,
          "complexity": "medium",
          "code": "-- \u274c VIOLATES 3NF: country depends on city (transitive dependency)\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    city VARCHAR(100),\n    country VARCHAR(100)  -- Depends on ci"
        },
        {
          "language": "sql",
          "line_count": 11,
          "complexity": "simple",
          "code": "-- Normalized (calculate on query)\nSELECT SUM(quantity * price) FROM order_items WHERE order_id = 123;\n\n-- Denormalized (store total on order)\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    total D"
        },
        {
          "language": "sql",
          "line_count": 13,
          "complexity": "simple",
          "code": "CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY REFERENCES u"
        },
        {
          "language": "sql",
          "line_count": 15,
          "complexity": "simple",
          "code": "CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL\n);\n\nCREATE TABLE posts (\n    id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL REFERENCES users(id) ON DELETE CASCA"
        },
        {
          "language": "sql",
          "line_count": 20,
          "complexity": "simple",
          "code": "CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE tags (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) UNIQUE NOT NULL\n);\n\n-- Junction table\nC"
        },
        {
          "language": "sql",
          "line_count": 9,
          "complexity": "simple",
          "code": "CREATE TABLE comments (\n    id SERIAL PRIMARY KEY,\n    parent_id INT REFERENCES comments(id) ON DELETE CASCADE,\n    content TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE INDEX idx_c"
        },
        {
          "language": "sql",
          "line_count": 15,
          "complexity": "simple",
          "code": "-- Recursive CTE for threaded comments\nWITH RECURSIVE thread AS (\n    -- Base case: top-level comments\n    SELECT id, parent_id, content, 1 AS depth\n    FROM comments WHERE parent_id IS NULL\n\n    UNIO"
        },
        {
          "language": "sql",
          "line_count": 5,
          "complexity": "simple",
          "code": "CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(255)\n);\n"
        },
        {
          "language": "sql",
          "line_count": 5,
          "complexity": "simple",
          "code": "CREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    email VARCHAR(255)\n);\n"
        },
        {
          "language": "sql",
          "line_count": 8,
          "complexity": "simple",
          "code": "-- Using ulid extension\nCREATE EXTENSION IF NOT EXISTS ulid;\n\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT ulid_to_uuid(ulid_generate()),\n    email VARCHAR(255)\n);\n"
        },
        {
          "language": "sql",
          "line_count": 22,
          "complexity": "medium",
          "code": "CREATE TABLE posts (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    content TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Trigger to auto"
        },
        {
          "language": "sql",
          "line_count": 15,
          "complexity": "simple",
          "code": "CREATE TABLE posts (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    deleted_at TIMESTAMP NULL,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE INDEX idx_posts_deleted_at ON posts(de"
        },
        {
          "language": "sql",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- Move to archive table on delete\nCREATE TABLE posts_archive (LIKE posts INCLUDING ALL);\n\nINSERT INTO posts_archive SELECT * FROM posts WHERE id = 123;\nDELETE FROM posts WHERE id = 123;\n"
        },
        {
          "language": "sql",
          "line_count": 21,
          "complexity": "medium",
          "code": "CREATE TABLE documents (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    content TEXT,\n    version INT DEFAULT 1,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAU"
        },
        {
          "language": "sql",
          "line_count": 14,
          "complexity": "simple",
          "code": "CREATE TABLE comments (\n    id SERIAL PRIMARY KEY,\n    post_id INT REFERENCES posts(id) ON DELETE CASCADE,\n    video_id INT REFERENCES videos(id) ON DELETE CASCADE,\n    content TEXT,\n    CHECK (\n     "
        },
        {
          "language": "sql",
          "line_count": 9,
          "complexity": "simple",
          "code": "CREATE TABLE comments (\n    id SERIAL PRIMARY KEY,\n    commentable_type VARCHAR(50),  -- 'Post' or 'Video'\n    commentable_id INT,             -- ID in posts or videos\n    content TEXT\n);\n\nCREATE INDE"
        },
        {
          "language": "sql",
          "line_count": 21,
          "complexity": "medium",
          "code": "CREATE TABLE commentables (\n    id SERIAL PRIMARY KEY,\n    type VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE posts (\n    id INT PRIMARY KEY REFERENCES commentables(id)\n    title VARCHAR(255)\n);\n\nCREATE TABLE"
        },
        {
          "language": "sql",
          "line_count": 11,
          "complexity": "simple",
          "code": "CREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    price DECIMAL(10,2) NOT NULL  -- $12,345,678.99\n);\n\n-- Or store cents as integer (avoids floating-point issues)\nCREATE TABLE products (\n    id SE"
        },
        {
          "language": "sql",
          "line_count": 7,
          "complexity": "simple",
          "code": "CREATE TABLE events (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    starts_at TIMESTAMPTZ NOT NULL,\n    ends_at TIMESTAMPTZ\n);\n"
        },
        {
          "language": "sql",
          "line_count": 6,
          "complexity": "simple",
          "code": "CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    is_active BOOLEAN DEFAULT TRUE,\n    email_verified BOOLEAN DEFAULT FALSE\n);\n"
        },
        {
          "language": "sql",
          "line_count": 12,
          "complexity": "simple",
          "code": "CREATE TABLE events (\n    id SERIAL PRIMARY KEY,\n    metadata JSONB  -- Use JSONB (not JSON) for performance\n);\n\n-- Query JSONB\nSELECT * FROM events WHERE metadata @> '{\"status\": \"active\"}';\nSELECT * "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "postgresql"
      ],
      "config_snippets": [
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "23 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "database/postgres-migrations.md",
      "category": "database",
      "skill_name": "postgres-migrations",
      "frontmatter": {
        "name": "database-postgres-migrations",
        "description": "Creating database migrations for schema changes"
      },
      "metrics": {
        "line_count": 650,
        "code_line_count": 204,
        "code_examples": 35,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 25
      },
      "code_examples": [
        {
          "language": "sql",
          "line_count": 7,
          "complexity": "simple",
          "code": "-- V1__initial_schema.sql\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n"
        },
        {
          "language": "sql",
          "line_count": 9,
          "complexity": "simple",
          "code": "-- 000001_initial_schema.up.sql\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL\n);\n\n-- 000001_initial_schema.down.sql\nDROP TABLE users;\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# alembic/versions/abc123_add_users_table.py\ndef upgrade():\n    op.create_table(\n        'users',\n        sa.Column('id', sa.Integer(), primary_key=True),\n        sa.Column('email', sa.String(255), un"
        },
        {
          "language": "sql",
          "line_count": 7,
          "complexity": "simple",
          "code": "-- \u2705 GOOD: Can be reversed\n-- Up\nALTER TABLE users ADD COLUMN phone VARCHAR(20);\n\n-- Down\nALTER TABLE users DROP COLUMN phone;\n"
        },
        {
          "language": "sql",
          "line_count": 7,
          "complexity": "simple",
          "code": "-- \u274c BAD: Cannot fully reverse (data loss)\n-- Up\nALTER TABLE users DROP COLUMN phone;\n\n-- Down (can't restore data!)\nALTER TABLE users ADD COLUMN phone VARCHAR(20);\n"
        },
        {
          "language": "sql",
          "line_count": 9,
          "complexity": "simple",
          "code": "-- \u2705 GOOD: Safe to run multiple times\nCREATE TABLE IF NOT EXISTS users (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(255)\n);\n\nALTER TABLE users ADD COLUMN IF NOT EXISTS phone VARCHAR(20);\nCREATE INDE"
        },
        {
          "language": "sql",
          "line_count": 4,
          "complexity": "simple",
          "code": "-- \u274c BAD: Fails if run twice\nCREATE TABLE users (...);  -- ERROR: relation \"users\" already exists\nALTER TABLE users ADD COLUMN phone VARCHAR(20);  -- ERROR: column already exists\n"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# 1. Apply migration on local copy of production data\npg_dump production | psql local_test\nmigrate up\n\n# 2. Verify schema\npsql local_test -c \"\\d users\"\n\n# 3. Test rollback\nmigrate down\nmigrate up\n\n# 4"
        },
        {
          "language": "sql",
          "line_count": 7,
          "complexity": "simple",
          "code": "BEGIN;\n\nALTER TABLE users ADD COLUMN phone VARCHAR(20);\nCREATE INDEX idx_users_phone ON users(phone);\n\nCOMMIT;\n"
        },
        {
          "language": "sql",
          "line_count": 3,
          "complexity": "simple",
          "code": "-- Migration 1: Add nullable column\nALTER TABLE users ADD COLUMN phone VARCHAR(20);\n"
        },
        {
          "language": "sql",
          "line_count": 9,
          "complexity": "simple",
          "code": "-- Step 1: Add nullable column\nALTER TABLE users ADD COLUMN phone VARCHAR(20);\n\n-- Step 2: Backfill existing rows (in batches)\nUPDATE users SET phone = 'unknown' WHERE phone IS NULL;\n\n-- Step 3: Add N"
        },
        {
          "language": "sql",
          "line_count": 3,
          "complexity": "simple",
          "code": "-- No migration yet, just deploy code that ignores the column\n-- Old code still reads column, new code ignores it\n"
        },
        {
          "language": "sql",
          "line_count": 3,
          "complexity": "simple",
          "code": "-- Migration: Remove column\nALTER TABLE users DROP COLUMN phone;\n"
        },
        {
          "language": "sql",
          "line_count": 8,
          "complexity": "simple",
          "code": "ALTER TABLE users ADD COLUMN email_address VARCHAR(255);\n\n-- Trigger or application code writes to both columns\nCREATE TRIGGER sync_email_to_email_address\nBEFORE INSERT OR UPDATE ON users\nFOR EACH ROW"
        },
        {
          "language": "sql",
          "line_count": 2,
          "complexity": "simple",
          "code": "UPDATE users SET email_address = email WHERE email_address IS NULL;\n"
        },
        {
          "language": "sql",
          "line_count": 2,
          "complexity": "simple",
          "code": "-- Deploy code that reads email_address instead of email\n"
        },
        {
          "language": "sql",
          "line_count": 3,
          "complexity": "simple",
          "code": "DROP TRIGGER sync_email_to_email_address ON users;\nALTER TABLE users DROP COLUMN email;\n"
        },
        {
          "language": "sql",
          "line_count": 3,
          "complexity": "simple",
          "code": "-- \u2705 GOOD: No write lock, builds index in background\nCREATE INDEX CONCURRENTLY idx_users_email ON users(email);\n"
        },
        {
          "language": "sql",
          "line_count": 7,
          "complexity": "simple",
          "code": "SELECT indexrelid::regclass, indisvalid\nFROM pg_index\nWHERE NOT indisvalid;\n\n-- Drop invalid index\nDROP INDEX CONCURRENTLY idx_users_email;\n"
        },
        {
          "language": "sql",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- Step 1: Add constraint without validation (fast, allows new writes)\nALTER TABLE users ADD CONSTRAINT check_age_positive CHECK (age > 0) NOT VALID;\n\n-- Step 2: Validate constraint (slow, but allows "
        },
        {
          "language": "sql",
          "line_count": 25,
          "complexity": "medium",
          "code": "-- Migration 1: Schema change (fast)\nALTER TABLE users ADD COLUMN status VARCHAR(20);\n\n-- Migration 2: Data backfill (slow, run separately)\n-- Run in batches to avoid long locks\nDO $$\nDECLARE\n    batc"
        },
        {
          "language": "sql",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- Migration up\nALTER TABLE users ADD COLUMN phone VARCHAR(20);\n\n-- Migration down\nALTER TABLE users DROP COLUMN phone;\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Backup before migration\npg_dump -Fc -f backup_before_migration.dump production_db\n\n# Apply migration\nmigrate up\n\n# If rollback needed\npg_restore -d production_db backup_before_migration.dump\n"
        },
        {
          "language": "sql",
          "line_count": 11,
          "complexity": "simple",
          "code": "CREATE TABLE orders (\n    id SERIAL PRIMARY KEY,\n    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n    total DECIMAL(10,2) NOT NULL,\n    status VARCHAR(20) DEFAULT 'pending',\n    cr"
        },
        {
          "language": "sql",
          "line_count": 2,
          "complexity": "simple",
          "code": "DROP TABLE IF EXISTS old_logs;\n"
        },
        {
          "language": "sql",
          "line_count": 3,
          "complexity": "simple",
          "code": "-- \u274c DANGEROUS: Locks table, can fail\nALTER TABLE users ALTER COLUMN age TYPE BIGINT;\n"
        },
        {
          "language": "sql",
          "line_count": 14,
          "complexity": "simple",
          "code": "-- Step 1\nALTER TABLE users ADD COLUMN age_bigint BIGINT;\n\n-- Step 2: Application writes to both\n\n-- Step 3: Backfill\nUPDATE users SET age_bigint = age WHERE age_bigint IS NULL;\n\n-- Step 4: Applicatio"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Flyway\nflyway migrate\n\n# golang-migrate\nmigrate create -ext sql -dir migrations -seq add_users_table\n\n# Alembic\nalembic revision -m \"add users table\"\n"
        },
        {
          "language": "sql",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- V1__add_users_table.sql\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL\n);\n"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Apply migration\nmigrate up\n\n# Verify schema\npsql -c \"\\d users\"\n\n# Test rollback\nmigrate down\nmigrate up\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "migrate -database \"postgres://staging\" up\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Backup first\npg_dump -Fc production > backup_$(date +%Y%m%d).dump\n\n# Apply migration\nmigrate -database \"postgres://production\" up\n\n# Monitor\ntail -f /var/log/postgresql/postgresql.log\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "flyway migrate           # Apply migrations\nflyway info             # Show migration status\nflyway validate         # Validate applied migrations\nflyway repair           # Fix migration metadata\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "migrate up              # Apply all migrations\nmigrate up 1            # Apply one migration\nmigrate down 1          # Rollback one migration\nmigrate version         # Show current version\nmigrate for"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "alembic upgrade head    # Apply all migrations\nalembic downgrade -1    # Rollback one migration\nalembic current         # Show current version\nalembic history         # Show migration history\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "postgresql"
      ],
      "config_snippets": [
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "35 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "database/postgres-query-optimization.md",
      "category": "database",
      "skill_name": "postgres-query-optimization",
      "frontmatter": {
        "name": "database-postgres-query-optimization",
        "description": "Debugging slow queries in PostgreSQL"
      },
      "metrics": {
        "line_count": 657,
        "code_line_count": 140,
        "code_examples": 29,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 29
      },
      "code_examples": [
        {
          "language": "sql",
          "line_count": 5,
          "complexity": "simple",
          "code": "-- Cost units are arbitrary (not milliseconds)\n-- Lower cost = better plan (usually)\nSeq Scan on users  (cost=0.00..1234.56 rows=10000 width=64)\nIndex Scan using idx_users_email  (cost=0.29..8.31 rows"
        },
        {
          "language": "sql",
          "line_count": 2,
          "complexity": "simple",
          "code": "EXPLAIN SELECT * FROM users WHERE email = 'user@example.com';\n"
        },
        {
          "language": "sql",
          "line_count": 2,
          "complexity": "simple",
          "code": "EXPLAIN ANALYZE SELECT * FROM users WHERE email = 'user@example.com';\n"
        },
        {
          "language": "sql",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- Create covering index for this query\nCREATE INDEX idx_orders_user_created ON orders(user_id) INCLUDE (created_at);\n\n-- Query can now use Index Only Scan\nSELECT created_at FROM orders WHERE user_id "
        },
        {
          "language": "sql",
          "line_count": 3,
          "complexity": "simple",
          "code": "CREATE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_orders_composite ON orders(user_id, created_at);\n"
        },
        {
          "language": "sql",
          "line_count": 2,
          "complexity": "simple",
          "code": "CREATE INDEX idx_users_email_hash ON users USING HASH (email);\n"
        },
        {
          "language": "sql",
          "line_count": 3,
          "complexity": "simple",
          "code": "CREATE INDEX idx_locations_geom ON locations USING GIST (geom);\nCREATE INDEX idx_documents_fts ON documents USING GIST (to_tsvector('english', content));\n"
        },
        {
          "language": "sql",
          "line_count": 4,
          "complexity": "simple",
          "code": "CREATE INDEX idx_documents_fts ON documents USING GIN (to_tsvector('english', content));\nCREATE INDEX idx_users_tags ON users USING GIN (tags); -- array column\nCREATE INDEX idx_metadata_json ON events"
        },
        {
          "language": "sql",
          "line_count": 2,
          "complexity": "simple",
          "code": "CREATE INDEX idx_logs_created_brin ON logs USING BRIN (created_at);\n"
        },
        {
          "language": "sql",
          "line_count": 10,
          "complexity": "simple",
          "code": "-- Anti-pattern: Load users, then loop and query orders for each\nSELECT * FROM users;\n-- In application loop:\n--   SELECT * FROM orders WHERE user_id = ?\n\n-- Solution: JOIN or batch query\nSELECT u.*, "
        },
        {
          "language": "sql",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- Anti-pattern\nSELECT * FROM orders WHERE user_id = 123;\n\n-- Better: Select only needed columns\nSELECT id, total, created_at FROM orders WHERE user_id = 123;\n"
        },
        {
          "language": "sql",
          "line_count": 7,
          "complexity": "simple",
          "code": "-- Anti-pattern: Function on indexed column\nSELECT * FROM users WHERE LOWER(email) = 'foo@example.com';\n\n-- Solution: Functional index\nCREATE INDEX idx_users_email_lower ON users(LOWER(email));\n-- Or "
        },
        {
          "language": "sql",
          "line_count": 7,
          "complexity": "simple",
          "code": "-- Anti-pattern: Wildcard at start\nSELECT * FROM users WHERE email LIKE '%@example.com';\n\n-- Solution: Full-text search or trigram index\nCREATE EXTENSION pg_trgm;\nCREATE INDEX idx_users_email_trgm ON "
        },
        {
          "language": "sql",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- Anti-pattern: DISTINCT when not needed\nSELECT DISTINCT user_id FROM orders WHERE status = 'pending';\n\n-- Better if user_id is already unique per status:\nSELECT user_id FROM orders WHERE status = 'p"
        },
        {
          "language": "sql",
          "line_count": 8,
          "complexity": "simple",
          "code": "-- Anti-pattern: OR across tables\nSELECT * FROM orders WHERE user_id = 123 OR vendor_id = 456;\n\n-- Better: UNION\nSELECT * FROM orders WHERE user_id = 123\nUNION\nSELECT * FROM orders WHERE vendor_id = 4"
        },
        {
          "language": "sql",
          "line_count": 9,
          "complexity": "simple",
          "code": "-- Slower: Correlated subquery\nSELECT * FROM users WHERE id IN (SELECT user_id FROM orders WHERE total > 100);\n\n-- Faster: JOIN with DISTINCT\nSELECT DISTINCT u.* FROM users u INNER JOIN orders o ON o."
        },
        {
          "language": "sql",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- When you only need to check existence:\nSELECT * FROM users u WHERE EXISTS (SELECT 1 FROM orders o WHERE o.user_id = u.id);\n\n-- NOT:\nSELECT DISTINCT u.* FROM users u INNER JOIN orders o ON o.user_id"
        },
        {
          "language": "sql",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- Common query:\nSELECT * FROM orders WHERE status = 'pending';\n\n-- Create partial index\nCREATE INDEX idx_orders_pending ON orders(created_at) WHERE status = 'pending';\n"
        },
        {
          "language": "sql",
          "line_count": 14,
          "complexity": "simple",
          "code": "-- Slow query run frequently:\nSELECT user_id, COUNT(*), SUM(total) FROM orders GROUP BY user_id;\n\n-- Create materialized view\nCREATE MATERIALIZED VIEW user_order_stats AS\nSELECT user_id, COUNT(*) as o"
        },
        {
          "language": "sql",
          "line_count": 7,
          "complexity": "simple",
          "code": "-- Outdated statistics cause bad plans\n-- Fix: Analyze the table\nANALYZE users;\nANALYZE orders;\n\n-- Auto-vacuum should handle this, but manual ANALYZE helps after bulk changes\n"
        },
        {
          "language": "sql",
          "line_count": 15,
          "complexity": "simple",
          "code": "-- Check index bloat\nSELECT schemaname, tablename, indexname,\n       pg_size_pretty(pg_relation_size(indexrelid)) as index_size\nFROM pg_stat_user_indexes\nORDER BY pg_relation_size(indexrelid) DESC;\n\n-"
        },
        {
          "language": "sql",
          "line_count": 9,
          "complexity": "simple",
          "code": "-- Find unused indexes\nSELECT schemaname, tablename, indexname, idx_scan\nFROM pg_stat_user_indexes\nWHERE idx_scan = 0\nORDER BY pg_relation_size(indexrelid) DESC;\n\n-- Drop unused indexes to improve wri"
        },
        {
          "language": "sql",
          "line_count": 11,
          "complexity": "simple",
          "code": "-- Enable slow query logging in postgresql.conf\nlog_min_duration_statement = 1000  -- Log queries > 1 second\n\n-- Or use pg_stat_statements extension\nCREATE EXTENSION pg_stat_statements;\n\nSELECT query,"
        },
        {
          "language": "sql",
          "line_count": 2,
          "complexity": "simple",
          "code": "EXPLAIN ANALYZE <your slow query>;\n"
        },
        {
          "language": "sql",
          "line_count": 8,
          "complexity": "simple",
          "code": "-- When was table last analyzed?\nSELECT schemaname, tablename, last_analyze, last_autoanalyze\nFROM pg_stat_user_tables\nWHERE tablename = 'orders';\n\n-- If stale, analyze\nANALYZE orders;\n"
        },
        {
          "language": "sql",
          "line_count": 3,
          "complexity": "simple",
          "code": "-- Based on WHERE, JOIN, ORDER BY clauses\nCREATE INDEX idx_orders_user_created ON orders(user_id, created_at);\n"
        },
        {
          "language": "sql",
          "line_count": 2,
          "complexity": "simple",
          "code": "EXPLAIN ANALYZE <your slow query>;\n"
        },
        {
          "language": "sql",
          "line_count": 5,
          "complexity": "simple",
          "code": "EXPLAIN SELECT ...;                    -- Plan only, no execution\nEXPLAIN ANALYZE SELECT ...;            -- Plan + actual execution\nEXPLAIN (ANALYZE, BUFFERS) SELECT ...; -- Include I/O stats\nEXPLAIN "
        },
        {
          "language": "sql",
          "line_count": 24,
          "complexity": "medium",
          "code": "-- B-tree (default)\nCREATE INDEX idx_name ON table(column);\n\n-- Composite\nCREATE INDEX idx_name ON table(col1, col2);\n\n-- Covering (Index Only Scan)\nCREATE INDEX idx_name ON table(col1) INCLUDE (col2,"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "postgresql"
      ],
      "config_snippets": [
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql",
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "29 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/partitioning-sharding.md",
      "category": "distributed-systems",
      "skill_name": "partitioning-sharding",
      "frontmatter": {
        "name": "distributed-systems-partitioning-sharding",
        "description": "Data partitioning and sharding strategies including hash-based, range-based, consistent hashing, and rebalancing"
      },
      "metrics": {
        "line_count": 445,
        "code_line_count": 81,
        "code_examples": 11,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "import hashlib\n\nclass HashPartitioner:\n    \"\"\"Hash-based partitioning\"\"\"\n\n    def __init__(self, num_partitions):\n        self.num_partitions = num_partitions\n        self.partitions = [[] for _ in ra"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "class RangePartitioner:\n    \"\"\"Range-based partitioning\"\"\"\n\n    def __init__(self, ranges):\n        # ranges = [(min, max, partition_id), ...]\n        self.ranges = sorted(ranges, key=lambda x: x[0])\n"
        },
        {
          "language": "python",
          "line_count": 58,
          "complexity": "complex",
          "code": "import hashlib\nimport bisect\n\nclass ConsistentHashing:\n    \"\"\"Consistent hashing with virtual nodes\"\"\"\n\n    def __init__(self, num_virtual_nodes=150):\n        self.num_virtual_nodes = num_virtual_node"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "class AdaptivePartitioner:\n    \"\"\"Split partitions that become hot\"\"\"\n\n    def __init__(self):\n        self.partitions = {}\n        self.access_counts = {}\n\n    def access(self, key):\n        self.acc"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "def read_with_randomization(key):\n    \"\"\"Read from random replica of hot key\"\"\"\n    replicas = get_replicas(key)\n    replica = random.choice(replicas)\n    return replica.read(key)\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "def rebalance_stop_the_world(old_partitions, new_num_partitions):\n    \"\"\"Rebalance with downtime\"\"\"\n    # 1. Stop writes\n    stop_writes()\n\n    # 2. Redistribute data\n    new_partitions = redistribute"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "class OnlineRebalancer:\n    \"\"\"Rebalance without downtime\"\"\"\n\n    def rebalance(self, target_partitions):\n        # 1. Create new partitions (in parallel with old)\n        new_partitions = self._creat"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "class LocalIndexPartitioner:\n    \"\"\"Local secondary index per partition\"\"\"\n\n    def __init__(self, num_partitions):\n        self.partitions = [\n            {'data': {}, 'email_index': {}}\n            "
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "class GlobalIndexPartitioner:\n    \"\"\"Separate global secondary index\"\"\"\n\n    def __init__(self, num_partitions):\n        self.data_partitions = [{} for _ in range(num_partitions)]\n        self.global_"
        },
        {
          "language": "javascript",
          "line_count": 9,
          "complexity": "simple",
          "code": "// Enable sharding\nsh.enableSharding(\"mydb\")\n\n// Shard collection by user_id (hash)\nsh.shardCollection(\"mydb.users\", {user_id: \"hashed\"})\n\n// Or by range\nsh.shardCollection(\"mydb.orders\", {order_date:"
        },
        {
          "language": "sql",
          "line_count": 16,
          "complexity": "simple",
          "code": "-- Partition key determines data distribution\nCREATE TABLE users (\n    user_id UUID,\n    name TEXT,\n    PRIMARY KEY (user_id)  -- Partition key\n);\n\n-- Composite partition key\nCREATE TABLE user_posts ("
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "mongodb",
        "redis"
      ],
      "config_snippets": [
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/replication-strategies.md",
      "category": "distributed-systems",
      "skill_name": "replication-strategies",
      "frontmatter": {
        "name": "distributed-systems-replication-strategies",
        "description": "Data replication strategies including primary-backup, multi-primary, chain replication, and quorum-based replication"
      },
      "metrics": {
        "line_count": 414,
        "code_line_count": 73,
        "code_examples": 9,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "class PrimaryBackupStore:\n    \"\"\"Primary-backup replication\"\"\"\n\n    def __init__(self, is_primary=False):\n        self.is_primary = is_primary\n        self.data = {}\n        self.backups = []\n\n    def"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "class MultiPrimaryStore:\n    \"\"\"Multi-primary with conflict resolution\"\"\"\n\n    def __init__(self, node_id):\n        self.node_id = node_id\n        self.data = {}  # key \u2192 (value, vector_clock)\n       "
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "class ChainNode:\n    \"\"\"Node in chain replication\"\"\"\n\n    def __init__(self, node_id):\n        self.node_id = node_id\n        self.data = {}\n        self.next_node = None\n        self.is_tail = False\n"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "class QuorumStore:\n    \"\"\"Quorum-based replication\"\"\"\n\n    def __init__(self, nodes, w, r):\n        self.nodes = nodes\n        self.w = w  # Write quorum\n        self.r = r  # Read quorum\n\n    def wri"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "def sync_write(primary, backups, key, value):\n    \"\"\"Wait for all backups to acknowledge\"\"\"\n    primary.write(key, value)\n\n    for backup in backups:\n        backup.replicate(key, value)  # Blocks unt"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "import threading\n\ndef async_write(primary, backups, key, value):\n    \"\"\"Don't wait for backups\"\"\"\n    primary.write(key, value)\n\n    for backup in backups:\n        threading.Thread(target=backup.repli"
        },
        {
          "language": "sql",
          "line_count": 8,
          "complexity": "simple",
          "code": "-- On primary\nCHANGE MASTER TO\n  MASTER_HOST='primary_host',\n  MASTER_USER='repl_user',\n  MASTER_PASSWORD='password';\n\nSTART SLAVE;\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "from pymongo import MongoClient\n\nclient = MongoClient('mongodb://host1,host2,host3/?replicaSet=myReplicaSet')\n\n# Write to primary\ndb = client.mydb\ndb.collection.insert_one({'key': 'value'})\n\n# Read fr"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "from cassandra.cluster import Cluster\nfrom cassandra import ConsistencyLevel\n\ncluster = Cluster()\nsession = cluster.connect('keyspace')\n\n# Write to quorum\nsession.execute(query, consistency_level=Cons"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "mysql",
        "mongodb"
      ],
      "config_snippets": [
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/consensus-paxos.md",
      "category": "distributed-systems",
      "skill_name": "consensus-paxos",
      "frontmatter": {
        "name": "distributed-systems-consensus-paxos",
        "description": "Paxos consensus algorithm including Basic Paxos, Multi-Paxos, roles, phases, and practical implementations"
      },
      "metrics": {
        "line_count": 499,
        "code_line_count": 68,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 73,
          "complexity": "complex",
          "code": "class Proposer:\n    def __init__(self, node_id, acceptors):\n        self.node_id = node_id\n        self.acceptors = acceptors\n        self.proposal_number = 0\n\n    def propose(self, value):\n        \"\""
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "class MultiPaxos:\n    def __init__(self, nodes):\n        self.nodes = nodes\n        self.leader = None\n        self.log = []  # Sequence of chosen values\n\n    def elect_leader(self):\n        \"\"\"One-ti"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "# Conceptual Chubby API\nclass Chubby:\n    def __init__(self, paxos_cluster):\n        self.paxos = paxos_cluster\n\n    def acquire_lock(self, lock_name, timeout=60):\n        \"\"\"Acquire distributed lock\""
        },
        {
          "language": "python",
          "line_count": 91,
          "complexity": "complex",
          "code": "import time\nimport random\nfrom typing import Optional, Tuple\n\nclass PaxosNode:\n    \"\"\"Complete Paxos node (proposer + acceptor + learner)\"\"\"\n\n    def __init__(self, node_id, all_nodes):\n        self.n"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "def propose_with_backoff(self, value):\n    \"\"\"Propose with exponential backoff\"\"\"\n    backoff = 0.1\n    max_attempts = 10\n\n    for attempt in range(max_attempts):\n        if self.propose(value):\n     "
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "def notify_learners(self, value):\n    for learner in self.learners:\n        learner.learn(value)\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "def receive_accept(self, proposal_id, value):\n    if self.accept_proposal(proposal_id, value):\n        self.distinguished_learner.notify_accepted(proposal_id, value)\n"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "class Learner:\n    def __init__(self, quorum_size):\n        self.acceptances = {}  # proposal_id \u2192 {acceptor_ids}\n        self.quorum_size = quorum_size\n\n    def notify_accepted(self, acceptor_id, pro"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "import unittest\n\nclass TestPaxos(unittest.TestCase):\n    def test_single_proposer(self):\n        \"\"\"Single proposer should succeed\"\"\"\n        nodes = [PaxosNode(i, []) for i in range(5)]\n        for n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "def propose_batch(self, values):\n    \"\"\"Propose multiple values in single Paxos instance\"\"\"\n    batch_value = {\n        'type': 'batch',\n        'values': values\n    }\n    return self.propose(batch_va"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "etcd",
        "consul"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "cryptography/crypto-best-practices.md",
      "category": "cryptography",
      "skill_name": "crypto-best-practices",
      "frontmatter": {
        "name": "cryptography-crypto-best-practices",
        "description": "Cryptography best practices, common mistakes, security patterns, and anti-patterns to avoid"
      },
      "metrics": {
        "line_count": 550,
        "code_line_count": 144,
        "code_examples": 22,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 6,
          "complexity": "complex",
          "code": "# \u274c WRONG: ECB mode leaks patterns\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\n\ncipher = Cipher(algorithms.AES(key), modes.ECB())\n# Images encrypted with ECB show orig"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "complex",
          "code": "# \u2705 CORRECT: GCM mode (authenticated encryption)\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\n\naesgcm = AESGCM(key)\nciphertext = aesgcm.encrypt(nonce, plaintext, None)\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "# \u274c WRONG: Predictable randomness\nimport random\nkey = random.randbytes(32)  # NOT cryptographically secure\ntoken = str(random.randint(1000, 9999))  # Predictable\n\n# \u2705 CORRECT: Cryptographically secure"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "# \u274c WRONG: Reusing nonce with same key\nnonce = b'\\x00' * 12  # Fixed nonce!\nfor message in messages:\n    ciphertext = aesgcm.encrypt(nonce, message, None)  # VULNERABLE!\n\n# \u2705 CORRECT: Random nonce for"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "# \u274c WRONG: Encryption without authentication\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv))\nciphertext = cipher.encryptor().update(plaintext)\n# Attacker can modify ciphertext!\n\n# \u2705 CORRECT: Authe"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "# \u274c WRONG: Variable-time comparison\ndef verify_token(submitted, expected):\n    return submitted == expected  # Leaks timing info\n\n# \u2705 CORRECT: Constant-time comparison\nimport hmac\ndef verify_token(sub"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "complex",
          "code": "# \u274c WRONG: Key in source code\nSECRET_KEY = b'my_secret_key_123'\n\n# \u2705 CORRECT: Key from environment/vault\nimport os\nSECRET_KEY = os.environ['SECRET_KEY'].encode()\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "# \u274c WRONG: Fast hash (MD5, SHA-1, SHA-256)\nimport hashlib\npassword_hash = hashlib.sha256(password).hexdigest()  # Too fast!\n\n# \u2705 CORRECT: Slow, salted hash\nimport bcrypt\npassword_hash = bcrypt.hashpw("
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "# \u2705 BEST: Fernet (symmetric encryption made easy)\nfrom cryptography.fernet import Fernet\n\nkey = Fernet.generate_key()\nf = Fernet(key)\n\nciphertext = f.encrypt(b\"Secret message\")\nplaintext = f.decrypt(c"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# \u2705 CORRECT: Derive encryption keys from passwords\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.primitives import hashes\nimport os\n\ndef derive_key(password"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# \u2705 Good for development\nexport SECRET_KEY=\"base64_encoded_key\"\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "complex",
          "code": "# \u2705 BETTER: Use secrets manager\nimport boto3\n\ndef get_key():\n    client = boto3.client('secretsmanager')\n    response = client.get_secret_value(SecretId='my-app/secret-key')\n    return response['Secre"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# \u2705 BEST: Use HSM for production\n# Keys never leave HSM\n# Examples: AWS KMS, Google Cloud KMS, Azure Key Vault\n"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# \u2705 Support multiple active keys\nclass KeyManager:\n    def __init__(self):\n        self.keys = {\n            'v1': load_key('key_v1'),\n            'v2': load_key('key_v2'),  # New key\n        }\n      "
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "# \u2705 CORRECT: Unique salt per password\nimport os\nimport hashlib\n\ndef hash_password(password: str) -> tuple:\n    salt = os.urandom(16)\n    key = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 10"
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "from cryptography.hazmat.primitives.ciphers.aead import AESGCM\nimport os\n\nclass EnvelopeEncryption:\n    def __init__(self, kek):\n        \"\"\"KEK = Key Encryption Key (from KMS)\"\"\"\n        self.kek = AE"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "# Include metadata that must be authentic but not encrypted\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\nimport json\n\ndef encrypt_with_metadata(key, plaintext, metadata):\n    aesgcm "
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "# Prevent brute force attacks\nfrom datetime import datetime, timedelta\nimport time\n\nclass RateLimitedAuth:\n    def __init__(self):\n        self.attempts = {}  # user_id \u2192 (count, lockout_until)\n\n    d"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "# \u274c WRONG: XOR \"encryption\"\ndef xor_encrypt(data, key):\n    return bytes([d ^ key for d in data])  # Trivially broken\n\n# \u2705 CORRECT: Real encryption\nfrom cryptography.fernet import Fernet\nf = Fernet(ke"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "# \u274c WRONG: Custom \"secret\" algorithm\ndef my_secure_hash(data):\n    # Secret algorithm only I know!\n    return some_complex_transformation(data)\n\n# \u2705 CORRECT: Standard algorithms\nimport hashlib\nhash_di"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c RISKY: MAC-then-encrypt\nmac = hmac.new(mac_key, plaintext).digest()\nciphertext = encrypt(plaintext + mac)\n\n# \u2705 CORRECT: Encrypt-then-MAC (or use AEAD)\nciphertext = encrypt(plaintext)\nmac = hmac.ne"
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "import unittest\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\nimport os\n\nclass TestEncryption(unittest.TestCase):\n    def test_encrypt_decrypt(self):\n        \"\"\"Test basic encryption/"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "vault",
        "tls"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "22 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "19 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "observability/dashboard-design.md",
      "category": "observability",
      "skill_name": "dashboard-design",
      "frontmatter": {
        "name": "observability-dashboard-design",
        "description": "Building Grafana dashboards for service monitoring"
      },
      "metrics": {
        "line_count": 642,
        "code_line_count": 93,
        "code_examples": 14,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 6
      },
      "code_examples": [
        {
          "language": "promql",
          "line_count": 2,
          "complexity": "simple",
          "code": "rate(http_requests_total[5m])\n"
        },
        {
          "language": "promql",
          "line_count": 5,
          "complexity": "simple",
          "code": "sum(rate(http_requests_total{status=~\"5..\"}[5m]))\n/\nsum(rate(http_requests_total[5m]))\n* 100\n"
        },
        {
          "language": "promql",
          "line_count": 2,
          "complexity": "simple",
          "code": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))\n"
        },
        {
          "language": "promql",
          "line_count": 3,
          "complexity": "simple",
          "code": "cpu_usage_percent\nmemory_usage_percent\n"
        },
        {
          "language": "promql",
          "line_count": 3,
          "complexity": "simple",
          "code": "queue_depth\nconnection_pool_waiting\n"
        },
        {
          "language": "promql",
          "line_count": 3,
          "complexity": "simple",
          "code": "rate(disk_errors_total[5m])\nrate(network_errors_total[5m])\n"
        },
        {
          "language": "json",
          "line_count": 67,
          "complexity": "complex",
          "code": "{\n  \"dashboard\": {\n    \"title\": \"API Service Overview\",\n    \"tags\": [\"service\", \"api\"],\n    \"timezone\": \"browser\",\n    \"panels\": [\n      {\n        \"title\": \"Request Rate\",\n        \"type\": \"graph\",\n   "
        },
        {
          "language": "json",
          "line_count": 89,
          "complexity": "complex",
          "code": "{\n  \"dashboard\": {\n    \"title\": \"SLO Dashboard - 99.9% Availability\",\n    \"panels\": [\n      {\n        \"title\": \"Availability (30d)\",\n        \"type\": \"stat\",\n        \"gridPos\": {\"x\": 0, \"y\": 0, \"w\": 6,"
        },
        {
          "language": "json",
          "line_count": 63,
          "complexity": "complex",
          "code": "{\n  \"dashboard\": {\n    \"title\": \"Troubleshooting - API Service\",\n    \"panels\": [\n      {\n        \"title\": \"Requests by Endpoint (Top 10)\",\n        \"type\": \"table\",\n        \"targets\": [\n          {\n   "
        },
        {
          "language": "json",
          "line_count": 51,
          "complexity": "complex",
          "code": "{\n  \"dashboard\": {\n    \"title\": \"Resource Usage\",\n    \"panels\": [\n      {\n        \"title\": \"CPU Usage by Instance\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"100 -"
        },
        {
          "language": "json",
          "line_count": 62,
          "complexity": "complex",
          "code": "{\n  \"dashboard\": {\n    \"title\": \"Business Metrics\",\n    \"panels\": [\n      {\n        \"title\": \"Revenue (Last 24h)\",\n        \"type\": \"stat\",\n        \"targets\": [\n          {\n            \"expr\": \"sum(inc"
        },
        {
          "language": "promql",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Rate (requests/sec)\nrate(metric_total[5m])\n\n# Error rate (%)\nsum(rate(errors[5m])) / sum(rate(requests[5m])) * 100\n\n# Percentiles\nhistogram_quantile(0.95, rate(metric_bucket[5m]))\n\n# Top N\ntopk(10, "
        },
        {
          "language": "json",
          "line_count": 19,
          "complexity": "simple",
          "code": "// WRONG: Plain graph with no visual indicators\n{\"type\": \"graph\"}\n\n// CORRECT: Color-coded thresholds\n{\n  \"type\": \"graph\",\n  \"fieldConfig\": {\n    \"defaults\": {\n      \"thresholds\": {\n        \"steps\": ["
        },
        {
          "language": "promql",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Counter value (meaningless)\nhttp_requests_total\n\n# CORRECT: Rate (requests/sec)\nrate(http_requests_total[5m])\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "grafana",
        "prometheus"
      ],
      "config_snippets": [
        "json",
        "json",
        "json",
        "json",
        "json",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "observability/observability-cost-optimization.md",
      "category": "observability",
      "skill_name": "observability-cost-optimization",
      "frontmatter": {
        "name": "observability-cost-optimization",
        "description": "Optimizing observability costs through sampling, cardinality management, and retention strategies"
      },
      "metrics": {
        "line_count": 572,
        "code_line_count": 99,
        "code_examples": 12,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 6
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "from prometheus_client import Counter, Histogram\n\n# \u274c HIGH CARDINALITY: user_id has 1M+ unique values\nrequests_bad = Counter(\n    'http_requests_total',\n    'HTTP requests',\n    ['method', 'endpoint',"
        },
        {
          "language": "yaml",
          "line_count": 28,
          "complexity": "medium",
          "code": "# prometheus.yml\nscrape_configs:\n  - job_name: 'api-servers'\n    static_configs:\n      - targets: ['api-1:8080', 'api-2:8080']\n\n    metric_relabel_configs:\n      # Drop high-cardinality labels\n      -"
        },
        {
          "language": "yaml",
          "line_count": 44,
          "complexity": "medium",
          "code": "# otel-collector-config.yaml\nprocessors:\n  tail_sampling:\n    # Wait 10s for trace to complete before sampling decision\n    decision_wait: 10s\n\n    # Limit in-memory traces\n    num_traces: 100000\n\n   "
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "complex",
          "code": "from opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.sampling import ParentBasedTraceIdRatioBased\n\n# Sample 10% of traces (decided at trace creation)\nsampler = ParentBasedTr"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "import logging\nimport random\n\nclass SamplingFilter(logging.Filter):\n    \"\"\"Sample 10% of INFO logs, keep all WARNING+.\"\"\"\n\n    def filter(self, record):\n        if record.levelno >= logging.WARNING:\n "
        },
        {
          "language": "yaml",
          "line_count": 29,
          "complexity": "medium",
          "code": "processors:\n  filter:\n    logs:\n      include:\n        # Keep errors\n        match_type: regexp\n        record_attributes:\n          - key: level\n            value: ERROR|FATAL\n\n      exclude:\n       "
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "from opentelemetry.sdk.trace.sampling import Sampler, Decision, SamplingResult\nimport time\n\nclass AdaptiveSampler(Sampler):\n    \"\"\"Dynamically adjust sampling based on request rate.\"\"\"\n\n    def __init"
        },
        {
          "language": "yaml",
          "line_count": 28,
          "complexity": "medium",
          "code": "# prometheus-rules.yml\ngroups:\n  - name: aggregation\n    interval: 1m\n    rules:\n      # Pre-aggregate high-cardinality metrics\n      - record: http_requests:rate5m\n        expr: |\n          sum by (m"
        },
        {
          "language": "yaml",
          "line_count": 35,
          "complexity": "medium",
          "code": "processors:\n  # Remove high-cardinality attributes\n  attributes:\n    actions:\n      # Delete PII\n      - key: email\n        action: delete\n      - key: user_id\n        action: delete\n\n      # Hash hig"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Unbounded label values\nrequests = Counter('requests', 'Requests', ['user_id', 'email'])\n\n# CORRECT: Bounded labels\nrequests = Counter('requests', 'Requests', ['method', 'status'])\n"
        },
        {
          "language": "yaml",
          "line_count": 16,
          "complexity": "simple",
          "code": "# WRONG: 100% sampling for high-traffic service\nprocessors:\n  probabilistic_sampler:\n    sampling_percentage: 100  # 10k req/sec = 10k traces/sec!\n\n# CORRECT: Tail-based sampling\nprocessors:\n  tail_sa"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "# WRONG: No visibility into observability costs\n\n# CORRECT: Track cost metrics\nfrom prometheus_client import Counter, Gauge\n\nlogs_ingested_bytes = Counter('logs_ingested_bytes_total', 'Logs ingested')"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "grafana",
        "prometheus"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "12 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "testing/test-driven-development.md",
      "category": "testing",
      "skill_name": "test-driven-development",
      "frontmatter": {
        "name": "testing-test-driven-development",
        "description": "Design APIs and interfaces through tests"
      },
      "metrics": {
        "line_count": 645,
        "code_line_count": 87,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 34,
          "complexity": "medium",
          "code": "# Step 1: RED - Write failing test\ndef test_calculate_discount():\n    # Arrange\n    original_price = 100\n    discount_percent = 10\n\n    # Act\n    final_price = calculate_discount(original_price, disco"
        },
        {
          "language": "typescript",
          "line_count": 64,
          "complexity": "complex",
          "code": "// Step 1: RED - Define interface through tests\ndescribe('ShoppingCart', () => {\n  it('starts empty', () => {\n    const cart = new ShoppingCart();\n    expect(cart.itemCount).toBe(0);\n    expect(cart.t"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "# Step 1: Acceptance test (fails)\ndef test_user_can_register():\n    # Arrange\n    api = UserAPI()\n\n    # Act\n    response = api.register(\n        username=\"alice\",\n        email=\"alice@example.com\",\n "
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "# Step 1: Test pure function\ndef test_hash_password():\n    hashed = hash_password(\"secret123\")\n    assert hashed != \"secret123\"\n    assert len(hashed) == 60  # bcrypt length\n\n# Step 2: Implement\nimpor"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "# Bug report: \"Users can register with duplicate emails\"\n\n# Step 1: RED - Write failing test that reproduces bug\ndef test_cannot_register_duplicate_email():\n    service = UserService()\n\n    service.re"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "# Step 1: Ensure comprehensive tests exist\ndef test_order_total_calculation():\n    order = Order()\n    order.add_item(Item(\"Laptop\", price=1000, quantity=1))\n    order.add_item(Item(\"Mouse\", price=25,"
        },
        {
          "language": "python",
          "line_count": 54,
          "complexity": "complex",
          "code": "# Step 1: RED\ndef test_fizzbuzz_returns_number():\n    assert fizzbuzz(1) == \"1\"\n    assert fizzbuzz(2) == \"2\"\n\n# FAILS: fizzbuzz not defined\n\n# Step 2: GREEN\ndef fizzbuzz(n: int) -> str:\n    return st"
        },
        {
          "language": "rust",
          "line_count": 37,
          "complexity": "medium",
          "code": "// Step 1: RED\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_empty_vec_sum_is_zero() {\n        let result = sum(vec![]);\n        assert_eq!(result, 0);\n    }\n}\n\n// FAILS: sum not"
        },
        {
          "language": "go",
          "line_count": 33,
          "complexity": "medium",
          "code": "// Step 1: RED\nfunc TestReverseString(t *testing.T) {\n    result := Reverse(\"hello\")\n    expected := \"olleh\"\n    if result != expected {\n        t.Errorf(\"got %s, want %s\", result, expected)\n    }\n}\n\n"
        },
        {
          "language": "typescript",
          "line_count": 49,
          "complexity": "complex",
          "code": "// Step 1: RED\ndescribe('Stack', () => {\n  it('starts empty', () => {\n    const stack = new Stack<number>();\n    expect(stack.isEmpty()).toBe(true);\n    expect(stack.size()).toBe(0);\n  });\n});\n\n// FAI"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "pytest",
        "vite"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "api/rest-api-design.md",
      "category": "api",
      "skill_name": "rest-api-design",
      "frontmatter": {
        "name": "api-rest-api-design",
        "description": "Designing RESTful APIs from scratch"
      },
      "metrics": {
        "line_count": 842,
        "code_line_count": 103,
        "code_examples": 11,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 10
      },
      "code_examples": [
        {
          "language": "json",
          "line_count": 20,
          "complexity": "simple",
          "code": "// Single resource\n{\n  \"id\": 42,\n  \"email\": \"alice@example.com\",\n  \"name\": \"Alice\"\n}\n\n// Collection\n{\n  \"data\": [\n    {\"id\": 1, \"name\": \"Alice\"},\n    {\"id\": 2, \"name\": \"Bob\"}\n  ],\n  \"meta\": {\n    \"tot"
        },
        {
          "language": "json",
          "line_count": 9,
          "complexity": "simple",
          "code": "POST /users\nContent-Type: application/json\n\n{\n  \"email\": \"alice@example.com\",\n  \"name\": \"Alice\",\n  \"password\": \"secret123\"\n}\n"
        },
        {
          "language": "json",
          "line_count": 11,
          "complexity": "simple",
          "code": "HTTP/1.1 201 Created\nLocation: /users/42\nContent-Type: application/json\n\n{\n  \"id\": 42,\n  \"email\": \"alice@example.com\",\n  \"name\": \"Alice\",\n  \"created_at\": \"2025-10-18T12:00:00Z\"\n}\n"
        },
        {
          "language": "json",
          "line_count": 9,
          "complexity": "simple",
          "code": "PUT /users/42\nContent-Type: application/json\n\n{\n  \"email\": \"alice@example.com\",\n  \"name\": \"Alice Cooper\",  // Updated\n  \"bio\": \"Developer\"       // All fields required\n}\n"
        },
        {
          "language": "json",
          "line_count": 11,
          "complexity": "simple",
          "code": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"id\": 42,\n  \"email\": \"alice@example.com\",\n  \"name\": \"Alice Cooper\",\n  \"bio\": \"Developer\",\n  \"updated_at\": \"2025-10-18T12:00:00Z\"\n}\n"
        },
        {
          "language": "json",
          "line_count": 7,
          "complexity": "simple",
          "code": "PATCH /users/42\nContent-Type: application/json\n\n{\n  \"name\": \"Alice Cooper\"   // Only update name\n}\n"
        },
        {
          "language": "json",
          "line_count": 11,
          "complexity": "simple",
          "code": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"id\": 42,\n  \"email\": \"alice@example.com\",\n  \"name\": \"Alice Cooper\",      // Updated\n  \"bio\": \"Developer\",          // Unchanged\n  \"updated_at\": \"202"
        },
        {
          "language": "json",
          "line_count": 8,
          "complexity": "simple",
          "code": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"message\": \"User deleted successfully\",\n  \"id\": 42\n}\n"
        },
        {
          "language": "json",
          "line_count": 9,
          "complexity": "simple",
          "code": "POST /users\n{\"email\": \"invalid\"}    \u2192 400 Bad Request\n{\n  \"error\": \"Validation failed\",\n  \"details\": {\n    \"email\": [\"Must be valid email address\"]\n  }\n}\n"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "def create_payment(request):\n    idempotency_key = request.headers.get('Idempotency-Key')\n\n    # Check if already processed\n    existing = db.query(\"SELECT * FROM payments WHERE idempotency_key = %s\","
        },
        {
          "language": "json",
          "line_count": 15,
          "complexity": "simple",
          "code": "GET /users/42\n\n{\n  \"id\": 42,\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\",\n  \"_links\": {\n    \"self\": {\"href\": \"/users/42\"},\n    \"posts\": {\"href\": \"/users/42/posts\"},\n    \"followers\": {\"href\": \"/u"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "jwt",
        "oauth"
      ],
      "config_snippets": [
        "json",
        "json",
        "json",
        "json",
        "json",
        "json",
        "json",
        "json",
        "json",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        }
      ],
      "priority_score": 79.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "infrastructure/terraform-patterns.md",
      "category": "infrastructure",
      "skill_name": "terraform-patterns",
      "frontmatter": {
        "name": "infrastructure-terraform-patterns",
        "description": "Provisioning cloud infrastructure (AWS, GCP, Azure, Cloudflare)"
      },
      "metrics": {
        "line_count": 756,
        "code_line_count": 181,
        "code_examples": 20,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "hcl",
          "line_count": 36,
          "complexity": "medium",
          "code": "# versions.tf\nterraform {\n  required_version = \">= 1.6\"\n\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n    cloudflare = {\n      source  = \"cloudflar"
        },
        {
          "language": "hcl",
          "line_count": 36,
          "complexity": "medium",
          "code": "# variables.tf\nvariable \"environment\" {\n  description = \"Environment name (dev, staging, production)\"\n  type        = string\n  validation {\n    condition     = contains([\"dev\", \"staging\", \"production\""
        },
        {
          "language": "hcl",
          "line_count": 30,
          "complexity": "medium",
          "code": "# Remote state with S3 backend\nterraform {\n  backend \"s3\" {\n    bucket         = \"company-terraform-state\"\n    key            = \"env/${var.environment}/terraform.tfstate\"\n    region         = \"us-east"
        },
        {
          "language": "hcl",
          "line_count": 37,
          "complexity": "medium",
          "code": "# Fetch existing resources\ndata \"aws_vpc\" \"main\" {\n  id = var.vpc_id\n}\n\ndata \"aws_subnets\" \"private\" {\n  filter {\n    name   = \"vpc-id\"\n    values = [data.aws_vpc.main.id]\n  }\n\n  tags = {\n    Tier = \""
        },
        {
          "language": "hcl",
          "line_count": 94,
          "complexity": "complex",
          "code": "# modules/web-app/main.tf\nresource \"aws_security_group\" \"web\" {\n  name        = \"${var.name}-web-sg\"\n  description = \"Security group for ${var.name} web tier\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n "
        },
        {
          "language": "hcl",
          "line_count": 30,
          "complexity": "medium",
          "code": "# main.tf\nmodule \"web_app\" {\n  source = \"./modules/web-app\"\n\n  name        = \"my-app\"\n  environment = var.environment\n  vpc_id      = data.aws_vpc.main.id\n  subnet_ids  = data.aws_subnets.public.ids\n\n"
        },
        {
          "language": "bash",
          "line_count": 35,
          "complexity": "medium",
          "code": "# Create workspaces for environments\nterraform workspace new dev\nterraform workspace new staging\nterraform workspace new production\n\n# Switch between workspaces\nterraform workspace select dev\n\n# List "
        },
        {
          "language": "hcl",
          "line_count": 44,
          "complexity": "medium",
          "code": "# Dynamic ingress rules\nvariable \"ingress_rules\" {\n  type = list(object({\n    from_port   = number\n    to_port     = number\n    protocol    = string\n    cidr_blocks = list(string)\n    description = st"
        },
        {
          "language": "hcl",
          "line_count": 45,
          "complexity": "medium",
          "code": "# Create resources from map\nvariable \"s3_buckets\" {\n  type = map(object({\n    versioning = bool\n    encryption = bool\n  }))\n  default = {\n    \"logs\" = {\n      versioning = true\n      encryption = true"
        },
        {
          "language": "hcl",
          "line_count": 30,
          "complexity": "medium",
          "code": "# Create resource only in production\nresource \"aws_cloudwatch_dashboard\" \"main\" {\n  count          = var.environment == \"production\" ? 1 : 0\n  dashboard_name = \"${var.project}-dashboard\"\n\n  dashboard_"
        },
        {
          "language": "bash",
          "line_count": 37,
          "complexity": "complex",
          "code": "# Initialize Terraform\nterraform init\n\n# Validate configuration\nterraform validate\n\n# Format configuration\nterraform fmt -recursive\n\n# Plan changes\nterraform plan -out=tfplan\n\n# Apply changes\nterrafor"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Pull remote state\nterraform state pull > terraform.tfstate.backup\n\n# Push local state to remote\nterraform state push terraform.tfstate\n\n# Move resource in state\nterraform state mv aws_instance.old a"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Create workspace\nterraform workspace new staging\n\n# Select workspace\nterraform workspace select production\n\n# List workspaces\nterraform workspace list\n\n# Show current workspace\nterraform workspace s"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Initialize and download modules\nterraform init\n\n# Update modules\nterraform get -update\n\n# Show module tree\nterraform providers\n"
        },
        {
          "language": "hcl",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c NEVER: Hardcode credentials\nprovider \"aws\" {\n  access_key = \"AKIAIOSFODNN7EXAMPLE\"  # NEVER do this\n  secret_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n}\n\n# \u2705 CORRECT: Use environment variab"
        },
        {
          "language": "hcl",
          "line_count": 16,
          "complexity": "simple",
          "code": "# \u274c NEVER: Store state locally for team projects\nterraform {\n  # No backend configuration - uses local state\n}\n\n# \u2705 CORRECT: Use remote backend with locking\nterraform {\n  backend \"s3\" {\n    bucket    "
        },
        {
          "language": "hcl",
          "line_count": 15,
          "complexity": "simple",
          "code": "# \u274c NEVER: Use count for resources that might be reordered\nresource \"aws_instance\" \"app\" {\n  count = 3  # Risky - reordering changes indices\n  # ...\n}\n\n# \u2705 CORRECT: Use for_each with stable keys\nresou"
        },
        {
          "language": "hcl",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c Don't ignore .terraform directory in git\n# .gitignore missing .terraform/\n\n# \u2705 CORRECT: Proper .gitignore\n# .gitignore\n.terraform/\n*.tfstate\n*.tfstate.backup\n.terraform.lock.hcl  # or commit for v"
        },
        {
          "language": "hcl",
          "line_count": 23,
          "complexity": "medium",
          "code": "# \u274c Don't create circular dependencies\nresource \"aws_security_group\" \"a\" {\n  ingress {\n    security_groups = [aws_security_group.b.id]\n  }\n}\n\nresource \"aws_security_group\" \"b\" {\n  ingress {\n    securi"
        },
        {
          "language": "hcl",
          "line_count": 35,
          "complexity": "medium",
          "code": "# Use consistent naming\nlocals {\n  name_prefix = \"${var.project}-${var.environment}\"\n\n  common_tags = {\n    Project     = var.project\n    Environment = var.environment\n    ManagedBy   = \"Terraform\"\n  "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "terraform",
        "kubernetes"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "20 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 79.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "frontend/web-accessibility.md",
      "category": "frontend",
      "skill_name": "web-accessibility",
      "frontmatter": {
        "name": "frontend-web-accessibility",
        "description": "Building accessible web applications"
      },
      "metrics": {
        "line_count": 694,
        "code_line_count": 218,
        "code_examples": 27,
        "external_refs": 1,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "tsx",
          "line_count": 8,
          "complexity": "simple",
          "code": "// \u274c Bad: Divs for everything\n<div onClick={handleClick}>Click me</div>\n<div>Important message</div>\n\n// \u2705 Good: Semantic elements\n<button onClick={handleClick}>Click me</button>\n<main>Important messa"
        },
        {
          "language": "tsx",
          "line_count": 30,
          "complexity": "medium",
          "code": "<body>\n  <header>\n    <nav>\n      <ul>\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/about\">About</a></li>\n      </ul>\n    </nav>\n  </header>\n\n  <main>\n    <article>\n      <h1>Page Title"
        },
        {
          "language": "tsx",
          "line_count": 10,
          "complexity": "simple",
          "code": "// \u274c Bad: Skipping levels\n<h1>Page Title</h1>\n<h3>Subsection</h3>\n<h5>Detail</h5>\n\n// \u2705 Good: Proper hierarchy\n<h1>Page Title</h1>\n<h2>Section</h2>\n<h3>Subsection</h3>\n"
        },
        {
          "language": "tsx",
          "line_count": 6,
          "complexity": "simple",
          "code": "// \u274c Bad: ARIA on native element\n<div role=\"button\" tabIndex={0} onClick={...}>Click</div>\n\n// \u2705 Good: Native element\n<button onClick={...}>Click</button>\n"
        },
        {
          "language": "tsx",
          "line_count": 4,
          "complexity": "simple",
          "code": "<button aria-label=\"Close dialog\">\n  <XIcon />\n</button>\n"
        },
        {
          "language": "tsx",
          "line_count": 5,
          "complexity": "simple",
          "code": "<div role=\"dialog\" aria-labelledby=\"dialog-title\">\n  <h2 id=\"dialog-title\">Confirm Delete</h2>\n  ...\n</div>\n"
        },
        {
          "language": "tsx",
          "line_count": 6,
          "complexity": "simple",
          "code": "<input\n  type=\"password\"\n  aria-describedby=\"password-hint\"\n/>\n<p id=\"password-hint\">Must be at least 8 characters</p>\n"
        },
        {
          "language": "tsx",
          "line_count": 4,
          "complexity": "simple",
          "code": "<div aria-live=\"polite\" aria-atomic=\"true\">\n  {status}\n</div>\n"
        },
        {
          "language": "tsx",
          "line_count": 12,
          "complexity": "simple",
          "code": "<button\n  aria-expanded={isOpen}\n  aria-controls=\"dropdown-menu\"\n  onClick={() => setIsOpen(!isOpen)}\n>\n  Menu\n</button>\n<ul id=\"dropdown-menu\" hidden={!isOpen}>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</"
        },
        {
          "language": "tsx",
          "line_count": 3,
          "complexity": "simple",
          "code": "<span aria-hidden=\"true\">\u2605</span>\n<span className=\"sr-only\">5 stars</span>\n"
        },
        {
          "language": "tsx",
          "line_count": 16,
          "complexity": "simple",
          "code": "// Navigation landmark\n<nav role=\"navigation\">...</nav>\n\n// Search landmark\n<form role=\"search\">...</form>\n\n// Alert (announces to screen reader)\n<div role=\"alert\">Error: Form submission failed</div>\n"
        },
        {
          "language": "tsx",
          "line_count": 12,
          "complexity": "simple",
          "code": "// \u274c Bad: Breaking tab order with CSS\n<div style={{ display: 'flex', flexDirection: 'column-reverse' }}>\n  <button>Second (visually first)</button>\n  <button>First (visually second)</button>\n</div>\n\n/"
        },
        {
          "language": "tsx",
          "line_count": 8,
          "complexity": "simple",
          "code": "// 0 = Natural tab order\n<div tabIndex={0}>Focusable</div>\n\n// -1 = Programmatically focusable (not in tab order)\n<div tabIndex={-1}>Not in tab order</div>\n\n// Positive numbers = Custom tab order (avo"
        },
        {
          "language": "tsx",
          "line_count": 26,
          "complexity": "medium",
          "code": "function KeyboardAccessibleButton({ onClick, children }: {\n  onClick: () => void;\n  children: React.ReactNode;\n}) {\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' || e"
        },
        {
          "language": "tsx",
          "line_count": 70,
          "complexity": "complex",
          "code": "import { useEffect, useRef } from 'react';\n\nfunction Modal({ isOpen, onClose, children }: {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n}) {\n  const dialogRef = useRef<HTMLD"
        },
        {
          "language": "tsx",
          "line_count": 20,
          "complexity": "simple",
          "code": "// CSS approach\n<style>\n  .sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowra"
        },
        {
          "language": "tsx",
          "line_count": 24,
          "complexity": "medium",
          "code": "function Toast({ message }: { message: string }) {\n  return (\n    <div\n      role=\"status\"\n      aria-live=\"polite\"\n      aria-atomic=\"true\"\n    >\n      {message}\n    </div>\n  );\n}\n\nfunction ErrorAler"
        },
        {
          "language": "tsx",
          "line_count": 16,
          "complexity": "simple",
          "code": "// \u274c Bad: No label\n<input type=\"text\" placeholder=\"Email\" />\n\n// \u2705 Good: Explicit label\n<label htmlFor=\"email\">Email</label>\n<input id=\"email\" type=\"email\" />\n\n// \u2705 Good: Implicit label\n<label>\n  Emai"
        },
        {
          "language": "tsx",
          "line_count": 10,
          "complexity": "simple",
          "code": "// \u274c Bad: Insufficient contrast\n<div style={{ color: '#999', backgroundColor: '#fff' }}>\n  Text (2.8:1 - fails AA)\n</div>\n\n// \u2705 Good: Sufficient contrast\n<div style={{ color: '#767676', backgroundColo"
        },
        {
          "language": "tsx",
          "line_count": 9,
          "complexity": "simple",
          "code": "// \u274c Bad: Color only\n<span style={{ color: 'red' }}>Error</span>\n\n// \u2705 Good: Color + icon + text\n<span style={{ color: 'red' }}>\n  <ErrorIcon aria-hidden=\"true\" />\n  Error: Field is required\n</span>\n"
        },
        {
          "language": "tsx",
          "line_count": 12,
          "complexity": "simple",
          "code": "// \u274c Bad: Missing alt\n<img src=\"logo.png\" />\n\n// \u274c Bad: Redundant alt\n<img src=\"photo.jpg\" alt=\"Image of a photo\" />\n\n// \u2705 Good: Descriptive alt\n<img src=\"logo.png\" alt=\"Company Logo\" />\n\n// \u2705 Good: D"
        },
        {
          "language": "tsx",
          "line_count": 11,
          "complexity": "simple",
          "code": "<video controls>\n  <source src=\"video.mp4\" type=\"video/mp4\" />\n  <track\n    kind=\"captions\"\n    src=\"captions.vtt\"\n    srcLang=\"en\"\n    label=\"English\"\n    default\n  />\n</video>\n"
        },
        {
          "language": "tsx",
          "line_count": 9,
          "complexity": "simple",
          "code": "<button\n  type=\"button\"\n  onClick={handleClick}\n  disabled={isDisabled}\n  aria-label=\"Close dialog\"\n>\n  <XIcon aria-hidden=\"true\" />\n</button>\n"
        },
        {
          "language": "tsx",
          "line_count": 12,
          "complexity": "simple",
          "code": "// \u274c Bad: Non-descriptive link\n<a href=\"/report.pdf\">Click here</a>\n\n// \u2705 Good: Descriptive link\n<a href=\"/report.pdf\">Download 2025 Annual Report (PDF, 2MB)</a>\n\n// \u2705 Good: External link\n<a href=\"htt"
        },
        {
          "language": "tsx",
          "line_count": 39,
          "complexity": "complex",
          "code": "import { useState } from 'react';\n\nfunction Dropdown({ label, items }: {\n  label: string;\n  items: Array<{ id: string; label: string; onClick: () => void }>;\n}) {\n  const [isOpen, setIsOpen] = useStat"
        },
        {
          "language": "tsx",
          "line_count": 12,
          "complexity": "complex",
          "code": "// Jest + Testing Library\nimport { render } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\n\nexpect.extend(toHaveNoViolations);\n\ntest('should have no accessibility v"
        },
        {
          "language": "tsx",
          "line_count": 21,
          "complexity": "medium",
          "code": "// Button\n<button aria-label=\"Close\">\u00d7</button>\n\n// Toggle\n<button aria-pressed={isActive}>Toggle</button>\n\n// Expandable\n<button aria-expanded={isOpen} aria-controls=\"content\">Expand</button>\n\n// Liv"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com\""
        }
      ],
      "tools_mentioned": [
        "jest"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "27 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 78.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "networking/tailscale-vpn.md",
      "category": "networking",
      "skill_name": "tailscale-vpn",
      "frontmatter": {
        "name": "tailscale-vpn",
        "description": "Creating secure private networks (mesh VPN)"
      },
      "metrics": {
        "line_count": 433,
        "code_line_count": 206,
        "code_examples": 23,
        "external_refs": 9,
        "tools_mentioned": 6,
        "config_snippets": 3
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# macOS\nbrew install tailscale\n\n# Ubuntu/Debian\ncurl -fsSL https://tailscale.com/install.sh | sh\n\n# Docker\ndocker pull tailscale/tailscale\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Start tailscale\nsudo tailscale up\n\n# Authenticate (opens browser)\n# Follow link to authenticate with your account\n\n# Check status\ntailscale status\n\n# Get your IP\ntailscale ip -4\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# On machine A\ntailscale up\n# Gets IP: 100.64.0.1\n\n# On machine B\ntailscale up\n# Gets IP: 100.64.0.2\n\n# Now machines can reach each other\n# From A: ping 100.64.0.2\n# From B: ping 100.64.0.1\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Traditional SSH (need to configure firewalls, ports)\nssh user@public-ip-address\n\n# Tailscale SSH (just works)\nssh user@100.64.0.2\n\n# Enable Tailscale SSH (simpler auth)\ntailscale up --ssh\n\n# Then SS"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "# Run web service on 100.64.0.1:8000\n# Accessible from any tailscale device at http://100.64.0.1:8000\n\n# Example: Flask app\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "# PostgreSQL on machine A (100.64.0.1)\n# Start postgres listening on tailscale IP\n\n# From machine B\nimport psycopg2\n\nconn = psycopg2.connect(\n    host=\"100.64.0.1\",  # Tailscale IP\n    port=5432,\n    "
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "complex",
          "code": "# Enable MagicDNS in Tailscale admin console\n\n# Now use machine names\nssh user@machine-name\n\n# In code\nimport requests\nresponse = requests.get(\"http://api-server:8000/data\")\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "# Python example with MagicDNS\nimport psycopg2\n\n# Use machine name instead of IP\nconn = psycopg2.connect(\n    host=\"postgres-server\",  # MagicDNS name\n    database=\"mydb\"\n)\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# On gateway machine with access to 192.168.1.0/24\ntailscale up --advertise-routes=192.168.1.0/24\n\n# Approve route in admin console\n\n# Now other tailscale machines can access 192.168.1.*\nping 192.168."
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Enable IP forwarding\necho 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Advertise Docker network\ntailscale up --advertise-routes=172.17.0.0/16\n\n# Access containers from "
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# On exit node machine\ntailscale up --advertise-exit-node\n\n# On client machine\ntailscale up --exit-node=exit-node-name\n\n# Now all traffic routes through exit node\ncurl ifconfig.me  # Shows exit node's"
        },
        {
          "language": "json",
          "line_count": 29,
          "complexity": "medium",
          "code": "// In Tailscale admin console > Access Controls\n{\n  \"acls\": [\n    // Allow devs to access staging\n    {\n      \"action\": \"accept\",\n      \"src\": [\"group:devs\"],\n      \"dst\": [\"tag:staging:*\"]\n    },\n\n  "
        },
        {
          "language": "dockerfile",
          "line_count": 16,
          "complexity": "simple",
          "code": "FROM ubuntu:22.04\n\n# Install Tailscale\nRUN apt-get update && apt-get install -y \\\n    curl \\\n    iptables \\\n    iproute2\n\nRUN curl -fsSL https://tailscale.com/install.sh | sh\n\n# Your app\nCOPY app.py /"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Run with auth key\ndocker run -e TAILSCALE_AUTH_KEY=tskey-auth-xxx my-app\n"
        },
        {
          "language": "yaml",
          "line_count": 25,
          "complexity": "medium",
          "code": "version: '3.8'\n\nservices:\n  app:\n    image: myapp\n    environment:\n      - DATABASE_HOST=postgres-server  # MagicDNS name\n    depends_on:\n      - tailscale\n\n  tailscale:\n    image: tailscale/tailscale"
        },
        {
          "language": "yaml",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Install Tailscale operator\nkubectl apply -f https://github.com/tailscale/tailscale/releases/latest/download/operator.yaml\n\n# Expose service via Tailscale\napiVersion: v1\nkind: Service\nmetadata:\n  nam"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# On dev server (100.64.0.5)\n# Run services normally on localhost\n\n# On laptop\n# Add to /etc/hosts or use MagicDNS\n# 100.64.0.5  dev-server\n\n# Access services\ncurl http://dev-server:3000    # React de"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# AWS EC2 instance\ntailscale up --advertise-routes=10.0.0.0/16\n\n# GCP instance\ntailscale up --advertise-routes=10.1.0.0/16\n\n# On-prem\ntailscale up --advertise-routes=192.168.1.0/24\n\n# All networks can"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Generate auth keys in admin console with:\n# - Expiration date\n# - Tags for ACL enforcement\n# - One-time use (for ephemeral nodes)\n\n# Use environment variables\nexport TAILSCALE_AUTH_KEY=tskey-auth-xx"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Enable in admin console\n# All users required to use MFA for authentication\n\n# Enforce key expiry\n# Set device authorization expiry\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# List all peers\ntailscale status\n\n# Show detailed peer info\ntailscale status --peers\n\n# Check routes\ntailscale status --peers --active\n\n# Test connectivity\ntailscale ping peer-name\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c BAD - Exposed to entire internet\napp.run(host='0.0.0.0', port=8000)\n\n# \u2705 GOOD - Only on Tailscale\napp.run(host='100.64.0.1', port=8000)\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c BAD - Reusing same key\nexport SHARED_KEY=tskey-auth-xxx\n\n# \u2705 GOOD - Generate unique keys\n# Use one-time keys for each deployment\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://tailscale.com/install.sh"
        },
        {
          "type": "external",
          "url": "http://100.64.0.1:8000"
        },
        {
          "type": "external",
          "url": "http://api-server:8000/data\""
        },
        {
          "type": "external",
          "url": "http://172.17.0.2:8000"
        },
        {
          "type": "external",
          "url": "https://tailscale.com/install.sh"
        },
        {
          "type": "github",
          "url": "https://github.com/tailscale/tailscale/releases/latest/download/operator.yaml"
        },
        {
          "type": "external",
          "url": "http://dev-server:3000"
        },
        {
          "type": "external",
          "url": "http://dev-server:8000"
        },
        {
          "type": "external",
          "url": "http://192.168.1.100"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "postgresql",
        "tls",
        "postgres",
        "ssl",
        "docker"
      ],
      "config_snippets": [
        "json",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml, json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "23 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 78.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "frontend/react-data-fetching.md",
      "category": "frontend",
      "skill_name": "react-data-fetching",
      "frontmatter": {
        "name": "frontend-react-data-fetching",
        "description": "Fetching data from APIs"
      },
      "metrics": {
        "line_count": 716,
        "code_line_count": 165,
        "code_examples": 24,
        "external_refs": 2,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "tsx",
          "line_count": 2,
          "complexity": "simple",
          "code": "const [isOpen, setIsOpen] = useState(false);\n"
        },
        {
          "language": "tsx",
          "line_count": 2,
          "complexity": "simple",
          "code": "const { data: posts } = useSWR('/api/posts');\n"
        },
        {
          "language": "tsx",
          "line_count": 13,
          "complexity": "complex",
          "code": "import useSWR from 'swr';\n\nconst fetcher = (url: string) => fetch(url).then(res => res.json());\n\nfunction Profile() {\n  const { data, error, isLoading } = useSWR('/api/user', fetcher);\n\n  if (isLoadin"
        },
        {
          "language": "tsx",
          "line_count": 21,
          "complexity": "complex",
          "code": "// app/layout.tsx or _app.tsx\nimport { SWRConfig } from 'swr';\n\nconst fetcher = (url: string) => fetch(url).then(res => {\n  if (!res.ok) throw new Error('API error');\n  return res.json();\n});\n\nexport "
        },
        {
          "language": "tsx",
          "line_count": 25,
          "complexity": "medium",
          "code": "function UpdateProfile() {\n  const { data: user, mutate } = useSWR('/api/user', fetcher);\n\n  const updateName = async (newName: string) => {\n    // Optimistic update\n    mutate({ ...user, name: newNam"
        },
        {
          "language": "tsx",
          "line_count": 16,
          "complexity": "simple",
          "code": "function UserPosts({ userId }: { userId: string }) {\n  // First fetch user\n  const { data: user } = useSWR(`/api/users/${userId}`, fetcher);\n\n  // Then fetch user's posts (only when user is loaded)\n  "
        },
        {
          "language": "tsx",
          "line_count": 22,
          "complexity": "medium",
          "code": "function PostList() {\n  const [page, setPage] = useState(1);\n\n  const { data, isLoading } = useSWR(\n    `/api/posts?page=${page}&limit=10`,\n    fetcher\n  );\n\n  return (\n    <div>\n      {data?.posts.ma"
        },
        {
          "language": "tsx",
          "line_count": 31,
          "complexity": "complex",
          "code": "import useSWRInfinite from 'swr/infinite';\n\nfunction InfinitePostList() {\n  const getKey = (pageIndex: number, previousPageData: any) => {\n    // Reached the end\n    if (previousPageData && !previousP"
        },
        {
          "language": "tsx",
          "line_count": 24,
          "complexity": "complex",
          "code": "import { useQuery } from '@tanstack/react-query';\n\nfunction Posts() {\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['posts'],\n    queryFn: async () => {\n      const res = await fetch("
        },
        {
          "language": "tsx",
          "line_count": 25,
          "complexity": "complex",
          "code": "// app/providers.tsx\n'use client';\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport { useState } f"
        },
        {
          "language": "tsx",
          "line_count": 31,
          "complexity": "complex",
          "code": "import { useMutation, useQueryClient } from '@tanstack/react-query';\n\nfunction CreatePost() {\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation({\n    mutationFn: async (newPost: "
        },
        {
          "language": "tsx",
          "line_count": 45,
          "complexity": "medium",
          "code": "function UpdatePost({ post }: { post: Post }) {\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation({\n    mutationFn: async (updatedPost: Post) => {\n      const res = await fetch(`"
        },
        {
          "language": "tsx",
          "line_count": 34,
          "complexity": "medium",
          "code": "function PaginatedPosts() {\n  const [page, setPage] = useState(1);\n\n  const { data, isLoading, isPlaceholderData } = useQuery({\n    queryKey: ['posts', page],\n    queryFn: async () => {\n      const re"
        },
        {
          "language": "tsx",
          "line_count": 37,
          "complexity": "complex",
          "code": "import { useInfiniteQuery } from '@tanstack/react-query';\n\nfunction InfinitePosts() {\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n  } = useInfiniteQuery({\n    query"
        },
        {
          "language": "tsx",
          "line_count": 29,
          "complexity": "complex",
          "code": "// app/actions.ts\n'use server';\n\nimport { revalidatePath } from 'next/cache';\n\nexport async function createPost(formData: FormData) {\n  const title = formData.get('title') as string;\n  const content ="
        },
        {
          "language": "tsx",
          "line_count": 29,
          "complexity": "complex",
          "code": "// app/components/SubmitButton.tsx\n'use client';\n\nimport { useFormStatus } from 'react-dom';\n\nexport function SubmitButton() {\n  const { pending } = useFormStatus();\n\n  return (\n    <button type=\"subm"
        },
        {
          "language": "tsx",
          "line_count": 36,
          "complexity": "complex",
          "code": "// app/actions.ts\n'use server';\n\nexport async function createPost(prevState: any, formData: FormData) {\n  const title = formData.get('title') as string;\n  const content = formData.get('content') as st"
        },
        {
          "language": "tsx",
          "line_count": 7,
          "complexity": "simple",
          "code": "// Return stale data immediately, revalidate in background\nconst { data } = useSWR('/api/posts', fetcher, {\n  revalidateOnFocus: true,    // Revalidate when window regains focus\n  revalidateOnReconnec"
        },
        {
          "language": "tsx",
          "line_count": 9,
          "complexity": "simple",
          "code": "const { data } = useQuery({\n  queryKey: ['posts'],\n  queryFn: fetchPosts,\n  staleTime: 5 * 60 * 1000,    // 5 minutes before stale\n  cacheTime: 10 * 60 * 1000,   // 10 minutes in cache\n  refetchOnWind"
        },
        {
          "language": "tsx",
          "line_count": 15,
          "complexity": "simple",
          "code": "// app/posts/page.tsx\nexport const revalidate = 60; // Revalidate every 60 seconds\n\nasync function getPosts() {\n  const res = await fetch('https://api.example.com/posts', {\n    next: { revalidate: 60 "
        },
        {
          "language": "tsx",
          "line_count": 24,
          "complexity": "complex",
          "code": "// app/actions.ts\n'use server';\n\nimport { revalidatePath, revalidateTag } from 'next/cache';\n\nexport async function createPost(data: any) {\n  await prisma.post.create({ data });\n\n  // Revalidate speci"
        },
        {
          "language": "tsx",
          "line_count": 6,
          "complexity": "simple",
          "code": "const { data, error, isLoading, mutate } = useSWR(key, fetcher, options);\n\n// Mutate\nmutate(newData, false); // Optimistic\nmutate();               // Revalidate\n"
        },
        {
          "language": "tsx",
          "line_count": 10,
          "complexity": "simple",
          "code": "const { data, error, isLoading } = useQuery({\n  queryKey: ['key'],\n  queryFn: fetchFn,\n});\n\nconst mutation = useMutation({\n  mutationFn: createFn,\n  onSuccess: () => queryClient.invalidateQueries({ qu"
        },
        {
          "language": "tsx",
          "line_count": 9,
          "complexity": "simple",
          "code": "'use server';\nexport async function action(formData: FormData) {\n  // Mutation\n  revalidatePath('/path');\n}\n\n// Client\n<form action={action}>...</form>\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/posts'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/posts'"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "24 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "15 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 78.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "proxies/forward-proxy.md",
      "category": "proxies",
      "skill_name": "forward-proxy",
      "frontmatter": {
        "name": "proxies-forward-proxy",
        "description": "Forward proxy fundamentals including HTTP CONNECT, SOCKS protocols, authentication, and use cases for privacy, security, and access control"
      },
      "metrics": {
        "line_count": 610,
        "code_line_count": 142,
        "code_examples": 18,
        "external_refs": 27,
        "tools_mentioned": 4,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "http",
          "line_count": 9,
          "complexity": "simple",
          "code": "CONNECT example.com:443 HTTP/1.1\nHost: example.com:443\nProxy-Authorization: Basic dXNlcjpwYXNz\n\nHTTP/1.1 200 Connection Established\n\n[TLS handshake begins]\n[Encrypted data flows]\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "# \u274c Bad: Credentials in URL\nimport requests\n\nresponse = requests.get(\n    'http://api.example.com/data',\n    proxies={\n        'http': 'http://user:pass@proxy.corp.com:8080',\n        'https': 'http://"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "# \u2705 Good: Secure credential handling\nimport requests\nimport os\n\nproxies = {\n    'http': f'http://{os.environ[\"PROXY_HOST\"]}:{os.environ[\"PROXY_PORT\"]}',\n    'https': f'http://{os.environ[\"PROXY_HOST\"]"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "# \u274c Bad: DNS leaks\nimport requests\n\nproxies = {\n    'http': 'socks5://localhost:1080',\n    'https': 'socks5://localhost:1080'\n}\n\nresponse = requests.get('http://api.example.com/data', proxies=proxies)"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "# \u2705 Good: DNS through SOCKS proxy\nimport requests\n\nproxies = {\n    'http': 'socks5h://localhost:1080',  # 'h' = DNS through proxy\n    'https': 'socks5h://localhost:1080'\n}\n\nresponse = requests.get('ht"
        },
        {
          "language": "python",
          "line_count": 105,
          "complexity": "complex",
          "code": "import socket\nimport threading\nfrom typing import Tuple\n\nclass ForwardProxy:\n    def __init__(self, host: str = '0.0.0.0', port: int = 8888):\n        self.host = host\n        self.port = port\n        "
        },
        {
          "language": "go",
          "line_count": 63,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"fmt\"\n    \"golang.org/x/net/proxy\"\n    \"io\"\n    \"net\"\n    \"net/http\"\n    \"time\"\n)\n\nfunc main() {\n    // Create SOCKS5 dialer\n    dialer, err := proxy.SOCKS5(\"tcp\", \"localhos"
        },
        {
          "language": "typescript",
          "line_count": 35,
          "complexity": "complex",
          "code": "// Node.js HTTP request through proxy\nimport https from 'https';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\n\nconst proxyAgent = new HttpsProxyAgent({\n  host: 'proxy.example.com',\n  port: 808"
        },
        {
          "language": "typescript",
          "line_count": 17,
          "complexity": "complex",
          "code": "// Axios with proxy\nimport axios from 'axios';\n\nconst response = await axios.get('https://api.example.com/data', {\n  proxy: {\n    protocol: 'http',\n    host: 'proxy.example.com',\n    port: 8080,\n    a"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Environment variables\nexport http_proxy=\"http://proxy.example.com:8080\"\nexport https_proxy=\"http://proxy.example.com:8080\"\nexport no_proxy=\"localhost,127.0.0.1,*.local\"\n\n# With authentication\nexport"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# HTTP proxy\ngit config --global http.proxy http://proxy.example.com:8080\ngit config --global https.proxy http://proxy.example.com:8080\n\n# SOCKS5\ngit config --global http.proxy socks5://localhost:1080"
        },
        {
          "language": "json",
          "line_count": 11,
          "complexity": "simple",
          "code": "// ~/.docker/config.json\n{\n  \"proxies\": {\n    \"default\": {\n      \"httpProxy\": \"http://proxy.example.com:8080\",\n      \"httpsProxy\": \"http://proxy.example.com:8080\",\n      \"noProxy\": \"localhost,127.0.0."
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "# \u2705 Good: Fallback and retry logic\nimport requests\nfrom requests.exceptions import ProxyError, Timeout\n\ndef fetch_with_proxy(url: str, proxies: dict, retries: int = 3):\n    for attempt in range(retrie"
        },
        {
          "language": "javascript",
          "line_count": 15,
          "complexity": "simple",
          "code": "// PAC file for smart proxy routing\nfunction FindProxyForURL(url, host) {\n  // Direct for local addresses\n  if (isPlainHostName(host) ||\n      shExpMatch(host, \"*.local\") ||\n      isInNet(host, \"10.0."
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# \u2705 Good: Health check before use\nimport requests\n\ndef is_proxy_healthy(proxy_url: str) -> bool:\n    try:\n        response = requests.get(\n            'http://httpbin.org/ip',\n            proxies={'ht"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "complex",
          "code": "from urllib.parse import quote\n\nusername = \"user@domain\"\npassword = \"p@ss:word\"\n\nproxy = f\"http://{quote(username)}:{quote(password)}@proxy.example.com:8080\"\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "# Add proxy's CA certificate\nimport requests\n\nresponse = requests.get(\n    'https://api.example.com/data',\n    proxies={'https': 'http://proxy.example.com:8080'},\n    verify='/path/to/proxy-ca-bundle."
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "# Use connection pooling\nimport requests\nfrom requests.adapters import HTTPAdapter\n\nsession = requests.Session()\nadapter = HTTPAdapter(pool_connections=10, pool_maxsize=20)\nsession.mount('http://', ad"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "http://api.example.com/data'"
        },
        {
          "type": "external",
          "url": "http://user:pass@proxy.corp.com:8080'"
        },
        {
          "type": "external",
          "url": "http://user:pass@proxy.corp.com:8080'"
        },
        {
          "type": "external",
          "url": "http://{os.environ[\"PROXY_HOST\"]}:{os.environ[\"PROXY_PORT\"]}'"
        },
        {
          "type": "external",
          "url": "http://{os.environ[\"PROXY_HOST\"]}:{os.environ[\"PROXY_PORT\"]}'"
        },
        {
          "type": "example",
          "url": "http://api.example.com/data'"
        },
        {
          "type": "example",
          "url": "http://api.example.com/data'"
        },
        {
          "type": "example",
          "url": "http://api.example.com/data'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/data\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/data'"
        },
        {
          "type": "example",
          "url": "http://proxy.example.com:8080\""
        },
        {
          "type": "example",
          "url": "http://proxy.example.com:8080\""
        },
        {
          "type": "example",
          "url": "http://user:pass@proxy.example.com:8080\""
        },
        {
          "type": "example",
          "url": "http://user:pass@proxy.example.com:8080\""
        },
        {
          "type": "example",
          "url": "http://proxy.example.com:8080"
        },
        {
          "type": "example",
          "url": "http://proxy.example.com:8080"
        },
        {
          "type": "example",
          "url": "http://proxy.example.com:8080\""
        },
        {
          "type": "example",
          "url": "http://proxy.example.com:8080\""
        },
        {
          "type": "external",
          "url": "http://httpbin.org/ip'"
        },
        {
          "type": "example",
          "url": "http://proxy.example.com:8080\""
        },
        {
          "type": "external",
          "url": "http://{quote(username"
        },
        {
          "type": "example",
          "url": "https://api.example.com/data'"
        },
        {
          "type": "example",
          "url": "http://proxy.example.com:8080'}"
        },
        {
          "type": "external",
          "url": "http://'"
        },
        {
          "type": "external",
          "url": "https://'"
        },
        {
          "type": "example",
          "url": "http://proxy.example.com:8080'"
        },
        {
          "type": "example",
          "url": "http://proxy.example.com:8080'"
        }
      ],
      "tools_mentioned": [
        "ssl",
        "nginx",
        "docker",
        "tls"
      ],
      "config_snippets": [
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 78.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "database/orm-patterns.md",
      "category": "database",
      "skill_name": "orm-patterns",
      "frontmatter": {
        "name": "database-orm-patterns",
        "description": "Working with ORMs (SQLAlchemy, Prisma, GORM, Diesel)"
      },
      "metrics": {
        "line_count": 945,
        "code_line_count": 403,
        "code_examples": 58,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 5,
          "complexity": "complex",
          "code": "# SQLAlchemy: Enable query logging\nimport logging\nlogging.basicConfig()\nlogging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)\n"
        },
        {
          "language": "typescript",
          "line_count": 5,
          "complexity": "simple",
          "code": "// Prisma: Enable query logging\nconst prisma = new PrismaClient({\n  log: ['query', 'info', 'warn', 'error'],\n})\n"
        },
        {
          "language": "go",
          "line_count": 5,
          "complexity": "simple",
          "code": "// GORM: Enable query logging\ndb, err := gorm.Open(postgres.Open(dsn), &gorm.Config{\n  Logger: logger.Default.LogMode(logger.Info),\n})\n"
        },
        {
          "language": "rust",
          "line_count": 4,
          "complexity": "simple",
          "code": "// Diesel: No built-in logging, use diesel::debug_query\nlet query = users::table.filter(users::id.eq(1));\nprintln!(\"{}\", diesel::debug_query::<diesel::pg::Pg, _>(&query));\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c N+1 PROBLEM: 1 query for users + N queries for orders\nusers = session.query(User).all()  # 1 query\nfor user in users:\n    orders = user.orders  # N queries (lazy load)\n    print(f\"{user.name}: {le"
        },
        {
          "language": "typescript",
          "line_count": 9,
          "complexity": "simple",
          "code": "// \u274c N+1 PROBLEM\nconst users = await prisma.user.findMany();  // 1 query\nfor (const user of users) {\n  const orders = await prisma.order.findMany({  // N queries\n    where: { userId: user.id }\n  });\n "
        },
        {
          "language": "go",
          "line_count": 9,
          "complexity": "simple",
          "code": "// \u274c N+1 PROBLEM\nvar users []User\ndb.Find(&users)  // 1 query\nfor _, user := range users {\n    var orders []Order\n    db.Where(\"user_id = ?\", user.ID).Find(&orders)  // N queries\n    fmt.Printf(\"%s: %"
        },
        {
          "language": "rust",
          "line_count": 8,
          "complexity": "simple",
          "code": "// \u274c N+1 PROBLEM\nlet users = users::table.load::<User>(&mut conn)?;  // 1 query\nfor user in &users {\n    let orders = Order::belonging_to(user)  // N queries\n        .load::<Order>(&mut conn)?;\n    pr"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "from sqlalchemy.orm import joinedload\n\n# \u2705 SOLUTION: 1 query with LEFT OUTER JOIN\nusers = session.query(User).options(joinedload(User.orders)).all()\nfor user in users:\n    orders = user.orders  # No a"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "complex",
          "code": "from sqlalchemy.orm import selectinload\n\n# \u2705 SOLUTION: 2 queries total\nusers = session.query(User).options(selectinload(User.orders)).all()\n\n# Query 1: SELECT * FROM users\n# Query 2: SELECT * FROM ord"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "users = session.query(User).options(\n    selectinload(User.orders).selectinload(Order.items),  # Nested\n    joinedload(User.profile)  # Separate relationship\n).all()\n"
        },
        {
          "language": "typescript",
          "line_count": 19,
          "complexity": "simple",
          "code": "// \u2705 SOLUTION: Single operation with nested query\nconst users = await prisma.user.findMany({\n  include: {\n    orders: true,  // Load orders\n  }\n});\n\n// Or with nested includes\nconst users = await pris"
        },
        {
          "language": "typescript",
          "line_count": 14,
          "complexity": "simple",
          "code": "// Optimize by selecting only needed fields\nconst users = await prisma.user.findMany({\n  select: {\n    id: true,\n    name: true,\n    orders: {\n      select: {\n        id: true,\n        total: true,\n  "
        },
        {
          "language": "go",
          "line_count": 10,
          "complexity": "simple",
          "code": "// \u2705 SOLUTION: 2 queries total\nvar users []User\ndb.Preload(\"Orders\").Find(&users)\n\n// Query 1: SELECT * FROM users\n// Query 2: SELECT * FROM orders WHERE user_id IN (?, ?, ...)\n\n// Nested preload\ndb.P"
        },
        {
          "language": "go",
          "line_count": 7,
          "complexity": "simple",
          "code": "// \u2705 SOLUTION: 1 query with JOIN\nvar users []User\ndb.Joins(\"Orders\").Find(&users)\n\n// SELECT users.*, orders.* FROM users\n// LEFT JOIN orders ON orders.user_id = users.id\n"
        },
        {
          "language": "go",
          "line_count": 2,
          "complexity": "simple",
          "code": "db.Preload(\"Orders\", \"status = ?\", \"completed\").Find(&users)\n"
        },
        {
          "language": "rust",
          "line_count": 24,
          "complexity": "medium",
          "code": "use diesel::prelude::*;\n\n// \u2705 SOLUTION: 2 queries manually executed\nlet users = users::table.load::<User>(&mut conn)?;\nlet user_ids: Vec<i32> = users.iter().map(|u| u.id).collect();\n\n// Single query f"
        },
        {
          "language": "rust",
          "line_count": 8,
          "complexity": "simple",
          "code": "// Single query with JOIN\nlet results = users::table\n    .left_join(orders::table)\n    .select((User::as_select(), Option::<Order>::as_select()))\n    .load::<(User, Option<Order>)>(&mut conn)?;\n\n// Gr"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "from sqlalchemy.orm import Session\n\n# \u2705 Automatic commit/rollback\nwith Session(engine) as session:\n    user = User(name=\"Alice\")\n    session.add(user)\n    session.commit()  # Explicit commit\n\n# Or wit"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "session = Session(engine)\ntry:\n    user = User(name=\"Charlie\")\n    session.add(user)\n    session.commit()\nexcept Exception as e:\n    session.rollback()\n    raise\nfinally:\n    session.close()\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "with session.begin():\n    user = User(name=\"Dave\")\n    session.add(user)\n\n    with session.begin_nested():  # Savepoint\n        order = Order(user_id=user.id)\n        session.add(order)\n        # Roll"
        },
        {
          "language": "typescript",
          "line_count": 13,
          "complexity": "simple",
          "code": "// Automatically wrapped in transaction\nawait prisma.user.create({\n  data: {\n    name: \"Alice\",\n    orders: {\n      create: [\n        { total: 100 },\n        { total: 200 }\n      ]\n    }\n  }\n});\n"
        },
        {
          "language": "typescript",
          "line_count": 16,
          "complexity": "simple",
          "code": "// \u2705 Manual transaction for multiple operations\nawait prisma.$transaction(async (tx) => {\n  const user = await tx.user.create({\n    data: { name: \"Bob\" }\n  });\n\n  await tx.order.create({\n    data: {\n "
        },
        {
          "language": "typescript",
          "line_count": 6,
          "complexity": "simple",
          "code": "// All-or-nothing: all succeed or all rollback\nawait prisma.$transaction([\n  prisma.user.create({ data: { name: \"Charlie\" }}),\n  prisma.order.create({ data: { userId: 1, total: 100 }}),\n]);\n"
        },
        {
          "language": "typescript",
          "line_count": 11,
          "complexity": "simple",
          "code": "await prisma.$transaction(\n  async (tx) => {\n    // Transaction operations\n  },\n  {\n    isolationLevel: Prisma.TransactionIsolationLevel.Serializable,\n    maxWait: 5000,  // Wait up to 5 seconds\n    t"
        },
        {
          "language": "go",
          "line_count": 3,
          "complexity": "simple",
          "code": "// Single operation is atomic\ndb.Create(&User{Name: \"Alice\"})\n"
        },
        {
          "language": "go",
          "line_count": 20,
          "complexity": "simple",
          "code": "// \u2705 Explicit transaction\ntx := db.Begin()\ndefer func() {\n    if r := recover(); r != nil {\n        tx.Rollback()\n    }\n}()\n\nif err := tx.Create(&User{Name: \"Bob\"}).Error; err != nil {\n    tx.Rollback"
        },
        {
          "language": "go",
          "line_count": 13,
          "complexity": "simple",
          "code": "// \u2705 Auto rollback on error, commit on success\nerr := db.Transaction(func(tx *gorm.DB) error {\n    if err := tx.Create(&User{Name: \"Charlie\"}).Error; err != nil {\n        return err  // Rollback\n    }"
        },
        {
          "language": "go",
          "line_count": 9,
          "complexity": "simple",
          "code": "tx := db.Begin()\ntx.Create(&User{Name: \"Dave\"})\n\ntx.SavePoint(\"sp1\")\ntx.Create(&Order{UserID: 1})\ntx.RollbackTo(\"sp1\")  // Rollback to savepoint\n\ntx.Commit()  // User created, order not\n"
        },
        {
          "language": "rust",
          "line_count": 16,
          "complexity": "simple",
          "code": "use diesel::Connection;\n\n// \u2705 Explicit transaction\nconn.transaction::<_, diesel::result::Error, _>(|conn| {\n    diesel::insert_into(users::table)\n        .values(&new_user)\n        .execute(conn)?;\n\n "
        },
        {
          "language": "rust",
          "line_count": 15,
          "complexity": "simple",
          "code": "conn.transaction(|conn| {\n    diesel::insert_into(users::table)\n        .values(&new_user)\n        .execute(conn)?;\n\n    conn.transaction(|conn| {  // Savepoint\n        diesel::insert_into(orders::tab"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# \u2705 Efficient bulk insert\nusers = [\n    {\"name\": \"Alice\", \"email\": \"alice@example.com\"},\n    {\"name\": \"Bob\", \"email\": \"bob@example.com\"},\n    # ... 1000 more\n]\n\nsession.bulk_insert_mappings(User, user"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Update multiple rows at once\nsession.query(User).filter(User.status == \"pending\").update(\n    {\"status\": \"active\"},\n    synchronize_session=False  # Skip session sync for performance\n)\nsession.commi"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "session.query(User).filter(User.status == \"inactive\").delete()\nsession.commit()\n"
        },
        {
          "language": "typescript",
          "line_count": 10,
          "complexity": "simple",
          "code": "// \u2705 Efficient batch insert\nawait prisma.user.createMany({\n  data: [\n    { name: \"Alice\", email: \"alice@example.com\" },\n    { name: \"Bob\", email: \"bob@example.com\" },\n    // ... more\n  ],\n  skipDuplic"
        },
        {
          "language": "typescript",
          "line_count": 5,
          "complexity": "simple",
          "code": "await prisma.user.updateMany({\n  where: { status: \"pending\" },\n  data: { status: \"active\" },\n});\n"
        },
        {
          "language": "typescript",
          "line_count": 4,
          "complexity": "simple",
          "code": "await prisma.user.deleteMany({\n  where: { status: \"inactive\" },\n});\n"
        },
        {
          "language": "go",
          "line_count": 10,
          "complexity": "simple",
          "code": "// \u2705 Efficient batch insert\nusers := []User{\n    {Name: \"Alice\", Email: \"alice@example.com\"},\n    {Name: \"Bob\", Email: \"bob@example.com\"},\n    // ... more\n}\n\n// Insert in batches of 100\ndb.CreateInBat"
        },
        {
          "language": "go",
          "line_count": 9,
          "complexity": "simple",
          "code": "// Update all matching rows\ndb.Model(&User{}).Where(\"status = ?\", \"pending\").Update(\"status\", \"active\")\n\n// Or with map for multiple columns\ndb.Model(&User{}).Where(\"status = ?\", \"pending\").Updates(ma"
        },
        {
          "language": "rust",
          "line_count": 9,
          "complexity": "simple",
          "code": "// \u2705 Single INSERT with multiple VALUES\ndiesel::insert_into(users::table)\n    .values(&vec![\n        NewUser { name: \"Alice\", email: \"alice@example.com\" },\n        NewUser { name: \"Bob\", email: \"bob@e"
        },
        {
          "language": "rust",
          "line_count": 4,
          "complexity": "simple",
          "code": "diesel::update(users::table.filter(users::status.eq(\"pending\")))\n    .set(users::status.eq(\"active\"))\n    .execute(&mut conn)?;\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "# \u274c Loads all columns\nusers = session.query(User).all()\n\n# \u2705 Load specific columns\nusers = session.query(User.id, User.name).all()\n\n# Or with load_only\nfrom sqlalchemy.orm import load_only\nusers = ses"
        },
        {
          "language": "typescript",
          "line_count": 8,
          "complexity": "simple",
          "code": "// \u2705 Select specific fields\nconst users = await prisma.user.findMany({\n  select: {\n    id: true,\n    name: true,\n  }\n});\n"
        },
        {
          "language": "go",
          "line_count": 4,
          "complexity": "simple",
          "code": "// \u2705 Select specific columns\nvar users []User\ndb.Select(\"id\", \"name\").Find(&users)\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# \u2705 Efficient pagination\npage = 2\nper_page = 20\nusers = session.query(User).limit(per_page).offset((page - 1) * per_page).all()\n"
        },
        {
          "language": "typescript",
          "line_count": 7,
          "complexity": "simple",
          "code": "const page = 2;\nconst perPage = 20;\nconst users = await prisma.user.findMany({\n  skip: (page - 1) * perPage,\n  take: perPage,\n});\n"
        },
        {
          "language": "typescript",
          "line_count": 11,
          "complexity": "simple",
          "code": "const users = await prisma.user.findMany({\n  take: 20,\n  skip: 1,  // Skip the cursor itself\n  cursor: {\n    id: lastSeenId,\n  },\n  orderBy: {\n    id: 'asc',\n  },\n});\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "# \u274c Loads all rows\ncount = len(session.query(User).all())\n\n# \u2705 COUNT query\ncount = session.query(User).count()\n\n# Or with func.count\nfrom sqlalchemy import func\ncount = session.query(func.count(User.i"
        },
        {
          "language": "typescript",
          "line_count": 4,
          "complexity": "simple",
          "code": "const count = await prisma.user.count({\n  where: { status: \"active\" },\n});\n"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "from sqlalchemy import text\n\n# \u2705 Safe parameterized query\nresult = session.execute(\n    text(\"SELECT * FROM users WHERE email = :email\"),\n    {\"email\": \"alice@example.com\"}\n)\nusers = result.fetchall()"
        },
        {
          "language": "typescript",
          "line_count": 18,
          "complexity": "complex",
          "code": "import { Prisma } from '@prisma/client';\n\n// \u2705 Safe parameterized query (prevents SQL injection)\nconst users = await prisma.$queryRaw<User[]>`\n  SELECT * FROM users WHERE email = ${email}\n`;\n\n// For n"
        },
        {
          "language": "go",
          "line_count": 7,
          "complexity": "simple",
          "code": "// \u2705 Safe parameterized query\nvar users []User\ndb.Raw(\"SELECT * FROM users WHERE email = ?\", \"alice@example.com\").Scan(&users)\n\n// Execute non-SELECT\ndb.Exec(\"UPDATE users SET status = ? WHERE created"
        },
        {
          "language": "rust",
          "line_count": 8,
          "complexity": "simple",
          "code": "use diesel::sql_query;\nuse diesel::sql_types::Text;\n\n// \u2705 Safe parameterized query\nlet users = sql_query(\"SELECT * FROM users WHERE email = $1\")\n    .bind::<Text, _>(\"alice@example.com\")\n    .load::<U"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c Loads all data just to count\nusers = session.query(User).filter(User.status == \"active\").all()\ncount = len(users)\n\n# \u2705 Use COUNT\ncount = session.query(User).filter(User.status == \"active\").count()"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c N queries\nfor user in users:\n    user.status = \"active\"\n    session.commit()\n\n# \u2705 Batch update\nsession.query(User).filter(User.id.in_([u.id for u in users])).update(\n    {\"status\": \"active\"},\n    "
        },
        {
          "language": "typescript",
          "line_count": 10,
          "complexity": "simple",
          "code": "// \u274c No transaction (inconsistent state if error occurs)\nconst user = await prisma.user.create({ data: { name: \"Alice\" }});\nawait prisma.order.create({ data: { userId: user.id, total: 100 }});\n\n// \u2705 U"
        },
        {
          "language": "go",
          "line_count": 7,
          "complexity": "simple",
          "code": "// \u274c Loads all columns (wastes bandwidth)\nvar users []User\ndb.Find(&users)\n\n// \u2705 Select needed columns\ndb.Select(\"id\", \"name\", \"email\").Find(&users)\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# SQLAlchemy\nwith session.begin():\n    # operations\n\n# Prisma\nawait prisma.$transaction([...])\n\n# GORM\ndb.Transaction(func(tx *gorm.DB) error { ... })\n\n# Diesel\nconn.transaction(|conn| { ... })\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "58 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 77.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/leader-election.md",
      "category": "distributed-systems",
      "skill_name": "leader-election",
      "frontmatter": {
        "name": "distributed-systems-leader-election",
        "description": "Leader election algorithms including bully algorithm, ring algorithm, and consensus-based election with RAFT/Paxos"
      },
      "metrics": {
        "line_count": 416,
        "code_line_count": 66,
        "code_examples": 9,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 73,
          "complexity": "complex",
          "code": "import time\nimport threading\n\nclass BullyElection:\n    \"\"\"Bully algorithm for leader election\"\"\"\n\n    def __init__(self, node_id, all_nodes):\n        self.node_id = node_id\n        self.all_nodes = so"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "class RingElection:\n    \"\"\"Ring-based leader election\"\"\"\n\n    def __init__(self, node_id, next_node):\n        self.node_id = node_id\n        self.next_node = next_node  # Next node in ring\n        sel"
        },
        {
          "language": "python",
          "line_count": 72,
          "complexity": "complex",
          "code": "# Using etcd (RAFT-based)\nimport etcd3\nimport time\n\nclass ConsensusLeaderElection:\n    \"\"\"Leader election using etcd\"\"\"\n\n    def __init__(self, node_id):\n        self.node_id = node_id\n        self.et"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "class QuorumElection:\n    \"\"\"Elect leader only with majority quorum\"\"\"\n\n    def __init__(self, node_id, all_nodes):\n        self.node_id = node_id\n        self.all_nodes = all_nodes\n        self.quoru"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "class ActivePassiveService:\n    \"\"\"Service with leader election\"\"\"\n\n    def __init__(self, node_id):\n        self.node_id = node_id\n        self.election = ConsensusLeaderElection(node_id)\n\n    def ru"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "class DistributedCron:\n    \"\"\"Only leader executes scheduled jobs\"\"\"\n\n    def __init__(self, node_id, schedule):\n        self.election = ConsensusLeaderElection(node_id)\n        self.schedule = schedu"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "# Leader includes generation/term number\nclass FencedLeader:\n    def __init__(self):\n        self.generation = 0\n\n    def become_leader(self):\n        self.generation += 1\n        return self.generati"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "class GracefulLeader:\n    def do_leader_work(self):\n        while self.is_leader:\n            try:\n                work()\n            except LeadershipLostError:\n                self.cleanup()\n       "
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Lease expires if leader crashes\n# Prevents indefinite wait for crashed leader\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "etcd"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 77.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/crdt-fundamentals.md",
      "category": "distributed-systems",
      "skill_name": "crdt-fundamentals",
      "frontmatter": {
        "name": "distributed-systems-crdt-fundamentals",
        "description": "Conflict-free Replicated Data Types (CRDTs) fundamentals including convergence, commutativity, and basic CRDT operations"
      },
      "metrics": {
        "line_count": 499,
        "code_line_count": 84,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "class GCounter:\n    \"\"\"Operation-based grow-only counter\"\"\"\n\n    def __init__(self, replica_id, n_replicas):\n        self.replica_id = replica_id\n        self.counts = [0] * n_replicas  # One count pe"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "class GCounterState:\n    \"\"\"State-based grow-only counter\"\"\"\n\n    def __init__(self, replica_id, n_replicas):\n        self.replica_id = replica_id\n        self.counts = [0] * n_replicas\n\n    def incre"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "class PNCounter:\n    \"\"\"Counter that can increment and decrement\"\"\"\n\n    def __init__(self, replica_id, n_replicas):\n        self.replica_id = replica_id\n        self.positive = GCounterState(replica_"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "class GSet:\n    \"\"\"Grow-only set (add-only)\"\"\"\n\n    def __init__(self):\n        self.elements = set()\n\n    def add(self, element):\n        self.elements.add(element)\n\n    def lookup(self, element):\n  "
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "class TwoPhaseSet:\n    \"\"\"Add and remove, but can't re-add after remove\"\"\"\n\n    def __init__(self):\n        self.added = set()\n        self.removed = set()\n\n    def add(self, element):\n        self.ad"
        },
        {
          "language": "python",
          "line_count": 61,
          "complexity": "complex",
          "code": "import time\nfrom typing import Dict\n\nclass DistributedCounter:\n    \"\"\"Production-ready distributed counter using PN-Counter CRDT\"\"\"\n\n    def __init__(self, replica_id: str, all_replicas: list):\n      "
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "def test_convergence():\n    \"\"\"Test that replicas converge regardless of merge order\"\"\"\n    r1 = GCounterState(0, 2)\n    r2 = GCounterState(1, 2)\n\n    r1.increment()\n    r1.increment()\n    r2.incremen"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "# Redis CRDT support (Redis Enterprise)\nimport redis\n\nr = redis.Redis()\n\n# CRDT Counter\nr.execute_command('CRDT.COUNTER', 'mykey', 'INC', 5)\n\n# CRDT Set\nr.execute_command('CRDT.ORADD', 'myset', 'eleme"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "# Riak KV with CRDTs\nfrom riak import RiakClient\n\nclient = RiakClient()\nbucket = client.bucket_type('maps').bucket('my_bucket')\n\n# Riak Map CRDT\nmy_map = bucket.new()\nmy_map.counters['page_views'].inc"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "import unittest\n\nclass TestCRDT(unittest.TestCase):\n    def test_commutativity(self):\n        \"\"\"Test merge is commutative\"\"\"\n        r1 = GCounterState(0, 2)\n        r2 = GCounterState(1, 2)\n\n       "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 77.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "frontend/react-state-management.md",
      "category": "frontend",
      "skill_name": "react-state-management",
      "frontmatter": {
        "name": "frontend-react-state-management",
        "description": "Choosing state management solution"
      },
      "metrics": {
        "line_count": 734,
        "code_line_count": 156,
        "code_examples": 22,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "tsx",
          "line_count": 2,
          "complexity": "simple",
          "code": "const [count, setCount] = useState(0);\n"
        },
        {
          "language": "tsx",
          "line_count": 2,
          "complexity": "simple",
          "code": "const theme = useContext(ThemeContext);\n"
        },
        {
          "language": "tsx",
          "line_count": 2,
          "complexity": "simple",
          "code": "const user = useStore(state => state.user);\n"
        },
        {
          "language": "tsx",
          "line_count": 2,
          "complexity": "simple",
          "code": "const { data: posts } = useSWR('/api/posts');\n"
        },
        {
          "language": "tsx",
          "line_count": 45,
          "complexity": "complex",
          "code": "// contexts/ThemeContext.tsx\nimport { createContext, useContext, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\nconst ThemeContext = createContext<{\n  theme: Theme;\n  setTheme: (theme: Them"
        },
        {
          "language": "tsx",
          "line_count": 40,
          "complexity": "medium",
          "code": "// Split context to prevent unnecessary re-renders\nconst UserContext = createContext<User | null>(null);\nconst UserActionsContext = createContext<{\n  login: (email: string, password: string) => void;\n"
        },
        {
          "language": "tsx",
          "line_count": 63,
          "complexity": "complex",
          "code": "// stores/useStore.ts\nimport { create } from 'zustand';\n\ninterface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\ninterface TodoStore {\n  todos: Todo[];\n  addTodo: (title: string) => v"
        },
        {
          "language": "tsx",
          "line_count": 6,
          "complexity": "simple",
          "code": "// \u274c Re-renders on any store change\nconst store = useTodoStore();\n\n// \u2705 Only re-renders when todos change\nconst todos = useTodoStore((state) => state.todos);\n"
        },
        {
          "language": "tsx",
          "line_count": 24,
          "complexity": "complex",
          "code": "import { create } from 'zustand';\nimport { immer } from 'zustand/middleware/immer';\n\ninterface Store {\n  nested: {\n    deeply: {\n      value: number;\n    };\n  };\n  increment: () => void;\n}\n\nconst useS"
        },
        {
          "language": "tsx",
          "line_count": 22,
          "complexity": "complex",
          "code": "import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface AuthStore {\n  user: User | null;\n  login: (user: User) => void;\n  logout: () => void;\n}\n\nexport const useAuth"
        },
        {
          "language": "tsx",
          "line_count": 36,
          "complexity": "complex",
          "code": "// stores/atoms.ts\nimport { atom } from 'jotai';\n\n// Primitive atoms\nexport const countAtom = atom(0);\nexport const userAtom = atom<User | null>(null);\n\n// Derived atoms (computed)\nexport const double"
        },
        {
          "language": "tsx",
          "line_count": 20,
          "complexity": "complex",
          "code": "import { atomFamily } from 'jotai/utils';\n\n// Create atoms dynamically by ID\nconst todoAtomFamily = atomFamily((id: string) =>\n  atom<Todo>({ id, title: '', completed: false })\n);\n\nfunction TodoItem({"
        },
        {
          "language": "tsx",
          "line_count": 4,
          "complexity": "complex",
          "code": "import { atomWithStorage } from 'jotai/utils';\n\nexport const themeAtom = atomWithStorage<'light' | 'dark'>('theme', 'light');\n"
        },
        {
          "language": "tsx",
          "line_count": 15,
          "complexity": "complex",
          "code": "// store/store.ts\nimport { configureStore } from '@reduxjs/toolkit';\nimport todosReducer from './todosSlice';\nimport userReducer from './userSlice';\n\nexport const store = configureStore({\n  reducer: {"
        },
        {
          "language": "tsx",
          "line_count": 43,
          "complexity": "complex",
          "code": "// store/todosSlice.ts\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\ninterface TodosState {\n  items: Todo[];\n"
        },
        {
          "language": "tsx",
          "line_count": 37,
          "complexity": "complex",
          "code": "// store/userSlice.ts\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const fetchUser = createAsyncThunk('user/fetch', async (userId: string) => {\n  const res = await fetch(`"
        },
        {
          "language": "tsx",
          "line_count": 24,
          "complexity": "complex",
          "code": "// hooks/redux.ts\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store/store';\n\nexport const useAppDispatch = () => useDi"
        },
        {
          "language": "tsx",
          "line_count": 25,
          "complexity": "medium",
          "code": "// Zustand\nconst useStore = create<Store>((set) => ({\n  todos: [],\n\n  toggleTodo: async (id: string) => {\n    // Optimistic update\n    set((state) => ({\n      todos: state.todos.map((todo) =>\n        "
        },
        {
          "language": "tsx",
          "line_count": 24,
          "complexity": "medium",
          "code": "interface Store {\n  data: Data[];\n  loading: boolean;\n  error: string | null;\n  fetch: () => Promise<void>;\n}\n\nconst useStore = create<Store>((set) => ({\n  data: [],\n  loading: false,\n  error: null,\n\n"
        },
        {
          "language": "tsx",
          "line_count": 25,
          "complexity": "medium",
          "code": "// Jotai - automatic memoization\nconst todosAtom = atom<Todo[]>([]);\nconst completedTodosAtom = atom((get) =>\n  get(todosAtom).filter((todo) => todo.completed)\n);\nconst activeTodosAtom = atom((get) =>"
        },
        {
          "language": "tsx",
          "line_count": 22,
          "complexity": "medium",
          "code": "// Before (Context)\nconst TodoContext = createContext<{\n  todos: Todo[];\n  addTodo: (title: string) => void;\n} | null>(null);\n\nfunction TodoProvider({ children }) {\n  const [todos, setTodos] = useStat"
        },
        {
          "language": "tsx",
          "line_count": 15,
          "complexity": "simple",
          "code": "// \u274c Bad: Entire store subscription\nconst store = useStore();\n\n// \u2705 Good: Selective subscription\nconst todos = useStore((state) => state.todos);\n\n// \u2705 Good: Multiple selectors\nconst addTodo = useStore"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "ssl"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "22 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "16 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 77.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "cryptography/cryptography-basics.md",
      "category": "cryptography",
      "skill_name": "cryptography-basics",
      "frontmatter": {
        "name": "cryptography-cryptography-basics",
        "description": "Cryptography fundamentals including symmetric/asymmetric encryption, hashing, signing, key exchange, and common algorithms"
      },
      "metrics": {
        "line_count": 614,
        "code_line_count": 125,
        "code_examples": 15,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "from cryptography.hazmat.primitives.ciphers.aead import AESGCM\nimport os\n\n# Generate key\nkey = AESGCM.generate_key(bit_length=256)\naesgcm = AESGCM(key)\n\n# Encrypt\nnonce = os.urandom(12)  # 96 bits for"
        },
        {
          "language": "go",
          "line_count": 48,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"crypto/aes\"\n    \"crypto/cipher\"\n    \"crypto/rand\"\n    \"io\"\n)\n\nfunc encrypt(key, plaintext []byte) ([]byte, error) {\n    block, err := aes.NewCipher(key)\n    if err != nil {"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "from cryptography.hazmat.primitives.asymmetric import rsa, padding\nfrom cryptography.hazmat.primitives import hashes\n\n# Generate key pair\nprivate_key = rsa.generate_private_key(\n    public_exponent=65"
        },
        {
          "language": "rust",
          "line_count": 15,
          "complexity": "simple",
          "code": "use ed25519_dalek::{Keypair, Signature, Signer, Verifier};\nuse rand::rngs::OsRng;\n\nfn main() {\n    let mut csprng = OsRng{};\n    let keypair: Keypair = Keypair::generate(&mut csprng);\n\n    // Sign\n   "
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "import hashlib\n\n# SHA-256\ndata = b\"Data to hash\"\nhash_digest = hashlib.sha256(data).hexdigest()\nprint(f\"SHA-256: {hash_digest}\")\n\n# BLAKE2b (faster)\nhash_digest = hashlib.blake2b(data).hexdigest()\npri"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "import bcrypt\n\n# Hash password\npassword = b\"user_password\"\nsalt = bcrypt.gensalt(rounds=12)  # Cost factor\nhashed = bcrypt.hashpw(password, salt)\n\n# Verify password\nif bcrypt.checkpw(password, hashed)"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "from argon2 import PasswordHasher\n\nph = PasswordHasher()\n\n# Hash password\nhashed = ph.hash(\"user_password\")\n\n# Verify password\ntry:\n    ph.verify(hashed, \"user_password\")\n    print(\"Password correct\")"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "import hashlib\n\npassword = b\"user_password\"\nsalt = os.urandom(16)\n\n# Hash with scrypt (memory-hard)\nkey = hashlib.scrypt(\n    password,\n    salt=salt,\n    n=2**14,  # CPU/memory cost\n    r=8,      # B"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "from cryptography.hazmat.primitives.asymmetric import rsa, padding\nfrom cryptography.hazmat.primitives import hashes\n\n# Generate key pair\nprivate_key = rsa.generate_private_key(\n    public_exponent=65"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "from cryptography.hazmat.primitives.asymmetric import dh\nfrom cryptography.hazmat.primitives import serialization\n\n# Generate parameters (can be reused)\nparameters = dh.generate_parameters(generator=2"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "import hmac\nimport hashlib\n\nkey = b\"shared_secret\"\nmessage = b\"Message to authenticate\"\n\n# Create MAC\nmac = hmac.new(key, message, hashlib.sha256).digest()\n\n# Verify MAC\ndef verify_mac(message, mac, k"
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "from cryptography.hazmat.primitives.ciphers.aead import AESGCM\nfrom cryptography.hazmat.primitives.asymmetric import rsa, padding\nfrom cryptography.hazmat.primitives import hashes\nimport os\n\ndef hybri"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "complex",
          "code": "# \u2705 Good: AES-GCM (includes authentication)\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\n\n# \u274c Bad: AES-CBC without MAC (vulnerable)\nfrom cryptography.hazmat.primitives.ciphers import"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "complex",
          "code": "# \u2705 Good: Cryptographically secure\nimport secrets\nkey = secrets.token_bytes(32)\n\n# \u274c Bad: Predictable\nimport random\nkey = random.randbytes(32)  # NOT cryptographically secure\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "complex",
          "code": "# \u2705 Good: Use established libraries\nfrom cryptography.fernet import Fernet\n\n# \u274c Bad: Roll your own crypto\ndef my_custom_encryption(data):\n    return bytes([b ^ 42 for b in data])  # Insecure!\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "tls"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "14 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 77.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "infrastructure/aws-serverless.md",
      "category": "infrastructure",
      "skill_name": "aws-serverless",
      "frontmatter": {
        "name": "infrastructure-aws-serverless",
        "description": "Building serverless APIs and backends"
      },
      "metrics": {
        "line_count": 777,
        "code_line_count": 135,
        "code_examples": 17,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 61,
          "complexity": "complex",
          "code": "# lambda_function.py\nimport json\nimport boto3\nimport os\nfrom datetime import datetime\n\n# Initialize clients outside handler for connection reuse\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb."
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "medium",
          "code": "# API Gateway REST API with Lambda proxy integration\ndef handler(event, context):\n    \"\"\"Handle different HTTP methods\"\"\"\n\n    http_method = event['httpMethod']\n    path = event['path']\n\n    # Route h"
        },
        {
          "language": "python",
          "line_count": 67,
          "complexity": "complex",
          "code": "import boto3\nfrom boto3.dynamodb.conditions import Key, Attr\nfrom decimal import Decimal\n\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('Users')\n\n# Put item\ndef create_user(user_id, ema"
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "import json\nimport urllib.parse\nimport boto3\n\ns3 = boto3.client('s3')\n\ndef lambda_handler(event, context):\n    \"\"\"Process S3 upload events\"\"\"\n\n    # Parse S3 event\n    for record in event['Records']:\n"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "# EventBridge integration\nimport boto3\n\nevents = boto3.client('events')\n\ndef publish_event(event_type, detail):\n    \"\"\"Publish custom event to EventBridge\"\"\"\n    response = events.put_events(\n        "
        },
        {
          "language": "json",
          "line_count": 66,
          "complexity": "complex",
          "code": "{\n  \"Comment\": \"Image processing workflow\",\n  \"StartAt\": \"ValidateImage\",\n  \"States\": {\n    \"ValidateImage\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:us-east-1:123456789012:function:V"
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "import boto3\nimport json\n\nsqs = boto3.client('sqs')\nQUEUE_URL = os.environ['QUEUE_URL']\n\ndef lambda_handler(event, context):\n    \"\"\"Process SQS messages in batch\"\"\"\n\n    for record in event['Records']"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "medium",
          "code": "def lambda_handler(event, context):\n    \"\"\"Process DynamoDB stream events\"\"\"\n\n    for record in event['Records']:\n        event_name = record['eventName']  # INSERT, MODIFY, REMOVE\n\n        if event_n"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "# layer/python/utils.py (shared utilities)\nimport boto3\nimport json\nfrom datetime import datetime\n\ndef get_secret(secret_name):\n    \"\"\"Retrieve secret from Secrets Manager\"\"\"\n    client = boto3.client"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "medium",
          "code": "# Lambda triggered by EventBridge schedule\ndef lambda_handler(event, context):\n    \"\"\"\n    Scheduled task that runs daily at 2 AM UTC\n    EventBridge rule: cron(0 2 * * ? *)\n    \"\"\"\n\n    print(f\"Sched"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "# Environment variables\nTABLE_NAME = os.environ['TABLE_NAME']\nREGION = os.environ['AWS_REGION']\n\n# Initialize clients outside handler\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table(TABLE"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Memory: 128 MB to 10,240 MB (affects CPU allocation)\n# Recommended: 1024 MB (good balance)\n\n# Timeout: 1 second to 15 minutes\n# Recommended: 30 seconds for API, 5 minutes for processing\n\n# Reserved "
        },
        {
          "language": "bash",
          "line_count": 27,
          "complexity": "medium",
          "code": "# Deploy Lambda function\naws lambda update-function-code \\\n  --function-name my-function \\\n  --zip-file fileb://function.zip\n\n# Invoke function\naws lambda invoke \\\n  --function-name my-function \\\n  --"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# \u274c NEVER: Store credentials in code\nAWS_ACCESS_KEY = \"AKIAIOSFODNN7EXAMPLE\"  # NEVER\n\n# \u2705 CORRECT: Use IAM roles and environment variables\n# Lambda execution role provides credentials automatically\n\n"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "# \u274c NEVER: Ignore Lambda timeouts\ndef lambda_handler(event, context):\n    # Long-running task without timeout handling\n    process_large_dataset()  # May timeout after 15 minutes\n\n# \u2705 CORRECT: Check r"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "medium",
          "code": "# \u274c Don't return large responses from API Gateway\ndef lambda_handler(event, context):\n    data = table.scan()  # Could be MB of data\n    return {\n        'statusCode': 200,\n        'body': json.dumps("
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "medium",
          "code": "# \u274c Don't use recursion for fan-out\ndef lambda_handler(event, context):\n    for item in items:\n        lambda_client.invoke(\n            FunctionName='process-item',\n            InvocationType='Event'"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "terraform"
      ],
      "config_snippets": [
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "14 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 77.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "frontend/nextjs-app-router.md",
      "category": "frontend",
      "skill_name": "nextjs-app-router",
      "frontmatter": {
        "name": "frontend-nextjs-app-router",
        "description": "Building Next.js 13+ applications"
      },
      "metrics": {
        "line_count": 764,
        "code_line_count": 191,
        "code_examples": 24,
        "external_refs": 1,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "tsx",
          "line_count": 13,
          "complexity": "simple",
          "code": "// app/layout.tsx\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}\n"
        },
        {
          "language": "tsx",
          "line_count": 5,
          "complexity": "simple",
          "code": "// app/page.tsx\nexport default function HomePage() {\n  return <h1>Home Page</h1>;\n}\n"
        },
        {
          "language": "tsx",
          "line_count": 5,
          "complexity": "simple",
          "code": "// app/dashboard/loading.tsx\nexport default function Loading() {\n  return <div>Loading dashboard...</div>;\n}\n"
        },
        {
          "language": "tsx",
          "line_count": 19,
          "complexity": "simple",
          "code": "// app/dashboard/error.tsx\n'use client'; // Must be Client Component\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string };\n  reset: () => void;\n}) {\n  return (\n"
        },
        {
          "language": "tsx",
          "line_count": 16,
          "complexity": "complex",
          "code": "// app/page.tsx (Server Component by default)\nimport { prisma } from '@/lib/prisma';\n\nexport default async function HomePage() {\n  // Fetch data directly in component\n  const users = await prisma.user"
        },
        {
          "language": "tsx",
          "line_count": 16,
          "complexity": "complex",
          "code": "// app/components/Counter.tsx\n'use client'; // Opt-in to Client Component\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n "
        },
        {
          "language": "tsx",
          "line_count": 16,
          "complexity": "complex",
          "code": "// app/page.tsx (Server Component)\nimport { prisma } from '@/lib/prisma';\nimport Counter from './components/Counter'; // Client Component\n\nexport default async function HomePage() {\n  const users = aw"
        },
        {
          "language": "tsx",
          "line_count": 27,
          "complexity": "complex",
          "code": "// app/components/ClientWrapper.tsx\n'use client';\n\nexport default function ClientWrapper({ children }: { children: React.ReactNode }) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <"
        },
        {
          "language": "tsx",
          "line_count": 27,
          "complexity": "medium",
          "code": "// app/layout.tsx (Root Layout)\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html>\n      <body>\n        <nav>Global Nav</nav>\n        {children}\n  "
        },
        {
          "language": "tsx",
          "line_count": 9,
          "complexity": "simple",
          "code": "// app/dashboard/template.tsx\nexport default function DashboardTemplate({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"fade-in\">\n      {children}\n    </div>\n  );\n}\n"
        },
        {
          "language": "tsx",
          "line_count": 5,
          "complexity": "simple",
          "code": "// app/blog/[slug]/page.tsx\nexport default function BlogPost({ params }: { params: { slug: string } }) {\n  return <h1>Post: {params.slug}</h1>;\n}\n"
        },
        {
          "language": "tsx",
          "line_count": 6,
          "complexity": "simple",
          "code": "// app/docs/[...slug]/page.tsx\nexport default function DocsPage({ params }: { params: { slug: string[] } }) {\n  // /docs/a/b/c -> params.slug = ['a', 'b', 'c']\n  return <h1>Docs: {params.slug.join(' >"
        },
        {
          "language": "tsx",
          "line_count": 21,
          "complexity": "medium",
          "code": "// app/layout.tsx\nexport default function Layout({\n  children,\n  analytics,\n  team,\n}: {\n  children: React.ReactNode;\n  analytics: React.ReactNode;\n  team: React.ReactNode;\n}) {\n  return (\n    <div>\n "
        },
        {
          "language": "tsx",
          "line_count": 21,
          "complexity": "medium",
          "code": "// app/posts/page.tsx\nasync function getPosts() {\n  const res = await fetch('https://api.example.com/posts', {\n    next: { revalidate: 3600 } // Cache for 1 hour\n  });\n  if (!res.ok) throw new Error('"
        },
        {
          "language": "tsx",
          "line_count": 9,
          "complexity": "simple",
          "code": "// Static (cached forever, revalidate on build)\nfetch(url, { cache: 'force-cache' })\n\n// Dynamic (no cache, fetch on every request)\nfetch(url, { cache: 'no-store' })\n\n// Revalidate (cache, revalidate "
        },
        {
          "language": "tsx",
          "line_count": 30,
          "complexity": "complex",
          "code": "// app/dashboard/page.tsx\nimport { Suspense } from 'react';\n\nasync function Analytics() {\n  const data = await fetchAnalytics(); // Slow\n  return <div>Analytics: {data.value}</div>;\n}\n\nasync function "
        },
        {
          "language": "tsx",
          "line_count": 31,
          "complexity": "complex",
          "code": "// app/actions.ts\n'use server';\n\nimport { revalidatePath } from 'next/cache';\n\nexport async function createPost(formData: FormData) {\n  const title = formData.get('title') as string;\n  const content ="
        },
        {
          "language": "tsx",
          "line_count": 26,
          "complexity": "complex",
          "code": "// app/components/PostForm.tsx\n'use client';\n\nimport { useFormStatus } from 'react-dom';\nimport { createPost } from '@/app/actions';\n\nfunction SubmitButton() {\n  const { pending } = useFormStatus();\n\n"
        },
        {
          "language": "tsx",
          "line_count": 15,
          "complexity": "complex",
          "code": "'use server';\n\nimport { revalidatePath, revalidateTag } from 'next/cache';\n\nexport async function updatePost(id: string, data: any) {\n  await prisma.post.update({ where: { id }, data });\n\n  // Revalid"
        },
        {
          "language": "tsx",
          "line_count": 17,
          "complexity": "complex",
          "code": "// app/page.tsx\nimport type { Metadata } from 'next';\n\nexport const metadata: Metadata = {\n  title: 'Home Page',\n  description: 'Welcome to our site',\n  openGraph: {\n    title: 'Home Page',\n    descri"
        },
        {
          "language": "tsx",
          "line_count": 23,
          "complexity": "complex",
          "code": "// app/posts/[slug]/page.tsx\nimport type { Metadata } from 'next';\n\nexport async function generateMetadata(\n  { params }: { params: { slug: string } }\n): Promise<Metadata> {\n  const post = await getPo"
        },
        {
          "language": "tsx",
          "line_count": 14,
          "complexity": "complex",
          "code": "// app/api/users/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\n\nexport async function GET(request: NextRequest) {\n  const users = await prisma.user.findMany();\n  return NextRespons"
        },
        {
          "language": "tsx",
          "line_count": 17,
          "complexity": "complex",
          "code": "// middleware.ts\nimport { NextRequest, NextResponse } from 'next/server';\n\nexport function middleware(request: NextRequest) {\n  const token = request.cookies.get('token');\n\n  if (!token && request.nex"
        },
        {
          "language": "tsx",
          "line_count": 12,
          "complexity": "simple",
          "code": "// Static (build time)\nfetch(url, { cache: 'force-cache' })\n\n// Dynamic (every request)\nfetch(url, { cache: 'no-store' })\n\n// Revalidate (time-based)\nfetch(url, { next: { revalidate: 60 } })\n\n// Reval"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/posts'"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "24 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "15 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 76.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "security/input-validation.md",
      "category": "security",
      "skill_name": "input-validation",
      "frontmatter": {
        "name": "security-input-validation",
        "description": "Input validation and sanitization patterns to prevent SQL injection, XSS, command injection, and other input-based attacks"
      },
      "metrics": {
        "line_count": 659,
        "code_line_count": 119,
        "code_examples": 15,
        "external_refs": 1,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "\"\"\"\nMulti-layer validation strategy:\n1. Client-side: UX feedback (not security)\n2. Schema validation: Type and format checking\n3. Business logic: Domain-specific rules\n4. Sanitization: Clean dangerous"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "import sqlite3\n\n# \u274c NEVER DO THIS - SQL Injection vulnerable\ndef get_user_vulnerable(username: str):\n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n\n    # Attacker input: \"admin' OR"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "medium",
          "code": "# \u2705 CORRECT - Parameterized queries (prepared statements)\ndef get_user_safe(username: str):\n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n\n    # Database driver handles escaping\n  "
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "from sqlalchemy import create_engine, Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nBase = declarative_base()\n\nclass User(Bas"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "medium",
          "code": "# \u26a0\ufe0f When you must build dynamic queries\ndef search_with_filters(filters: dict):\n    \"\"\"Safe dynamic query construction\"\"\"\n    query = \"SELECT * FROM users WHERE 1=1\"\n    params = []\n\n    # Whitelist "
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Reflected XSS - Input immediately reflected in response\n@app.get(\"/search\")\ndef search(q: str):\n    # \u274c VULNERABLE\n    return f\"<h1>Search results for: {q}</h1>\"\n\n    # Attack: q = \"<script>alert('X"
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "import html\nfrom markupsafe import escape\nfrom bleach import clean\n\n# Strategy 1: HTML Escaping (for text content)\ndef display_user_content_safe(content: str) -> str:\n    \"\"\"\u2705 Escape HTML entities\"\"\"\n"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "# FastAPI with Jinja2 (auto-escaping enabled)\nfrom fastapi import FastAPI\nfrom fastapi.templating import Jinja2Templates\n\napp = FastAPI()\ntemplates = Jinja2Templates(directory=\"templates\", autoescape="
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "import os\nimport subprocess\n\n# \u274c NEVER DO THIS - Command injection vulnerable\ndef ping_host_vulnerable(hostname: str):\n    command = f\"ping -c 4 {hostname}\"\n    os.system(command)\n\n# Attack: hostname "
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "import subprocess\nimport shlex\nfrom pathlib import Path\n\n# \u2705 CORRECT - Use list arguments (no shell)\ndef ping_host_safe(hostname: str):\n    \"\"\"Safe command execution\"\"\"\n    # Validate hostname format\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "from flask import send_file\n\n# \u274c VULNERABLE - Path traversal\n@app.get(\"/download\")\ndef download_file(filename: str):\n    return send_file(f\"/uploads/{filename}\")\n\n# Attack: filename = \"../../etc/passw"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "from pathlib import Path\nfrom flask import send_file, abort\n\nUPLOAD_DIR = Path(\"/var/app/uploads\").resolve()\n\n@app.get(\"/download\")\ndef download_file_safe(filename: str):\n    \"\"\"\u2705 Prevent path travers"
        },
        {
          "language": "python",
          "line_count": 71,
          "complexity": "complex",
          "code": "from werkzeug.utils import secure_filename\nimport magic  # python-magic library\nfrom pathlib import Path\nimport uuid\n\nUPLOAD_FOLDER = Path(\"/var/app/uploads\")\nMAX_FILE_SIZE = 5 * 1024 * 1024  # 5 MB\nA"
        },
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "from pydantic import BaseModel, Field, validator\nfrom typing import Optional\nimport re\n\nclass CreateUserRequest(BaseModel):\n    username: str = Field(min_length=3, max_length=32)\n    email: str\n    pa"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "from enum import Enum\n\nclass SortOrder(Enum):\n    ASC = \"asc\"\n    DESC = \"desc\"\n\nclass SortField(Enum):\n    NAME = \"name\"\n    EMAIL = \"email\"\n    CREATED_AT = \"created_at\"\n\n@app.get(\"/users\")\ndef list"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://cdn.example.com"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "15 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 76.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/probabilistic-data-structures.md",
      "category": "distributed-systems",
      "skill_name": "probabilistic-data-structures",
      "frontmatter": {
        "name": "distributed-systems-probabilistic-data-structures",
        "description": "Probabilistic data structures including Bloom filters, HyperLogLog, Count-Min Sketch for space-efficient approximations"
      },
      "metrics": {
        "line_count": 385,
        "code_line_count": 64,
        "code_examples": 8,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "import hashlib\n\nclass BloomFilter:\n    \"\"\"Space-efficient probabilistic set\"\"\"\n\n    def __init__(self, size=1000, num_hashes=3):\n        self.size = size\n        self.num_hashes = num_hashes\n        s"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "class CachedStore:\n    def __init__(self):\n        self.cache = {}\n        self.bloom = BloomFilter(size=10000)\n\n    def get(self, key):\n        # Quick check with Bloom filter\n        if not self.blo"
        },
        {
          "language": "python",
          "line_count": 75,
          "complexity": "complex",
          "code": "import hashlib\nimport math\n\nclass HyperLogLog:\n    \"\"\"Cardinality estimation\"\"\"\n\n    def __init__(self, precision=14):\n        self.precision = precision\n        self.m = 1 << precision  # 2^precision"
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "import hashlib\n\nclass CountMinSketch:\n    \"\"\"Frequency estimation\"\"\"\n\n    def __init__(self, width=1000, depth=7):\n        self.width = width\n        self.depth = depth\n        self.table = [[0] * wid"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Large set, only need membership test\nuser_blacklist = BloomFilter(size=1000000)\n\nif user_blacklist.contains(user_id):\n    # Might be blacklisted - check database\n    if database.is_blacklisted(user_"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Count unique items in stream\nunique_visitors = HyperLogLog()\n\nfor request in request_stream:\n    unique_visitors.add(request.user_id)\n\nprint(f\"DAU: {unique_visitors.cardinality()}\")\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Track frequency, find heavy hitters\nrequest_counts = CountMinSketch()\n\nfor request in request_stream:\n    request_counts.add(request.endpoint)\n\n# Find most frequent endpoints\ntop_endpoints = [(e, re"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# HyperLogLog for unique counting\nPFADD unique_visitors user:123\nPFCOUNT unique_visitors  # Approximate count\n\n# Bloom filter (via RedisBloom module)\nBF.ADD bloom_filter \"item\"\nBF.EXISTS bloom_filter "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 76.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "debugging/network-debugging.md",
      "category": "debugging",
      "skill_name": "network-debugging",
      "frontmatter": {
        "name": "debugging-network-debugging",
        "description": "Network debugging with tcpdump, Wireshark, curl, DNS tools, SSL/TLS inspection, and network tracing utilities"
      },
      "metrics": {
        "line_count": 631,
        "code_line_count": 105,
        "code_examples": 13,
        "external_refs": 42,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 70,
          "complexity": "complex",
          "code": "# 1. Basic verbose output\ncurl -v https://api.example.com/users\n# Shows:\n# - Request headers\n# - Response headers\n# - SSL handshake\n# - HTTP version\n\n# 2. Show only headers (no body)\ncurl -I https://a"
        },
        {
          "language": "bash",
          "line_count": 61,
          "complexity": "complex",
          "code": "# 1. Capture all traffic on interface\nsudo tcpdump -i eth0\n\n# 2. Capture traffic on any interface\nsudo tcpdump -i any\n\n# 3. Capture traffic to/from specific host\nsudo tcpdump host api.example.com\n\n# 4"
        },
        {
          "language": "bash",
          "line_count": 57,
          "complexity": "complex",
          "code": "# 1. dig (recommended for debugging)\ndig api.example.com\n\n# Show only answer section\ndig api.example.com +short\n\n# Query specific record type\ndig api.example.com A      # IPv4 address\ndig api.example."
        },
        {
          "language": "bash",
          "line_count": 51,
          "complexity": "complex",
          "code": "# 1. Test SSL connection\nopenssl s_client -connect api.example.com:443\n\n# 2. Show certificate details\nopenssl s_client -connect api.example.com:443 -showcerts\n\n# 3. Test with SNI (Server Name Indicati"
        },
        {
          "language": "bash",
          "line_count": 75,
          "complexity": "complex",
          "code": "# 1. strace - Trace system calls (network operations)\n# Trace all syscalls for process\nstrace -p <pid>\n\n# Trace only network syscalls\nstrace -e trace=network -p <pid>\n# Shows: socket, connect, bind, l"
        },
        {
          "language": "bash",
          "line_count": 57,
          "complexity": "complex",
          "code": "# 1. ping - Basic connectivity test\nping api.example.com\nping -c 4 api.example.com  # Send 4 packets\n\n# Test with custom packet size\nping -s 1000 api.example.com\n\n# Flood ping (requires root, testing "
        },
        {
          "language": "bash",
          "line_count": 35,
          "complexity": "medium",
          "code": "# 1. Inspect request headers\ncurl -v https://api.example.com/users 2>&1 | grep '^>'\n\n# 2. Inspect response headers\ncurl -v https://api.example.com/users 2>&1 | grep '^<'\n\n# 3. Common headers to check\n"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Install essential tools (Ubuntu/Debian)\nsudo apt-get update && sudo apt-get install -y \\\n  curl wget netcat-openbsd \\\n  dnsutils net-tools iproute2 \\\n  tcpdump wireshark-cli \\\n  mtr traceroute nmap "
        },
        {
          "language": "bash",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Protocol\ntcpdump tcp\ntcpdump udp\ntcpdump icmp\n\n# Host\ntcpdump host api.example.com\ntcpdump src 192.168.1.10\ntcpdump dst 10.0.0.5\n\n# Port\ntcpdump port 443\ntcpdump portrange 8000-9000\n\n# Combinations\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: Disabling SSL verification\ncurl -k https://api.example.com  # Security risk!\n\n# CORRECT: Fix certificate issue\n# Check cert: openssl s_client -connect api.example.com:443\n# Update CA bundle o"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: ICMP may be blocked\nping api.example.com  # Firewall may block ICMP\n\n# CORRECT: HTTP health check\ncurl -f https://api.example.com/health\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: Unbounded tcpdump\nsudo tcpdump -i any -w /tmp/capture.pcap  # Fills disk!\n\n# CORRECT: Limit capture\nsudo tcpdump -i any -c 1000 -w /tmp/capture.pcap  # 1000 packets\nsudo tcpdump -i any -G 60 "
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Missing SNI\nopenssl s_client -connect api.example.com:443\n\n# CORRECT: Include SNI\nopenssl s_client -connect api.example.com:443 -servername api.example.com\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://self-signed.example.com"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/posts"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com"
        },
        {
          "type": "example",
          "url": "https://api.example.com'"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://example.com\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com/users"
        },
        {
          "type": "example",
          "url": "https://api.example.com`"
        },
        {
          "type": "example",
          "url": "https://api.example.com`"
        },
        {
          "type": "example",
          "url": "https://api.example.com`"
        },
        {
          "type": "example",
          "url": "https://example.com`"
        },
        {
          "type": "example",
          "url": "https://api.example.com`"
        },
        {
          "type": "example",
          "url": "https://api.example.com`"
        },
        {
          "type": "example",
          "url": "https://api.example.com`"
        },
        {
          "type": "example",
          "url": "https://self-signed.example.com`"
        },
        {
          "type": "example",
          "url": "https://api.example.com`"
        },
        {
          "type": "example",
          "url": "https://api.example.com"
        },
        {
          "type": "example",
          "url": "https://api.example.com/health"
        }
      ],
      "tools_mentioned": [
        "ssl",
        "openssl",
        "tls"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 76.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "proxies/nginx-configuration.md",
      "category": "proxies",
      "skill_name": "nginx-configuration",
      "frontmatter": {
        "name": "proxies-nginx-configuration",
        "description": "Nginx configuration including server blocks, locations, upstreams, caching, SSL/TLS, security headers, and performance optimization"
      },
      "metrics": {
        "line_count": 693,
        "code_line_count": 165,
        "code_examples": 17,
        "external_refs": 19,
        "tools_mentioned": 3,
        "config_snippets": 15
      },
      "code_examples": [
        {
          "language": "nginx",
          "line_count": 30,
          "complexity": "medium",
          "code": "# Main context\nuser nginx;\nworker_processes auto;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    # HTTP context\n    include mime.types;\n    default_type application/octet-stream;\n\n    upstream b"
        },
        {
          "language": "nginx",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u274c Bad: Minimal configuration\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://localhost:8080;\n    }\n}\n"
        },
        {
          "language": "nginx",
          "line_count": 35,
          "complexity": "medium",
          "code": "# \u2705 Good: Complete proxy configuration\nupstream backend {\n    server 127.0.0.1:8080;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name example.com;\n\n    # Logging\n    access_log /var/log/ng"
        },
        {
          "language": "nginx",
          "line_count": 42,
          "complexity": "medium",
          "code": "server {\n    listen 80;\n    server_name example.com;\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name example.com;\n\n    # SSL certificates\n    ssl_certif"
        },
        {
          "language": "nginx",
          "line_count": 37,
          "complexity": "medium",
          "code": "# Define cache zone\nproxy_cache_path /var/cache/nginx/api\n    levels=1:2\n    keys_zone=api_cache:10m\n    max_size=1g\n    inactive=60m\n    use_temp_path=off;\n\nupstream backend {\n    server 127.0.0.1:80"
        },
        {
          "language": "nginx",
          "line_count": 25,
          "complexity": "medium",
          "code": "# 1. Exact match (highest priority)\nlocation = /exact {\n    return 200 \"Exact match\";\n}\n\n# 2. Preferential prefix match\nlocation ^~ /images/ {\n    root /var/www;\n}\n\n# 3. Regex match (case-sensitive)\nl"
        },
        {
          "language": "nginx",
          "line_count": 33,
          "complexity": "medium",
          "code": "# Static files\nlocation /static/ {\n    alias /var/www/static/;\n    expires 1y;\n    add_header Cache-Control \"public, immutable\";\n}\n\n# SPA fallback\nlocation / {\n    try_files $uri $uri/ /index.html;\n}\n"
        },
        {
          "language": "nginx",
          "line_count": 37,
          "complexity": "medium",
          "code": "# Round-robin (default)\nupstream backend {\n    server backend1.internal:8080;\n    server backend2.internal:8080;\n    server backend3.internal:8080;\n}\n\n# Least connections\nupstream backend {\n    least_"
        },
        {
          "language": "nginx",
          "line_count": 60,
          "complexity": "complex",
          "code": "user nginx;\nworker_processes auto;\nworker_rlimit_nofile 65535;\nerror_log /var/log/nginx/error.log warn;\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections 4096;\n    use epoll;\n    multi_accept o"
        },
        {
          "language": "nginx",
          "line_count": 107,
          "complexity": "complex",
          "code": "# /etc/nginx/sites-available/example.com\n\nupstream app_backend {\n    least_conn;\n    server app1.internal:8080 max_fails=3 fail_timeout=30s;\n    server app2.internal:8080 max_fails=3 fail_timeout=30s;"
        },
        {
          "language": "nginx",
          "line_count": 29,
          "complexity": "medium",
          "code": "# Define rate limit zones\nlimit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;\nlimit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;\nlimit_req_zone $binary_remote_addr zone=search:10m ra"
        },
        {
          "language": "nginx",
          "line_count": 28,
          "complexity": "medium",
          "code": "# Allow specific IPs\ngeo $allowed_ip {\n    default 0;\n    10.0.0.0/8 1;\n    172.16.0.0/12 1;\n    192.168.0.0/16 1;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name admin.example.com;\n\n    locatio"
        },
        {
          "language": "nginx",
          "line_count": 18,
          "complexity": "simple",
          "code": "upstream backend {\n    server backend1.internal:8080;\n    server backend2.internal:8080;\n\n    # Keep 32 idle connections to each backend\n    keepalive 32;\n    keepalive_requests 100;\n    keepalive_tim"
        },
        {
          "language": "nginx",
          "line_count": 10,
          "complexity": "simple",
          "code": "location ~* \\.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {\n    root /var/www/static;\n    expires 1y;\n    add_header Cache-Control \"public, immutable\";\n    access_log off;\n\n    # Gzip for co"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Check nginx error log\ntail -f /var/log/nginx/error.log\n\n# Test backend connectivity\ncurl http://backend1.internal:8080/health\n\n# Check nginx configuration\nnginx -t\n\n# Reload configuration\nnginx -s r"
        },
        {
          "language": "nginx",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Increase timeouts\nproxy_connect_timeout 10s;\nproxy_read_timeout 60s;\n\n# Add backup server\nupstream backend {\n    server backend1.internal:8080;\n    server backup.internal:8080 backup;\n}\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Test configuration syntax\nnginx -t\n\n# Detailed configuration dump\nnginx -T\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "example",
          "url": "http://localhost:8080"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "https://$host$request_uri"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://backend/"
        },
        {
          "type": "external",
          "url": "http://websocket_backend"
        },
        {
          "type": "external",
          "url": "https://$host$request_uri"
        },
        {
          "type": "external",
          "url": "http://app_backend/"
        },
        {
          "type": "external",
          "url": "http://app_backend"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "external",
          "url": "http://backend1.internal:8080/health"
        }
      ],
      "tools_mentioned": [
        "ssl",
        "nginx",
        "tls"
      ],
      "config_snippets": [
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx",
        "nginx"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (nginx), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 76.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "protocols/quic-protocol.md",
      "category": "protocols",
      "skill_name": "quic-protocol",
      "frontmatter": {
        "name": "protocols-quic-protocol",
        "description": "QUIC protocol deep dive including transport layer, streams, connection ID, loss recovery, and congestion control"
      },
      "metrics": {
        "line_count": 371,
        "code_line_count": 62,
        "code_examples": 8,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "go",
          "line_count": 18,
          "complexity": "complex",
          "code": "import \"github.com/lucas-clemente/quic-go\"\n\n// Open bidirectional stream\nstream, err := session.OpenStreamSync(ctx)\nif err != nil {\n    return err\n}\n\n// Send data\n_, err = stream.Write([]byte(\"Hello Q"
        },
        {
          "language": "rust",
          "line_count": 29,
          "complexity": "medium",
          "code": "use std::time::{Duration, Instant};\n\nstruct QUICLossDetection {\n    rtt: Duration,\n    rttvar: Duration,\n    pto_count: u32,\n}\n\nimpl QUICLossDetection {\n    fn calculate_pto(&self) -> Duration {\n     "
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "class QUICCongestionControl:\n    def __init__(self):\n        self.cwnd = 10 * MTU  # Congestion window\n        self.ssthresh = float('inf')  # Slow start threshold\n        self.in_recovery = False\n\n  "
        },
        {
          "language": "rust",
          "line_count": 25,
          "complexity": "medium",
          "code": "use quiche::Config;\n\n// Custom QUIC application\nasync fn custom_protocol() -> Result<()> {\n    let mut config = Config::new(quiche::PROTOCOL_VERSION)?;\n    config.set_application_protos(b\"\\x0cmyapp-pr"
        },
        {
          "language": "go",
          "line_count": 16,
          "complexity": "simple",
          "code": "func handleConnectionMigration(conn quic.Connection) {\n    // Monitor path changes\n    go func() {\n        for {\n            select {\n            case <-conn.Context().Done():\n                return\n "
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "import asyncio\nfrom aioquic.asyncio import serve\nfrom aioquic.quic.configuration import QuicConfiguration\n\nclass MyQUICProtocol:\n    def __init__(self, scope):\n        self.scope = scope\n\n    async de"
        },
        {
          "language": "rust",
          "line_count": 4,
          "complexity": "simple",
          "code": "// \u2705 Good: Support connection ID rotation\nconfig.set_max_idle_timeout(30_000);  // 30s\nconfig.set_max_connection_id_lifetime(10_000);  // Rotate every 10s\n"
        },
        {
          "language": "go",
          "line_count": 10,
          "complexity": "simple",
          "code": "// \u274c Bad: Non-idempotent operation in 0-RTT\nif conn.ConnectionState().Used0RTT {\n    processPayment()  // Could be replayed!\n}\n\n// \u2705 Good: Only idempotent operations\nif conn.ConnectionState().Used0RTT"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "tls"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 76.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "containers/docker-compose-development.md",
      "category": "containers",
      "skill_name": "docker-compose-development",
      "frontmatter": {
        "name": "containers-docker-compose-development",
        "description": "Setting up local development environments"
      },
      "metrics": {
        "line_count": 848,
        "code_line_count": 376,
        "code_examples": 46,
        "external_refs": 7,
        "tools_mentioned": 7,
        "config_snippets": 33
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "docker compose up       # Start all services\ndocker compose down     # Stop and remove containers\ndocker compose logs     # View logs\ndocker compose ps       # List running containers\n"
        },
        {
          "language": "yaml",
          "line_count": 42,
          "complexity": "medium",
          "code": "version: '3.8'\n\nservices:\n  web:\n    image: nginx:alpine\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./html:/usr/share/nginx/html\n    networks:\n      - frontend\n\n  api:\n    build: ./api\n    port"
        },
        {
          "language": "yaml",
          "line_count": 18,
          "complexity": "simple",
          "code": "services:\n  app:\n    image: myapp:latest        # Pre-built image\n    build: ./app               # Build from Dockerfile\n    container_name: my_app     # Custom container name\n    ports:              "
        },
        {
          "language": "yaml",
          "line_count": 4,
          "complexity": "simple",
          "code": "services:\n  app:\n    build: ./app        # Dockerfile in ./app directory\n"
        },
        {
          "language": "yaml",
          "line_count": 11,
          "complexity": "simple",
          "code": "services:\n  app:\n    build:\n      context: ./app              # Build context\n      dockerfile: Dockerfile.dev  # Custom Dockerfile name\n      args:                       # Build arguments\n        - N"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "services:\n  app:\n    environment:\n      - DEBUG=true\n      - API_KEY=secret123\n"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "services:\n  app:\n    env_file:\n      - .env\n      - .env.local\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "DEBUG=true\nDATABASE_URL=postgres://localhost/mydb\nAPI_KEY=secret123\n"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "services:\n  app:\n    image: myapp:${TAG:-latest}     # Default to 'latest'\n    environment:\n      - DATABASE_URL=${DATABASE_URL}\n"
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "services:\n  web:\n    ports:\n      - \"8080:80\"          # Host 8080 \u2192 Container 80\n      - \"443:443\"\n      - \"127.0.0.1:3000:3000\"  # Bind to localhost only\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "services:\n  api:\n    expose:\n      - \"3000\"   # Accessible to other services, not host\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "services:\n  web:\n    ports:\n      - \"8080\"   # Docker assigns random host port\n"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "services:\n  db:\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:    # Docker manages storage\n"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "services:\n  app:\n    volumes:\n      - ./app:/app              # Sync local code\n      - ./config:/etc/config:ro # Read-only\n"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "services:\n  app:\n    tmpfs:\n      - /tmp\n      - /run\n"
        },
        {
          "language": "yaml",
          "line_count": 15,
          "complexity": "simple",
          "code": "volumes:\n  postgres_data:\n    driver: local\n    driver_opts:\n      type: none\n      o: bind\n      device: /path/on/host\n\n  nfs_data:\n    driver: local\n    driver_opts:\n      type: nfs\n      o: addr=19"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "services:\n  app:\n    volumes:\n      - ./app:/app:delegated     # Performance over consistency\n      - ./logs:/logs:cached      # Container writes prioritized\n"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "services:\n  web:\n    # Automatically joins 'default' network\n  api:\n    # Can reach 'web' via hostname 'web'\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Inside 'api' container\ncurl http://web:80\n"
        },
        {
          "language": "yaml",
          "line_count": 18,
          "complexity": "simple",
          "code": "services:\n  web:\n    networks:\n      - frontend\n\n  api:\n    networks:\n      - frontend\n      - backend\n\n  db:\n    networks:\n      - backend   # Isolated from 'web'\n\nnetworks:\n  frontend:\n  backend:\n"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "services:\n  api:\n    networks:\n      frontend:\n        aliases:\n          - api-server\n          - backend-api\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "curl http://api:3000\ncurl http://api-server:3000\ncurl http://backend-api:3000\n"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "networks:\n  existing-network:\n    external: true   # Use existing network\n\nservices:\n  app:\n    networks:\n      - existing-network\n"
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "networks:\n  frontend:\n    driver: bridge    # Default (single host)\n\n  overlay:\n    driver: overlay   # Multi-host (Swarm)\n\n  host:\n    driver: host      # Use host network (no isolation)\n"
        },
        {
          "language": "yaml",
          "line_count": 12,
          "complexity": "simple",
          "code": "services:\n  api:\n    depends_on:\n      - db\n      - redis\n\n  db:\n    image: postgres:16\n\n  redis:\n    image: redis:7\n"
        },
        {
          "language": "yaml",
          "line_count": 15,
          "complexity": "simple",
          "code": "services:\n  db:\n    image: postgres:16\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n      start_period: 30s\n\n  api:\n    d"
        },
        {
          "language": "yaml",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Postgres\ntest: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n\n# MySQL\ntest: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]\n\n# Redis\ntest: [\"CMD\", \"redis-cli\", \"ping\"]\n\n# HTTP endpoint\ntest: [\"CMD\", \"cur"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "services:\n  api:\n    depends_on:\n      - db\n    restart: on-failure\n    environment:\n      - DB_RETRY_ATTEMPTS=10\n      - DB_RETRY_DELAY=5\n"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "import time\nimport psycopg2\n\ndef connect_with_retry(max_attempts=10, delay=5):\n    for attempt in range(max_attempts):\n        try:\n            conn = psycopg2.connect(DATABASE_URL)\n            return"
        },
        {
          "language": "yaml",
          "line_count": 50,
          "complexity": "medium",
          "code": "version: '3.8'\n\nservices:\n  web:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DATABASE_URL=postgres://user:pass@db:5432/mydb\n      - REDIS_URL=redis://redis:6379\n    depends_on"
        },
        {
          "language": "yaml",
          "line_count": 47,
          "complexity": "medium",
          "code": "version: '3.8'\n\nservices:\n  frontend:\n    build: ./frontend\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./frontend:/app\n      - /app/node_modules\n    environment:\n      - REACT_APP_API_URL=htt"
        },
        {
          "language": "yaml",
          "line_count": 17,
          "complexity": "simple",
          "code": "version: '3.8'\n\nservices:\n  app:\n    build:\n      context: .\n      target: development   # Multi-stage build\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./src:/app/src:delegated      # Sync so"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Start all services (attached)\ndocker compose up\n\n# Start in background (detached)\ndocker compose up -d\n\n# Start specific services\ndocker compose up web db\n\n# Rebuild images\ndocker compose up --build"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# All services\ndocker compose logs\n\n# Follow logs\ndocker compose logs -f\n\n# Specific service\ndocker compose logs web\n\n# Last N lines\ndocker compose logs --tail=100 web\n\n# Timestamps\ndocker compose log"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Execute command in running container\ndocker compose exec web sh\n\n# Run one-off command (new container)\ndocker compose run web npm test\n\n# Run without starting dependencies\ndocker compose run --no-de"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# List running containers\ndocker compose ps\n\n# List all containers (including stopped)\ndocker compose ps -a\n\n# Show service configuration\ndocker compose config\n\n# Validate compose file\ndocker compose "
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "version: '3.8'\nservices:\n  app:\n    image: myapp:latest\n    ports:\n      - \"8000:8000\"\n"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "version: '3.8'\nservices:\n  app:\n    build: .\n    volumes:\n      - ./src:/app/src\n    environment:\n      - DEBUG=true\n"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "version: '3.8'\nservices:\n  app:\n    image: myapp:v1.2.3\n    restart: always\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Development (auto-loads override)\ndocker compose up\n\n# Production\ndocker compose -f docker-compose.yml -f docker-compose.prod.yml up\n"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "services:\n  web:\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n"
        },
        {
          "language": "yaml",
          "line_count": 11,
          "complexity": "simple",
          "code": "services:\n  app:\n    deploy:\n      resources:\n        limits:\n          cpus: '1.0'\n          memory: 512M\n        reservations:\n          cpus: '0.5'\n          memory: 256M\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Ensure services on same network\ndocker compose config | grep networks\n\n# Verify DNS\ndocker compose exec web ping api\n"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "services:\n  app:\n    user: \"${UID}:${GID}\"\n    volumes:\n      - ./data:/data\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Set in .env\nUID=1000\nGID=1000\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Find process\nlsof -i :8080\n\n# Kill process\nkill -9 <PID>\n\n# Or use different port\n# ports: - \"8081:8080\"\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://web:80"
        },
        {
          "type": "external",
          "url": "http://api:3000"
        },
        {
          "type": "external",
          "url": "http://api-server:3000"
        },
        {
          "type": "external",
          "url": "http://backend-api:3000"
        },
        {
          "type": "example",
          "url": "http://localhost:8080/health\"]"
        },
        {
          "type": "example",
          "url": "http://localhost:8000"
        },
        {
          "type": "example",
          "url": "http://localhost:8000/health\"]"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "postgresql",
        "nginx",
        "postgres",
        "redis",
        "mysql",
        "docker"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "46 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 75.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/crdt-types.md",
      "category": "distributed-systems",
      "skill_name": "crdt-types",
      "frontmatter": {
        "name": "distributed-systems-crdt-types",
        "description": "Specific CRDT implementations including LWW-Register, OR-Set, RGA, and collaborative text editing CRDTs"
      },
      "metrics": {
        "line_count": 549,
        "code_line_count": 73,
        "code_examples": 9,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "import time\n\nclass LWWRegister:\n    \"\"\"Last-Write-Wins Register\"\"\"\n\n    def __init__(self, replica_id):\n        self.replica_id = replica_id\n        self.value = None\n        self.timestamp = 0\n\n    d"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "from typing import Set, Tuple\n\nclass MVRegister:\n    \"\"\"Multi-Value Register (keeps concurrent values)\"\"\"\n\n    def __init__(self, replica_id):\n        self.replica_id = replica_id\n        self.values "
        },
        {
          "language": "python",
          "line_count": 59,
          "complexity": "complex",
          "code": "import uuid\nfrom typing import Set, Tuple\n\nclass ORSet:\n    \"\"\"Observed-Remove Set\"\"\"\n\n    def __init__(self):\n        self.elements = {}  # element \u2192 set of unique IDs\n\n    def add(self, element):\n  "
        },
        {
          "language": "python",
          "line_count": 77,
          "complexity": "complex",
          "code": "import uuid\nfrom typing import Optional\n\nclass RGANode:\n    def __init__(self, value, timestamp, replica_id):\n        self.id = (timestamp, replica_id, str(uuid.uuid4()))\n        self.value = value\n  "
        },
        {
          "language": "python",
          "line_count": 72,
          "complexity": "complex",
          "code": "import random\n\nclass LogootPosition:\n    \"\"\"Position identifier between existing positions\"\"\"\n\n    def __init__(self, identifiers):\n        self.identifiers = identifiers  # List of (int, replica_id)\n"
        },
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "class YjsChar:\n    def __init__(self, char, clock, client_id):\n        self.char = char\n        self.id = (client_id, clock)\n        self.left_id = None  # ID of left neighbor\n        self.right_id = "
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "class ORMap:\n    \"\"\"Map with OR-Set semantics for keys\"\"\"\n\n    def __init__(self):\n        self.keys = ORSet()  # Keys as OR-Set\n        self.values = {}     # key \u2192 CRDT value\n\n    def set(self, key,"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "class RGAWithGC(RGA):\n    def garbage_collect(self, min_vector_clock):\n        \"\"\"Remove tombstones that all replicas have seen\"\"\"\n        self.nodes = {\n            nid: node for nid, node in self.no"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "class CompressedRGA:\n    \"\"\"RGA with run-length compression\"\"\"\n\n    def __init__(self, replica_id):\n        self.replica_id = replica_id\n        self.runs = []  # List of (values, id, prev_id)\n\n    de"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 75.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/conflict-resolution.md",
      "category": "distributed-systems",
      "skill_name": "conflict-resolution",
      "frontmatter": {
        "name": "distributed-systems-conflict-resolution",
        "description": "Conflict resolution strategies including Last-Write-Wins, multi-value, semantic resolution, and application-specific merge functions"
      },
      "metrics": {
        "line_count": 441,
        "code_line_count": 85,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "import time\n\nclass LWWRegister:\n    \"\"\"Last-Write-Wins with timestamps\"\"\"\n\n    def __init__(self):\n        self.value = None\n        self.timestamp = 0\n\n    def write(self, value, timestamp=None):\n   "
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "class MultiValueRegister:\n    \"\"\"Keep concurrent values as siblings\"\"\"\n\n    def __init__(self):\n        self.values = {}  # vector_clock \u2192 value\n\n    def write(self, value, vector_clock):\n        \"\"\"W"
        },
        {
          "language": "python",
          "line_count": 63,
          "complexity": "complex",
          "code": "class ShoppingCart:\n    \"\"\"Shopping cart with semantic merge\"\"\"\n\n    def __init__(self):\n        self.items = {}  # item_id \u2192 (quantity, add_timestamp, remove_timestamp)\n\n    def add_item(self, item_i"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "class Counter:\n    \"\"\"Counter with commutative merge\"\"\"\n\n    def __init__(self, replica_id):\n        self.replica_id = replica_id\n        self.increments = {}  # replica_id \u2192 count\n\n    def increment("
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "# Riak allows custom merge functions\nimport riak\n\nclient = riak.RiakClient()\nbucket = client.bucket('users')\n\n# Allow siblings\nbucket.allow_mult = True\n\n# Write\nobj = bucket.new('user_123', data={'nam"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "import boto3\n\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('Orders')\n\n# Conditional write to avoid conflicts\ntry:\n    table.put_item(\n        Item={'order_id': '123', 'status': 'shippe"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "# CRDTs guarantee conflict-free merges\n\nclass GSet:\n    \"\"\"Grow-only set - automatically conflict-free\"\"\"\n\n    def __init__(self):\n        self.elements = set()\n\n    def add(self, element):\n        se"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "class DocumentEditor:\n    \"\"\"Collaborative editor with manual conflict resolution\"\"\"\n\n    def __init__(self):\n        self.content = \"\"\n        self.versions = []  # List of (content, vector_clock)\n\n "
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "# Partition data to reduce conflicts\nclass PartitionedStore:\n    \"\"\"Partition by user to reduce conflicts\"\"\"\n\n    def __init__(self):\n        self.partitions = {}  # user_id \u2192 user's data\n\n    def wri"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "def detect_conflict(write_vector_clock, stored_vector_clock):\n    \"\"\"Detect if write conflicts with stored value\"\"\"\n    # Concurrent if neither dominates\n    neither_dominates = (\n        not causally"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 75.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/eventual-consistency.md",
      "category": "distributed-systems",
      "skill_name": "eventual-consistency",
      "frontmatter": {
        "name": "distributed-systems-eventual-consistency",
        "description": "Eventual consistency models, consistency levels, read/write quorums, and practical trade-offs in distributed systems"
      },
      "metrics": {
        "line_count": 462,
        "code_line_count": 80,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "# Cassandra example\nfrom cassandra.cluster import Cluster\nfrom cassandra import ConsistencyLevel\n\ncluster = Cluster(['node1', 'node2', 'node3'])\nsession = cluster.connect('my_keyspace')\n\n# Write to ON"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "class QuorumStore:\n    \"\"\"Key-value store with quorum reads/writes\"\"\"\n\n    def __init__(self, nodes, n, w, r):\n        self.nodes = nodes\n        self.n = n  # Total replicas\n        self.w = w  # Wri"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "class ReadYourWritesStore:\n    \"\"\"Ensures client sees own writes\"\"\"\n\n    def __init__(self, store):\n        self.store = store\n        self.client_versions = {}  # client_id \u2192 last written version\n\n  "
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "class MonotonicReadsStore:\n    \"\"\"Ensures non-decreasing versions\"\"\"\n\n    def __init__(self, store):\n        self.store = store\n        self.client_max_versions = {}  # client_id \u2192 max seen version\n\n "
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "class MonotonicWritesStore:\n    \"\"\"Ensures writes from client ordered\"\"\"\n\n    def __init__(self, store):\n        self.store = store\n        self.client_write_queues = {}  # client_id \u2192 ordered writes\n"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "class LWWStore:\n    \"\"\"Resolve conflicts with timestamps\"\"\"\n\n    def __init__(self):\n        self.data = {}  # key \u2192 (value, timestamp)\n\n    def write(self, key, value, timestamp):\n        \"\"\"Write if"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "# See vector-clocks skill for full implementation\n\nclass VectorClockStore:\n    \"\"\"Track causality to detect conflicts\"\"\"\n\n    def write(self, key, value):\n        \"\"\"Write with vector clock\"\"\"\n       "
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "import boto3\n\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('Users')\n\n# Eventually consistent read (default, faster)\nresponse = table.get_item(\n    Key={'user_id': '123'}\n)\n\n# Strongly "
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "from cassandra.cluster import Cluster\nfrom cassandra.query import SimpleStatement\nfrom cassandra import ConsistencyLevel\n\ncluster = Cluster()\nsession = cluster.connect('my_keyspace')\n\n# Eventual consi"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "import unittest\nimport time\n\nclass TestEventualConsistency(unittest.TestCase):\n    def test_convergence(self):\n        \"\"\"Test replicas eventually converge\"\"\"\n        store_a = EventuallyConsistentSto"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 75.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/interval-tree-clocks.md",
      "category": "distributed-systems",
      "skill_name": "interval-tree-clocks",
      "frontmatter": {
        "name": "distributed-systems-interval-tree-clocks",
        "description": "Interval tree clocks for dynamic systems, scalable causality tracking, fork/join operations, avoiding process ID exhaustion"
      },
      "metrics": {
        "line_count": 647,
        "code_line_count": 83,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 74,
          "complexity": "complex",
          "code": "from typing import Optional, Tuple\nfrom dataclasses import dataclass\n\n@dataclass\nclass IDInterval:\n    \"\"\"Interval in ID space [start, end)\"\"\"\n    start: float\n    end: float\n\n    def __repr__(self):\n"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "medium",
          "code": "def event(self) -> 'ITC':\n    \"\"\"\n    Increment event counter in owned interval\n\n    Returns new ITC with incremented event\n    \"\"\"\n    def increment_tree(tree: EventTree, interval: IDInterval,\n      "
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "medium",
          "code": "def fork(self) -> Tuple['ITC', 'ITC']:\n    \"\"\"\n    Split ITC into two independent ITCs\n\n    Returns (itc1, itc2) where:\n    - itc1 and itc2 can make independent events\n    - Together they cover origin"
        },
        {
          "language": "python",
          "line_count": 59,
          "complexity": "complex",
          "code": "def join(self, other: 'ITC') -> 'ITC':\n    \"\"\"\n    Merge two ITCs on synchronization\n\n    Returns new ITC with:\n    - Merged ID intervals\n    - Combined event trees (max of both)\n    \"\"\"\n    def merge"
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "medium",
          "code": "def leq(self, other: 'ITC') -> bool:\n    \"\"\"\n    Check if self \u2264 other (happens-before or concurrent)\n\n    Returns True if self's events are causally before or equal to other's\n    \"\"\"\n    def compare"
        },
        {
          "language": "python",
          "line_count": 53,
          "complexity": "complex",
          "code": "class Actor:\n    \"\"\"Actor with ITC for causality tracking\"\"\"\n\n    def __init__(self, actor_id: str, itc: ITC):\n        self.actor_id = actor_id\n        self.itc = itc\n        self.mailbox = []\n\n    de"
        },
        {
          "language": "python",
          "line_count": 48,
          "complexity": "complex",
          "code": "class ServerlessFunction:\n    \"\"\"Serverless function with ITC causality\"\"\"\n\n    def __init__(self, function_id: str):\n        self.function_id = function_id\n        self.itc = None  # Assigned dynamic"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "medium",
          "code": "def normalize_tree(tree: EventTree) -> EventTree:\n    \"\"\"\n    Normalize tree by lifting common values\n\n    (5, (5, (5, 0, 0))) \u2192 (10, 0, 0)\n    \"\"\"\n    if tree.is_leaf():\n        return tree\n\n    left"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "def coalesce_intervals(itcs: list) -> ITC:\n    \"\"\"\n    Merge multiple ITCs with adjacent intervals\n\n    Useful after collecting IDs from terminated processes\n    \"\"\"\n    # Sort by interval start\n    s"
        },
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "import unittest\n\nclass TestITC(unittest.TestCase):\n    def test_event_increments(self):\n        \"\"\"Test that event increments counter\"\"\"\n        itc = ITC.seed()\n        itc = itc.event()\n        itc "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 75.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "frontend/react-form-handling.md",
      "category": "frontend",
      "skill_name": "react-form-handling",
      "frontmatter": {
        "name": "frontend-react-form-handling",
        "description": "Building complex forms"
      },
      "metrics": {
        "line_count": 782,
        "code_line_count": 168,
        "code_examples": 21,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "tsx",
          "line_count": 16,
          "complexity": "simple",
          "code": "function UncontrolledForm() {\n  const emailRef = useRef<HTMLInputElement>(null);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(emailRef.current?.value);\n  }"
        },
        {
          "language": "tsx",
          "line_count": 16,
          "complexity": "simple",
          "code": "function ControlledForm() {\n  const [email, setEmail] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(email);\n  };\n\n  return (\n    <form onSub"
        },
        {
          "language": "tsx",
          "line_count": 44,
          "complexity": "complex",
          "code": "import { useForm } from 'react-hook-form';\n\ninterface FormData {\n  email: string;\n  password: string;\n}\n\nfunction LoginForm() {\n  const { register, handleSubmit, formState: { errors } } = useForm<Form"
        },
        {
          "language": "tsx",
          "line_count": 17,
          "complexity": "simple",
          "code": "const { register } = useForm();\n\n<input\n  {...register('username', {\n    required: 'Required',\n    minLength: { value: 3, message: 'Min 3 characters' },\n    maxLength: { value: 20, message: 'Max 20 ch"
        },
        {
          "language": "tsx",
          "line_count": 20,
          "complexity": "simple",
          "code": "function DynamicForm() {\n  const { register, watch } = useForm();\n\n  const watchShowAge = watch('showAge', false);\n  const watchAllFields = watch(); // Watch all fields\n\n  return (\n    <form>\n      <i"
        },
        {
          "language": "tsx",
          "line_count": 29,
          "complexity": "complex",
          "code": "import { Controller } from 'react-hook-form';\nimport Select from 'react-select';\n\nfunction FormWithCustomComponents() {\n  const { control, handleSubmit } = useForm();\n\n  return (\n    <form onSubmit={h"
        },
        {
          "language": "tsx",
          "line_count": 49,
          "complexity": "complex",
          "code": "import { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\n\nconst schema = z.object({\n  email: z.string().email('Invalid email'),\n  password: z.string().min(8, 'Min 8 characters')"
        },
        {
          "language": "tsx",
          "line_count": 22,
          "complexity": "complex",
          "code": "// schemas/user.ts\nimport { z } from 'zod';\n\nexport const emailSchema = z.string().email('Invalid email');\nexport const passwordSchema = z.string().min(8, 'Min 8 characters');\n\nexport const loginSchem"
        },
        {
          "language": "tsx",
          "line_count": 41,
          "complexity": "complex",
          "code": "// app/actions.ts\n'use server';\n\nimport { z } from 'zod';\n\nconst schema = z.object({\n  email: z.string().email(),\n  message: z.string().min(10),\n});\n\nexport async function submitContactForm(formData: "
        },
        {
          "language": "tsx",
          "line_count": 33,
          "complexity": "complex",
          "code": "// app/components/ContactForm.tsx\n'use client';\n\nimport { useFormState, useFormStatus } from 'react-dom';\nimport { submitContactForm } from '@/app/actions';\n\nfunction SubmitButton() {\n  const { pendin"
        },
        {
          "language": "tsx",
          "line_count": 47,
          "complexity": "complex",
          "code": "'use client';\n\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { createPost } from '@/app/actions';\n\nconst schema = z."
        },
        {
          "language": "tsx",
          "line_count": 88,
          "complexity": "complex",
          "code": "import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\nconst step1Schema = z.object({\n  email: z."
        },
        {
          "language": "tsx",
          "line_count": 28,
          "complexity": "complex",
          "code": "// app/signup/[step]/page.tsx\n'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { useForm } from 'react-hook-form';\n\nexport default function SignupStepPage({ params }: { params: { ste"
        },
        {
          "language": "tsx",
          "line_count": 32,
          "complexity": "complex",
          "code": "import { useFieldArray } from 'react-hook-form';\n\nfunction TodoListForm() {\n  const { register, control, handleSubmit } = useForm({\n    defaultValues: {\n      todos: [{ text: '' }],\n    },\n  });\n\n  co"
        },
        {
          "language": "tsx",
          "line_count": 32,
          "complexity": "medium",
          "code": "function FileUploadForm() {\n  const { register, handleSubmit } = useForm();\n\n  const onSubmit = async (data: any) => {\n    const formData = new FormData();\n    formData.append('file', data.file[0]);\n\n"
        },
        {
          "language": "tsx",
          "line_count": 22,
          "complexity": "medium",
          "code": "function UsernameForm() {\n  const { register, formState: { errors } } = useForm();\n\n  return (\n    <form>\n      <input\n        {...register('username', {\n          required: 'Username is required',\n  "
        },
        {
          "language": "tsx",
          "line_count": 30,
          "complexity": "medium",
          "code": "// \u274c Bad: Entire form re-renders on every keystroke\nfunction BadForm() {\n  const [formData, setFormData] = useState({ name: '', email: '' });\n\n  return (\n    <form>\n      <input\n        value={formDat"
        },
        {
          "language": "tsx",
          "line_count": 20,
          "complexity": "complex",
          "code": "import { useForm } from 'react-hook-form';\nimport { debounce } from 'lodash';\n\nfunction SearchForm() {\n  const { register } = useForm();\n\n  const debouncedValidate = debounce(async (value: string) => "
        },
        {
          "language": "tsx",
          "line_count": 10,
          "complexity": "simple",
          "code": "const { register, handleSubmit, formState: { errors } } = useForm<FormData>({\n  resolver: zodResolver(schema),\n  defaultValues: { ... },\n});\n\n<form onSubmit={handleSubmit(onSubmit)}>\n  <input {...regi"
        },
        {
          "language": "tsx",
          "line_count": 7,
          "complexity": "simple",
          "code": "const schema = z.object({\n  email: z.string().email(),\n  age: z.number().min(18),\n}).refine(...);\n\ntype FormData = z.infer<typeof schema>;\n"
        },
        {
          "language": "tsx",
          "line_count": 8,
          "complexity": "simple",
          "code": "'use server';\nexport async function action(formData: FormData) {\n  const result = schema.safeParse({...});\n  if (!result.success) return { error: ... };\n  // Process\n  revalidatePath('/path');\n}\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "21 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "14 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 75.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "frontend/browser-concurrency.md",
      "category": "frontend",
      "skill_name": "browser-concurrency",
      "frontmatter": {
        "name": "frontend-browser-concurrency",
        "description": "Service Workers, SharedWorkers, Worklets, and multi-threading patterns for advanced browser concurrency"
      },
      "metrics": {
        "line_count": 797,
        "code_line_count": 154,
        "code_examples": 24,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 73,
          "complexity": "complex",
          "code": "/// <reference lib=\"webworker\" />\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nconst CACHE_NAME = 'app-cache-v1';\nconst ASSETS = [\n  '/',\n  '/index.html',\n  '/styles.css',\n  '/app.js',\n  '/manifest"
        },
        {
          "language": "typescript",
          "line_count": 36,
          "complexity": "medium",
          "code": "// main.ts\nasync function registerServiceWorker(): Promise<ServiceWorkerRegistration | null> {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker."
        },
        {
          "language": "typescript",
          "line_count": 8,
          "complexity": "simple",
          "code": "self.addEventListener('fetch', (event: FetchEvent) => {\n  event.respondWith(\n    caches.match(event.request).then((cached) => {\n      return cached || fetch(event.request);\n    })\n  );\n});\n"
        },
        {
          "language": "typescript",
          "line_count": 18,
          "complexity": "simple",
          "code": "self.addEventListener('fetch', (event: FetchEvent) => {\n  event.respondWith(\n    fetch(event.request)\n      .then((response) => {\n        // Cache successful response\n        const clone = response.cl"
        },
        {
          "language": "typescript",
          "line_count": 16,
          "complexity": "simple",
          "code": "self.addEventListener('fetch', (event: FetchEvent) => {\n  event.respondWith(\n    caches.open(CACHE_NAME).then((cache) => {\n      return cache.match(event.request).then((cached) => {\n        const fetc"
        },
        {
          "language": "typescript",
          "line_count": 29,
          "complexity": "medium",
          "code": "async function fetchWithTimeout(\n  request: Request,\n  timeout: number = 3000\n): Promise<Response> {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort()"
        },
        {
          "language": "typescript",
          "line_count": 24,
          "complexity": "medium",
          "code": "// Register sync event\nself.addEventListener('sync', (event: SyncEvent) => {\n  if (event.tag === 'sync-messages') {\n    event.waitUntil(syncMessages());\n  }\n});\n\nasync function syncMessages(): Promise"
        },
        {
          "language": "typescript",
          "line_count": 27,
          "complexity": "medium",
          "code": "async function sendMessage(message: string): Promise<void> {\n  try {\n    const response = await fetch('/api/messages', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n  "
        },
        {
          "language": "typescript",
          "line_count": 30,
          "complexity": "medium",
          "code": "// Listen for push events\nself.addEventListener('push', (event: PushEvent) => {\n  const data = event.data?.json() ?? { title: 'Notification', body: 'New message' };\n\n  event.waitUntil(\n    self.regist"
        },
        {
          "language": "typescript",
          "line_count": 30,
          "complexity": "medium",
          "code": "async function subscribeToPush(): Promise<PushSubscription | null> {\n  const registration = await navigator.serviceWorker.ready;\n\n  try {\n    const subscription = await registration.pushManager.subscr"
        },
        {
          "language": "typescript",
          "line_count": 50,
          "complexity": "medium",
          "code": "/// <reference lib=\"webworker\" />\n\ndeclare const self: SharedWorkerGlobalScope;\n\n// Track all connected ports\nconst ports = new Set<MessagePort>();\nlet sharedState = { count: 0, users: [] as string[] "
        },
        {
          "language": "typescript",
          "line_count": 25,
          "complexity": "medium",
          "code": "const sharedWorker = new SharedWorker(\n  new URL('./shared-worker.ts', import.meta.url),\n  { type: 'module' }\n);\n\nsharedWorker.port.addEventListener('message', (event: MessageEvent) => {\n  const { typ"
        },
        {
          "language": "typescript",
          "line_count": 36,
          "complexity": "complex",
          "code": "import { useEffect, useState, useRef } from 'react';\n\nexport function useSharedWorker<T>(workerUrl: string) {\n  const [state, setState] = useState<T | null>(null);\n  const workerRef = useRef<SharedWor"
        },
        {
          "language": "typescript",
          "line_count": 13,
          "complexity": "simple",
          "code": "function SharedCounter() {\n  const { state, postMessage } = useSharedWorker<{ count: number }>('./shared-worker.ts');\n\n  return (\n    <div>\n      <p>Count (shared across tabs): {state?.count ?? 0}</p>"
        },
        {
          "language": "typescript",
          "line_count": 26,
          "complexity": "complex",
          "code": "/// <reference lib=\"webworker\" />\n\nclass WhiteNoiseProcessor extends AudioWorkletProcessor {\n  process(\n    inputs: Float32Array[][],\n    outputs: Float32Array[][],\n    parameters: Record<string, Floa"
        },
        {
          "language": "typescript",
          "line_count": 16,
          "complexity": "simple",
          "code": "async function playWhiteNoise(): Promise<void> {\n  const audioContext = new AudioContext();\n\n  // Load worklet module\n  await audioContext.audioWorklet.addModule('./audio-processor.ts');\n\n  // Create "
        },
        {
          "language": "typescript",
          "line_count": 32,
          "complexity": "medium",
          "code": "self.addEventListener('message', (event: MessageEvent) => {\n  const { type, canvas } = event.data;\n\n  if (type === 'INIT' && canvas instanceof OffscreenCanvas) {\n    const ctx = canvas.getContext('2d'"
        },
        {
          "language": "typescript",
          "line_count": 9,
          "complexity": "simple",
          "code": "const canvas = document.getElementById('canvas') as HTMLCanvasElement;\nconst offscreen = canvas.transferControlToOffscreen();\n\nconst worker = new Worker(new URL('./canvas-worker.ts', import.meta.url),"
        },
        {
          "language": "typescript",
          "line_count": 15,
          "complexity": "simple",
          "code": "// Create channel\nconst channel = new BroadcastChannel('app-channel');\n\n// Listen for messages\nchannel.addEventListener('message', (event: MessageEvent) => {\n  console.log('Received:', event.data);\n  "
        },
        {
          "language": "typescript",
          "line_count": 14,
          "complexity": "simple",
          "code": "// Create channel\nconst channel = new MessageChannel();\n\n// Send port to worker\nworker.postMessage({ port: channel.port2 }, [channel.port2]);\n\n// Communicate through port\nchannel.port1.addEventListene"
        },
        {
          "language": "typescript",
          "line_count": 5,
          "complexity": "simple",
          "code": "\u274c async function fetchData() {\n  await navigator.serviceWorker.register('/sw.js');\n  return fetch('/api/data');\n}\n"
        },
        {
          "language": "typescript",
          "line_count": 8,
          "complexity": "simple",
          "code": "\u2705 // Register on app initialization\nnavigator.serviceWorker.register('/sw.js');\n\n// Use normally\nasync function fetchData() {\n  return fetch('/api/data'); // Service worker intercepts\n}\n"
        },
        {
          "language": "typescript",
          "line_count": 3,
          "complexity": "simple",
          "code": "\u274c const worker = new SharedWorker('./worker.js');\n// Never closed, leaks resources\n"
        },
        {
          "language": "typescript",
          "line_count": 9,
          "complexity": "simple",
          "code": "\u2705 useEffect(() => {\n  const worker = new SharedWorker('./worker.js');\n  worker.port.start();\n\n  return () => {\n    worker.port.close(); // Cleanup\n  };\n}, []);\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "24 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "12 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 75.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "frontend/react-component-patterns.md",
      "category": "frontend",
      "skill_name": "react-component-patterns",
      "frontmatter": {
        "name": "frontend-react-component-patterns",
        "description": "Designing component architecture"
      },
      "metrics": {
        "line_count": 730,
        "code_line_count": 108,
        "code_examples": 17,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "tsx",
          "line_count": 16,
          "complexity": "simple",
          "code": "// Layout component using children\nfunction Card({ children, title }: { children: React.ReactNode; title: string }) {\n  return (\n    <div className=\"card\">\n      <h2>{title}</h2>\n      <div className="
        },
        {
          "language": "tsx",
          "line_count": 34,
          "complexity": "medium",
          "code": "// Data fetcher using render prop\nfunction DataFetcher<T>({\n  url,\n  render\n}: {\n  url: string;\n  render: (data: T | null, loading: boolean, error: Error | null) => React.ReactNode;\n}) {\n  const [data"
        },
        {
          "language": "tsx",
          "line_count": 69,
          "complexity": "complex",
          "code": "// Tabs compound component\nconst TabsContext = createContext<{\n  activeTab: string;\n  setActiveTab: (tab: string) => void;\n} | null>(null);\n\nfunction Tabs({ children, defaultTab }: { children: React.R"
        },
        {
          "language": "tsx",
          "line_count": 15,
          "complexity": "simple",
          "code": "// withAuth HOC\nfunction withAuth<P extends object>(Component: React.ComponentType<P>) {\n  return function AuthenticatedComponent(props: P) {\n    const { user, loading } = useAuth();\n\n    if (loading)"
        },
        {
          "language": "tsx",
          "line_count": 45,
          "complexity": "medium",
          "code": "function useFetch<T>(url: string) {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  use"
        },
        {
          "language": "tsx",
          "line_count": 38,
          "complexity": "medium",
          "code": "function useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store value\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getIt"
        },
        {
          "language": "tsx",
          "line_count": 37,
          "complexity": "medium",
          "code": "function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue"
        },
        {
          "language": "tsx",
          "line_count": 20,
          "complexity": "simple",
          "code": "// Expensive component that re-renders unnecessarily\nfunction ExpensiveComponent({ data }: { data: string[] }) {\n  // Heavy computation\n  const processedData = data.map(item => /* expensive operation "
        },
        {
          "language": "tsx",
          "line_count": 17,
          "complexity": "simple",
          "code": "function ProductList({ products, filter }: { products: Product[]; filter: string }) {\n  // Expensive filtering only runs when products or filter changes\n  const filteredProducts = useMemo(() => {\n    "
        },
        {
          "language": "tsx",
          "line_count": 38,
          "complexity": "medium",
          "code": "function TodoList() {\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  // Without useCallback: new function every render\n  const handleToggle = (id: string) => {\n    setTodos(todos.map(todo =>\n   "
        },
        {
          "language": "tsx",
          "line_count": 22,
          "complexity": "complex",
          "code": "import { lazy, Suspense } from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\n// Lazy load route components\nconst Home = lazy(() => import('./pages/Home'));\nconst Dashboard"
        },
        {
          "language": "tsx",
          "line_count": 19,
          "complexity": "simple",
          "code": "// Heavy component loaded on demand\nconst HeavyChart = lazy(() => import('./components/HeavyChart'));\n\nfunction Dashboard() {\n  const [showChart, setShowChart] = useState(false);\n\n  return (\n    <div>"
        },
        {
          "language": "tsx",
          "line_count": 16,
          "complexity": "simple",
          "code": "// utils.ts\nexport function heavyFunction() { /* ... */ }\nexport function lightFunction() { /* ... */ }\n\n// App.tsx - only load heavyFunction when needed\nconst loadHeavyFunction = () => import('./util"
        },
        {
          "language": "tsx",
          "line_count": 15,
          "complexity": "complex",
          "code": "// UserProfile.tsx\nimport { useState } from 'react';\nimport { UserAvatar } from './UserAvatar';\nimport { useUserData } from './useUserData';\nimport type { User } from './types';\nimport './UserProfile."
        },
        {
          "language": "tsx",
          "line_count": 34,
          "complexity": "medium",
          "code": "// \u274c Bad: Passing props through many levels\nfunction App() {\n  const [user, setUser] = useState<User | null>(null);\n  return <Layout user={user} setUser={setUser} />;\n}\n\nfunction Layout({ user, setUse"
        },
        {
          "language": "tsx",
          "line_count": 21,
          "complexity": "medium",
          "code": "// \u274c Bad: 500-line component doing everything\nfunction Dashboard() {\n  // 50 lines of state\n  // 100 lines of effects\n  // 200 lines of handlers\n  // 150 lines of JSX\n  return <div>...</div>;\n}\n\n// \u2705 "
        },
        {
          "language": "tsx",
          "line_count": 12,
          "complexity": "simple",
          "code": "// \u274c Bad: Memoizing everything\nconst Component = React.memo(() => {\n  const value = useMemo(() => 1 + 1, []);\n  const handler = useCallback(() => console.log('click'), []);\n  return <button onClick={h"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 75.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "frontend/web-workers.md",
      "category": "frontend",
      "skill_name": "web-workers",
      "frontmatter": {
        "name": "frontend-web-workers",
        "description": "Offloading computation with Web Workers API, SharedArrayBuffer, and message passing patterns"
      },
      "metrics": {
        "line_count": 698,
        "code_line_count": 146,
        "code_examples": 22,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 24,
          "complexity": "medium",
          "code": "// Worker code runs in separate thread\nself.addEventListener('message', (event: MessageEvent) => {\n  const { type, payload } = event.data;\n\n  switch (type) {\n    case 'COMPUTE':\n      const result = p"
        },
        {
          "language": "typescript",
          "line_count": 30,
          "complexity": "medium",
          "code": "// Create worker from file\nconst worker = new Worker(new URL('./worker.ts', import.meta.url), {\n  type: 'module' // Enable ES modules in worker\n});\n\n// Listen for messages\nworker.addEventListener('mes"
        },
        {
          "language": "typescript",
          "line_count": 19,
          "complexity": "simple",
          "code": "// Define message types\nexport type WorkerRequest =\n  | { type: 'COMPUTE'; payload: number[] }\n  | { type: 'PROCESS_IMAGE'; payload: ImageData }\n  | { type: 'CANCEL' };\n\nexport type WorkerResponse =\n "
        },
        {
          "language": "typescript",
          "line_count": 40,
          "complexity": "complex",
          "code": "import type { WorkerRequest, WorkerResponse } from './types';\n\nconst ctx: Worker = self as any;\n\nctx.addEventListener('message', (event: MessageEvent<WorkerRequest>) => {\n  const message = event.data;"
        },
        {
          "language": "typescript",
          "line_count": 12,
          "complexity": "simple",
          "code": "// Without transfer (copies data - slow)\nworker.postMessage({ imageData: largeImageData });\n\n// With transfer (zero-copy - fast)\nworker.postMessage(\n  { imageData: largeImageData },\n  [largeImageData."
        },
        {
          "language": "typescript",
          "line_count": 12,
          "complexity": "simple",
          "code": "const data = new Float32Array(1_000_000);\n// Fill with data...\n\n// Transfer buffer to worker\nworker.postMessage(\n  { type: 'PROCESS', data: data.buffer },\n  [data.buffer]\n);\n\n// data.buffer is now emp"
        },
        {
          "language": "typescript",
          "line_count": 11,
          "complexity": "simple",
          "code": "self.addEventListener('message', (event) => {\n  const { data } = event.data;\n  const array = new Float32Array(data);\n\n  // Process array...\n  const result = processArray(array);\n\n  // Transfer back\n  "
        },
        {
          "language": "typescript",
          "line_count": 66,
          "complexity": "complex",
          "code": "import { useEffect, useRef, useState } from 'react';\nimport type { WorkerRequest, WorkerResponse } from './types';\n\nexport function useWorker<T = any>(workerUrl: string) {\n  const workerRef = useRef<W"
        },
        {
          "language": "typescript",
          "line_count": 41,
          "complexity": "complex",
          "code": "import { useWorker } from './useWorker';\n\nexport function ImageProcessor() {\n  const { postMessage, result, isReady, progress } = useWorker<ImageData>('./image-worker.ts');\n  const [imageData, setImag"
        },
        {
          "language": "typescript",
          "line_count": 72,
          "complexity": "complex",
          "code": "class WorkerPool {\n  private workers: Worker[] = [];\n  private queue: Array<{ task: any; resolve: (value: any) => void; reject: (reason: any) => void }> = [];\n  private busyWorkers = new Set<Worker>()"
        },
        {
          "language": "typescript",
          "line_count": 10,
          "complexity": "simple",
          "code": "function processDataMainThread(data: number[]): number {\n  console.time('main-thread');\n  const result = data.reduce((sum, val) => sum + Math.sqrt(val), 0);\n  console.timeEnd('main-thread');\n  return "
        },
        {
          "language": "typescript",
          "line_count": 23,
          "complexity": "medium",
          "code": "async function processDataWorker(data: number[]): Promise<number> {\n  console.time('worker');\n\n  const worker = new Worker(new URL('./compute-worker.ts', import.meta.url), {\n    type: 'module'\n  });\n\n"
        },
        {
          "language": "typescript",
          "line_count": 27,
          "complexity": "medium",
          "code": "// worker.ts\nself.addEventListener('message', (event) => {\n  const { type, payload } = event.data;\n\n  if (type === 'PROCESS') {\n    const total = payload.length;\n    let processed = 0;\n\n    const resu"
        },
        {
          "language": "typescript",
          "line_count": 27,
          "complexity": "medium",
          "code": "// worker.ts\nlet cancelled = false;\n\nself.addEventListener('message', (event) => {\n  const { type, payload } = event.data;\n\n  if (type === 'CANCEL') {\n    cancelled = true;\n    return;\n  }\n\n  if (type"
        },
        {
          "language": "typescript",
          "line_count": 23,
          "complexity": "medium",
          "code": "// worker.ts\nlet initialized = false;\nlet wasmModule: any = null;\n\nself.addEventListener('message', async (event) => {\n  const { type, payload } = event.data;\n\n  if (type === 'INIT') {\n    // Load WAS"
        },
        {
          "language": "typescript",
          "line_count": 6,
          "complexity": "simple",
          "code": "\u274c // Creates new worker on every call\nfunction process(data: any) {\n  const worker = new Worker('./worker.ts');\n  worker.postMessage(data);\n}\n"
        },
        {
          "language": "typescript",
          "line_count": 8,
          "complexity": "simple",
          "code": "\u2705 const worker = new Worker('./worker.ts');\n\nfunction process(data: any) {\n  worker.postMessage(data);\n}\n\n// Or use worker pool for multiple parallel tasks\n"
        },
        {
          "language": "typescript",
          "line_count": 2,
          "complexity": "simple",
          "code": "\u274c worker.postMessage({ data: largeArrayBuffer });\n"
        },
        {
          "language": "typescript",
          "line_count": 2,
          "complexity": "simple",
          "code": "\u2705 worker.postMessage({ data: largeArrayBuffer }, [largeArrayBuffer]);\n"
        },
        {
          "language": "typescript",
          "line_count": 3,
          "complexity": "simple",
          "code": "\u274c // Worker context - NO DOM ACCESS\ndocument.getElementById('result'); // ERROR\n"
        },
        {
          "language": "typescript",
          "line_count": 8,
          "complexity": "simple",
          "code": "\u2705 // Worker sends data\nself.postMessage({ result: computedValue });\n\n// Main thread updates DOM\nworker.addEventListener('message', (e) => {\n  document.getElementById('result').textContent = e.data.res"
        },
        {
          "language": "typescript",
          "line_count": 8,
          "complexity": "simple",
          "code": "if (typeof Worker !== 'undefined') {\n  // Workers supported\n  const worker = new Worker('./worker.ts', { type: 'module' });\n} else {\n  // Fallback to main thread\n  const result = processSync(data);\n}\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "22 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 75.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "build-systems/maven-configuration.md",
      "category": "build-systems",
      "skill_name": "maven-configuration",
      "frontmatter": {
        "name": "build-systems-maven-configuration",
        "description": "Maven POM structure, dependency management, plugin configuration, lifecycle phases, multi-module projects, profiles, and repository management for Java projects."
      },
      "metrics": {
        "line_count": 828,
        "code_line_count": 158,
        "code_examples": 22,
        "external_refs": 8,
        "tools_mentioned": 4,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "xml",
          "line_count": 35,
          "complexity": "medium",
          "code": "<!-- pom.xml - Minimum viable POM -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache"
        },
        {
          "language": "xml",
          "line_count": 33,
          "complexity": "medium",
          "code": "<dependencies>\n    <!-- Compile + Runtime dependency -->\n    <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-api</artifactId>\n        <version>2.0.9</version>\n    </depende"
        },
        {
          "language": "xml",
          "line_count": 9,
          "complexity": "simple",
          "code": "<!-- Scopes determine classpath availability:\n     compile:  Default, all classpaths\n     provided: Compile + test, not runtime (container provides)\n     runtime:  Runtime + test, not compile\n     tes"
        },
        {
          "language": "xml",
          "line_count": 30,
          "complexity": "medium",
          "code": "<!-- Parent or root POM -->\n<dependencyManagement>\n    <dependencies>\n        <!-- Import Spring Boot BOM -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <"
        },
        {
          "language": "xml",
          "line_count": 21,
          "complexity": "medium",
          "code": "<dependency>\n    <groupId>com.example</groupId>\n    <artifactId>mylib</artifactId>\n    <version>1.0.0</version>\n\n    <!-- Exclude transitive dependency -->\n    <exclusions>\n        <exclusion>\n       "
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Execute phases (runs all previous phases)\nmvn validate        # Validate project structure\nmvn compile         # Compile source code\nmvn test            # Run unit tests\nmvn package         # Create"
        },
        {
          "language": "xml",
          "line_count": 27,
          "complexity": "medium",
          "code": "<!-- Plugins bind goals to lifecycle phases -->\n<build>\n    <plugins>\n        <!-- Compiler plugin (binds to compile phase) -->\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>"
        },
        {
          "language": "xml",
          "line_count": 105,
          "complexity": "complex",
          "code": "<build>\n    <plugins>\n        <!-- Compiler Plugin -->\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <"
        },
        {
          "language": "xml",
          "line_count": 18,
          "complexity": "simple",
          "code": "<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>3.2.0</version>\n</parent>\n\n<build>\n    <plugins>\n        <plugin>\n        "
        },
        {
          "language": "xml",
          "line_count": 46,
          "complexity": "medium",
          "code": "<!-- multi-module/pom.xml -->\n<project>\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>multi-module-parent</artifactId>\n    <version>1.0.0-SNAPSHOT</version"
        },
        {
          "language": "xml",
          "line_count": 29,
          "complexity": "medium",
          "code": "<!-- multi-module/app/pom.xml -->\n<project>\n    <modelVersion>4.0.0</modelVersion>\n\n    <!-- Parent reference -->\n    <parent>\n        <groupId>com.example</groupId>\n        <artifactId>multi-module-p"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Build all modules from root\nmvn clean install\n\n# Build specific module\nmvn clean install -pl app\n\n# Build module and dependencies\nmvn clean install -pl app -am\n\n# Build without dependencies\nmvn clea"
        },
        {
          "language": "xml",
          "line_count": 51,
          "complexity": "complex",
          "code": "<profiles>\n    <!-- Development profile -->\n    <profile>\n        <id>dev</id>\n        <activation>\n            <activeByDefault>true</activeByDefault>\n        </activation>\n        <properties>\n     "
        },
        {
          "language": "xml",
          "line_count": 28,
          "complexity": "medium",
          "code": "<repositories>\n    <!-- Maven Central (default, can omit) -->\n    <repository>\n        <id>central</id>\n        <url>https://repo.maven.apache.org/maven2</url>\n    </repository>\n\n    <!-- Custom repos"
        },
        {
          "language": "xml",
          "line_count": 29,
          "complexity": "medium",
          "code": "<!-- ~/.m2/settings.xml -->\n<settings>\n    <!-- Local repository location -->\n    <localRepository>${user.home}/.m2/repository</localRepository>\n\n    <!-- Mirrors -->\n    <mirrors>\n        <mirror>\n  "
        },
        {
          "language": "xml",
          "line_count": 27,
          "complexity": "medium",
          "code": "<!-- WRONG: Duplicate versions across modules -->\n<!-- module1/pom.xml -->\n<dependency>\n    <groupId>com.google.guava</groupId>\n    <artifactId>guava</artifactId>\n    <version>32.1.3-jre</version>\n</d"
        },
        {
          "language": "xml",
          "line_count": 18,
          "complexity": "simple",
          "code": "<!-- WRONG -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <version>3.2.0</version>\n</dependency>\n\n<!-- CORRECT: Use propertie"
        },
        {
          "language": "xml",
          "line_count": 13,
          "complexity": "simple",
          "code": "<!-- WRONG: Unversioned plugin (non-reproducible builds) -->\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n</plugin>\n\n<!-- CORRECT: Pin ve"
        },
        {
          "language": "xml",
          "line_count": 28,
          "complexity": "medium",
          "code": "<!-- WRONG: Version in both places -->\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.google.guava</groupId>\n            <artifactId>guava</artifactId>\n       "
        },
        {
          "language": "bash",
          "line_count": 28,
          "complexity": "medium",
          "code": "# Lifecycle\nmvn clean                      # Clean target/\nmvn compile                    # Compile sources\nmvn test                       # Run unit tests\nmvn package                    # Create JAR/"
        },
        {
          "language": "xml",
          "line_count": 5,
          "complexity": "simple",
          "code": "<groupId>com.example</groupId>        <!-- Organization/group -->\n<artifactId>myapp</artifactId>        <!-- Project name -->\n<version>1.0.0-SNAPSHOT</version>     <!-- Version -->\n<packaging>jar</pac"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "# generate_dependencies.py - Generate Maven dependencies from JSON\nimport json\nimport xml.etree.ElementTree as ET\n\nwith open('dependencies.json') as f:\n    deps = json.load(f)\n\ndependencies = ET.Eleme"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://maven.apache.org/POM/4.0.0\""
        },
        {
          "type": "standard",
          "url": "http://www.w3.org/2001/XMLSchema-instance\""
        },
        {
          "type": "external",
          "url": "http://maven.apache.org/POM/4.0.0"
        },
        {
          "type": "external",
          "url": "http://maven.apache.org/xsd/maven-4.0.0.xsd\">"
        },
        {
          "type": "external",
          "url": "https://repo.maven.apache.org/maven2</url>"
        },
        {
          "type": "external",
          "url": "https://repo.company.com/maven</url>"
        },
        {
          "type": "external",
          "url": "https://repo.spring.io/plugins-release</url>"
        },
        {
          "type": "external",
          "url": "https://nexus.company.com/repository/maven-public</url>"
        }
      ],
      "tools_mentioned": [
        "apache",
        "postgres",
        "postgresql",
        "docker"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "22 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "15 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 75.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "protocols/udp-fundamentals.md",
      "category": "protocols",
      "skill_name": "udp-fundamentals",
      "frontmatter": {
        "name": "protocols-udp-fundamentals",
        "description": "UDP protocol fundamentals including connectionless communication, use cases, and trade-offs vs TCP"
      },
      "metrics": {
        "line_count": 419,
        "code_line_count": 102,
        "code_examples": 12,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "import socket\n\n# Create UDP socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nsock.settimeout(2.0)\n\n# DNS query for example.com\ndns_query = b'\\x12\\x34\\x01\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\"
        },
        {
          "language": "rust",
          "line_count": 24,
          "complexity": "medium",
          "code": "use std::net::UdpSocket;\n\nfn game_loop() -> std::io::Result<()> {\n    let socket = UdpSocket::bind(\"0.0.0.0:0\")?;\n    socket.connect(\"game-server.com:9000\")?;\n\n    loop {\n        // Send player positi"
        },
        {
          "language": "go",
          "line_count": 18,
          "complexity": "complex",
          "code": "package main\n\nimport \"net\"\n\nfunc streamVideo() {\n    // UDP socket for RTP\n    conn, _ := net.Dial(\"udp\", \"viewer:5004\")\n    defer conn.Close()\n\n    for frame := range videoFrames {\n        // Send fr"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "import socket\n\n# Create broadcast socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nsock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n\n# Broadcast discovery message\nmessage = b\"D"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "import socket\nimport time\n\nclass ReliableUDP:\n    def __init__(self, sock):\n        self.sock = sock\n        self.seq_num = 0\n        self.pending_acks = {}\n\n    def send_reliable(self, data, addr):\n "
        },
        {
          "language": "go",
          "line_count": 21,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"net\"\n    \"time\"\n    \"golang.org/x/time/rate\"\n)\n\nfunc sendWithRateLimit() {\n    conn, _ := net.Dial(\"udp\", \"server:8000\")\n    limiter := rate.NewLimiter(rate.Limit(100), 10)"
        },
        {
          "language": "rust",
          "line_count": 30,
          "complexity": "medium",
          "code": "use std::collections::HashMap;\n\nstruct UDPReceiver {\n    expected_seq: u32,\n    buffer: HashMap<u32, Vec<u8>>,\n}\n\nimpl UDPReceiver {\n    fn receive_packet(&mut self, packet: &[u8]) {\n        let seq ="
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c Bad: Assuming delivery\nsock.sendto(critical_data, addr)\n# What if it's lost?\n\n# \u2705 Good: Application-level ACKs\nsend_with_ack(sock, critical_data, addr, retries=3)\n"
        },
        {
          "language": "go",
          "line_count": 7,
          "complexity": "simple",
          "code": "// \u2705 Good: Always set read timeout\nconn.SetReadDeadline(time.Now().Add(5 * time.Second))\n_, err := conn.Read(buffer)\nif err != nil {\n    // Handle timeout or error\n}\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c Bad: Large UDP packets (fragmentation)\nlarge_packet = b\"x\" * 10000\nsock.sendto(large_packet, addr)  # May fragment or drop\n\n# \u2705 Good: Keep packets < 1400 bytes\nMAX_UDP_PAYLOAD = 1400\nfor chunk in "
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Allow UDP port\nsudo iptables -A INPUT -p udp --dport 9000 -j ACCEPT\n\n# Test UDP connectivity\nnc -u -v server.com 9000\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Linux UDP stats\nnetstat -su | grep -i udp\n\n# Example output:\n#   UdpNoPorts: 0\n#   UdpInErrors: 157  # Receive errors\n#   UdpRcvbufErrors: 0  # Buffer full\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "12 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 75.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/dotted-version-vectors.md",
      "category": "distributed-systems",
      "skill_name": "dotted-version-vectors",
      "frontmatter": {
        "name": "distributed-systems-dotted-version-vectors",
        "description": "Dotted version vectors for efficient sibling management, compact causality tracking, reducing metadata overhead compared to pure vector clocks"
      },
      "metrics": {
        "line_count": 551,
        "code_line_count": 55,
        "code_examples": 8,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 50,
          "complexity": "complex",
          "code": "from typing import Dict, Tuple, Set\n\nclass Dot:\n    \"\"\"Single event identifier\"\"\"\n    def __init__(self, node_id: str, counter: int):\n        self.node_id = node_id\n        self.counter = counter\n\n   "
        },
        {
          "language": "python",
          "line_count": 92,
          "complexity": "complex",
          "code": "class DottedValue:\n    \"\"\"Value with its causal dot\"\"\"\n    def __init__(self, value, dot: Dot, context: Dict[str, int]):\n        self.value = value\n        self.dot = dot\n        self.context = contex"
        },
        {
          "language": "python",
          "line_count": 92,
          "complexity": "complex",
          "code": "class RiakStyleKVStore:\n    \"\"\"Riak-inspired key-value store with DVV\"\"\"\n\n    def __init__(self, node_id: str, replicas: list):\n        self.node_id = node_id\n        self.replicas = replicas\n        "
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "# Vector Clock approach\nclass VectorClockedValue:\n    def __init__(self, value, vc):\n        self.value = value\n        self.vector_clock = vc  # Full vector: {A:342, B:401, C:257, ...}\n\n# Dotted Vers"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Vector Clock: False siblings from client ID changes\nvc_store = VectorClockStore('A', ['A', 'B'])\n\n# Client 1 writes via A\nvc_store.put('key', 'v1')  # VC: {A:1, B:0}\n\n# Same client writes again via "
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "class RiakDVV:\n    \"\"\"Simplified Riak DVV logic\"\"\"\n\n    @staticmethod\n    def reconcile(local_values: Set[DottedValue],\n                  remote_values: Set[DottedValue]) -> Set[DottedValue]:\n        "
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "class CausallyStableDVV:\n    \"\"\"DVV with causal stability detection\"\"\"\n\n    def __init__(self, node_id: str):\n        self.dvv = DottedVersionVector(node_id)\n        self.stable_context = {}  # Causal"
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "import unittest\n\nclass TestDottedVersionVector(unittest.TestCase):\n    def test_update_supersedes(self):\n        \"\"\"Test that update with context supersedes previous\"\"\"\n        store = DottedVersionSt"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 74.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "diagrams/mermaid-specialized.md",
      "category": "diagrams",
      "skill_name": "mermaid-specialized",
      "frontmatter": {
        "name": "mermaid-specialized",
        "description": "Create specialized diagrams with Mermaid including Git graphs, Sankey flows, mindmaps, and other advanced visualization types"
      },
      "metrics": {
        "line_count": 589,
        "code_line_count": 199,
        "code_examples": 23,
        "external_refs": 6,
        "tools_mentioned": 9,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "mermaid",
          "line_count": 5,
          "complexity": "simple",
          "code": "gitGraph\n    commit\n    commit\n    commit\n"
        },
        {
          "language": "mermaid",
          "line_count": 12,
          "complexity": "simple",
          "code": "gitGraph\n    commit\n    commit\n    branch feature\n    checkout feature\n    commit\n    commit\n    checkout main\n    commit\n    merge feature\n    commit\n"
        },
        {
          "language": "mermaid",
          "line_count": 13,
          "complexity": "simple",
          "code": "gitGraph\n    commit id: \"Initial commit\"\n    commit id: \"Add authentication\" tag: \"v0.1\"\n\n    branch develop\n    checkout develop\n    commit id: \"Feature work\"\n    commit id: \"Bug fixes\"\n\n    checkout"
        },
        {
          "language": "mermaid",
          "line_count": 10,
          "complexity": "simple",
          "code": "gitGraph\n    commit type: NORMAL\n    commit type: HIGHLIGHT id: \"Important change\"\n    commit type: REVERSE id: \"Reverted change\"\n    branch hotfix\n    checkout hotfix\n    commit type: HIGHLIGHT id: \""
        },
        {
          "language": "mermaid",
          "line_count": 38,
          "complexity": "medium",
          "code": "gitGraph\n    commit id: \"Initial\"\n    commit id: \"Setup project\"\n\n    branch develop\n    checkout develop\n    commit id: \"Add core features\"\n\n    branch feature/login\n    checkout feature/login\n    co"
        },
        {
          "language": "mermaid",
          "line_count": 18,
          "complexity": "simple",
          "code": "gitGraph\n    commit id: \"Base\"\n\n    branch feature-a\n    commit id: \"Feature A work\"\n    checkout main\n\n    branch feature-b\n    commit id: \"Feature B work\"\n    checkout main\n\n    merge feature-a\n    "
        },
        {
          "language": "mermaid",
          "line_count": 22,
          "complexity": "medium",
          "code": "gitGraph\n    commit id: \"v0.9\"\n    branch release/1.0\n    checkout release/1.0\n    commit id: \"RC1\" tag: \"v1.0-rc1\"\n    commit id: \"Bug fixes\"\n    commit id: \"RC2\" tag: \"v1.0-rc2\"\n\n    checkout main\n "
        },
        {
          "language": "mermaid",
          "line_count": 5,
          "complexity": "simple",
          "code": "sankey-beta\nSource,Process,100\nProcess,Output A,60\nProcess,Output B,40\n"
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "simple",
          "code": "sankey-beta\nPower Plant,Transmission,1000\nTransmission,Industrial,400\nTransmission,Commercial,350\nTransmission,Residential,200\nTransmission,Loss,50\n"
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "sankey-beta\nRaw Data,Cleaning,10000\nCleaning,Valid Records,8500\nCleaning,Rejected,1500\nValid Records,Processing,8500\nProcessing,Output DB,7000\nProcessing,Archive,1500\n"
        },
        {
          "language": "mermaid",
          "line_count": 13,
          "complexity": "simple",
          "code": "sankey-beta\nLanding Page,Sign Up,10000\nLanding Page,Browse,5000\nLanding Page,Exit,15000\nSign Up,Complete Profile,7000\nSign Up,Abandon,3000\nBrowse,Add to Cart,2000\nBrowse,Exit,3000\nAdd to Cart,Checkout"
        },
        {
          "language": "mermaid",
          "line_count": 18,
          "complexity": "simple",
          "code": "sankey-beta\nTotal Budget,Engineering,450000\nTotal Budget,Sales,300000\nTotal Budget,Marketing,150000\nTotal Budget,Operations,100000\n\nEngineering,Salaries,350000\nEngineering,Infrastructure,70000\nEnginee"
        },
        {
          "language": "mermaid",
          "line_count": 12,
          "complexity": "simple",
          "code": "sankey-beta\nTotal Memory,Application Heap,2048\nTotal Memory,Native Memory,512\nTotal Memory,System,512\n\nApplication Heap,Active Objects,1500\nApplication Heap,Cached Data,548\n\nActive Objects,User Sessio"
        },
        {
          "language": "mermaid",
          "line_count": 12,
          "complexity": "simple",
          "code": "mindmap\n    root((Project))\n        Planning\n            Requirements\n            Design\n        Development\n            Frontend\n            Backend\n        Testing\n            Unit Tests\n           "
        },
        {
          "language": "mermaid",
          "line_count": 10,
          "complexity": "simple",
          "code": "mindmap\n    root((Core Concept))\n        [Important Category]\n            (Sub-item 1)\n            (Sub-item 2)\n        {Cloud Topic}\n            ((Circle Item))\n            [!Bang Item!]\n        {{He"
        },
        {
          "language": "mermaid",
          "line_count": 10,
          "complexity": "simple",
          "code": "mindmap\n    root((Project))::icon(fa fa-project-diagram)\n        Planning::icon(fa fa-calendar)\n            Requirements\n            Timeline\n        Development::icon(fa fa-code)\n            Frontend"
        },
        {
          "language": "mermaid",
          "line_count": 35,
          "complexity": "medium",
          "code": "mindmap\n    root((E-commerce Platform))\n        Frontend\n            Web App\n                React\n                TypeScript\n                Vite\n            Mobile App\n                React Native\n "
        },
        {
          "language": "mermaid",
          "line_count": 38,
          "complexity": "medium",
          "code": "mindmap\n    root((Full-Stack Development))\n        Frontend\n            HTML/CSS\n                Semantic HTML\n                Flexbox\n                Grid\n            JavaScript\n                ES6+\n"
        },
        {
          "language": "mermaid",
          "line_count": 30,
          "complexity": "medium",
          "code": "mindmap\n    root((Launch New Feature))\n        Research\n            User Interviews\n            Competitor Analysis\n            Market Research\n        Design\n            Wireframes\n            Mockup"
        },
        {
          "language": "mermaid",
          "line_count": 21,
          "complexity": "medium",
          "code": "requirementDiagram\n    requirement UserAuth {\n        id: REQ-001\n        text: Users must authenticate\n        risk: high\n        verifymethod: test\n    }\n\n    functionalRequirement LoginAPI {\n      "
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "simple",
          "code": "gitGraph\n    commit\n    branch feat1\n    branch feat2\n    branch feat3\n    %% ... 10 more branches\n"
        },
        {
          "language": "mermaid",
          "line_count": 4,
          "complexity": "simple",
          "code": "sankey-beta\nInput,Process,100\nProcess,Output,120  %% Where did extra 20 come from?\n"
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "simple",
          "code": "mindmap\n    root\n        Item1\n        Item2\n        Item3\n        %% No grouping or structure\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/gitgraph.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/sankey.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/mindmap.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.live"
        },
        {
          "type": "external",
          "url": "https://nvie.com/posts/a-successful-git-branching-model/"
        },
        {
          "type": "external",
          "url": "https://trunkbaseddevelopment.com/"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "postgresql",
        "prometheus",
        "postgres",
        "grafana",
        "mongodb",
        "redis",
        "vite",
        "docker"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "23 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 74.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "build-systems/bazel-monorepos.md",
      "category": "build-systems",
      "skill_name": "bazel-monorepos",
      "frontmatter": {
        "name": "build-systems-bazel-monorepos",
        "description": "Bazel BUILD files, WORKSPACE/MODULE.bazel, hermetic builds, remote caching, build rules, Starlark custom rules, and monorepo best practices for polyglot projects."
      },
      "metrics": {
        "line_count": 769,
        "code_line_count": 210,
        "code_examples": 27,
        "external_refs": 11,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Install Bazelisk (manages Bazel versions)\n# macOS\nbrew install bazelisk\n\n# Linux\nwget https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64\nchmod +x bazelisk-linux-amd"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "medium",
          "code": "# WORKSPACE.bazel - Legacy dependency management\nworkspace(name = \"my_project\")\n\n# HTTP archive (external dependency)\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "medium",
          "code": "# MODULE.bazel - Modern dependency management\nmodule(\n    name = \"my_project\",\n    version = \"1.0.0\",\n)\n\n# Bazel Central Registry dependencies\nbazel_dep(name = \"rules_java\", version = \"6.0.0\")\nbazel_d"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "# java/BUILD.bazel\nload(\"@rules_java//java:defs.bzl\", \"java_binary\", \"java_library\", \"java_test\")\n\n# Library\njava_library(\n    name = \"utils\",\n    srcs = glob([\"com/example/utils/*.java\"]),\n    deps ="
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "medium",
          "code": "# cpp/BUILD.bazel\nload(\"@rules_cc//cc:defs.bzl\", \"cc_binary\", \"cc_library\", \"cc_test\")\n\n# Library\ncc_library(\n    name = \"mylib\",\n    srcs = [\"lib.cc\"],\n    hdrs = [\"lib.h\"],\n    deps = [\n        \"@co"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "medium",
          "code": "# python/BUILD.bazel\nload(\"@rules_python//python:defs.bzl\", \"py_binary\", \"py_library\", \"py_test\")\n\n# Library\npy_library(\n    name = \"utils\",\n    srcs = [\"utils.py\"],\n    deps = [\n        \"@pip//numpy\""
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "medium",
          "code": "# proto/BUILD.bazel\nload(\"@rules_proto//proto:defs.bzl\", \"proto_library\")\nload(\"@rules_java//java:defs.bzl\", \"java_proto_library\")\nload(\"@rules_python//python:proto.bzl\", \"py_proto_library\")\n\n# Proto "
        },
        {
          "language": "bash",
          "line_count": 32,
          "complexity": "medium",
          "code": "# .bazelrc - Build configuration\n# Common flags\nbuild --enable_platform_specific_config\nbuild --incompatible_strict_action_env\nbuild --verbose_failures\n\n# Performance\nbuild --jobs=8\nbuild --local_ram_"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Enable disk cache (default ~/.cache/bazel)\nbuild --disk_cache=~/.cache/bazel\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# .bazelrc\nbuild --remote_cache=https://cache.example.com\nbuild --remote_upload_local_results=true\n\n# Or use Google Cloud Storage\nbuild --remote_cache=https://storage.googleapis.com/my-bazel-cache\nbui"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Remote build execution (RBE)\nbuild --remote_executor=grpcs://remotebuildexecution.googleapis.com\nbuild --remote_instance_name=projects/my-project/instances/default_instance\nbuild --google_default_cr"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "# rules/custom.bzl\ndef _my_rule_impl(ctx):\n    \"\"\"Implementation function for my_rule.\"\"\"\n    # Access attributes\n    input_file = ctx.file.src\n    output_file = ctx.actions.declare_file(ctx.label.nam"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# BUILD.bazel - Use custom rule\nload(\"//rules:custom.bzl\", \"my_rule\")\n\nmy_rule(\n    name = \"processed\",\n    src = \"input.txt\",\n)\n"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "medium",
          "code": "# rules/code_gen.bzl\ndef _code_gen_impl(ctx):\n    \"\"\"Generate code from template.\"\"\"\n    template = ctx.file.template\n    output = ctx.actions.declare_file(ctx.attr.output_name)\n\n    # Run Python scri"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "medium",
          "code": "# Restrict visibility\njava_library(\n    name = \"internal_utils\",\n    srcs = [\"Utils.java\"],\n    visibility = [\"//java:__subpackages__\"],  # Only java/ subtree\n)\n\n# Public visibility\njava_library(\n    "
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Glob source files\njava_library(\n    name = \"lib\",\n    srcs = glob([\"src/**/*.java\"]),\n    resources = glob([\"resources/**/*\"]),\n)\n\n# Exclude patterns\njava_library(\n    name = \"lib\",\n    srcs = glob("
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# macros/java.bzl\ndef java_module(name, srcs, deps = [], **kwargs):\n    \"\"\"Standard Java module with library and test.\"\"\"\n    native.java_library(\n        name = name,\n        srcs = srcs,\n        dep"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# BUILD.bazel\nload(\"//macros:java.bzl\", \"java_module\")\n\njava_module(\n    name = \"utils\",\n    srcs = glob([\"utils/**/*.java\"]),\n    deps = [\"@maven//:com_google_guava_guava\"],\n)\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Show dependency graph\nbazel query --output=graph //java/... > graph.dot\n\n# Find dependencies\nbazel query \"deps(//java:app)\"\n\n# Reverse dependencies (what depends on X)\nbazel query \"rdeps(//..., //ja"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Profile build\nbazel build //java:app --profile=profile.json\n\n# View profile\nbazel analyze-profile profile.json\n\n# Show action timing\nbazel build //java:app --experimental_show_artifacts --experiment"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Bazel automatically detects changes\n# Only rebuilds affected targets\n\n# Force rebuild\nbazel clean\nbazel build //...\n\n# Or specific target\nbazel clean --expunge  # Nuclear option (clears all caches)\n"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "medium",
          "code": "# WRONG: External system dependency\ngenrule(\n    name = \"bad\",\n    outs = [\"output.txt\"],\n    cmd = \"curl https://example.com/data > $@\",  # Network access!\n)\n\n# CORRECT: Explicit dependency\nhttp_file"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# WRONG: Too broad, includes unintended files\nsrcs = glob([\"**/*.java\"])\n\n# CORRECT: Specific patterns\nsrcs = glob(\n    [\"src/**/*.java\"],\n    exclude = [\n        \"**/*Test.java\",\n        \"**/testdata"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# WRONG: Unpinned version (non-reproducible)\nhttp_archive(\n    name = \"rules_java\",\n    urls = [\"https://github.com/bazelbuild/rules_java/archive/refs/heads/main.zip\"],\n)\n\n# CORRECT: Pinned version wi"
        },
        {
          "language": "bash",
          "line_count": 26,
          "complexity": "medium",
          "code": "# Build\nbazel build //java:app                # Build target\nbazel build //java/...                # Build all in java/\nbazel build //...                     # Build entire workspace\n\n# Test\nbazel tes"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# tools/generator.py - Custom code generator\nimport argparse\n\ndef generate(template_path, output_path, config):\n    with open(template_path) as f:\n        template = f.read()\n\n    # Process template ("
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# tools/BUILD.bazel\npy_binary(\n    name = \"generator\",\n    srcs = [\"generator.py\"],\n    visibility = [\"//visibility:public\"],\n)\n"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64"
        },
        {
          "type": "github",
          "url": "https://github.com/bazelbuild/rules_java/archive/refs/tags/6.0.0.tar.gz\"]"
        },
        {
          "type": "github",
          "url": "https://github.com/bazelbuild/rules_python/releases/download/0.27.0/rules_python-0.27.0.tar.gz\"]"
        },
        {
          "type": "external",
          "url": "https://repo.maven.apache.org/maven2\""
        },
        {
          "type": "example",
          "url": "https://cache.example.com"
        },
        {
          "type": "example",
          "url": "https://cache.example.com"
        },
        {
          "type": "external",
          "url": "https://storage.googleapis.com/my-bazel-cache"
        },
        {
          "type": "example",
          "url": "https://example.com/data"
        },
        {
          "type": "example",
          "url": "https://example.com/data\"]"
        },
        {
          "type": "github",
          "url": "https://github.com/bazelbuild/rules_java/archive/refs/heads/main.zip\"]"
        },
        {
          "type": "github",
          "url": "https://github.com/bazelbuild/rules_java/archive/refs/tags/6.0.0.tar.gz\"]"
        }
      ],
      "tools_mentioned": [
        "apache",
        "pytest"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "27 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 74.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "containers/container-networking.md",
      "category": "containers",
      "skill_name": "container-networking",
      "frontmatter": {
        "name": "containers-container-networking",
        "description": "Configuring container network connectivity"
      },
      "metrics": {
        "line_count": 737,
        "code_line_count": 330,
        "code_examples": 47,
        "external_refs": 6,
        "tools_mentioned": 5,
        "config_snippets": 14
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Containers on default bridge network can communicate\ndocker run -d --name web nginx\ndocker run -d --name api node\n# 'web' and 'api' can reach each other via IP, not name\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "docker network create mynetwork\n\ndocker run -d --name web --network mynetwork nginx\ndocker run -d --name api --network mynetwork node\n\n# 'web' can reach 'api' via hostname\ndocker exec web curl http://"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Default bridge (docker0)\ndocker run -d --name web nginx\n# No automatic DNS, use IP addresses\n\n# Custom bridge\ndocker network create mybridge\ndocker run -d --name web --network mybridge nginx\n# DNS w"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "services:\n  web:\n    image: nginx\n  api:\n    image: node\n# Docker Compose creates custom bridge automatically\n# Services resolve each other by name\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "docker run -d --network host nginx\n# Nginx binds to host's port 80 directly\n# No -p flag needed\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "services:\n  monitor:\n    image: netdata/netdata\n    network_mode: host   # Use host network\n"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Initialize swarm\ndocker swarm init\n\n# Create overlay network\ndocker network create -d overlay myoverlay\n\n# Deploy service\ndocker service create \\\n  --name web \\\n  --network myoverlay \\\n  --replicas "
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "docker network create \\\n  -d overlay \\\n  --opt encrypted \\\n  secure-overlay\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "docker network create -d macvlan \\\n  --subnet=192.168.1.0/24 \\\n  --gateway=192.168.1.1 \\\n  -o parent=eth0 \\\n  macvlan-net\n\ndocker run -d \\\n  --network macvlan-net \\\n  --ip=192.168.1.100 \\\n  nginx\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "docker run -d --network none alpine\n# No network interfaces (except loopback)\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# -p HOST_PORT:CONTAINER_PORT\ndocker run -d -p 8080:80 nginx\n# Access via http://localhost:8080\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Localhost only\ndocker run -d -p 127.0.0.1:8080:80 nginx\n\n# Specific IP\ndocker run -d -p 192.168.1.10:8080:80 nginx\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "docker run -d -p 80 nginx\n\n# Find assigned port\ndocker port <container_id> 80\n# 0.0.0.0:32768\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "docker run -d \\\n  -p 8080:80 \\\n  -p 8443:443 \\\n  nginx\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "docker run -d -p 53:53/udp dns-server\n"
        },
        {
          "language": "dockerfile",
          "line_count": 3,
          "complexity": "simple",
          "code": "EXPOSE 80\n# Documents intent, doesn't publish port\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "docker run -d -p 8080:80 nginx\n# Actually maps port to host\n"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "services:\n  web:\n    expose:\n      - \"80\"   # Available to other services only\n\n  api:\n    ports:\n      - \"8080:80\"   # Published to host\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Create network\ndocker network create mynet\n\n# Run containers\ndocker run -d --name db --network mynet postgres\ndocker run -d --name api --network mynet node\n\n# DNS works automatically\ndocker exec api"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Inside 'api' container\ncurl http://db:5432\n# Resolves 'db' to container IP\n"
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "services:\n  web:\n    image: nginx\n  api:\n    image: node\n    environment:\n      - DB_HOST=db   # Resolves to 'db' service\n  db:\n    image: postgres\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "docker run -d \\\n  --name api \\\n  --network mynet \\\n  --network-alias backend \\\n  --network-alias api-server \\\n  node\n\n# Reachable via 'api', 'backend', or 'api-server'\n"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "services:\n  api:\n    networks:\n      mynet:\n        aliases:\n          - backend\n          - api-server\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "docker run -d \\\n  --dns 8.8.8.8 \\\n  --dns 1.1.1.1 \\\n  nginx\n"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "services:\n  web:\n    dns:\n      - 8.8.8.8\n      - 1.1.1.1\n    dns_search:\n      - example.com\n"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "docker network create frontend\ndocker network create backend\n\n# Web server on frontend only\ndocker run -d --name web --network frontend nginx\n\n# API on both networks\ndocker run -d --name api node\ndock"
        },
        {
          "language": "yaml",
          "line_count": 18,
          "complexity": "simple",
          "code": "services:\n  web:\n    networks:\n      - frontend\n\n  api:\n    networks:\n      - frontend\n      - backend\n\n  db:\n    networks:\n      - backend\n\nnetworks:\n  frontend:\n  backend:\n"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "docker network create \\\n  --internal \\\n  isolated-network\n\ndocker run -d \\\n  --name secure-db \\\n  --network isolated-network \\\n  postgres\n# Can't reach internet, only other containers on network\n"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "networks:\n  internal:\n    internal: true   # No external connectivity\n\nservices:\n  db:\n    networks:\n      - internal\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# List networks\ndocker network ls\n\n# Inspect network\ndocker network inspect mynetwork\n\n# See containers on network\ndocker network inspect mynetwork --format='{{range .Containers}}{{.Name}} {{end}}'\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "docker exec web ping api\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "docker exec web nslookup api\ndocker exec web dig api\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "docker exec web curl http://api:3000/health\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "docker exec api netstat -tuln\ndocker exec api ss -tuln\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Check network\ndocker inspect api --format='{{.NetworkSettings.Networks}}'\n\n# Connect to network\ndocker network connect mynetwork api\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Find process\nlsof -i :8080\n\n# Kill process\nkill -9 <PID>\n\n# Or use different port\ndocker run -d -p 8081:80 nginx\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "docker network inspect mynetwork\n# Ensure both containers listed\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bypass Docker networking stack\ndocker run -d --network host nginx\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "docker network create \\\n  --opt com.docker.network.driver.mtu=9000 \\\n  jumbo-network\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "docker network create \\\n  --opt com.docker.network.bridge.enable_icc=true \\\n  --opt com.docker.network.bridge.enable_ip_masquerade=false \\\n  fast-network\n"
        },
        {
          "language": "yaml",
          "line_count": 29,
          "complexity": "medium",
          "code": "version: '3.8'\n\nservices:\n  web:\n    image: nginx\n    networks:\n      - public\n    ports:\n      - \"80:80\"\n\n  api:\n    image: node\n    networks:\n      - public\n      - private\n    environment:\n      - "
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "networks:\n  existing-net:\n    external: true   # Use pre-existing network\n\nservices:\n  app:\n    networks:\n      - existing-net\n"
        },
        {
          "language": "yaml",
          "line_count": 14,
          "complexity": "simple",
          "code": "networks:\n  mynet:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.28.0.0/16\n          gateway: 172.28.0.1\n\nservices:\n  web:\n    networks:\n      mynet:\n        ipv4_address: 172.28.0."
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Isolate services by function\nnetworks:\n  frontend:   # Public-facing\n  backend:    # Internal only\n  data:       # Database tier\n    internal: true\n"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "services:\n  api:\n    expose:\n      - \"3000\"   # Available to services only (not host)\n\n  web:\n    ports:\n      - \"80:80\"  # Published to host (necessary)\n"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "networks:\n  secure:\n    internal: true   # No internet access\n\nservices:\n  db:\n    networks:\n      - secure   # Isolated from internet\n"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Create network\ndocker network create mynet\n\n# List networks\ndocker network ls\n\n# Inspect network\ndocker network inspect mynet\n\n# Connect container\ndocker network connect mynet container_name\n\n# Disc"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://api:3000"
        },
        {
          "type": "example",
          "url": "http://localhost:8080"
        },
        {
          "type": "external",
          "url": "http://db:5432"
        },
        {
          "type": "external",
          "url": "http://api:3000/health"
        },
        {
          "type": "external",
          "url": "https://google.com`"
        },
        {
          "type": "external",
          "url": "http://api`"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "tls",
        "nginx",
        "postgres",
        "docker"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "47 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "2 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 74.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "proxies/envoy-proxy.md",
      "category": "proxies",
      "skill_name": "envoy-proxy",
      "frontmatter": {
        "name": "proxies-envoy-proxy",
        "description": "Envoy proxy architecture including filters, clusters, listeners, service mesh patterns, observability, and advanced load balancing"
      },
      "metrics": {
        "line_count": 679,
        "code_line_count": 119,
        "code_examples": 14,
        "external_refs": 6,
        "tools_mentioned": 5,
        "config_snippets": 12
      },
      "code_examples": [
        {
          "language": "yaml",
          "line_count": 48,
          "complexity": "medium",
          "code": "# envoy.yaml\nstatic_resources:\n  listeners:\n    - name: listener_0\n      address:\n        socket_address:\n          address: 0.0.0.0\n          port_value: 10000\n\n      filter_chains:\n        - filters"
        },
        {
          "language": "yaml",
          "line_count": 62,
          "complexity": "complex",
          "code": "clusters:\n  - name: backend_cluster\n    connect_timeout: 1s\n    type: STRICT_DNS\n\n    # Load balancing policy\n    lb_policy: LEAST_REQUEST\n    least_request_lb_config:\n      choice_count: 2\n\n    # Cir"
        },
        {
          "language": "yaml",
          "line_count": 47,
          "complexity": "medium",
          "code": "route_config:\n  name: local_route\n  virtual_hosts:\n    - name: services\n      domains: [\"example.com\", \"*.example.com\"]\n\n      routes:\n        # API v1 with retry policy\n        - match:\n            p"
        },
        {
          "language": "yaml",
          "line_count": 65,
          "complexity": "complex",
          "code": "http_filters:\n  # Rate limiting\n  - name: envoy.filters.http.ratelimit\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit\n      domain: api_ratel"
        },
        {
          "language": "yaml",
          "line_count": 20,
          "complexity": "simple",
          "code": "access_log:\n  - name: envoy.access_loggers.file\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog\n      path: /var/log/envoy/access.log\n      l"
        },
        {
          "language": "yaml",
          "line_count": 21,
          "complexity": "medium",
          "code": "tracing:\n  http:\n    name: envoy.tracers.zipkin\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.config.trace.v3.ZipkinConfig\n      collector_cluster: zipkin_cluster\n      collector_endpoint"
        },
        {
          "language": "yaml",
          "line_count": 16,
          "complexity": "simple",
          "code": "admin:\n  address:\n    socket_address:\n      address: 0.0.0.0\n      port_value: 9901\n\nstats_sinks:\n  - name: envoy.stat_sinks.prometheus\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.exten"
        },
        {
          "language": "yaml",
          "line_count": 112,
          "complexity": "complex",
          "code": "# Envoy as sidecar proxy\nnode:\n  id: service-v1\n  cluster: service-cluster\n\nstatic_resources:\n  listeners:\n    # Inbound listener (accept traffic to this service)\n    - name: inbound_listener\n      ad"
        },
        {
          "language": "python",
          "line_count": 79,
          "complexity": "complex",
          "code": "import grpc\nfrom concurrent import futures\nfrom envoy.service.discovery.v3 import discovery_pb2_grpc\nfrom envoy.config.endpoint.v3 import endpoint_pb2\nfrom envoy.config.cluster.v3 import cluster_pb2\n\n"
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "clusters:\n  - name: backend_cluster\n    # ... other config\n    http2_protocol_options:\n      max_concurrent_streams: 100\n    max_requests_per_connection: 100\n"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "route:\n  cluster: backend_cluster\n  timeout: 15s\n  idle_timeout: 60s\n  retry_policy:\n    retry_on: \"5xx\"\n    num_retries: 3\n    per_try_timeout: 5s\n"
        },
        {
          "language": "yaml",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Always enable tracing, metrics, and logging\ntracing:\n  http:\n    name: envoy.tracers.zipkin\n\nstats_sinks:\n  - name: envoy.stat_sinks.prometheus\n\naccess_log:\n  - name: envoy.access_loggers.file\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Check Envoy admin interface\ncurl http://localhost:9901/stats | grep upstream\n\n# Check cluster health\ncurl http://localhost:9901/clusters\n\n# Enable debug logging\ncurl -X POST http://localhost:9901/lo"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "circuit_breakers:\n  thresholds:\n    - priority: DEFAULT\n      max_connections: 2048  # Increase\n      max_pending_requests: 2048  # Increase\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://example.auth0.com/\""
        },
        {
          "type": "external",
          "url": "https://example.auth0.com/.well-known/jwks.json\""
        },
        {
          "type": "example",
          "url": "http://localhost:9901/stats/prometheus"
        },
        {
          "type": "example",
          "url": "http://localhost:9901/stats"
        },
        {
          "type": "example",
          "url": "http://localhost:9901/clusters"
        },
        {
          "type": "example",
          "url": "http://localhost:9901/logging?level=debug"
        }
      ],
      "tools_mentioned": [
        "envoy",
        "nginx",
        "prometheus",
        "ssl",
        "jwt"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 74.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "caching/cdn-edge-caching.md",
      "category": "caching",
      "skill_name": "cdn-edge-caching",
      "frontmatter": {
        "name": "caching-cdn-edge-caching",
        "description": "CDN and edge cache optimization with Cloudflare, Fastly, and CloudFront for global performance and reduced origin load"
      },
      "metrics": {
        "line_count": 830,
        "code_line_count": 111,
        "code_examples": 13,
        "external_refs": 10,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\n\n@dataclass\nclass CDNPerformanceMetrics:\n    \"\"\"Real-world CDN performance improvements\"\"\"\n\n    # TTFB improvements with edge caching\n    without_cdn = {\n        \"ave"
        },
        {
          "language": "javascript",
          "line_count": 33,
          "complexity": "medium",
          "code": "// Cloudflare Workers example\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n\n    // Define cache behavior by path\n    let cacheControl;\n\n    if (url.pathnam"
        },
        {
          "language": "python",
          "line_count": 62,
          "complexity": "complex",
          "code": "class CloudflareEdgeTTL:\n    \"\"\"Cloudflare Edge TTL best practices (2024)\"\"\"\n\n    @staticmethod\n    def dynamic_content():\n        \"\"\"\n        Dynamic content with short Edge TTL\n\n        Ensures cont"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "class CloudflareTieredCache:\n    \"\"\"\n    Tiered Cache optimization (included with all plans)\n\n    Flow: Edge PoP \u2192 Regional Tier \u2192 Origin\n    \"\"\"\n\n    benefits = {\n        \"reduced_origin_load\": \"Uppe"
        },
        {
          "language": "javascript",
          "line_count": 32,
          "complexity": "medium",
          "code": "// Cloudflare Worker: Bypass cache for authenticated users\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n\n    // Check for session cookie\n    const cookies "
        },
        {
          "language": "vcl",
          "line_count": 42,
          "complexity": "medium",
          "code": "# Fastly VCL example\nsub vcl_recv {\n  # Skip cache for authenticated requests\n  if (req.http.Cookie ~ \"session_id\") {\n    return(pass);\n  }\n\n  # Normalize URL for better cache hit rate\n  if (req.url ~"
        },
        {
          "language": "python",
          "line_count": 71,
          "complexity": "complex",
          "code": "class FastlySurrogateKeys:\n    \"\"\"Surrogate key patterns for efficient purging\"\"\"\n\n    @staticmethod\n    def set_surrogate_keys(product_id: int, category_id: int) -> str:\n        \"\"\"\n        Set multi"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "class FastlyPurgeStrategies:\n    \"\"\"Purge strategies for different scenarios\"\"\"\n\n    @staticmethod\n    def instant_purge():\n        \"\"\"\n        Hard purge: Immediately remove from cache\n\n        Use w"
        },
        {
          "language": "python",
          "line_count": 92,
          "complexity": "complex",
          "code": "class CloudFrontCacheBehaviors:\n    \"\"\"AWS CloudFront cache configuration\"\"\"\n\n    @staticmethod\n    def static_assets_behavior():\n        \"\"\"Cache behavior for static assets\"\"\"\n        return {\n      "
        },
        {
          "language": "javascript",
          "line_count": 41,
          "complexity": "medium",
          "code": "// Lambda@Edge: Viewer Request\nexports.handler = async (event) => {\n  const request = event.Records[0].cf.request;\n  const headers = request.headers;\n\n  // Normalize URL for better cache hit rate\n  if"
        },
        {
          "language": "python",
          "line_count": 73,
          "complexity": "complex",
          "code": "import asyncio\nimport aiohttp\nfrom typing import List\n\nclass CacheWarming:\n    \"\"\"Proactive cache warming for deployments\"\"\"\n\n    @staticmethod\n    async def warm_urls(urls: List[str], headers: dict ="
        },
        {
          "language": "python",
          "line_count": 45,
          "complexity": "complex",
          "code": "class GeoCaching:\n    \"\"\"Geographic caching strategies\"\"\"\n\n    @staticmethod\n    def geo_specific_content():\n        \"\"\"\n        Serve different content by region\n\n        Use Vary header or separate "
        },
        {
          "language": "python",
          "line_count": 63,
          "complexity": "complex",
          "code": "class CDNCacheDebugging:\n    \"\"\"Tools for debugging CDN cache behavior\"\"\"\n\n    @staticmethod\n    def check_cache_status():\n        \"\"\"\n        Interpret cache status headers\n\n        Common headers:\n "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://api.fastly.com/service/{service_id}/purge/{surrogate_key}\""
        },
        {
          "type": "external",
          "url": "https://api.fastly.com/purge/{url}\""
        },
        {
          "type": "external",
          "url": "http://www.sitemaps.org/schemas/sitemap/0.9}loc'"
        },
        {
          "type": "example",
          "url": "https://example.com/\""
        },
        {
          "type": "example",
          "url": "https://example.com/products\""
        },
        {
          "type": "example",
          "url": "https://example.com/api/featured\""
        },
        {
          "type": "example",
          "url": "https://cdn.example.com/na/${request.url}`"
        },
        {
          "type": "example",
          "url": "https://cdn.example.com/eu/${request.url}`"
        },
        {
          "type": "example",
          "url": "https://cdn.example.com/global/${request.url}`"
        },
        {
          "type": "example",
          "url": "https://example.com/api/data"
        }
      ],
      "tools_mentioned": [
        "terraform",
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 74.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/gossip-protocols.md",
      "category": "distributed-systems",
      "skill_name": "gossip-protocols",
      "frontmatter": {
        "name": "distributed-systems-gossip-protocols",
        "description": "Gossip protocols for disseminating information, failure detection, and eventual consistency in large-scale distributed systems"
      },
      "metrics": {
        "line_count": 383,
        "code_line_count": 48,
        "code_examples": 7,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "import random\nimport time\n\nclass GossipNode:\n    \"\"\"Node implementing push-based gossip\"\"\"\n\n    def __init__(self, node_id, all_nodes):\n        self.node_id = node_id\n        self.all_nodes = all_node"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "class AntiEntropyNode:\n    \"\"\"Node with periodic full state synchronization\"\"\"\n\n    def __init__(self, node_id, all_nodes):\n        self.node_id = node_id\n        self.all_nodes = all_nodes\n        se"
        },
        {
          "language": "python",
          "line_count": 56,
          "complexity": "complex",
          "code": "import threading\n\nclass SWIMNode:\n    \"\"\"Scalable Weakly-consistent Infection-style Process Group Membership\"\"\"\n\n    def __init__(self, node_id, all_nodes):\n        self.node_id = node_id\n        self"
        },
        {
          "language": "python",
          "line_count": 47,
          "complexity": "complex",
          "code": "class MembershipGossip:\n    \"\"\"Distributed membership using gossip\"\"\"\n\n    def __init__(self, node_id):\n        self.node_id = node_id\n        self.members = {}  # node_id \u2192 (heartbeat, timestamp)\n\n  "
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Limit gossip fanout to control overhead\nFANOUT = 3  # Each node gossips to 3 peers\n\n# Achieves O(log N) convergence with O(N) messages per round\n"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "class DampedGossip:\n    \"\"\"Stop gossiping old news\"\"\"\n\n    def __init__(self):\n        self.gossip_count = {}  # update_id \u2192 count\n\n    def should_gossip(self, update_id):\n        count = self.gossip_"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Gossip recent/important updates more frequently\n# Gossip old updates less frequently\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "7 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 73.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "engineering/pair-programming.md",
      "category": "engineering",
      "skill_name": "pair-programming",
      "frontmatter": {
        "name": "engineering-pair-programming",
        "description": "Pair programming techniques, driver-navigator roles, mob programming, remote pairing tools and best practices"
      },
      "metrics": {
        "line_count": 491,
        "code_line_count": 38,
        "code_examples": 5,
        "external_refs": 4,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "markdown",
          "line_count": 12,
          "complexity": "simple",
          "code": "1. Define goal (30 seconds)\n   \"We're implementing user authentication\"\n\n2. Agree on approach (2 minutes)\n   \"Let's use JWT tokens and bcrypt for passwords\"\n\n3. Set time box (1-2 hours)\n   \"Let's pair"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Host starts session\n# Share link with pair\n\n# Guest joins\n# Both can edit, run terminal, debug\n\n# Benefits:\n# - No lag (local editing)\n# - Each person uses own setup\n# - Shared terminal and debugger"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# High-quality audio crucial\n- Use headphones (reduce echo)\n- Use quality mic (not laptop mic)\n- Test audio before session\n\n# Screen sharing\n- Share entire screen (not just window)\n- Increase font siz"
        },
        {
          "language": "markdown",
          "line_count": 7,
          "complexity": "simple",
          "code": "Weekly Pairing Retrospective:\n1. What worked well?\n2. What could improve?\n3. Did you learn something new?\n4. Was pairing time well spent?\n5. Would you pair on this task again?\n"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "medium",
          "code": "# Person A: Write failing test\ndef test_calculate_discount_for_vip():\n    customer = Customer(type=\"VIP\")\n    discount = calculate_discount(customer, purchase_amount=100)\n    assert discount == 20  # "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://www.amazon.com/Pair-Programming-Illuminated-Laurie-Williams/dp/0201745763"
        },
        {
          "type": "external",
          "url": "https://www.agilealliance.org/resources/experience-reports/mob-programming-agile2014/"
        },
        {
          "type": "external",
          "url": "https://llewellynfalco.blogspot.com/2014/06/llewellyns-strong-style-pairing.html"
        },
        {
          "type": "external",
          "url": "https://martinfowler.com/articles/remote-or-co-located.html"
        }
      ],
      "tools_mentioned": [
        "jwt"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "5 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 73.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "diagrams/mermaid-architecture-diagrams.md",
      "category": "diagrams",
      "skill_name": "mermaid-architecture-diagrams",
      "frontmatter": {
        "name": "mermaid-architecture-diagrams",
        "description": "Create C4 and block architecture diagrams with Mermaid for system design and infrastructure visualization"
      },
      "metrics": {
        "line_count": 539,
        "code_line_count": 175,
        "code_examples": 24,
        "external_refs": 5,
        "tools_mentioned": 7,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "mermaid",
          "line_count": 16,
          "complexity": "simple",
          "code": "C4Context\n    title System Context for Online Banking\n\n    Person(customer, \"Customer\", \"A banking customer\")\n    Person(admin, \"Administrator\", \"Bank staff member\")\n\n    System(banking, \"Online Banki"
        },
        {
          "language": "mermaid",
          "line_count": 19,
          "complexity": "simple",
          "code": "C4Context\n    title E-commerce Platform Context\n\n    Person(buyer, \"Buyer\", \"Purchases products\")\n    Person(seller, \"Seller\", \"Lists products\")\n\n    System_Boundary(platform, \"E-commerce Platform\") {"
        },
        {
          "language": "mermaid",
          "line_count": 24,
          "complexity": "medium",
          "code": "C4Container\n    title Container Diagram for Banking System\n\n    Person(customer, \"Customer\")\n\n    Container_Boundary(system, \"Banking System\") {\n        Container(web, \"Web Application\", \"React\", \"Del"
        },
        {
          "language": "mermaid",
          "line_count": 24,
          "complexity": "medium",
          "code": "C4Component\n    title Component Diagram for API Gateway\n\n    Container(web, \"Web App\")\n    Container(db, \"Database\")\n\n    Container_Boundary(api, \"API Gateway\") {\n        Component(router, \"Router\", \""
        },
        {
          "language": "mermaid",
          "line_count": 42,
          "complexity": "medium",
          "code": "C4Container\n    title Microservices E-commerce Platform\n\n    Person(user, \"User\")\n\n    Container_Boundary(frontend, \"Frontend\") {\n        Container(web, \"Web App\", \"React\", \"SPA\")\n        Container(mo"
        },
        {
          "language": "mermaid",
          "line_count": 21,
          "complexity": "medium",
          "code": "C4Container\n    title Serverless Image Processing\n\n    Person(user, \"User\")\n\n    Container_Boundary(aws, \"AWS Cloud\") {\n        Container(s3_upload, \"Upload Bucket\", \"S3\", \"Raw images\")\n        Contai"
        },
        {
          "language": "mermaid",
          "line_count": 4,
          "complexity": "simple",
          "code": "block-beta\n    columns 3\n    Frontend Backend Database\n"
        },
        {
          "language": "mermaid",
          "line_count": 4,
          "complexity": "simple",
          "code": "block-beta\n    columns 3\n    A[\"Web App\"] B[\"API Server\"] C[\"PostgreSQL\"]\n"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "block-beta\n    columns 3\n    LoadBalancer:3\n    Server1 Server2 Server3\n    Database:3\n"
        },
        {
          "language": "mermaid",
          "line_count": 9,
          "complexity": "simple",
          "code": "block-beta\n    columns 1\n    A[\"Rectangle - Default\"]\n    B(\"Rounded - Service\")\n    C((\"Circle - Node\"))\n    D[(\"Cylinder - Database\")]\n    E{{\"Hexagon - Process\"}}\n    F>\"Asymmetric - Queue\"]\n"
        },
        {
          "language": "mermaid",
          "line_count": 18,
          "complexity": "simple",
          "code": "block-beta\n    columns 3\n\n    block:Frontend:1\n        Web[\"Web App\"]\n        Mobile[\"Mobile App\"]\n    end\n\n    block:Backend:1\n        API[\"API Gateway\"]\n        Services[\"Microservices\"]\n    end\n\n  "
        },
        {
          "language": "mermaid",
          "line_count": 5,
          "complexity": "simple",
          "code": "block-beta\n    columns 3\n    Client --> Gateway --> Services\n    Services --> Database\n"
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "block-beta\n    columns 2\n    Frontend[\"Web App\"]\n    Backend[\"API Server\"]\n\n    Frontend -- \"HTTPS\" --> Backend\n    Backend -- \"SQL\" --> DB[(\"PostgreSQL\")]\n"
        },
        {
          "language": "mermaid",
          "line_count": 36,
          "complexity": "medium",
          "code": "block-beta\n    columns 3\n\n    block:Presentation:3\n        Web[\"Web Browser\"]\n        Mobile[\"Mobile App\"]\n    end\n\n    space\n\n    block:Application:3\n        LB[\"Load Balancer\"]:3\n        App1[\"App S"
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "block-beta\n    columns 5\n\n    Producer1[\"Order Service\"]\n    Producer2[\"Payment Service\"]\n    Queue>\"Event Bus\"]\n    Consumer1[\"Email Service\"]\n    Consumer2[\"Analytics Service\"]\n\n    Producer1 -- \"Or"
        },
        {
          "language": "mermaid",
          "line_count": 37,
          "complexity": "medium",
          "code": "block-beta\n    columns 4\n\n    block:Internet:4\n        Users[\"Users\"]\n    end\n\n    block:AWS:4\n        CDN[\"CloudFront CDN\"]:4\n\n        space\n        ALB[\"Load Balancer\"]:2\n        space\n\n        bloc"
        },
        {
          "language": "mermaid",
          "line_count": 44,
          "complexity": "medium",
          "code": "block-beta\n    columns 3\n\n    block:K8s:3\n        columns 3\n\n        Ingress[\"Ingress Controller\"]:3\n\n        space:3\n\n        block:Frontend:1\n            FE_Pod1[\"Frontend Pod 1\"]\n            FE_Pod"
        },
        {
          "language": "mermaid",
          "line_count": 5,
          "complexity": "simple",
          "code": "C4Container\n    Container(web, \"Web App\", \"React 18\", \"SPA with Vite\")\n    Container(api, \"API\", \"FastAPI + Python 3.11\", \"REST API\")\n    Container(db, \"Database\", \"PostgreSQL 15\", \"Primary datastore\""
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "block-beta\n    Client --> Gateway\n    Gateway --> Service\n    Service --> Database\n    Database -- \"Async\" --> Cache\n"
        },
        {
          "language": "mermaid",
          "line_count": 5,
          "complexity": "simple",
          "code": "C4Context\n    System(app, \"Your System\")\n    System_Ext(stripe, \"Stripe\", \"Payment processing\")\n    System_Ext(sendgrid, \"SendGrid\", \"Email delivery\")\n"
        },
        {
          "language": "mermaid",
          "line_count": 3,
          "complexity": "simple",
          "code": "C4Container\n    Container(api, \"API\")  %% What technology?\n"
        },
        {
          "language": "mermaid",
          "line_count": 3,
          "complexity": "simple",
          "code": "C4Container\n    Container(api, \"API\", \"Node.js + Express\", \"REST API\")\n"
        },
        {
          "language": "mermaid",
          "line_count": 4,
          "complexity": "simple",
          "code": "block-beta\n    A --> B\n    B --> C\n"
        },
        {
          "language": "mermaid",
          "line_count": 4,
          "complexity": "simple",
          "code": "block-beta\n    A -- \"HTTPS/JSON\" --> B\n    B -- \"gRPC\" --> C\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://c4model.com"
        },
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/c4.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/block.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.live"
        },
        {
          "type": "external",
          "url": "https://microservices.io/patterns/index.html"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "postgresql",
        "postgres",
        "mongodb",
        "jwt",
        "redis",
        "vite"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "24 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 72.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "ml/llm-evaluation-frameworks.md",
      "category": "ml",
      "skill_name": "llm-evaluation-frameworks",
      "frontmatter": {
        "name": "ml-llm-evaluation-frameworks",
        "description": "Production-grade LLM evaluation using Arize Phoenix (OpenTelemetry tracing, self-hosted evals), Braintrust (86x faster search), LangSmith, and Langfuse with cost tracking and observability integration"
      },
      "metrics": {
        "line_count": 922,
        "code_line_count": 129,
        "code_examples": 17,
        "external_refs": 6,
        "tools_mentioned": 4,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Installation\npip install arize-phoenix openinference-instrumentation-openai\n\n# Start Phoenix server (local)\npython -m phoenix.server.main serve\n\n# Or use Docker\ndocker run -p 6006:6006 arizephoenix/"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "from phoenix.otel import register\nfrom openinference.instrumentation.openai import OpenAIInstrumentor\nfrom openai import OpenAI\n\n# Configure Phoenix endpoint\ntracer_provider = register(\n    project_na"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "from phoenix.otel import register\nfrom openinference.instrumentation.langchain import LangChainInstrumentor\nfrom langchain_openai import ChatOpenAI\nfrom langchain.prompts import ChatPromptTemplate\nfro"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "from phoenix.otel import register\nfrom openinference.instrumentation.llama_index import LlamaIndexInstrumentor\nfrom llama_index.core import VectorStoreIndex, SimpleDirectoryReader\n\n# Setup Phoenix\ntra"
        },
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "import phoenix as px\nfrom phoenix.evals import (\n    HallucinationEvaluator,\n    RelevanceEvaluator,\n    ToxicityEvaluator,\n    OpenAIModel,\n)\n\n# Launch Phoenix and get session\nsession = px.launch_app"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "from phoenix.evals import LLMEvaluator, OpenAIModel\nfrom phoenix.evals.models import EvalCriteria\n\n# Define custom evaluation criteria\ncode_quality_template = \"\"\"\nYou are evaluating code quality. Rate"
        },
        {
          "language": "python",
          "line_count": 68,
          "complexity": "complex",
          "code": "import phoenix as px\nfrom phoenix.experiments import run_experiment\nfrom openai import OpenAI\n\n# Create dataset\ndataset = px.Client().create_dataset(\n    dataset_name=\"customer-support-qa\",\n    descri"
        },
        {
          "language": "python",
          "line_count": 70,
          "complexity": "complex",
          "code": "import braintrust\nfrom braintrust import init_logger\n\n# Initialize Braintrust\nproject = braintrust.init(\n    project=\"customer-support-qa\",\n    api_key=\"your-api-key\",\n)\n\n# Log experiment\nexperiment ="
        },
        {
          "language": "python",
          "line_count": 84,
          "complexity": "complex",
          "code": "import phoenix as px\nfrom openai import OpenAI\nfrom datetime import datetime, timedelta\n\n# Setup Phoenix with cost tracking\ntracer_provider = px.otel.register(\n    project_name=\"cost-tracking\",\n    en"
        },
        {
          "language": "python",
          "line_count": 213,
          "complexity": "complex",
          "code": "from typing import List, Dict, Any\nimport phoenix as px\nfrom phoenix.evals import HallucinationEvaluator, OpenAIModel\nfrom langfuse import Langfuse\nfrom openai import OpenAI\nimport json\n\nclass Unified"
        },
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "# docker-compose.yml for production Phoenix deployment\n\"\"\"\nversion: '3.8'\n\nservices:\n  phoenix:\n    image: arizephoenix/phoenix:latest\n    ports:\n      - \"6006:6006\"\n    environment:\n      - PHOENIX_S"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "complex",
          "code": "# BAD: Tightly coupled to LangSmith\nfrom langsmith import Client\n\ndef evaluate_model():\n    client = Client()  # Only works with LangSmith\n    # ... LangSmith-specific code\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "# GOOD: Framework-agnostic tracing\nfrom phoenix.otel import register\nfrom opentelemetry import trace\n\ntracer_provider = register(project_name=\"my-app\")\ntracer = trace.get_tracer(__name__)\n\n# Works wit"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# BAD: No cost tracking\nfor prompt in large_dataset:\n    expensive_model(prompt)  # Could cost $$$\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# GOOD: Track and alert on costs\ncost_tracker = CostTracker(budget_limit=100.00)\n\nfor prompt in large_dataset:\n    if cost_tracker.remaining_budget < 10.00:\n        # Switch to cheaper model or stop\n "
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# BAD: Manual tracing\ndef call_llm(prompt):\n    start = time.time()\n    response = openai.chat.completions.create(...)\n    duration = time.time() - start\n\n    log_to_framework({\n        \"prompt\": prom"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "# GOOD: Auto-instrumentation\nfrom openinference.instrumentation.openai import OpenAIInstrumentor\n\nOpenAIInstrumentor().instrument()\n\n# All OpenAI calls automatically traced\nresponse = openai.chat.comp"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "http://localhost:6006/v1/traces\""
        },
        {
          "type": "example",
          "url": "http://localhost:6006"
        },
        {
          "type": "example",
          "url": "http://localhost:6006/v1/traces\""
        },
        {
          "type": "example",
          "url": "http://localhost:6006\""
        },
        {
          "type": "example",
          "url": "http://localhost:6006\""
        },
        {
          "type": "external",
          "url": "http://phoenix:6006/v1/traces\""
        }
      ],
      "tools_mentioned": [
        "postgres",
        "postgresql",
        "docker",
        "prometheus"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 72.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "debugging/distributed-systems-debugging.md",
      "category": "debugging",
      "skill_name": "distributed-systems-debugging",
      "frontmatter": {
        "name": "debugging-distributed-systems-debugging",
        "description": "Debugging distributed systems with trace correlation, cross-service workflows, request replay, clock skew handling, and chaos engineering"
      },
      "metrics": {
        "line_count": 811,
        "code_line_count": 138,
        "code_examples": 14,
        "external_refs": 7,
        "tools_mentioned": 3,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 120,
          "complexity": "complex",
          "code": "import uuid\nfrom opentelemetry import trace\nfrom opentelemetry.propagate import inject, extract\nfrom fastapi import FastAPI, Request, HTTPException\nimport httpx\nimport structlog\n\napp = FastAPI()\ntrace"
        },
        {
          "language": "promql",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Find all spans for trace ID\n{trace_id=\"a1b2c3d4e5f6g7h8\"}\n\n# Find traces with errors in any service\n{status.code=\"ERROR\"}\n\n# Find slow traces (>1s)\n{duration > 1s}\n\n# Find traces involving specific "
        },
        {
          "language": "python",
          "line_count": 128,
          "complexity": "complex",
          "code": "import json\nimport asyncio\nfrom typing import Dict, Any\nfrom datetime import datetime\nimport httpx\n\nclass RequestRecorder:\n    \"\"\"\n    Record requests for later replay.\n    \"\"\"\n\n    def __init__(self,"
        },
        {
          "language": "yaml",
          "line_count": 52,
          "complexity": "complex",
          "code": "# Kubernetes: Shadow traffic to debug environment\napiVersion: v1\nkind: Service\nmetadata:\n  name: api-service\nspec:\n  selector:\n    app: api\n  ports:\n  - port: 80\n    targetPort: 8080\n\n---\n# Envoy/Isti"
        },
        {
          "language": "python",
          "line_count": 64,
          "complexity": "complex",
          "code": "from fastapi import Request, BackgroundTasks\nimport httpx\n\n@app.post(\"/api/orders\")\nasync def create_order(\n    request: Request,\n    order_data: dict,\n    background_tasks: BackgroundTasks\n):\n    # P"
        },
        {
          "language": "python",
          "line_count": 93,
          "complexity": "complex",
          "code": "import time\nfrom datetime import datetime, timedelta\nimport structlog\n\nlogger = structlog.get_logger()\n\nclass ClockSkewDetector:\n    \"\"\"\n    Detect and handle clock skew in distributed systems.\n    \"\""
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Check NTP status\ntimedatectl status\n\n# Sync with NTP server (Linux)\nsudo ntpdate pool.ntp.org\n\n# Enable NTP sync (systemd)\nsudo timedatectl set-ntp true\n\n# Check clock offset\nntpq -p\n"
        },
        {
          "language": "python",
          "line_count": 76,
          "complexity": "complex",
          "code": "import random\nimport asyncio\nfrom fastapi import HTTPException\n\nclass ChaosMonkey:\n    \"\"\"\n    Inject controlled failures for debugging.\n    \"\"\"\n\n    def __init__(self, enabled: bool = False):\n       "
        },
        {
          "language": "yaml",
          "line_count": 32,
          "complexity": "medium",
          "code": "apiVersion: chaos-mesh.org/v1alpha1\nkind: NetworkChaos\nmetadata:\n  name: network-delay\nspec:\n  action: delay\n  mode: one\n  selector:\n    namespaces:\n      - production\n    labelSelectors:\n      app: a"
        },
        {
          "language": "markdown",
          "line_count": 25,
          "complexity": "medium",
          "code": "## Step 1: Identify Trace\n- [ ] Extract trace ID from error logs\n- [ ] Find all spans in trace (Grafana Tempo, Jaeger)\n- [ ] Identify failed span and service\n\n## Step 2: Analyze Dependencies\n- [ ] Che"
        },
        {
          "language": "promql",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Grafana Loki + Tempo\n\n# Find logs for trace\n{app=\"api-service\"} | json | trace_id=\"abc123\"\n\n# Find errors in trace\n{trace_id=\"abc123\"} | json | level=\"error\"\n\n# Find slow requests\n{app=\"api-service\""
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Breaks trace chain\nrequests.get(\"http://service-b/api/data\")\n\n# CORRECT: Propagate trace context\nheaders = {}\ninject(headers)\nrequests.get(\"http://service-b/api/data\", headers=headers)\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: Clock skew causes issues\nevent_time = datetime.now()  # Local clock!\n\n# CORRECT: Use monotonic clock or logical timestamps\nevent_time = time.monotonic()  # Monotonic clock\n# Or: Use Lamport/V"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# WRONG: Leaves system in inconsistent state\nawait reserve_inventory()\nawait charge_payment()  # Fails, but inventory not released!\n\n# CORRECT: Compensate on failure\ntry:\n    await reserve_inventory()"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://inventory-service/api/reserve\""
        },
        {
          "type": "external",
          "url": "http://payment-service/api/charge\""
        },
        {
          "type": "external",
          "url": "http://inventory-service/api/release\""
        },
        {
          "type": "example",
          "url": "https://api.example.com\""
        },
        {
          "type": "example",
          "url": "http://localhost:8000"
        },
        {
          "type": "external",
          "url": "http://service-b/api/data\""
        },
        {
          "type": "external",
          "url": "http://service-b/api/data\""
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "envoy",
        "grafana"
      ],
      "config_snippets": [
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 71.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "proxies/nats-messaging.md",
      "category": "proxies",
      "skill_name": "nats-messaging",
      "frontmatter": {
        "name": "proxies-nats-messaging",
        "description": "NATS messaging patterns including pub/sub, request-reply, queue groups, JetStream persistence, clustering, and high-performance messaging"
      },
      "metrics": {
        "line_count": 715,
        "code_line_count": 188,
        "code_examples": 22,
        "external_refs": 7,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c Bad: Direct service-to-service HTTP\n# Service A calls Service B, C, D directly\nrequests.post('http://service-b/webhook', json=event)\nrequests.post('http://service-c/webhook', json=event)\nrequests."
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "# \u2705 Good: Publish event, services subscribe\nimport asyncio\nfrom nats.aio.client import Client as NATS\n\nasync def publish_order_created():\n    nc = NATS()\n    await nc.connect(\"nats://localhost:4222\")\n"
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "import asyncio\nfrom nats.aio.client import Client as NATS\n\n# Server: Handles requests\nasync def handle_requests():\n    nc = NATS()\n    await nc.connect(\"nats://localhost:4222\")\n\n    async def request_"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "medium",
          "code": "async def worker(worker_id: int):\n    nc = NATS()\n    await nc.connect(\"nats://localhost:4222\")\n\n    async def process_job(msg):\n        job = json.loads(msg.data.decode())\n        print(f\"Worker {wor"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "import asyncio\nfrom nats.aio.client import Client as NATS\n\nasync def create_stream():\n    nc = NATS()\n    await nc.connect(\"nats://localhost:4222\")\n\n    js = nc.jetstream()\n\n    # Create stream for or"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "async def publish_to_stream():\n    nc = NATS()\n    await nc.connect(\"nats://localhost:4222\")\n\n    js = nc.jetstream()\n\n    # Publish with ack\n    order = {\"id\": 123, \"total\": 99.99}\n    ack = await js"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "medium",
          "code": "async def consume_from_stream():\n    nc = NATS()\n    await nc.connect(\"nats://localhost:4222\")\n\n    js = nc.jetstream()\n\n    # Create durable consumer\n    await js.add_consumer(\n        stream=\"ORDERS"
        },
        {
          "language": "go",
          "line_count": 40,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"log\"\n    \"time\"\n\n    \"github.com/nats-io/nats.go\"\n)\n\ntype Order struct {\n    ID     int     `json:\"id\"`\n    Total  float64 `json:\"total\"`\n    "
        },
        {
          "language": "go",
          "line_count": 30,
          "complexity": "medium",
          "code": "func requestReply() {\n    nc, _ := nats.Connect(nats.DefaultURL)\n    defer nc.Close()\n\n    // Server side\n    nc.Subscribe(\"user.get\", func(msg *nats.Msg) {\n        // Parse request\n        var req st"
        },
        {
          "language": "go",
          "line_count": 56,
          "complexity": "complex",
          "code": "import (\n    \"github.com/nats-io/nats.go\"\n)\n\nfunc jetStreamExample() {\n    nc, _ := nats.Connect(nats.DefaultURL)\n    defer nc.Close()\n\n    js, _ := nc.JetStream()\n\n    // Create stream\n    js.AddStre"
        },
        {
          "language": "conf",
          "line_count": 18,
          "complexity": "simple",
          "code": "# nats-server.conf\nport: 4222\ncluster {\n  name: nats-cluster\n  listen: 0.0.0.0:6222\n  routes: [\n    nats://nats-1:6222\n    nats://nats-2:6222\n    nats://nats-3:6222\n  ]\n}\n\njetstream {\n  store_dir: /da"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "medium",
          "code": "async def connect_with_options():\n    nc = NATS()\n\n    # Multiple servers for failover\n    await nc.connect(\n        servers=[\n            \"nats://nats-1:4222\",\n            \"nats://nats-2:4222\",\n     "
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "async def publish_with_dedup():\n    nc = NATS()\n    await nc.connect(\"nats://localhost:4222\")\n    js = nc.jetstream()\n\n    # Publish with message ID for deduplication\n    order = {\"id\": 123, \"total\": "
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "medium",
          "code": "async def kv_store():\n    nc = NATS()\n    await nc.connect(\"nats://localhost:4222\")\n    js = nc.jetstream()\n\n    # Create KV bucket\n    kv = await js.create_key_value(bucket=\"config\", history=5, ttl=3"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "medium",
          "code": "async def object_store():\n    nc = NATS()\n    await nc.connect(\"nats://localhost:4222\")\n    js = nc.jetstream()\n\n    # Create object store\n    obs = await js.create_object_store(bucket=\"files\")\n\n    #"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# HTTP monitoring endpoint\ncurl http://localhost:8222/varz     # Server info\ncurl http://localhost:8222/connz    # Connection info\ncurl http://localhost:8222/routez   # Route info\ncurl http://localhos"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "from prometheus_client import Counter, Histogram\n\nmessages_published = Counter('nats_messages_published_total', 'Messages published')\nmessages_received = Counter('nats_messages_received_total', 'Messa"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u2705 Good: Hierarchical subjects\n\"orders.created.us-west\"\n\"orders.updated.eu-central\"\n\"users.login.mobile\"\n\n# \u274c Bad: Flat subjects\n\"order_created\"\n\"order_updated\"\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "async def robust_subscriber():\n    nc = NATS()\n\n    async def reconnected_cb():\n        print(\"Reconnected, resubscribing...\")\n        await setup_subscriptions(nc)\n\n    await nc.connect(\n        serv"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Multiple workers automatically load balance\nawait nc.subscribe(\"jobs.process\", queue=\"workers\", cb=handler)\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Check connection\nprint(f\"Connected: {nc.is_connected}\")\nprint(f\"Reconnecting: {nc.is_reconnecting}\")\n\n# Verify subscription\nprint(f\"Active subscriptions: {len(nc._subs)}\")\n\n# Enable debug logging\nnc"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Enable JetStream in server config\ncat << EOF > nats-server.conf\njetstream {\n  store_dir: /data/nats/jetstream\n  max_memory_store: 1GB\n  max_file_store: 10GB\n}\nEOF\n\n# Start with JetStream enabled\nnat"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://service-b/webhook'"
        },
        {
          "type": "external",
          "url": "http://service-c/webhook'"
        },
        {
          "type": "external",
          "url": "http://service-d/webhook'"
        },
        {
          "type": "example",
          "url": "http://localhost:8222/varz"
        },
        {
          "type": "example",
          "url": "http://localhost:8222/connz"
        },
        {
          "type": "example",
          "url": "http://localhost:8222/routez"
        },
        {
          "type": "example",
          "url": "http://localhost:8222/subsz"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "prometheus",
        "tls"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "22 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 71.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "distributed-systems/vector-clocks.md",
      "category": "distributed-systems",
      "skill_name": "vector-clocks",
      "frontmatter": {
        "name": "distributed-systems-vector-clocks",
        "description": "Vector clocks for tracking causality in distributed systems, detecting concurrent events, and resolving conflicts"
      },
      "metrics": {
        "line_count": 438,
        "code_line_count": 54,
        "code_examples": 7,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "class LamportClock:\n    def __init__(self):\n        self.time = 0\n\n    def increment(self):\n        \"\"\"Increment on local event\"\"\"\n        self.time += 1\n        return self.time\n\n    def update(self,"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "class VectorClock:\n    def __init__(self, process_id, num_processes):\n        self.process_id = process_id\n        self.clock = [0] * num_processes\n\n    def increment(self):\n        \"\"\"Increment local"
        },
        {
          "language": "python",
          "line_count": 71,
          "complexity": "complex",
          "code": "from typing import Dict, List, Tuple\n\nclass VectorClock:\n    \"\"\"Vector clock for distributed system\"\"\"\n\n    def __init__(self, node_id: str, nodes: List[str]):\n        self.node_id = node_id\n        s"
        },
        {
          "language": "python",
          "line_count": 80,
          "complexity": "complex",
          "code": "class VersionedValue:\n    \"\"\"Value with vector clock version\"\"\"\n\n    def __init__(self, value, vector_clock):\n        self.value = value\n        self.vector_clock = vector_clock\n\nclass DistributedKVSt"
        },
        {
          "language": "python",
          "line_count": 48,
          "complexity": "complex",
          "code": "class CausalBroadcast:\n    \"\"\"Ensure messages delivered in causal order\"\"\"\n\n    def __init__(self, node_id, nodes):\n        self.node_id = node_id\n        self.vc = VectorClock(node_id, nodes)\n       "
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "def prune_clock(self, min_activity_time):\n    \"\"\"Remove processes inactive for too long\"\"\"\n    current_time = time.time()\n    self.clock = {\n        node: count for node, count in self.clock.items()\n "
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "import unittest\n\nclass TestVectorClock(unittest.TestCase):\n    def test_happens_before(self):\n        \"\"\"Test happens-before relationship\"\"\"\n        vc = VectorClock('A', ['A', 'B'])\n\n        vc1 = {'"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "7 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 71.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "containers/container-security.md",
      "category": "containers",
      "skill_name": "container-security",
      "frontmatter": {
        "name": "containers-container-security",
        "description": "Hardening container images for production"
      },
      "metrics": {
        "line_count": 758,
        "code_line_count": 301,
        "code_examples": 42,
        "external_refs": 4,
        "tools_mentioned": 6,
        "config_snippets": 9
      },
      "code_examples": [
        {
          "language": "dockerfile",
          "line_count": 20,
          "complexity": "simple",
          "code": "FROM python:3.11-slim\n\n# Create user\nRUN useradd -m -u 1000 appuser\n\nWORKDIR /app\n\n# Install dependencies as root\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy app"
        },
        {
          "language": "dockerfile",
          "line_count": 15,
          "complexity": "simple",
          "code": "FROM node:20-slim\n\nWORKDIR /app\n\n# Install dependencies\nCOPY package.json .\nRUN npm install\n\nCOPY . .\n\n# Use existing 'node' user (UID 1000)\nUSER node\n\nCMD [\"node\", \"index.js\"]\n"
        },
        {
          "language": "dockerfile",
          "line_count": 8,
          "complexity": "simple",
          "code": "FROM alpine:3.19\n\nRUN adduser -D -u 1000 appuser\n\nUSER 1000   # Numeric UID (works even if username changes)\n\nCMD [\"./app\"]\n"
        },
        {
          "language": "dockerfile",
          "line_count": 14,
          "complexity": "simple",
          "code": "FROM python:3.11-slim\n\nRUN useradd -m appuser\n\nWORKDIR /app\n\nCOPY --chown=appuser:appuser . .\n\nRUN mkdir /app/logs && chown appuser:appuser /app/logs\n\nUSER appuser\n\nCMD [\"python\", \"app.py\"]\n"
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "# docker-compose.yml\nservices:\n  app:\n    user: \"${UID}:${GID}\"   # Match host user\n    volumes:\n      - ./data:/app/data\n"
        },
        {
          "language": "dockerfile",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Build stage\nFROM golang:1.21 AS builder\nWORKDIR /app\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux go build -o app\n\n# Runtime stage with distroless\nFROM gcr.io/distroless/static-debian12\n\nCOPY --from=builde"
        },
        {
          "language": "dockerfile",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Use debug variant for troubleshooting\nFROM gcr.io/distroless/static-debian12:debug\n\n# Includes busybox shell for debugging\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Exec with shell in debug variant\ndocker exec -it container /busybox/sh\n"
        },
        {
          "language": "dockerfile",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Build stage\nFROM python:3.11-slim AS builder\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --user --no-cache-dir -r requirements.txt\n\n# Runtime stage\nFROM gcr.io/distroless/python3-debian12\n\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Mac\nbrew install trivy\n\n# Linux\nwget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -\necho \"deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) ma"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Scan for all vulnerabilities\ntrivy image python:3.11\n\n# Only high/critical\ntrivy image --severity HIGH,CRITICAL python:3.11\n\n# Scan local Dockerfile\ntrivy config Dockerfile\n\n# Scan filesystem\ntrivy "
        },
        {
          "language": "dockerfile",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c Old vulnerable image\nFROM python:3.11\n\n# \u2705 Latest patched image\nFROM python:3.11-slim-bookworm\n"
        },
        {
          "language": "dockerfile",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Update system packages\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    rm -rf /var/lib/apt/lists/*\n"
        },
        {
          "language": "dockerfile",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Pin specific package versions\nRUN apt-get update && \\\n    apt-get install -y \\\n        curl=7.88.1-1 \\\n        openssl=1.1.1w-1 && \\\n    rm -rf /var/lib/apt/lists/*\n"
        },
        {
          "language": "dockerfile",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Use multi-stage build to exclude build tools\nFROM python:3.11 AS builder\nRUN pip install -r requirements.txt\n\nFROM python:3.11-slim\nCOPY --from=builder /usr/local/lib/python3.11/site-packages /usr/l"
        },
        {
          "language": "yaml",
          "line_count": 19,
          "complexity": "simple",
          "code": "name: Security Scan\non: [push]\n\njobs:\n  scan:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build image\n        run: docker build -t myapp:latest .\n\n      - na"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "security_scan:\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker build -t myapp:latest .\n    - wget -qO - https://github.com/aquasecurity/trivy/releases/download/v0.45.0/triv"
        },
        {
          "language": "dockerfile",
          "line_count": 4,
          "complexity": "simple",
          "code": "# \u274c NEVER hardcode secrets\nENV API_KEY=sk-1234567890abcdef\nENV DATABASE_PASSWORD=mysecretpass\n"
        },
        {
          "language": "dockerfile",
          "line_count": 3,
          "complexity": "simple",
          "code": "# \u274c Secret stored in layer history\nCOPY .env /app/.env\n"
        },
        {
          "language": "dockerfile",
          "line_count": 3,
          "complexity": "simple",
          "code": "# \u274c Build args visible in history\nARG SECRET_KEY=abc123\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Pass at runtime (not in image)\ndocker run -e API_KEY=secret123 myapp:latest\n"
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "services:\n  app:\n    environment:\n      - API_KEY=${API_KEY}   # From host environment\n    env_file:\n      - .env                  # From .env file (not committed)\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "API_KEY=sk-1234567890abcdef\nDATABASE_PASSWORD=mysecretpass\n"
        },
        {
          "language": "yaml",
          "line_count": 13,
          "complexity": "simple",
          "code": "# docker-compose.yml\nservices:\n  app:\n    secrets:\n      - db_password\n      - api_key\n\nsecrets:\n  db_password:\n    file: ./secrets/db_password.txt\n  api_key:\n    external: true   # From Docker secret"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Read from /run/secrets/db_password\nwith open('/run/secrets/db_password') as f:\n    password = f.read().strip()\n"
        },
        {
          "language": "dockerfile",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Use secret during build without storing in layer\nRUN --mount=type=secret,id=github_token \\\n    git clone https://$(cat /run/secrets/github_token)@github.com/private/repo.git\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "docker build --secret id=github_token,src=$HOME/.github_token .\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "# Fetch from AWS Secrets Manager, Vault, etc.\nimport boto3\n\ndef get_secret(secret_name):\n    client = boto3.client('secretsmanager')\n    response = client.get_secret_value(SecretId=secret_name)\n    re"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Run with no capabilities\ndocker run --cap-drop=ALL myapp:latest\n\n# Add back only needed capabilities\ndocker run --cap-drop=ALL --cap-add=NET_BIND_SERVICE myapp:latest\n"
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "services:\n  app:\n    cap_drop:\n      - ALL\n    cap_add:\n      - NET_BIND_SERVICE   # Only if binding to port <1024\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "docker run --read-only myapp:latest\n"
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "services:\n  app:\n    read_only: true\n    tmpfs:\n      - /tmp        # Allow writes to /tmp\n      - /var/run\n"
        },
        {
          "language": "dockerfile",
          "line_count": 15,
          "complexity": "simple",
          "code": "FROM python:3.11-slim\n\nRUN useradd -m appuser\n\nWORKDIR /app\nCOPY . .\n\n# Create writable directories\nRUN mkdir -p /app/tmp /app/logs && \\\n    chown -R appuser:appuser /app/tmp /app/logs\n\nUSER appuser\n\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "docker run \\\n  --read-only \\\n  --tmpfs /tmp \\\n  --tmpfs /app/logs \\\n  myapp:latest\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Pull latest base image\ndocker pull python:3.11-slim\n\n# Rebuild\ndocker build --no-cache -t myapp:latest .\n\n# Rescan\ntrivy image myapp:latest\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Enable Docker Content Trust\nexport DOCKER_CONTENT_TRUST=1\n\n# Push signed image\ndocker push myapp:latest\n\n# Pull (verifies signature)\ndocker pull myapp:latest\n"
        },
        {
          "language": "yaml",
          "line_count": 11,
          "complexity": "simple",
          "code": "services:\n  app:\n    deploy:\n      resources:\n        limits:\n          cpus: '1.0'\n          memory: 512M\n        reservations:\n          memory: 256M\n    pids_limit: 100   # Prevent fork bombs\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "docker run --security-opt apparmor=docker-default myapp:latest\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "docker run --security-opt seccomp=/path/to/profile.json myapp:latest\n"
        },
        {
          "language": "json",
          "line_count": 10,
          "complexity": "simple",
          "code": "{\n  \"defaultAction\": \"SCMP_ACT_ERRNO\",\n  \"syscalls\": [\n    {\n      \"names\": [\"read\", \"write\", \"open\", \"close\"],\n      \"action\": \"SCMP_ACT_ALLOW\"\n    }\n  ]\n}\n"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Scan image\ntrivy image myapp:latest\n\n# Only critical/high\ntrivy image --severity CRITICAL,HIGH myapp:latest\n\n# Ignore unfixed\ntrivy image --ignore-unfixed myapp:latest\n\n# Scan Dockerfile\ntrivy confi"
        },
        {
          "language": "dockerfile",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Multi-stage build\nFROM python:3.11-slim AS builder\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --user --no-cache-dir -r requirements.txt\n\n# Minimal runtime\nFROM gcr.io/distroless/python3-de"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://aquasecurity.github.io/trivy-repo/deb/public.key"
        },
        {
          "type": "external",
          "url": "https://aquasecurity.github.io/trivy-repo/deb"
        },
        {
          "type": "github",
          "url": "https://github.com/aquasecurity/trivy/releases/download/v0.45.0/trivy_0.45.0_Linux-64bit.tar.gz"
        },
        {
          "type": "external",
          "url": "https://$(cat"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "vault",
        "tls",
        "ssl",
        "openssl",
        "docker"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml, json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "42 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "2 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 71.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "debugging/production-debugging.md",
      "category": "debugging",
      "skill_name": "production-debugging",
      "frontmatter": {
        "name": "debugging-production-debugging",
        "description": "Non-intrusive debugging in production environments with feature flags, dynamic logging, and observability correlation"
      },
      "metrics": {
        "line_count": 693,
        "code_line_count": 120,
        "code_examples": 15,
        "external_refs": 5,
        "tools_mentioned": 4,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 65,
          "complexity": "complex",
          "code": "from launchdarkly import LDClient, Config, Context\nfrom opentelemetry import trace\nimport logging\n\n# Initialize LaunchDarkly client\nld_client = LDClient(sdk_key=\"your-sdk-key\")\n\n# Get tracer\ntracer = "
        },
        {
          "language": "json",
          "line_count": 21,
          "complexity": "medium",
          "code": "{\n  \"key\": \"debug-mode\",\n  \"name\": \"Production Debug Mode\",\n  \"variations\": [true, false],\n  \"defaultVariation\": false,\n  \"rules\": [\n    {\n      \"clauses\": [\n        {\"attribute\": \"email\", \"op\": \"cont"
        },
        {
          "language": "python",
          "line_count": 71,
          "complexity": "complex",
          "code": "import logging\nimport structlog\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n# Configure structured logging\nstructlog.configure(\n    processors=[\n       "
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Enable DEBUG logging for specific module\ncurl -X POST http://api.example.com/admin/log-level \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"module\": \"app.services.user\", \"level\": \"DEBUG\"}' \\\n  --"
        },
        {
          "language": "python",
          "line_count": 83,
          "complexity": "complex",
          "code": "import cProfile\nimport pstats\nfrom py_spy import SpyProfiler\nimport asyncio\nfrom datetime import datetime, timedelta\n\nclass ProductionProfiler:\n    \"\"\"\n    Sampling profiler with minimal overhead.\n   "
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Install py-spy\npip install py-spy\n\n# Profile running Python process (by PID)\npy-spy record -o profile.svg --pid 12345 --duration 30\n\n# Profile with higher sample rate\npy-spy record -o profile.svg --"
        },
        {
          "language": "python",
          "line_count": 79,
          "complexity": "complex",
          "code": "from opentelemetry import trace\nfrom opentelemetry.trace import SpanKind\nimport structlog\nimport httpx\n\n# Configure structured logging with trace correlation\nstructlog.configure(\n    processors=[\n    "
        },
        {
          "language": "promql",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Find all logs for a specific trace\n{app=\"api-service\"} | json | trace_id=\"a1b2c3d4e5f6g7h8\"\n\n# Find errors with trace context\n{app=\"api-service\"} | json | level=\"error\" | trace_id!=\"\"\n\n# Correlate s"
        },
        {
          "language": "python",
          "line_count": 100,
          "complexity": "complex",
          "code": "import asyncio\nfrom typing import Dict, Any\nfrom datetime import datetime\nfrom opentelemetry import trace\nimport structlog\n\nlogger = structlog.get_logger()\ntracer = trace.get_tracer(__name__)\n\nclass P"
        },
        {
          "language": "markdown",
          "line_count": 31,
          "complexity": "medium",
          "code": "## Pre-Investigation\n- [ ] Identify trace ID from error logs\n- [ ] Check if issue is user-specific or global\n- [ ] Verify recent deployments or config changes\n- [ ] Check infrastructure metrics (CPU, "
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Python: py-spy (recommended)\npy-spy record -o flamegraph.svg --pid <pid> --duration 30\n\n# Go: pprof (built-in)\ngo tool pprof http://localhost:6060/debug/pprof/profile?seconds=30\n\n# Node.js: 0x\nnpx 0"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "complex",
          "code": "# WRONG: Breakpoint stops production server\nimport pdb; pdb.set_trace()  # NEVER in production!\n\n# CORRECT: Use logging and tracing\nlogger.debug(\"Debugging checkpoint\", state=current_state)\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: Global DEBUG logging kills performance\nlogging.basicConfig(level=logging.DEBUG)  # Generates GB of logs!\n\n# CORRECT: Targeted debug logging\nif debug_enabled_for_user(user_id):\n    logger.debu"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: Profiler runs indefinitely\nprofiler.enable()\n# No stop condition!\n\n# CORRECT: Time-limited profiling\nprofiler.enable()\nawait asyncio.sleep(30)  # Profile for 30 seconds\nprofiler.disable()\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# WRONG: Logs without trace context\nlogger.error(\"Request failed\")  # Can't correlate with trace!\n\n# CORRECT: Include trace ID in logs\nlogger.error(\n    \"Request failed\",\n    trace_id=trace_id,\n    sp"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "http://api.example.com/admin/log-level"
        },
        {
          "type": "example",
          "url": "http://api.example.com/admin/log-level"
        },
        {
          "type": "example",
          "url": "https://api.example.com/data\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/health\""
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/profile?seconds=30"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "grafana",
        "docker",
        "redis"
      ],
      "config_snippets": [
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 70.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "cicd/cd-deployment-patterns.md",
      "category": "cicd",
      "skill_name": "cd-deployment-patterns",
      "frontmatter": {
        "name": "cicd-cd-deployment-patterns",
        "description": "Implementing zero-downtime deployment strategies"
      },
      "metrics": {
        "line_count": 733,
        "code_line_count": 215,
        "code_examples": 23,
        "external_refs": 5,
        "tools_mentioned": 4,
        "config_snippets": 22
      },
      "code_examples": [
        {
          "language": "yaml",
          "line_count": 60,
          "complexity": "complex",
          "code": "name: Blue-Green Deploy\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment: production\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Build new versi"
        },
        {
          "language": "yaml",
          "line_count": 76,
          "complexity": "complex",
          "code": "name: Canary Deploy\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy-canary:\n    runs-on: ubuntu-latest\n    environment: production\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Deploy"
        },
        {
          "language": "yaml",
          "line_count": 51,
          "complexity": "complex",
          "code": "name: Rolling Deploy\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment: production\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Update Kuber"
        },
        {
          "language": "yaml",
          "line_count": 59,
          "complexity": "complex",
          "code": "name: Environment Promotion\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy-dev:\n    runs-on: ubuntu-latest\n    environment: development\n\n    steps:\n      - uses: actions/checkout@v4\n      - name: D"
        },
        {
          "language": "yaml",
          "line_count": 52,
          "complexity": "complex",
          "code": "name: Deploy with Migrations\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment: production\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Backup dat"
        },
        {
          "language": "yaml",
          "line_count": 54,
          "complexity": "complex",
          "code": "name: Feature Flag Deploy\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment: production\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Deploy with f"
        },
        {
          "language": "yaml",
          "line_count": 48,
          "complexity": "medium",
          "code": "name: Multi-Region Deploy\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy-primary:\n    runs-on: ubuntu-latest\n    environment: production-us-east\n\n    steps:\n      - uses: actions/checkout@v4\n\n     "
        },
        {
          "language": "yaml",
          "line_count": 60,
          "complexity": "complex",
          "code": "name: Deploy with Health Checks\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment: production\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: D"
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "Use Case                          \u2192 Strategy\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nZero downtime required           \u2192 Blue-Green or Rolling\nHigh-risk changes                \u2192 Canary\nLimite"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "spec:\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1        # Extra pods during rollout\n      maxUnavailable: 0  # Minimum availability\n  minReadySeconds: 30    # Wait before"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Kubernetes\nkubectl rollout undo deployment/myapp\nkubectl rollout undo deployment/myapp --to-revision=2\n\n# Docker\ndocker service update --rollback myapp\n\n# AWS ECS\naws ecs update-service --cluster pr"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# WRONG: Manual intervention required\n- name: Deploy\n  run: ./deploy.sh\n# [If it fails, ops team manually fixes]\n"
        },
        {
          "language": "yaml",
          "line_count": 11,
          "complexity": "simple",
          "code": "# CORRECT: Automated rollback\n- name: Deploy\n  run: ./deploy.sh\n\n- name: Health check\n  run: ./health-check.sh\n\n- name: Rollback on failure\n  if: failure()\n  run: ./rollback.sh\n"
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: Assume deployment succeeded\n- run: kubectl apply -f deployment.yaml\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# CORRECT: Verify deployment health\n- run: kubectl apply -f deployment.yaml\n- run: kubectl rollout status deployment/myapp\n- run: ./smoke-test.sh\n"
        },
        {
          "language": "yaml",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG: Risky migration\n- run: npm run migrate:up\n- run: ./deploy.sh\n"
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "# CORRECT: Backup first\n- run: ./backup-db.sh\n- run: npm run migrate:up\n- run: ./deploy.sh\n- if: failure()\n  run: ./restore-db.sh\n"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: All regions at once\njobs:\n  deploy:\n    strategy:\n      matrix:\n        region: [us, eu, asia]\n    steps: [deploy]\n"
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "# CORRECT: Staged rollout\njobs:\n  deploy-primary:\n    steps: [deploy to us-east-1]\n  deploy-secondary:\n    needs: deploy-primary\n    strategy:\n      matrix:\n        region: [us-west-2, eu-west-1]\n"
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: Deploy and forget\n- run: ./deploy.sh\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# CORRECT: Monitor post-deployment\n- run: ./deploy.sh\n- run: sleep 300  # 5 minute soak period\n- run: ./check-metrics.sh\n"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Direct to production\non:\n  push:\n    branches: [main]\njobs:\n  deploy-prod:\n    steps: [deploy 100%]\n"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "# CORRECT: Canary for risky changes\njobs:\n  deploy-canary:\n    if: contains(github.event.head_commit.message, '[high-risk]')\n    steps: [deploy 10%, monitor, gradual rollout]\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://green.myapp.com"
        },
        {
          "type": "external",
          "url": "https://dev.myapp.com"
        },
        {
          "type": "external",
          "url": "https://myapp.com"
        },
        {
          "type": "external",
          "url": "https://api.launchdarkly.com/api/v2/flags/default/new-feature"
        },
        {
          "type": "external",
          "url": "https://myapp.com/health"
        }
      ],
      "tools_mentioned": [
        "postgres",
        "kubernetes",
        "docker",
        "redis"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "23 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 70.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "deployment/netlify-functions.md",
      "category": "deployment",
      "skill_name": "netlify-functions",
      "frontmatter": {
        "name": "deployment-netlify-functions",
        "description": "Building API endpoints for JAMstack applications"
      },
      "metrics": {
        "line_count": 624,
        "code_line_count": 97,
        "code_examples": 13,
        "external_refs": 5,
        "tools_mentioned": 4,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "javascript",
          "line_count": 30,
          "complexity": "medium",
          "code": "// netlify/functions/hello.js\nexports.handler = async (event, context) => {\n  // event.httpMethod - GET, POST, etc.\n  // event.path - Request path\n  // event.headers - Request headers\n  // event.query"
        },
        {
          "language": "typescript",
          "line_count": 26,
          "complexity": "complex",
          "code": "// netlify/functions/hello.ts\nimport { Handler, HandlerEvent, HandlerContext } from '@netlify/functions';\n\ninterface HelloResponse {\n  message: string;\n  timestamp: string;\n}\n\nexport const handler: Ha"
        },
        {
          "language": "typescript",
          "line_count": 51,
          "complexity": "complex",
          "code": "// netlify/functions/create-user.ts\nimport { Handler } from '@netlify/functions';\n\ninterface CreateUserBody {\n  email: string;\n  name: string;\n}\n\nexport const handler: Handler = async (event) => {\n  /"
        },
        {
          "language": "typescript",
          "line_count": 36,
          "complexity": "complex",
          "code": "// netlify/functions/api-proxy.ts\nimport { Handler } from '@netlify/functions';\n\nconst API_BASE = 'https://external-api.com';\nconst API_KEY = process.env.API_KEY;\n\nexport const handler: Handler = asyn"
        },
        {
          "language": "typescript",
          "line_count": 37,
          "complexity": "complex",
          "code": "// netlify/edge-functions/auth.ts\nimport { Context } from \"https://edge.netlify.com\";\n\nexport default async (request: Request, context: Context) => {\n  // Access cookies\n  const token = context.cookie"
        },
        {
          "language": "toml",
          "line_count": 4,
          "complexity": "simple",
          "code": "[[edge_functions]]\n  function = \"auth\"\n  path = \"/protected/*\"\n"
        },
        {
          "language": "typescript",
          "line_count": 24,
          "complexity": "complex",
          "code": "// netlify/edge-functions/geo-routing.ts\nimport { Context } from \"https://edge.netlify.com\";\n\nexport default async (request: Request, context: Context) => {\n  const country = context.geo?.country?.cod"
        },
        {
          "language": "javascript",
          "line_count": 41,
          "complexity": "complex",
          "code": "// netlify/background-functions/daily-report.js\nimport { schedule } from '@netlify/functions';\n\n// Runs daily at 9 AM UTC\nexport const handler = schedule(\"0 9 * * *\", async (event) => {\n  console.log("
        },
        {
          "language": "typescript",
          "line_count": 47,
          "complexity": "complex",
          "code": "// netlify/functions/upload.ts\nimport { Handler } from '@netlify/functions';\nimport multiparty from 'multiparty';\n\nexport const handler: Handler = async (event) => {\n  if (event.httpMethod !== 'POST')"
        },
        {
          "language": "typescript",
          "line_count": 41,
          "complexity": "complex",
          "code": "// netlify/functions/rate-limited-api.ts\nimport { Handler } from '@netlify/functions';\n\n// Simple in-memory rate limiter (use Redis in production)\nconst requests = new Map<string, number[]>();\n\nconst "
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Set via CLI\nnetlify env:set API_KEY \"secret\"\n\n# Access in Functions (Node.js)\nprocess.env.API_KEY\n\n# Access in Edge Functions (Deno)\nDeno.env.get(\"API_KEY\")\n\n# Access Netlify context\nevent.headers[\""
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Start dev server with functions\nnetlify dev\n\n# Test function locally\ncurl http://localhost:8888/.netlify/functions/hello\n\n# View function logs\nnetlify functions:logs hello\n\n# Invoke function\nnetlify"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Deploy functions only\nnetlify deploy --functions=netlify/functions\n\n# Deploy to production\nnetlify deploy --prod\n\n# List deployed functions\nnetlify functions:list\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://external-api.com'"
        },
        {
          "type": "external",
          "url": "https://edge.netlify.com\""
        },
        {
          "type": "external",
          "url": "https://edge.netlify.com\""
        },
        {
          "type": "example",
          "url": "https://cdn.example.com/file.jpg'"
        },
        {
          "type": "example",
          "url": "http://localhost:8888/.netlify/functions/hello"
        }
      ],
      "tools_mentioned": [
        "postgres",
        "ssl",
        "jwt",
        "redis"
      ],
      "config_snippets": [
        "toml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (toml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 70.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "deployment/netlify-deployment.md",
      "category": "deployment",
      "skill_name": "netlify-deployment",
      "frontmatter": {
        "name": "deployment-netlify-deployment",
        "description": "Deploying static sites, JAMstack apps, or frontend frameworks to Netlify"
      },
      "metrics": {
        "line_count": 475,
        "code_line_count": 89,
        "code_examples": 9,
        "external_refs": 9,
        "tools_mentioned": 1,
        "config_snippets": 7
      },
      "code_examples": [
        {
          "language": "toml",
          "line_count": 37,
          "complexity": "medium",
          "code": "# netlify.toml - Basic configuration\n[build]\n  # Base directory for monorepos\n  base = \"apps/web\"\n\n  # Build command\n  command = \"npm run build\"\n\n  # Publish directory (relative to base)\n  publish = \""
        },
        {
          "language": "toml",
          "line_count": 32,
          "complexity": "medium",
          "code": "# Next.js App Router\n[build]\n  command = \"npm run build\"\n  publish = \".next\"\n\n[build.environment]\n  NODE_VERSION = \"20\"\n  NEXT_PRIVATE_TARGET = \"server\"\n\n# Astro\n[build]\n  command = \"npm run build\"\n  "
        },
        {
          "language": "toml",
          "line_count": 38,
          "complexity": "medium",
          "code": "# netlify.toml redirects\n[[redirects]]\n  from = \"/old-path/*\"\n  to = \"/new-path/:splat\"\n  status = 301\n  force = true\n\n[[redirects]]\n  from = \"/api/*\"\n  to = \"https://api.example.com/:splat\"\n  status "
        },
        {
          "language": "toml",
          "line_count": 37,
          "complexity": "medium",
          "code": "# netlify.toml headers\n[[headers]]\n  for = \"/*\"\n  [headers.values]\n    X-Frame-Options = \"DENY\"\n    X-XSS-Protection = \"1; mode=block\"\n    X-Content-Type-Options = \"nosniff\"\n    Referrer-Policy = \"str"
        },
        {
          "language": "bash",
          "line_count": 33,
          "complexity": "medium",
          "code": "# Install Netlify CLI\nnpm install -g netlify-cli\n\n# Login to Netlify\nnetlify login\n\n# Initialize new site\nnetlify init\n\n# Link existing site\nnetlify link\n\n# Deploy to draft URL (preview)\nnetlify deplo"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "complex",
          "code": "# Set via CLI\nnetlify env:set API_KEY \"secret-key\"\nnetlify env:set API_URL \"https://api.example.com\" --context production\nnetlify env:set DEBUG_MODE \"true\" --context deploy-preview\n\n# List environment"
        },
        {
          "language": "toml",
          "line_count": 10,
          "complexity": "simple",
          "code": "[build.environment]\n  NODE_VERSION = \"20\"\n  NEXT_PUBLIC_APP_NAME = \"My App\"\n\n[context.production.environment]\n  NEXT_PUBLIC_API_URL = \"https://api.example.com\"\n\n[context.deploy-preview.environment]\n  "
        },
        {
          "language": "toml",
          "line_count": 9,
          "complexity": "simple",
          "code": "# netlify.toml in repo root\n[build]\n  base = \"apps/marketing\"\n  command = \"npm run build\"\n  publish = \"dist\"\n\n# Ignore builds if app didn't change\nignore = \"git diff --quiet $CACHED_COMMIT_REF $COMMIT"
        },
        {
          "language": "toml",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Site 1: apps/marketing/netlify.toml\n[build]\n  base = \"apps/marketing\"\n  command = \"npm run build\"\n  publish = \"dist\"\n\n# Site 2: apps/docs/netlify.toml\n[build]\n  base = \"apps/docs\"\n  command = \"npm r"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com\""
        },
        {
          "type": "example",
          "url": "https://preview-api.example.com\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/:splat\""
        },
        {
          "type": "external",
          "url": "https://external-api.com/:splat\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/:splat"
        },
        {
          "type": "example",
          "url": "https://example.com\""
        },
        {
          "type": "example",
          "url": "https://api.example.com\""
        },
        {
          "type": "example",
          "url": "https://api.example.com\""
        },
        {
          "type": "example",
          "url": "https://preview-api.example.com\""
        }
      ],
      "tools_mentioned": [
        "vite"
      ],
      "config_snippets": [
        "toml",
        "toml",
        "toml",
        "toml",
        "toml",
        "toml",
        "toml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (toml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 70.5,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "debugging/performance-profiling.md",
      "category": "debugging",
      "skill_name": "performance-profiling",
      "frontmatter": {
        "name": "debugging-performance-profiling",
        "description": "Performance profiling with CPU profilers (perf, pprof, py-spy), flame graphs, memory profiling (heaptrack, Valgrind), and profile-guided optimization"
      },
      "metrics": {
        "line_count": 639,
        "code_line_count": 212,
        "code_examples": 24,
        "external_refs": 15,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 44,
          "complexity": "medium",
          "code": "# 1. Record CPU profile (99 Hz sampling)\nperf record -F 99 -g -p <pid> -- sleep 30\n# -F 99: Sample at 99 Hz (avoid timer bias at 100 Hz)\n# -g: Record call stacks\n# -p <pid>: Attach to running process\n"
        },
        {
          "language": "bash",
          "line_count": 38,
          "complexity": "medium",
          "code": "# Install py-spy\npip install py-spy\n\n# 1. Profile running Python process\npy-spy record -o profile.svg --pid <pid>\n\n# 2. Profile for specific duration\npy-spy record -o profile.svg --pid <pid> --duratio"
        },
        {
          "language": "go",
          "line_count": 48,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"log\"\n    \"net/http\"\n    _ \"net/http/pprof\"\n    \"os\"\n    \"runtime\"\n    \"runtime/pprof\"\n)\n\nfunc main() {\n    // Method 1: HTTP server (production)\n    go func() {\n        log"
        },
        {
          "language": "bash",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Method 1: HTTP endpoint (live profiling)\ngo tool pprof http://localhost:6060/debug/pprof/profile?seconds=30\n\n# Interactive commands:\n# (pprof) top10        # Top 10 functions\n# (pprof) list compute "
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "# Install: pip install memory_profiler\n\nfrom memory_profiler import profile\n\n@profile\ndef process_data():\n    # Large allocation\n    data = [i for i in range(1000000)]\n\n    # Memory leak (never freed)"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Run with memory profiling\npython -m memory_profiler app.py\n\n# Output shows memory usage per line:\n# Line #    Mem usage    Increment   Line Contents\n# ==============================================="
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Run with heap profiling\nvalgrind --tool=massif ./myapp\n\n# Generates massif.out.<pid>\n\n# Analyze\nms_print massif.out.12345\n\n# Generate graph\nmassif-visualizer massif.out.12345  # GUI tool\n"
        },
        {
          "language": "go",
          "line_count": 16,
          "complexity": "complex",
          "code": "import (\n    \"net/http\"\n    _ \"net/http/pprof\"\n    \"runtime\"\n)\n\nfunc main() {\n    // Enable HTTP pprof server\n    go func() {\n        http.ListenAndServe(\"localhost:6060\", nil)\n    }()\n\n    // Your ap"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Capture heap profile\ngo tool pprof http://localhost:6060/debug/pprof/heap\n\n# Interactive commands\n(pprof) top        # Top allocations\n(pprof) list main  # Show allocations in main\n\n# Generate graph"
        },
        {
          "language": "bash",
          "line_count": 26,
          "complexity": "medium",
          "code": "# Install FlameGraph tools\ngit clone https://github.com/brendangregg/FlameGraph\ncd FlameGraph\n\n# Generate from perf data (Linux)\nperf record -F 99 -g -p <pid> -- sleep 30\nperf script | ./stackcollapse"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Step 1: Compile with instrumentation\ngcc -fprofile-generate -O2 myapp.c -o myapp\n\n# Step 2: Run with representative workload\n./myapp < typical_input.txt\n# Generates *.gcda files\n\n# Step 3: Recompile"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Step 1: Build binary\ngo build -o myapp\n\n# Step 2: Run with CPU profiling\n./myapp --cpuprofile=cpu.prof\n\n# Step 3: Rebuild with profile\ngo build -pgo=cpu.prof -o myapp_optimized\n\n# Compare\ntime ./mya"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Step 1: Instrument\nRUSTFLAGS=\"-Cprofile-generate=/tmp/pgo-data\" cargo build --release\n\n# Step 2: Run\n./target/release/myapp\n\n# Step 3: Merge profiles\nllvm-profdata merge -o /tmp/pgo-data/merged.prof"
        },
        {
          "language": "bash",
          "line_count": 26,
          "complexity": "medium",
          "code": "# 1. strace (syscall tracing)\nstrace -c python app.py  # Summary\nstrace -T -e trace=read,write python app.py  # Time per syscall\n\n# 2. iostat (disk I/O)\niostat -x 1  # Extended stats, 1 second interva"
        },
        {
          "language": "go",
          "line_count": 18,
          "complexity": "complex",
          "code": "import (\n    \"net/http\"\n    _ \"net/http/pprof\"\n    \"runtime\"\n)\n\nfunc main() {\n    // Enable mutex profiling\n    runtime.SetMutexProfileFraction(1)\n\n    // HTTP server for pprof\n    go func() {\n       "
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Capture mutex profile\ngo tool pprof http://localhost:6060/debug/pprof/mutex\n\n# Interactive\n(pprof) top\n(pprof) list main\n\n# Generate graph\ngo tool pprof -http=:8080 http://localhost:6060/debug/pprof"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Record lock contention\nsudo perf lock record -p <pid> -- sleep 30\n\n# Report\nsudo perf lock report\n"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Record CPU profile\nperf record -F 99 -g -p <pid> -- sleep 30\n\n# View report\nperf report\n\n# Record specific events\nperf record -e cache-misses -g -p <pid>\n\n# Record system-wide\nsudo perf record -F 99"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Record flamegraph\npy-spy record -o profile.svg --pid <pid> --duration 60\n\n# Live top view\npy-spy top --pid <pid>\n\n# Profile all threads\npy-spy record -o profile.svg --pid <pid> --threads\n\n# Profile "
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# CPU profile (30 seconds)\ngo tool pprof http://localhost:6060/debug/pprof/profile?seconds=30\n\n# Heap profile\ngo tool pprof http://localhost:6060/debug/pprof/heap\n\n# Goroutine profile\ngo tool pprof ht"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "complex",
          "code": "# WRONG: cProfile slows down production by 10-100x\nimport cProfile\ncProfile.run('app.run()')  # NEVER in production!\n\n# CORRECT: Use sampling profiler (py-spy)\n# py-spy record -o profile.svg --pid <pi"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Profile unoptimized build\ncargo build  # Debug mode!\nperf record ./target/debug/myapp\n\n# CORRECT: Profile release build\ncargo build --release\nperf record ./target/release/myapp\n"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# WRONG: Profile with no traffic\npy-spy record -o profile.svg --pid <pid> --duration 60\n# App is idle!\n\n# CORRECT: Profile under load\n# Terminal 1: Start app\nuvicorn app:app\n\n# Terminal 2: Generate lo"
        },
        {
          "language": "c",
          "line_count": 14,
          "complexity": "simple",
          "code": "// WRONG: Volatile prevents optimization\nvolatile int result = 0;\nfor (int i = 0; i < 1000000; i++) {\n    result += compute(i);\n}\n\n// CORRECT: Let compiler optimize\nint result = 0;\nfor (int i = 0; i <"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/brendangregg/FlameGraph"
        },
        {
          "type": "example",
          "url": "http://localhost:8000/api/users"
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/profile?seconds=30"
        },
        {
          "type": "example",
          "url": "http://localhost:8080"
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/heap"
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/heap"
        },
        {
          "type": "github",
          "url": "https://github.com/brendangregg/FlameGraph"
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/mutex"
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/mutex"
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/profile?seconds=30"
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/heap"
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/goroutine"
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/mutex"
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/block"
        },
        {
          "type": "example",
          "url": "http://localhost:8000/api/users"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "24 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 70.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "ml/dspy-setup.md",
      "category": "ml",
      "skill_name": "dspy-setup",
      "frontmatter": {
        "name": "dspy-setup",
        "description": "Installation, configuration, and language model setup for DSPy framework including Modal and HuggingFace"
      },
      "metrics": {
        "line_count": 531,
        "code_line_count": 151,
        "code_examples": 20,
        "external_refs": 10,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Latest stable release\npip install dspy-ai\n\n# Or with uv (recommended)\nuv add dspy-ai\n\n# Development/latest version\npip install git+https://github.com/stanfordnlp/dspy.git\n"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# For specific LM providers\nuv add openai anthropic cohere litellm\n\n# For HuggingFace\nuv add huggingface-hub transformers\n\n# For Modal integration\nuv add modal\n\n# For RAG and vector search\nuv add chro"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "import dspy\n\n# Configure OpenAI LM\nlm = dspy.LM(\n    model=\"openai/gpt-4o-mini\",\n    api_key=\"your-api-key-here\",  # or set OPENAI_API_KEY env var\n    max_tokens=1000,\n    temperature=0.0,\n)\n\n# Set as"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "import dspy\nimport os\n\n# Configure Claude\nlm = dspy.LM(\n    model=\"anthropic/claude-3-5-sonnet-20241022\",\n    api_key=os.getenv(\"ANTHROPIC_API_KEY\"),\n    max_tokens=4096,\n    temperature=0.0,\n)\n\ndspy."
        },
        {
          "language": "python",
          "line_count": 59,
          "complexity": "complex",
          "code": "import dspy\nimport modal\n\n# Deploy model on Modal with GPU\napp = modal.App(\"dspy-llm\")\n\n@app.function(\n    image=modal.Image.debian_slim().pip_install(\"vllm\", \"transformers\"),\n    gpu=\"L40S\",  # Cost-"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "import dspy\nimport os\n\n# Use HuggingFace Inference API\nlm = dspy.LM(\n    model=\"huggingface/meta-llama/Meta-Llama-3.1-8B-Instruct\",\n    api_key=os.getenv(\"HUGGINGFACE_API_KEY\"),\n    api_base=\"https://"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "import dspy\n\n# Connect to self-hosted vLLM or Text Generation Inference server\n# Assumes you have vLLM running: vllm serve meta-llama/Meta-Llama-3.1-8B-Instruct\n\nlm = dspy.LM(\n    model=\"openai/meta-l"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "import modal\nimport dspy\n\n# Deploy HuggingFace model on Modal with optimized serving\napp = modal.App(\"dspy-hf-modal\")\n\n@app.function(\n    image=modal.Image.debian_slim()\n        .pip_install(\"vllm\", \""
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "import dspy\n\n# Run local model via Ollama\n# First: ollama pull llama3.2\nlm = dspy.LM(\n    model=\"ollama/llama3.2\",\n    api_base=\"http://localhost:11434\",  # Ollama default port\n    max_tokens=2000,\n)\n"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "import dspy\n\n# Different models for different purposes\nfast_lm = dspy.LM(\"openai/gpt-4o-mini\", max_tokens=500)\nsmart_lm = dspy.LM(\"openai/gpt-4o\", max_tokens=2000)\nmodal_lm = dspy.LM(\n    \"openai/meta"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Standard installation\npip install dspy-ai\n\n# With uv (recommended)\nuv add dspy-ai\n\n# With Modal and HuggingFace support\nuv add dspy-ai modal huggingface-hub transformers\n\n# Optional dependencies\nuv "
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Install Modal\nuv add modal\n\n# Set up Modal account\nmodal setup\n\n# Deploy model endpoint\nmodal deploy dspy_modal.py\n\n# Get endpoint URL\nmodal app list\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad\nlm = dspy.LM(\"openai/gpt-4o-mini\", api_key=\"sk-1234567890\")\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "complex",
          "code": "# Good\nimport os\nlm = dspy.LM(\"openai/gpt-4o-mini\", api_key=os.getenv(\"OPENAI_API_KEY\"))\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad\nlm = dspy.LM(\"openai/gpt-4o\")  # No limit\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Good\nlm = dspy.LM(\"openai/gpt-4o\", max_tokens=2000)\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad\nlm = dspy.LM(\"openai/gpt-4o-mini\")\npredictor = dspy.Predict(\"text -> label\")  # No LM configured!\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Good\nlm = dspy.LM(\"openai/gpt-4o-mini\")\ndspy.configure(lm=lm)\npredictor = dspy.Predict(\"text -> label\")  # Uses configured LM\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Bad - Downloads model on every cold start\n@app.function(image=image, gpu=\"L40S\")\ndef serve():\n    llm = LLM(model=\"meta-llama/Meta-Llama-3.1-70B\")  # Re-downloads every time\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Good - Cache model in volume\n@app.function(\n    image=image,\n    gpu=\"L40S\",\n    volumes={\"/models\": modal.Volume.from_name(\"hf-models\")},\n)\ndef serve():\n    llm = LLM(model=\"meta-llama/Meta-Llama-3"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/stanfordnlp/dspy.git"
        },
        {
          "type": "external",
          "url": "https://your-app--inference.modal.run\""
        },
        {
          "type": "external",
          "url": "https://api-inference.huggingface.co/models\""
        },
        {
          "type": "example",
          "url": "http://localhost:8000/v1\""
        },
        {
          "type": "example",
          "url": "http://localhost:8080\""
        },
        {
          "type": "external",
          "url": "https://your-app--serve.modal.run/v1\""
        },
        {
          "type": "example",
          "url": "http://localhost:11434\""
        },
        {
          "type": "external",
          "url": "https://your-app.modal.run/v1\""
        },
        {
          "type": "example",
          "url": "http://localhost:8000/v1`"
        },
        {
          "type": "example",
          "url": "http://localhost:11434`"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "20 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 70.0,
      "priority_tier": "HIGH"
    },
    {
      "file_path": "deployment/heroku-deployment.md",
      "category": "deployment",
      "skill_name": "heroku-deployment",
      "frontmatter": {
        "name": "deployment-heroku-deployment",
        "description": "Deploying web applications, APIs, or worker processes to Heroku"
      },
      "metrics": {
        "line_count": 508,
        "code_line_count": 168,
        "code_examples": 23,
        "external_refs": 3,
        "tools_mentioned": 5,
        "config_snippets": 3
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Add Heroku remote\nheroku git:remote -a myapp\n\n# Deploy\ngit push heroku main\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Login to container registry\nheroku container:login\n\n# Build and push\nheroku container:push web -a myapp\n\n# Release\nheroku container:release web -a myapp\n"
        },
        {
          "language": "procfile",
          "line_count": 3,
          "complexity": "simple",
          "code": "web: gunicorn myapp.wsgi --bind 0.0.0.0:$PORT --workers 4\nrelease: python manage.py migrate --noinput\n"
        },
        {
          "language": "procfile",
          "line_count": 3,
          "complexity": "simple",
          "code": "web: npm start\nrelease: npm run migrate\n"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Python: runtime.txt\npython-3.11.9\n\n# Python: requirements.txt\ngunicorn==21.2.0\ndjango==4.2.0\n\n# Node.js: package.json engines\n{\n  \"engines\": {\n    \"node\": \"20.x\",\n    \"npm\": \"10.x\"\n  }\n}\n"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Create app\nheroku create myapp\n\n# Add Postgres\nheroku addons:create heroku-postgresql:essential-0\n\n# Set environment variables\nheroku config:set SECRET_KEY=xxx DJANGO_SETTINGS_MODULE=myapp.settings."
        },
        {
          "language": "procfile",
          "line_count": 4,
          "complexity": "simple",
          "code": "web: gunicorn myapp.wsgi --workers 4\nworker: celery -A myapp worker --loglevel=info\nrelease: python manage.py migrate\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Deploy changes\ngit push heroku main\n\n# Scale worker dynos\nheroku ps:scale worker=2\n\n# Check dyno status\nheroku ps\n\n# View worker logs\nheroku logs --dyno=worker.1 --tail\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Scale down workers during off-hours (use Heroku Scheduler)\nheroku ps:scale worker=0  # Night\nheroku ps:scale worker=2  # Day\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Create pipeline\nheroku pipelines:create myapp-pipeline --team=myteam\n\n# Create staging app\nheroku create myapp-staging --pipeline=myapp-pipeline --stage=staging\n\n# Create production app\nheroku creat"
        },
        {
          "language": "json",
          "line_count": 32,
          "complexity": "medium",
          "code": "{\n  \"name\": \"myapp\",\n  \"description\": \"My awesome app\",\n  \"repository\": \"https://github.com/myorg/myapp\",\n  \"env\": {\n    \"SECRET_KEY\": {\n      \"description\": \"Django secret key\",\n      \"generator\": \"s"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Auto-deploy staging from main branch (via dashboard)\n# Manual promotion to production:\nheroku pipelines:promote -r staging\n\n# Or promote specific release\nheroku releases -a myapp-staging\nheroku pipe"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "heroku buildpacks:add --index 1 heroku/nodejs\nheroku buildpacks:add --index 2 heroku/python\n\n# Verify order\nheroku buildpacks\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Add domain\nheroku domains:add www.example.com\n\n# Get DNS target\nheroku domains\n\n# Output:\n# === myapp Custom Domains\n# Domain Name           DNS Target\n# www.example.com       myapp-12345.herokudns."
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Enable Automated Certificate Management (free)\nheroku certs:auto:enable\n\n# Check status\nheroku certs:auto\n"
        },
        {
          "language": "bash",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Single variable\nheroku config:set DATABASE_URL=postgres://...\n\n# Multiple variables\nheroku config:set \\\n  SECRET_KEY=xxx \\\n  DEBUG=False \\\n  ALLOWED_HOSTS=myapp.com\n\n# From .env file (requires herok"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "complex",
          "code": "import os\n\nSECRET_KEY = os.environ.get('SECRET_KEY')\nDATABASE_URL = os.environ.get('DATABASE_URL')\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\n"
        },
        {
          "language": "procfile",
          "line_count": 3,
          "complexity": "simple",
          "code": "release: python manage.py migrate && python manage.py createcachetable\nweb: gunicorn myapp.wsgi\n"
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "simple",
          "code": "{\n  \"scripts\": {\n    \"postdeploy\": \"python manage.py migrate\"\n  }\n}\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Run one-off dyno\nheroku run python manage.py migrate\n\n# With custom settings\nheroku run python manage.py migrate --settings=myapp.settings.production\n"
        },
        {
          "language": "dockerfile",
          "line_count": 12,
          "complexity": "simple",
          "code": "FROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\n# Heroku provides $PORT dynamically\nCMD gunicorn myapp.wsgi --bind 0.0.0.0:$P"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Build and push (uses heroku.yml or Dockerfile)\nheroku container:push web\n\n# Release (starts new dynos)\nheroku container:release web\n\n# View logs\nheroku logs --tail\n"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "build:\n  docker:\n    web: Dockerfile\n    worker: Dockerfile.worker\nrun:\n  web: gunicorn myapp.wsgi\n  worker: celery -A myapp worker\n"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/myorg/myapp\""
        },
        {
          "type": "github",
          "url": "https://github.com/heroku/heroku-buildpack-nodejs"
        },
        {
          "type": "github",
          "url": "https://github.com/heroku/heroku-buildpack-python"
        }
      ],
      "tools_mentioned": [
        "postgresql",
        "postgres",
        "ssl",
        "redis",
        "docker"
      ],
      "config_snippets": [
        "json",
        "json",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml, json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "23 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "2 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 69.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cloud/aws/aws-api-gateway.md",
      "category": "cloud",
      "skill_name": "aws-api-gateway",
      "frontmatter": {
        "name": "cloud-aws-api-gateway",
        "description": "AWS API Gateway REST APIs, HTTP APIs, WebSocket APIs, authorization, and integration patterns"
      },
      "metrics": {
        "line_count": 600,
        "code_line_count": 115,
        "code_examples": 16,
        "external_refs": 7,
        "tools_mentioned": 2,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Create HTTP API (recommended for new projects)\naws apigatewayv2 create-api \\\n  --name my-http-api \\\n  --protocol-type HTTP \\\n  --target arn:aws:lambda:us-east-1:123456789012:function:my-function\n\n# "
        },
        {
          "language": "python",
          "line_count": 55,
          "complexity": "complex",
          "code": "# Lambda function for API Gateway proxy integration\nimport json\n\ndef lambda_handler(event, context):\n    \"\"\"\n    Handle API Gateway proxy integration\n\n    Event structure:\n    {\n      'httpMethod': 'G"
        },
        {
          "language": "python",
          "line_count": 65,
          "complexity": "complex",
          "code": "import boto3\nimport json\n\napigateway_management = None\n\ndef lambda_handler(event, context):\n    \"\"\"\n    Handle WebSocket events\n\n    Routes:\n    - $connect: Client connects\n    - $disconnect: Client d"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# HTTP API - simple CORS configuration\naws apigatewayv2 update-api \\\n  --api-id abc123 \\\n  --cors-configuration AllowOrigins=\"https://example.com\",AllowMethods=\"GET,POST,PUT,DELETE\",AllowHeaders=\"Cont"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "medium",
          "code": "# Lambda function with CORS headers\ndef lambda_handler(event, context):\n    \"\"\"Return CORS headers with all responses\"\"\"\n\n    # Handle preflight request\n    if event['httpMethod'] == 'OPTIONS':\n      "
        },
        {
          "language": "python",
          "line_count": 47,
          "complexity": "medium",
          "code": "def lambda_handler(event, context):\n    \"\"\"\n    Lambda authorizer for API Gateway\n\n    Event structure:\n    {\n      'type': 'REQUEST',\n      'methodArn': 'arn:aws:execute-api:...',\n      'headers': {'"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Access authorizer context in Lambda function\ndef api_handler(event, context):\n    \"\"\"Lambda function receiving authorized request\"\"\"\n\n    # Access authorizer context\n    user_id = event['requestCont"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Create HTTP API with Cognito authorizer\naws apigatewayv2 create-authorizer \\\n  --api-id abc123 \\\n  --name cognito-auth \\\n  --authorizer-type JWT \\\n  --identity-source '$request.header.Authorization'"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Lambda function with Cognito authorization\ndef lambda_handler(event, context):\n    \"\"\"Access Cognito claims from request context\"\"\"\n\n    # Cognito user claims available in request context\n    claims"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Create usage plan with throttling\naws apigateway create-usage-plan \\\n  --name basic-plan \\\n  --throttle burstLimit=100,rateLimit=50 \\\n  --quota limit=10000,period=MONTH\n\n# Create API key\naws apigate"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Lambda function - API key available in request context\ndef lambda_handler(event, context):\n    \"\"\"Check API key usage\"\"\"\n\n    # API key ID available if request includes x-api-key header\n    api_key_"
        },
        {
          "language": "json",
          "line_count": 12,
          "complexity": "simple",
          "code": "// Request body JSON schema\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\"type\": \"string\", \"minLength\": 1},\n    \"email\": {\"type\": \"strin"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Create model\naws apigateway create-model \\\n  --rest-api-id abc123 \\\n  --name UserModel \\\n  --content-type application/json \\\n  --schema file://user-schema.json\n\n# Create request validator\naws apigat"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Create HTTP API with HTTP proxy integration\naws apigatewayv2 create-integration \\\n  --api-id abc123 \\\n  --integration-type HTTP_PROXY \\\n  --integration-uri https://api.example.com/{proxy} \\\n  --inte"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "medium",
          "code": "# \u274c NEVER: Hardcode CORS origins in production\ndef lambda_handler(event, context):\n    return {\n        'statusCode': 200,\n        'headers': {\n            'Access-Control-Allow-Origin': '*'  # Allows"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "medium",
          "code": "# \u274c Don't skip error handling\ndef lambda_handler(event, context):\n    user = get_user(event['pathParameters']['id'])  # May not exist\n    return {'statusCode': 200, 'body': json.dumps(user)}\n\n# \u2705 Corr"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://{event['requestContext']['domainName']}/{event['requestContext']['stage']}\""
        },
        {
          "type": "example",
          "url": "https://example.com\",AllowMethods=\"GET,POST,PUT,DELETE\",AllowHeaders=\"Content-Type,Authorization\""
        },
        {
          "type": "example",
          "url": "https://example.com'"
        },
        {
          "type": "example",
          "url": "https://example.com'"
        },
        {
          "type": "external",
          "url": "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_abc123"
        },
        {
          "type": "external",
          "url": "http://json-schema.org/draft-04/schema#\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/{proxy}"
        }
      ],
      "tools_mentioned": [
        "jwt",
        "oauth"
      ],
      "config_snippets": [
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 69.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "proxies/cache-control.md",
      "category": "proxies",
      "skill_name": "cache-control",
      "frontmatter": {
        "name": "proxies-cache-control",
        "description": "HTTP caching strategies including cache headers, CDN patterns, cache invalidation, stale-while-revalidate, and edge caching optimization"
      },
      "metrics": {
        "line_count": 614,
        "code_line_count": 176,
        "code_examples": 24,
        "external_refs": 4,
        "tools_mentioned": 4,
        "config_snippets": 3
      },
      "code_examples": [
        {
          "language": "http",
          "line_count": 7,
          "complexity": "simple",
          "code": "Cache-Control: no-cache           # Revalidate with origin\nCache-Control: no-store           # Don't cache at all\nCache-Control: max-age=0          # Immediate revalidation\nCache-Control: max-stale=36"
        },
        {
          "language": "http",
          "line_count": 10,
          "complexity": "simple",
          "code": "Cache-Control: public             # Cacheable by any cache\nCache-Control: private            # Only browser cache\nCache-Control: no-cache           # Must revalidate\nCache-Control: no-store           "
        },
        {
          "language": "http",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u274c Bad: Short cache time\nGET /app.js HTTP/1.1\nResponse:\nCache-Control: max-age=3600\n\n# \u2705 Good: Immutable with content hash\nGET /app.abc123def.js HTTP/1.1\nResponse:\nCache-Control: public, max-age=3153"
        },
        {
          "language": "nginx",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Nginx configuration\nlocation ~* \\.(?:css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2)$ {\n    expires 1y;\n    add_header Cache-Control \"public, immutable\";\n    access_log off;\n\n    # Enable gzip for compr"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c Bad: No caching\n@app.route('/api/users/<user_id>')\ndef get_user(user_id):\n    user = get_user_from_db(user_id)\n    return jsonify(user)\n"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "# \u2705 Good: ETag with conditional requests\nfrom flask import Flask, jsonify, request, make_response\nimport hashlib\n\n@app.route('/api/users/<user_id>')\ndef get_user(user_id):\n    user = get_user_from_db("
        },
        {
          "language": "http",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u2705 Serve stale while fetching fresh\nCache-Control: max-age=60, stale-while-revalidate=300\n\n# Timeline:\n# 0-60s: Serve from cache (fresh)\n# 60-360s: Serve from cache (stale) + async revalidate\n# 360s+"
        },
        {
          "language": "nginx",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Nginx configuration\nproxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=1g;\n\nserver {\n    location /api/ {\n        proxy_cache api_cache;\n        proxy_cache_valid 200 60s;"
        },
        {
          "language": "http",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Simple time-based\nCache-Control: max-age=3600\n\n# Different for shared vs private\nCache-Control: private, max-age=300, s-maxage=3600\n"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "from datetime import datetime\n\n@app.route('/api/article/<article_id>')\ndef get_article(article_id):\n    article = get_article_from_db(article_id)\n\n    # Last-Modified header\n    last_modified = articl"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "# Purge specific URL from cache\nimport requests\n\ndef purge_cache(url: str):\n    \"\"\"Send PURGE request to proxy cache\"\"\"\n    try:\n        response = requests.request('PURGE', url)\n        return respon"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Nginx cache purge\ncurl -X PURGE https://example.com/cached-page\n\n# Varnish cache purge\ncurl -X BAN -H \"X-Ban-Url: /api/users/.*\" http://localhost:6081/\n"
        },
        {
          "language": "http",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Control CDN cache separately from browser cache\nCache-Control: private, max-age=60\nSurrogate-Control: max-age=3600\n\n# CDN uses Surrogate-Control (3600s)\n# Browser uses Cache-Control (60s)\n"
        },
        {
          "language": "javascript",
          "line_count": 32,
          "complexity": "medium",
          "code": "// Cloudflare Workers - Custom caching\naddEventListener('fetch', event => {\n  event.respondWith(handleRequest(event.request))\n})\n\nasync function handleRequest(request) {\n  const cache = caches.default"
        },
        {
          "language": "json",
          "line_count": 32,
          "complexity": "medium",
          "code": "{\n  \"CacheBehaviors\": [\n    {\n      \"PathPattern\": \"/api/*\",\n      \"TargetOriginId\": \"api-origin\",\n      \"ViewerProtocolPolicy\": \"redirect-to-https\",\n      \"AllowedMethods\": [\"GET\", \"HEAD\", \"OPTIONS\"]"
        },
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "from flask import Flask\nfrom flask_caching import Cache\n\napp = Flask(__name__)\n\n# Configure cache\ncache = Cache(app, config={\n    'CACHE_TYPE': 'redis',\n    'CACHE_REDIS_HOST': 'localhost',\n    'CACHE"
        },
        {
          "language": "go",
          "line_count": 52,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/golang/groupcache\"\n    \"net/http\"\n)\n\nvar dataCache *groupcache.Group\n\nfunc init() {\n    // Create cache group\n    dataCache = groupcache."
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u2705 Good: Include all varying factors\ncache_key = f\"user:{user_id}:profile:v{api_version}\"\ncache_key = f\"search:{query}:{page}:{sort}:{filter}\"\ncache_key = f\"product:{product_id}:{lang}:{currency}\"\n\n#"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "def normalize_cache_key(params: dict) -> str:\n    \"\"\"Create consistent cache key from parameters\"\"\"\n    # Sort keys for consistency\n    sorted_params = sorted(params.items())\n\n    # Normalize values\n "
        },
        {
          "language": "http",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Static assets (with versioning)\nCache-Control: public, max-age=31536000, immutable\n\n# User-specific data\nCache-Control: private, max-age=300\n\n# Frequently changing data\nCache-Control: private, max-a"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Pre-populate cache with frequently accessed data\ndef warm_cache():\n    popular_items = get_popular_items()\n\n    for item_id in popular_items:\n        cache_key = f\"item:{item_id}\"\n        data = fet"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "from prometheus_client import Counter, Histogram\n\ncache_hits = Counter('cache_hits_total', 'Total cache hits')\ncache_misses = Counter('cache_misses_total', 'Total cache misses')\ncache_latency = Histog"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# 1. Use shorter TTLs with revalidation\nresponse.headers['Cache-Control'] = 'max-age=60, must-revalidate'\n\n# 2. Implement cache versioning\ncache_key = f\"data:{version}:{id}\"\n\n# 3. Use ETags for valida"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "import threading\n\nlocks = {}\n\ndef get_with_lock(key: str):\n    \"\"\"Prevent cache stampede with locking\"\"\"\n    # Try cache first\n    data = cache.get(key)\n    if data is not None:\n        return data\n\n "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://backend"
        },
        {
          "type": "example",
          "url": "https://cdn.example.com/api/users/123'"
        },
        {
          "type": "example",
          "url": "https://example.com/cached-page"
        },
        {
          "type": "example",
          "url": "http://localhost:6081/"
        }
      ],
      "tools_mentioned": [
        "nginx",
        "prometheus",
        "tls",
        "redis"
      ],
      "config_snippets": [
        "nginx",
        "nginx",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (nginx, json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "24 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 69.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "caching/cache-performance-monitoring.md",
      "category": "caching",
      "skill_name": "cache-performance-monitoring",
      "frontmatter": {
        "name": "caching-cache-performance-monitoring",
        "description": "Measuring and optimizing cache performance - metrics, monitoring tools, alerts, load testing, and instrumentation for cache hit rates and latency."
      },
      "metrics": {
        "line_count": 668,
        "code_line_count": 99,
        "code_examples": 14,
        "external_refs": 4,
        "tools_mentioned": 4,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "import redis\nfrom typing import Dict\n\nclass RedisMonitor:\n    def __init__(self, redis_client: redis.Redis):\n        self.client = redis_client\n\n    def get_cache_metrics(self) -> Dict:\n        \"\"\"Ext"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "class RedisSlowLogMonitor:\n    def __init__(self, redis_client: redis.Redis):\n        self.client = redis_client\n\n    def get_slow_queries(self, count: int = 10):\n        \"\"\"Get slowest Redis commands"
        },
        {
          "language": "python",
          "line_count": 65,
          "complexity": "complex",
          "code": "import time\nfrom functools import wraps\nfrom dataclasses import dataclass\nfrom typing import Callable, Any\n\n@dataclass\nclass CacheStats:\n    hits: int = 0\n    misses: int = 0\n    errors: int = 0\n    t"
        },
        {
          "language": "python",
          "line_count": 47,
          "complexity": "complex",
          "code": "import requests\nfrom datetime import datetime\n\nclass HTTPCacheAnalyzer:\n    @staticmethod\n    def analyze_response(url: str):\n        \"\"\"Analyze HTTP cache headers\"\"\"\n        response = requests.get(u"
        },
        {
          "language": "javascript",
          "line_count": 43,
          "complexity": "complex",
          "code": "// JavaScript: Monitor browser cache performance\n\nclass BrowserCacheMonitor {\n  constructor() {\n    this.stats = { cacheHits: 0, cacheMisses: 0 };\n  }\n\n  // Monitor Performance API\n  analyzeResourceTi"
        },
        {
          "language": "python",
          "line_count": 56,
          "complexity": "complex",
          "code": "import requests\nimport os\nfrom datetime import datetime, timedelta\n\nclass CloudflareAnalytics:\n    def __init__(self, api_token: str, zone_id: str):\n        self.api_token = api_token\n        self.zon"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "class FastlyAnalytics:\n    def __init__(self, api_key: str, service_id: str):\n        self.api_key = api_key\n        self.service_id = service_id\n\n    def get_realtime_stats(self):\n        \"\"\"Get Fast"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "from prometheus_client import Counter, Histogram, Gauge\n\n# Define metrics\ncache_requests = Counter('cache_requests_total', 'Total cache requests', ['status'])\ncache_latency = Histogram('cache_latency_"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "from statsd import StatsD\n\nclass StatsDInstrumentedCache:\n    def __init__(self, redis_client: redis.Redis, statsd_host: str = 'localhost', statsd_port: int = 8125):\n        self.cache = redis_client\n"
        },
        {
          "language": "python",
          "line_count": 60,
          "complexity": "complex",
          "code": "import asyncio\nimport aiohttp\nimport time\nfrom statistics import mean, median\n\nclass CacheLoadTester:\n    def __init__(self, url: str, num_requests: int = 1000):\n        self.url = url\n        self.nu"
        },
        {
          "language": "python",
          "line_count": 45,
          "complexity": "complex",
          "code": "class CacheAlertManager:\n    def __init__(self, redis_monitor: RedisMonitor):\n        self.monitor = redis_monitor\n\n    def check_alerts(self) -> list[str]:\n        \"\"\"Check cache metrics against thre"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Deploy caching without monitoring\ncache.set(\"user:123\", data)  # No metrics, no alerts\n\n# CORRECT: Instrument all cache operations\ninstrumented_cache.set(\"user:123\", data)  # Tracks hits, mis"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# WRONG: Accept 30% hit ratio as \"good enough\"\n# Problem: 70% of requests hit database\n\n# CORRECT: Investigate and optimize for >85% hit ratio\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# WRONG: Cache failures silently fall back to database\n# Problem: Database overload during cache outage\n\n# CORRECT: Alert when cache hit ratio drops suddenly\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com/api/data'"
        },
        {
          "type": "external",
          "url": "https://api.cloudflare.com/client/v4/zones/{zone_id}/analytics\""
        },
        {
          "type": "external",
          "url": "https://api.fastly.com/stats/service/{self.service_id}\""
        },
        {
          "type": "example",
          "url": "https://example.com/api/data'"
        }
      ],
      "tools_mentioned": [
        "datadog",
        "ssl",
        "prometheus",
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 69.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "diagrams/mermaid-charts.md",
      "category": "diagrams",
      "skill_name": "mermaid-charts",
      "frontmatter": {
        "name": "mermaid-charts",
        "description": "Create data visualization charts with Mermaid including pie, XY, quadrant, and radar charts for metrics and analytics"
      },
      "metrics": {
        "line_count": 462,
        "code_line_count": 168,
        "code_examples": 27,
        "external_refs": 5,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "pie\n    title Browser Market Share 2024\n    \"Chrome\" : 65.2\n    \"Safari\" : 18.5\n    \"Edge\" : 9.3\n    \"Firefox\" : 4.8\n    \"Others\" : 2.2\n"
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "simple",
          "code": "pie showData\n    title Programming Languages in Project\n    \"TypeScript\" : 45\n    \"Python\" : 30\n    \"Go\" : 15\n    \"Rust\" : 10\n"
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "pie showData\n    title Q4 Budget Distribution\n    \"Engineering\" : 45\n    \"Sales\" : 25\n    \"Marketing\" : 15\n    \"Operations\" : 10\n    \"Other\" : 5\n"
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "pie\n    title API Endpoints Usage\n    \"/api/users\" : 3420\n    \"/api/orders\" : 2180\n    \"/api/products\" : 1890\n    \"/api/auth\" : 1240\n    \"/api/analytics\" : 870\n"
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "pie showData\n    title Development Time Breakdown\n    \"Feature Development\" : 40\n    \"Bug Fixes\" : 25\n    \"Code Review\" : 15\n    \"Meetings\" : 12\n    \"Documentation\" : 8\n"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "xychart-beta\n    title \"Monthly Revenue Growth\"\n    x-axis [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"]\n    y-axis \"Revenue ($K)\" 0 --> 100\n    line [20, 35, 48, 62, 75, 88]\n"
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "simple",
          "code": "xychart-beta\n    title \"User Growth Comparison\"\n    x-axis [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\n    y-axis \"Users (K)\" 0 --> 150\n    line \"Platform A\" [25, 45, 75, 120]\n    line \"Platform B\" [30, 50, 70, 90]\n"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "xychart-beta\n    title \"Test Coverage by Module\"\n    x-axis [\"Auth\", \"API\", \"Database\", \"Frontend\", \"Utils\"]\n    y-axis \"Coverage %\" 0 --> 100\n    bar [92, 85, 78, 73, 95]\n"
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "xychart-beta\n    title \"Bug Count by Severity\"\n    x-axis [\"Sprint 1\", \"Sprint 2\", \"Sprint 3\", \"Sprint 4\"]\n    y-axis \"Bugs\" 0 --> 50\n    bar \"Critical\" [5, 3, 2, 1]\n    bar \"High\" [12, 9, 7, 4]\n    b"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "xychart-beta\n    title \"Response Time Distribution\"\n    x-axis \"Percentile\" 0 --> 100\n    y-axis \"Time (ms)\" 0 --> 500\n    line [10, 15, 25, 45, 98, 245, 485]\n"
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "xychart-beta\n    title \"API Latency P95 Over Time\"\n    x-axis [\"Week 1\", \"Week 2\", \"Week 3\", \"Week 4\"]\n    y-axis \"Latency (ms)\" 0 --> 300\n    line \"Auth Service\" [45, 52, 48, 43]\n    line \"User Servi"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "xychart-beta\n    title \"Monthly Active Users\"\n    x-axis [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"]\n    y-axis \"Users (K)\" 0 --> 200\n    line [45, 68, 92, 118, 155, 183]\n"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "xychart-beta\n    title \"Database Connection Pool Usage\"\n    x-axis [\"00:00\", \"06:00\", \"12:00\", \"18:00\", \"23:00\"]\n    y-axis \"Connections\" 0 --> 100\n    bar [12, 25, 78, 92, 45]\n"
        },
        {
          "language": "mermaid",
          "line_count": 13,
          "complexity": "simple",
          "code": "quadrantChart\n    title \"Feature Prioritization\"\n    x-axis \"Low Impact\" --> \"High Impact\"\n    y-axis \"Low Effort\" --> \"High Effort\"\n    quadrant-1 \"Quick Wins\"\n    quadrant-2 \"Major Projects\"\n    qua"
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "quadrantChart\n    title \"Technical Debt Assessment\"\n    x-axis \"Low Business Impact\" --> \"High Business Impact\"\n    y-axis \"Low Technical Risk\" --> \"High Technical Risk\"\n    quadrant-1 \"Address Soon\"\n"
        },
        {
          "language": "mermaid",
          "line_count": 15,
          "complexity": "simple",
          "code": "quadrantChart\n    title \"Task Priority Matrix\"\n    x-axis \"Not Urgent\" --> \"Urgent\"\n    y-axis \"Not Important\" --> \"Important\"\n    quadrant-1 \"Do First\"\n    quadrant-2 \"Schedule\"\n    quadrant-3 \"Deleg"
        },
        {
          "language": "mermaid",
          "line_count": 16,
          "complexity": "simple",
          "code": "quadrantChart\n    title \"Product Feature Assessment\"\n    x-axis \"Low Customer Value\" --> \"High Customer Value\"\n    y-axis \"Low Development Cost\" --> \"High Development Cost\"\n    quadrant-1 \"Avoid\"\n    "
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "quadrantChart\n    title \"Project Risk Matrix\"\n    x-axis \"Low Probability\" --> \"High Probability\"\n    y-axis \"Low Impact\" --> \"High Impact\"\n    quadrant-1 \"Monitor Closely\"\n    quadrant-2 \"Mitigate\"\n "
        },
        {
          "language": "mermaid",
          "line_count": 5,
          "complexity": "simple",
          "code": "radar-beta\n    title \"Developer Skill Assessment\"\n    axis Frontend, Backend, DevOps, Testing, Security\n    curve [4, 5, 3, 4, 3]\n"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "radar-beta\n    title \"Team Skill Comparison\"\n    axis React, Node, Database, Docker, Testing\n    curve \"Developer A\" [5, 4, 3, 4, 5]\n    curve \"Developer B\" [4, 5, 5, 3, 4]\n"
        },
        {
          "language": "mermaid",
          "line_count": 10,
          "complexity": "simple",
          "code": "radar-beta\n    title \"Product Evaluation\"\n    axis Performance[\"Performance\"],\n         Scalability[\"Scalability\"],\n         Security[\"Security\"],\n         Usability[\"Usability\"],\n         Cost[\"Cost-"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "radar-beta\n    title \"Full-Stack Developer Skills\"\n    axis HTML/CSS, JavaScript, TypeScript, React, Node.js, PostgreSQL, Docker, AWS\n    curve \"Current Level\" [5, 5, 4, 5, 4, 3, 3, 2]\n    curve \"Targ"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "radar-beta\n    title \"Service Health Metrics\"\n    axis Latency, Throughput, Availability, Error_Rate, CPU_Usage, Memory_Usage\n    curve \"Production\" [4, 5, 5, 5, 3, 4]\n    curve \"Staging\" [3, 4, 4, 4,"
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "simple",
          "code": "radar-beta\n    title \"Feature Comparison\"\n    axis Ease_of_Use, Features, Price, Support, Performance, Security\n    curve \"Our Product\" [5, 4, 5, 5, 4, 5]\n    curve \"Competitor A\" [4, 5, 3, 3, 5, 4]\n "
        },
        {
          "language": "mermaid",
          "line_count": 4,
          "complexity": "simple",
          "code": "pie\n    title \"Revenue\" %% Bad: No time context\n    \"Product A\" : 100\n"
        },
        {
          "language": "mermaid",
          "line_count": 5,
          "complexity": "simple",
          "code": "xychart-beta\n    x-axis [1, 2, 3, 4]\n    y-axis 0 --> 100\n    line [20, 40, 60, 80]\n"
        },
        {
          "language": "mermaid",
          "line_count": 3,
          "complexity": "simple",
          "code": "radar-beta\n    axis A, B, C, D, E, F, G, H, I, J, K, L\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/pie.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/xyChart.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/quadrantChart.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/radar.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.live"
        }
      ],
      "tools_mentioned": [
        "postgres",
        "postgresql",
        "docker"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "27 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        }
      ],
      "priority_score": 68.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "distributed-systems/logical-clocks.md",
      "category": "distributed-systems",
      "skill_name": "logical-clocks",
      "frontmatter": {
        "name": "distributed-systems-logical-clocks",
        "description": "Lamport logical clocks for establishing happened-before ordering in distributed systems without synchronized physical clocks"
      },
      "metrics": {
        "line_count": 428,
        "code_line_count": 51,
        "code_examples": 6,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "class LamportClock:\n    \"\"\"Lamport logical clock\"\"\"\n\n    def __init__(self):\n        self.time = 0\n\n    def tick(self):\n        \"\"\"Increment clock on local event\"\"\"\n        self.time += 1\n        retu"
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "class TotalOrderClock:\n    \"\"\"Lamport clock with total ordering\"\"\"\n\n    def __init__(self, process_id):\n        self.process_id = process_id\n        self.time = 0\n\n    def tick(self):\n        self.tim"
        },
        {
          "language": "python",
          "line_count": 73,
          "complexity": "complex",
          "code": "import heapq\nfrom typing import Set\n\nclass DistributedMutex:\n    \"\"\"Lamport's distributed mutual exclusion\"\"\"\n\n    def __init__(self, process_id, all_processes):\n        self.process_id = process_id\n "
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "class CausalLogger:\n    \"\"\"Log events with causal ordering\"\"\"\n\n    def __init__(self, node_id):\n        self.node_id = node_id\n        self.clock = LamportClock()\n        self.log = []\n\n    def log_ev"
        },
        {
          "language": "python",
          "line_count": 45,
          "complexity": "complex",
          "code": "class SnapshotManager:\n    \"\"\"Distributed snapshot using logical clocks\"\"\"\n\n    def __init__(self, process_id, channels):\n        self.process_id = process_id\n        self.channels = channels  # Other"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "import unittest\n\nclass TestLamportClock(unittest.TestCase):\n    def test_local_events(self):\n        \"\"\"Test local event ordering\"\"\"\n        clock = LamportClock()\n        t1 = clock.tick()\n        t2"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "6 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 68.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "caching/http-caching.md",
      "category": "caching",
      "skill_name": "http-caching",
      "frontmatter": {
        "name": "caching-http-caching",
        "description": "Browser and HTTP cache layer optimization using cache headers, conditional requests, and validation strategies"
      },
      "metrics": {
        "line_count": 789,
        "code_line_count": 111,
        "code_examples": 14,
        "external_refs": 4,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Optional\nfrom datetime import datetime, timedelta\n\n@dataclass\nclass HTTPCacheHeaders:\n    \"\"\"HTTP caching headers reference\"\"\"\n\n    # Modern (HTTP/"
        },
        {
          "language": "python",
          "line_count": 117,
          "complexity": "complex",
          "code": "class CacheControlExamples:\n    \"\"\"Common Cache-Control configurations\"\"\"\n\n    @staticmethod\n    def static_assets():\n        \"\"\"\n        Static assets with fingerprinting (e.g., app.abc123.js)\n\n     "
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "class ModernCacheDirectives:\n    \"\"\"2024 caching best practices\"\"\"\n\n    @staticmethod\n    def immutable_pattern():\n        \"\"\"\n        Immutable directive (Chrome 54+, Firefox 49+)\n\n        Prevents r"
        },
        {
          "language": "python",
          "line_count": 95,
          "complexity": "complex",
          "code": "import hashlib\nfrom typing import Optional\n\nclass ETagHandler:\n    \"\"\"ETag generation and validation\"\"\"\n\n    @staticmethod\n    def generate_etag(content: str) -> str:\n        \"\"\"\n        Generate ETag"
        },
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "from datetime import datetime\nfrom email.utils import formatdate, parsedate_to_datetime\n\nclass LastModifiedHandler:\n    \"\"\"Last-Modified header handling\"\"\"\n\n    @staticmethod\n    def format_http_date("
        },
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "class VaryHeaderExamples:\n    \"\"\"Vary header patterns\"\"\"\n\n    @staticmethod\n    def vary_by_encoding():\n        \"\"\"\n        Vary by Accept-Encoding\n\n        Cache separate versions for gzip, br, etc.\n"
        },
        {
          "language": "python",
          "line_count": 61,
          "complexity": "complex",
          "code": "import hashlib\nimport os\n\nclass CacheBusting:\n    \"\"\"Cache busting strategies\"\"\"\n\n    @staticmethod\n    def fingerprint_filename(filepath: str) -> str:\n        \"\"\"\n        Add content hash to filename"
        },
        {
          "language": "html",
          "line_count": 8,
          "complexity": "simple",
          "code": "<!-- Immutable pattern with long cache -->\n<link rel=\"stylesheet\" href=\"/static/app.a1b2c3d4.css\">\n<!-- Server sends: Cache-Control: public, max-age=31536000, immutable -->\n\n<!-- Non-fingerprinted ass"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Check response headers\ncurl -I https://example.com/api/data\n\n# Check with If-None-Match (ETag validation)\ncurl -H \"If-None-Match: \\\"abc123\\\"\" -I https://example.com/api/data\n\n# Check with If-Modifie"
        },
        {
          "language": "javascript",
          "line_count": 18,
          "complexity": "simple",
          "code": "// Chrome DevTools Network tab:\n// 1. Open DevTools (F12)\n// 2. Network tab\n// 3. Disable cache checkbox (for testing)\n// 4. Look at \"Size\" column:\n//    - \"(disk cache)\" = from disk cache\n//    - \"(m"
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "class StaticAssetCaching:\n    \"\"\"Optimal caching for static assets\"\"\"\n\n    @staticmethod\n    def configure_asset_caching():\n        \"\"\"\n        Different strategies for different asset types\n        \""
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# WRONG: Missing cache headers\n@app.route('/api/data')\ndef api_data():\n    return {\"data\": \"value\"}\n# Browser uses heuristic caching (unpredictable)\n\n# CORRECT: Explicit cache headers\n@app.route('/api"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: Using no-cache to prevent caching\nresponse.headers['Cache-Control'] = 'no-cache'\n# \"no-cache\" means \"revalidate before use\", NOT \"don't cache\"\n\n# CORRECT: Use no-store to prevent caching\nresp"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# WRONG: Public cache for user-specific data\n@app.route('/api/user/profile')\ndef user_profile():\n    response = make_response(get_user_data())\n    response.headers['Cache-Control'] = 'public, max-age="
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com/api/data"
        },
        {
          "type": "example",
          "url": "https://example.com/api/data"
        },
        {
          "type": "example",
          "url": "https://example.com/api/data"
        },
        {
          "type": "example",
          "url": "https://example.com/api/data"
        }
      ],
      "tools_mentioned": [
        "vite",
        "nginx",
        "webpack"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 67.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "collaboration/github/github-security-features.md",
      "category": "collaboration",
      "skill_name": "github-security-features",
      "frontmatter": {
        "name": "collaboration-github-security-features",
        "description": "Dependabot, code scanning, secret scanning, SBOM generation, security advisories, and security best practices"
      },
      "metrics": {
        "line_count": 810,
        "code_line_count": 213,
        "code_examples": 26,
        "external_refs": 1,
        "tools_mentioned": 5,
        "config_snippets": 11
      },
      "code_examples": [
        {
          "language": "yaml",
          "line_count": 36,
          "complexity": "medium",
          "code": "version: 2\nupdates:\n  # Enable version updates for npm\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n      day: \"monday\"\n      time: \"09:00\"\n      timezone: \"A"
        },
        {
          "language": "yaml",
          "line_count": 34,
          "complexity": "medium",
          "code": "version: 2\nupdates:\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"daily\"\n\n    # Ignore specific dependencies\n    ignore:\n      - dependency-name: \"express\"\n        # I"
        },
        {
          "language": "yaml",
          "line_count": 20,
          "complexity": "simple",
          "code": "version: 2\nupdates:\n  # Frontend dependencies\n  - package-ecosystem: \"npm\"\n    directory: \"/frontend\"\n    schedule:\n      interval: \"weekly\"\n\n  # Backend dependencies\n  - package-ecosystem: \"npm\"\n    "
        },
        {
          "language": "yaml",
          "line_count": 36,
          "complexity": "medium",
          "code": "name: Dependabot Auto-Merge\non: pull_request\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:"
        },
        {
          "language": "yaml",
          "line_count": 21,
          "complexity": "medium",
          "code": "name: Auto-Merge Security Updates\non: pull_request\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - uses: dependabot/fetch-metadata@v1\n     "
        },
        {
          "language": "yaml",
          "line_count": 43,
          "complexity": "medium",
          "code": "name: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"main\", \"develop\" ]\n  pull_request:\n    branches: [ \"main\" ]\n  schedule:\n    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM\n\njobs:\n  analyze:\n    name: Ana"
        },
        {
          "language": "yaml",
          "line_count": 12,
          "complexity": "simple",
          "code": "# .github/workflows/codeql.yml\n- name: Initialize CodeQL\n  uses: github/codeql-action/init@v2\n  with:\n    languages: javascript\n    # Use custom query pack\n    packs: owner/custom-queries\n    # Or inl"
        },
        {
          "language": "ql",
          "line_count": 17,
          "complexity": "complex",
          "code": "/**\n * @name SQL injection vulnerability\n * @description Detects SQL injection vulnerabilities\n * @kind path-problem\n * @problem.severity error\n * @id js/sql-injection\n */\n\nimport javascript\n\nfrom Dat"
        },
        {
          "language": "yaml",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Custom secret patterns\npatterns:\n  - name: Internal API Key\n    regex: '(?i)api[_-]?key[_-]?([a-z0-9]{32})'\n\n  - name: Database Connection String\n    regex: '(?i)(postgres|mysql|mongodb):\\/\\/[^:]+:["
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# View secret scanning alerts\ngh api /repos/owner/repo/secret-scanning/alerts\n\n# Close alert (false positive)\ngh api /repos/owner/repo/secret-scanning/alerts/1 \\\n  --method PATCH \\\n  --field state=res"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Export SBOM for repository\ngh api /repos/owner/repo/dependency-graph/sbom \\\n  --header \"Accept: application/vnd.github+json\" \\\n  > sbom.json\n\n# SBOM includes:\n# - Direct dependencies\n# - Transitive "
        },
        {
          "language": "yaml",
          "line_count": 26,
          "complexity": "medium",
          "code": "name: Generate SBOM\non:\n  release:\n    types: [published]\n\njobs:\n  sbom:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Generate SBOM\n        run: |\n          g"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Via web UI:\n# Security tab \u2192 Advisories \u2192 New draft security advisory\n\n# Fill in:\n# - Title: Brief description of vulnerability\n# - CVE ID: Request CVE if needed\n# - Ecosystem: npm, pip, rubygems, e"
        },
        {
          "language": "markdown",
          "line_count": 19,
          "complexity": "simple",
          "code": "# SQL Injection in User Authentication\n\n## Impact\nAuthenticated users can execute arbitrary SQL queries through the login endpoint.\n\n## Patches\nFixed in version 2.1.5. Users should upgrade immediately"
        },
        {
          "language": "markdown",
          "line_count": 66,
          "complexity": "complex",
          "code": "# Security Policy\n\n## Supported Versions\n\nWe currently support the following versions with security updates:\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 2.1.x   | :white_check"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Trigger Dependabot update\n@dependabot rebase                # Rebase PR\n@dependabot recreate              # Recreate PR\n@dependabot merge                 # Merge PR\n@dependabot squash and merge     "
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: 50 open Dependabot alerts, all ignored\n# Some critical vulnerabilities months old\n"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# CORRECT: Triage and address alerts\n# 1. Review new alerts weekly\n# 2. Prioritize by severity (Critical > High > Medium > Low)\n# 3. Test and merge security updates\n# 4. Dismiss false positives with e"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Hardcoded credentials in code\nAPI_KEY = \"sk-abc123xyz\"\nDATABASE_URL = \"postgresql://user:password@host/db\"\n\n# Or in config files\naws_access_key_id = AKIAIOSFODNN7EXAMPLE\naws_secret_access_key"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "complex",
          "code": "# CORRECT: Use environment variables and secrets\n# 1. Store secrets in GitHub Secrets\n# Settings \u2192 Secrets and variables \u2192 Actions \u2192 New repository secret\n\n# 2. Reference in workflows\nenv:\n  API_KEY: "
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG: No automated security analysis\n# Vulnerabilities only found in production\n# No visibility into code quality issues\n"
        },
        {
          "language": "yaml",
          "line_count": 23,
          "complexity": "medium",
          "code": "# CORRECT: Enable CodeQL scanning\n# .github/workflows/codeql.yml\nname: \"CodeQL\"\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n  schedule:\n    - cron: '0 2 * * 1'  # Wee"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG: No SECURITY.md file\n# Users don't know how to report vulnerabilities\n# Public issues created for security bugs\n"
        },
        {
          "language": "markdown",
          "line_count": 23,
          "complexity": "medium",
          "code": "# CORRECT: Create SECURITY.md\n# Located at repository root or .github/SECURITY.md\n\n# Security Policy\n\n## Reporting a Vulnerability\nPlease report security vulnerabilities privately:\n- GitHub Security A"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# WRONG: Manually updating dependencies\n# Updates happen sporadically\n# Security patches delayed\n# High maintenance burden\n"
        },
        {
          "language": "yaml",
          "line_count": 13,
          "complexity": "simple",
          "code": "# CORRECT: Automate with Dependabot\n# .github/dependabot.yml\nversion: 2\nupdates:\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    open-pull-requests-limit: 5\n"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/owner/repo/pull/123"
        }
      ],
      "tools_mentioned": [
        "postgresql",
        "postgres",
        "mongodb",
        "terraform",
        "mysql"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "26 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 66.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "debugging/remote-debugging.md",
      "category": "debugging",
      "skill_name": "remote-debugging",
      "frontmatter": {
        "name": "debugging-remote-debugging",
        "description": "Comprehensive guide to remote debugging techniques for production and development environments. Covers SSH port forwarding, VSCode Remote Development, JetBrains Gateway, container debugging (Docker), Kubernetes debugging, production-safe debugging, debug symbols, and source maps."
      },
      "metrics": {
        "line_count": 882,
        "code_line_count": 308,
        "code_examples": 41,
        "external_refs": 1,
        "tools_mentioned": 5,
        "config_snippets": 8
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Forward remote debugger port 5678 to local 5678\nssh -L 5678:localhost:5678 user@remote-server.com\n\n# Now connect local debugger to localhost:5678\n# It tunnels to remote-server.com:5678\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# On remote server:\npython -m debugpy --listen 0.0.0.0:5678 --wait-for-client script.py\n\n# On local machine:\nssh -L 5678:localhost:5678 user@remote-server.com\n\n# In VSCode: Attach to localhost:5678\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Make local port 8080 accessible on remote at port 9090\nssh -R 9090:localhost:8080 user@remote-server.com\n\n# Remote can now access localhost:9090 \u2192 your local 8080\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Dynamic proxy on local port 1080\nssh -D 1080 user@remote-server.com\n\n# Configure browser/app to use SOCKS proxy localhost:1080\n# All connections tunnel through SSH\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Auto-reconnect on disconnect\nssh -L 5678:localhost:5678 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 user@remote-server.com\n\n# Or use autossh\nautossh -M 0 -L 5678:localhost:5678 user@remote-se"
        },
        {
          "language": "json",
          "line_count": 14,
          "complexity": "simple",
          "code": "{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: Current File (Remote)\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \""
        },
        {
          "language": "json",
          "line_count": 10,
          "complexity": "simple",
          "code": "{\n    \"name\": \"Python Dev\",\n    \"image\": \"python:3.11\",\n    \"extensions\": [\n        \"ms-python.python\"\n    ],\n    \"forwardPorts\": [5678],\n    \"postCreateCommand\": \"pip install debugpy\"\n}\n"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Start container with debugger port exposed\ndocker run -p 5678:5678 my-image\n\n# In VSCode launch.json:\n{\n    \"name\": \"Python: Attach to Docker\",\n    \"type\": \"python\",\n    \"request\": \"attach\",\n    \"co"
        },
        {
          "language": "dockerfile",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Dockerfile\nFROM python:3.11\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nRUN pip install debugpy\nCOPY . .\n\n# Start with debugger\nCMD [\"python\", \"-m\", \"debugpy\", \"--listen"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Build and run\ndocker build -t my-app .\ndocker run -p 5678:5678 my-app\n\n# Attach VSCode debugger to localhost:5678\n"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "complex",
          "code": "# Find container ID\ndocker ps\n\n# Exec into container\ndocker exec -it <container-id> /bin/bash\n\n# Install debugger\npip install ipdb\n\n# Add breakpoint in code\nimport ipdb; ipdb.set_trace()\n\n# Run app, d"
        },
        {
          "language": "yaml",
          "line_count": 11,
          "complexity": "simple",
          "code": "services:\n  app:\n    build: .\n    ports:\n      - \"5678:5678\"\n    environment:\n      - DEBUGPY_ENABLED=true\n    volumes:\n      - .:/app  # Mount source for live editing\n    command: python -m debugpy -"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Start with compose\ndocker-compose up\n\n# Attach debugger to localhost:5678\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Create ephemeral debug container in pod\nkubectl debug my-pod -it --image=busybox --target=my-container\n\n# Or with debug utilities\nkubectl debug my-pod -it --image=nicolaka/netshoot --target=my-conta"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Create copy of pod for debugging\nkubectl debug my-pod --copy-to=my-pod-debug --container=my-container\n\n# Modify container in copy\nkubectl debug my-pod --copy-to=my-pod-debug --container=my-container"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Forward pod port 5678 to local 5678\nkubectl port-forward pod/my-pod 5678:5678\n\n# Attach debugger to localhost:5678\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Forward service port\nkubectl port-forward service/my-service 5678:5678\n"
        },
        {
          "language": "yaml",
          "line_count": 18,
          "complexity": "simple",
          "code": "# deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app\nspec:\n  template:\n    spec:\n      containers:\n      - name: app\n        image: my-app:latest\n        ports:\n        - co"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Apply deployment\nkubectl apply -f deployment.yaml\n\n# Forward port\nkubectl port-forward deployment/my-app 5678:5678\n\n# Attach debugger to localhost:5678\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c Bad: Modify state in production\ndef debug_user(user_id):\n    user = get_user(user_id)\n    user.role = 'admin'  # DANGEROUS IN PRODUCTION\n    save_user(user)\n\n# \u2705 Good: Observe only\ndef debug_user("
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "import logging\nimport json\n\nlogger = logging.getLogger(__name__)\n\ndef process_order(order):\n    # Instead of breakpoint(), log context\n    logger.info(\"Processing order\", extra={\n        \"order_id\": o"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "import random\n\ndef should_debug():\n    # Debug 1% of requests\n    return random.random() < 0.01\n\ndef handle_request(request):\n    if should_debug():\n        logger.debug(\"Full request context\", extra="
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "import time\n\nDEBUG_ENABLED_UNTIL = None  # Unix timestamp\n\ndef enable_debug(duration_seconds):\n    global DEBUG_ENABLED_UNTIL\n    DEBUG_ENABLED_UNTIL = time.time() + duration_seconds\n    logger.warnin"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Compile with debug symbols\ngcc -g program.c -o program\n\n# Strip symbols for production (smaller binary)\nstrip program -o program-stripped\n\n# Debug with separate symbol file\ngcc -g program.c -o progr"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Debug build (includes symbols)\ncargo build\n\n# Release build (optimized, no symbols)\ncargo build --release\n\n# Release with debug symbols\ncargo build --release --config profile.release.debug=true\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Build with symbols (default)\ngo build -o myapp\n\n# Strip symbols\ngo build -ldflags=\"-s -w\" -o myapp\n\n# Delve debugger\ndlv exec ./myapp\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Ubuntu: install debug symbols\nsudo apt install <package>-dbg\n\n# Example: Python debug symbols\nsudo apt install python3.11-dbg\n"
        },
        {
          "language": "json",
          "line_count": 10,
          "complexity": "simple",
          "code": "// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"inlineSourceMap\": false,  // Separate .map files\n    \"inlineSources\": false,\n    \"sourceRoot\": \"/\"\n  }\n}\n"
        },
        {
          "language": "javascript",
          "line_count": 7,
          "complexity": "simple",
          "code": "// webpack.config.js\nmodule.exports = {\n  devtool: 'source-map',  // Production: separate files\n  // devtool: 'inline-source-map',  // Development: inline\n  // devtool: 'eval-source-map',    // Fastes"
        },
        {
          "language": "javascript",
          "line_count": 7,
          "complexity": "simple",
          "code": "// vite.config.js\nexport default {\n  build: {\n    sourcemap: true,  // Generate .map files\n  }\n}\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Enable source maps\nnode --enable-source-maps app.js\n\n# Stack traces show original source, not transpiled\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Upload source maps to Sentry\nsentry-cli releases files <release> upload-sourcemaps ./dist --rewrite\n\n# Sentry symbolicates errors using uploaded maps\n# Users never see source maps\n"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "import debugpy\n\n# Listen on all interfaces, port 5678\ndebugpy.listen((\"0.0.0.0\", 5678))\nprint(\"Waiting for debugger...\")\ndebugpy.wait_for_client()  # Block until debugger attaches\n\n# Your code\ndef mai"
        },
        {
          "language": "json",
          "line_count": 16,
          "complexity": "simple",
          "code": "{\n    \"name\": \"Python: Remote Attach\",\n    \"type\": \"python\",\n    \"request\": \"attach\",\n    \"connect\": {\n        \"host\": \"remote-server.com\",\n        \"port\": 5678\n    },\n    \"pathMappings\": [\n        {\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Remote Node.js\nnode --inspect=0.0.0.0:9229 app.js\n\n# Or debug-brk (pause at start)\nnode --inspect-brk=0.0.0.0:9229 app.js\n"
        },
        {
          "language": "json",
          "line_count": 10,
          "complexity": "simple",
          "code": "{\n    \"name\": \"Node: Attach to Remote\",\n    \"type\": \"node\",\n    \"request\": \"attach\",\n    \"address\": \"localhost\",\n    \"port\": 9229,\n    \"localRoot\": \"${workspaceFolder}\",\n    \"remoteRoot\": \"/app\"\n}\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# On remote server\ndlv debug --headless --listen=:2345 --api-version=2 --accept-multiclient\n\n# Local machine\ndlv connect remote-server.com:2345\n"
        },
        {
          "language": "json",
          "line_count": 10,
          "complexity": "simple",
          "code": "{\n    \"name\": \"Go: Connect to Remote\",\n    \"type\": \"go\",\n    \"request\": \"attach\",\n    \"mode\": \"remote\",\n    \"remotePath\": \"/app\",\n    \"port\": 2345,\n    \"host\": \"remote-server.com\"\n}\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Remote Java\njava -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -jar app.jar\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Remote server\npython -m debugpy --listen 0.0.0.0:5678 --wait-for-client app.py\n\n# Local machine\nssh -L 5678:localhost:5678 user@remote-server.com\n\n# VSCode: Attach to localhost:5678\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Use logging, not breakpoints\nlogger.info(\"Debug context\", extra={\"user_id\": user.id, \"state\": state})\n\n# Sample 1% of requests\nif random.random() < 0.01:\n    logger.debug(\"Full request\", extra={\"req"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://msdl.microsoft.com/download/symbols"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "webpack",
        "sentry",
        "vite",
        "docker"
      ],
      "config_snippets": [
        "json",
        "json",
        "yaml",
        "yaml",
        "json",
        "json",
        "json",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml, json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "41 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 66.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "networking/mtls-implementation.md",
      "category": "networking",
      "skill_name": "mtls-implementation",
      "frontmatter": {
        "name": "mtls-implementation",
        "description": "Implementing mutual TLS authentication"
      },
      "metrics": {
        "line_count": 326,
        "code_line_count": 88,
        "code_examples": 10,
        "external_refs": 2,
        "tools_mentioned": 4,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Create Certificate Authority\nopenssl genrsa -out ca-key.pem 4096\nopenssl req -new -x509 -days 365 -key ca-key.pem -out ca-cert.pem \\\n  -subj \"/CN=My CA\"\n\n# Create server certificate\nopenssl genrsa -"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "from flask import Flask, request\nimport ssl\n\napp = Flask(__name__)\n\n@app.route('/api/data')\ndef get_data():\n    # Client certificate available in request\n    client_cert = request.environ.get('peercer"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "import requests\n\nresponse = requests.get(\n    'https://server.example.com:8443/api/data',\n    cert=('client-cert.pem', 'client-key.pem'),\n    verify='ca-cert.pem'\n)\n\nprint(response.json())\n"
        },
        {
          "language": "go",
          "line_count": 47,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"crypto/tls\"\n    \"crypto/x509\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    // Extract client certificate"
        },
        {
          "language": "go",
          "line_count": 48,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"crypto/tls\"\n    \"crypto/x509\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    // Load client cert\n    cert, err := tls.LoadX509KeyPair(\"client-cert.pem\", \"cli"
        },
        {
          "language": "rust",
          "line_count": 27,
          "complexity": "medium",
          "code": "use actix_web::{web, App, HttpRequest, HttpServer};\nuse openssl::ssl::{SslAcceptor, SslFiletype, SslMethod, SslVerifyMode};\n\nasync fn handler(req: HttpRequest) -> String {\n    if let Some(cert) = req."
        },
        {
          "language": "yaml",
          "line_count": 24,
          "complexity": "medium",
          "code": "# envoy.yaml\nstatic_resources:\n  listeners:\n  - name: listener_mtls\n    address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 8443\n    filter_chains:\n    - transport_socket:\n    "
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "import os\nimport time\nfrom pathlib import Path\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass CertReloader(FileSystemEventHandler):\n    def __init__("
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c BAD\nrequests.get(url, verify=False)\n\n# \u2705 GOOD\nrequests.get(url, verify='ca-cert.pem')\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c BAD - No verification possible\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem\n\n# \u2705 GOOD - Use CA\n# Create CA first, then sign certs with it\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://server.example.com:8443/api/data'"
        },
        {
          "type": "example",
          "url": "https://server.example.com:8443/\""
        }
      ],
      "tools_mentioned": [
        "ssl",
        "envoy",
        "openssl",
        "tls"
      ],
      "config_snippets": [
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 66.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "wasm/wasm-rust-toolchain.md",
      "category": "wasm",
      "skill_name": "wasm-rust-toolchain",
      "frontmatter": {
        "name": "wasm-rust-toolchain",
        "description": "Rust to WebAssembly compilation using wasm-pack, wasm-bindgen, optimization, and JavaScript interop"
      },
      "metrics": {
        "line_count": 567,
        "code_line_count": 187,
        "code_examples": 22,
        "external_refs": 2,
        "tools_mentioned": 4,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Add wasm targets\nrustup target add wasm32-unknown-unknown\nrustup target add wasm32-wasi\n\n# Raw wasm (no JS bindings)\ncargo build --target wasm32-unknown-unknown --release\n\n# With wasm-pack (generate"
        },
        {
          "language": "rust",
          "line_count": 17,
          "complexity": "simple",
          "code": "// Cargo.toml for wasm-pack projects\n[package]\nname = \"my-wasm-lib\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[lib]\ncrate-type = [\"cdylib\"]  # Dynamic library for wasm\n\n[dependencies]\nwasm-bindgen = \"0.2\"\n\n"
        },
        {
          "language": "rust",
          "line_count": 25,
          "complexity": "medium",
          "code": "use wasm_bindgen::prelude::*;\n\n// Export Rust function to JS\n#[wasm_bindgen]\npub fn greet(name: &str) -> String {\n    format!(\"Hello, {}!\", name)\n}\n\n// Import JS function to Rust\n#[wasm_bindgen]\nexter"
        },
        {
          "language": "rust",
          "line_count": 30,
          "complexity": "medium",
          "code": "use wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\npub struct User {\n    name: String,\n    age: u32,\n}\n\n#[wasm_bindgen]\nimpl User {\n    #[wasm_bindgen(constructor)]\n    pub fn new(name: String, age: u32) "
        },
        {
          "language": "javascript",
          "line_count": 7,
          "complexity": "complex",
          "code": "// Generated JavaScript usage\nimport { User } from './pkg/my_wasm_lib.js';\n\nconst user = new User(\"Alice\", 30);\nconsole.log(user.name);    // \"Alice\"\nconsole.log(user.greet()); // \"Hi, I'm Alice and I"
        },
        {
          "language": "rust",
          "line_count": 17,
          "complexity": "simple",
          "code": "use wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\npub fn divide(a: f64, b: f64) -> Result<f64, JsValue> {\n    if b == 0.0 {\n        return Err(JsValue::from_str(\"Division by zero\"));\n    }\n    Ok(a / b)\n"
        },
        {
          "language": "javascript",
          "line_count": 7,
          "complexity": "simple",
          "code": "// JS catches as exceptions\ntry {\n    const result = divide(10, 0);\n} catch (e) {\n    console.error(e); // \"Division by zero\"\n}\n"
        },
        {
          "language": "bash",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Install wasm-pack\ncurl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\n\n# Create new project\ncargo new --lib my-wasm-lib\ncd my-wasm-lib\n\n# Add to Cargo.toml\n# [lib]\n# crate-type = ["
        },
        {
          "language": "rust",
          "line_count": 19,
          "complexity": "simple",
          "code": "use wasm_bindgen::prelude::*;\nuse wasm_bindgen_futures::JsFuture;\nuse web_sys::{Request, RequestInit, Response};\n\n#[wasm_bindgen]\npub async fn fetch_data(url: String) -> Result<JsValue, JsValue> {\n   "
        },
        {
          "language": "javascript",
          "line_count": 12,
          "complexity": "complex",
          "code": "// JavaScript calls async function\nimport { fetch_data } from './pkg';\n\nasync function loadData() {\n    try {\n        const data = await fetch_data('https://api.example.com/data');\n        console.log"
        },
        {
          "language": "toml",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Cargo.toml\n[profile.release]\nopt-level = \"z\"           # Optimize for size\nlto = true                # Link-time optimization\ncodegen-units = 1         # Single codegen unit\npanic = \"abort\"         "
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Build with optimizations\nwasm-pack build --release --target web\n\n# Further optimize with wasm-opt\nwasm-opt -Oz pkg/my_wasm_lib_bg.wasm \\\n  -o pkg/my_wasm_lib_bg.wasm\n\n# Check size reduction\nls -lh p"
        },
        {
          "language": "rust",
          "line_count": 27,
          "complexity": "medium",
          "code": "use wasm_bindgen::prelude::*;\n\n// Simple console.log\n#[wasm_bindgen]\nextern \"C\" {\n    #[wasm_bindgen(js_namespace = console)]\n    fn log(s: &str);\n\n    #[wasm_bindgen(js_namespace = console, js_name ="
        },
        {
          "language": "rust",
          "line_count": 28,
          "complexity": "medium",
          "code": "use wasm_bindgen::prelude::*;\n\n// JS array to Rust Vec\n#[wasm_bindgen]\npub fn sum_array(arr: &[i32]) -> i32 {\n    arr.iter().sum()\n}\n\n// Return Rust Vec as JS array (requires serde)\n#[wasm_bindgen]\npu"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Build with source maps\nRUSTFLAGS=\"-C debuginfo=2\" wasm-pack build --dev --target web\n\n# DevTools will show original Rust source\n# Set breakpoints in .rs files\n"
        },
        {
          "language": "rust",
          "line_count": 8,
          "complexity": "simple",
          "code": "// Rust source visible in browser\n#[wasm_bindgen]\npub fn complex_calculation(x: f64) -> f64 {\n    let step1 = x * 2.0;  // Breakpoint here shows x value\n    let step2 = step1 + 10.0;\n    step2.sqrt()\n"
        },
        {
          "language": "rust",
          "line_count": 12,
          "complexity": "simple",
          "code": "#![no_std]\n\nextern crate alloc;\nuse alloc::string::String;\nuse alloc::format;\nuse wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\npub fn minimal_greet(name: &str) -> String {\n    format!(\"Hello, {}!\", name"
        },
        {
          "language": "rust",
          "line_count": 21,
          "complexity": "medium",
          "code": "#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_greet() {\n        assert_eq!(greet(\"World\"), \"Hello, World!\");\n    }\n}\n\n// Browser tests with wasm-pack\n#[cfg(test)]\nmod wasm_tests "
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Run native tests\ncargo test\n\n# Run in headless browser\nwasm-pack test --headless --firefox\nwasm-pack test --headless --chrome\n"
        },
        {
          "language": "rust",
          "line_count": 23,
          "complexity": "medium",
          "code": "// \u274c NEVER: Block async execution\n#[wasm_bindgen]\npub async fn bad_async() -> Result<(), JsValue> {\n    std::thread::sleep(std::time::Duration::from_secs(5)); // Blocks!\n    Ok(())\n}\n\n// \u2705 CORRECT: Us"
        },
        {
          "language": "rust",
          "line_count": 14,
          "complexity": "simple",
          "code": "// \u274c Don't: Clone strings excessively\n#[wasm_bindgen]\npub fn process_many_strings(input: String) -> String {\n    let copy1 = input.clone(); // Unnecessary allocation\n    let copy2 = copy1.clone(); // "
        },
        {
          "language": "toml",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c Don't: Include heavy dependencies\n[dependencies]\nwasm-bindgen = \"0.2\"\ntokio = { version = \"1\", features = [\"full\"] }  # Huge!\nserde_json = \"1\"                                 # Large\nregex = \"1\"  "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://rustwasm.github.io/wasm-pack/installer/init.sh"
        },
        {
          "type": "example",
          "url": "https://api.example.com/data'"
        }
      ],
      "tools_mentioned": [
        "webpack",
        "rollup",
        "cargo test",
        "go test"
      ],
      "config_snippets": [
        "toml",
        "toml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (toml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "22 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 66.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "formal/lean-mathlib4.md",
      "category": "formal",
      "skill_name": "lean-mathlib4",
      "frontmatter": {
        "name": "formal-lean-mathlib4",
        "description": "Formalizing mathematics using existing results"
      },
      "metrics": {
        "line_count": 679,
        "code_line_count": 260,
        "code_examples": 35,
        "external_refs": 7,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Create project with mathlib4\nlake +leanprover/lean4:nightly-2024-01-15 new my_project math\ncd my_project\n\n# Get mathlib4 cache (fast!)\nlake exe cache get\n\n# Build project\nlake build\n\n# Update mathli"
        },
        {
          "language": "lean",
          "line_count": 13,
          "complexity": "complex",
          "code": "-- Theorems about operations\nNat.add_comm : \u2200 n m, n + m = m + n\nNat.add_assoc : \u2200 n m k, (n + m) + k = n + (m + k)\nNat.mul_comm : \u2200 n m, n * m = m * n\n\n-- Type class instances\ninstAddNat : Add Nat\nin"
        },
        {
          "language": "lean",
          "line_count": 14,
          "complexity": "complex",
          "code": "-- Algebraic hierarchy\nclass Add (\u03b1 : Type u) where\n  add : \u03b1 \u2192 \u03b1 \u2192 \u03b1\n\nclass Semigroup (\u03b1 : Type u) extends Mul \u03b1 where\n  mul_assoc : \u2200 a b c : \u03b1, (a * b) * c = a * (b * c)\n\nclass Monoid (\u03b1 : Type u) "
        },
        {
          "language": "lean",
          "line_count": 10,
          "complexity": "simple",
          "code": "-- Generic theorem using type classes\ntheorem mul_left_cancel [Group \u03b1] {a b c : \u03b1} (h : a * b = a * c) : b = c := by\n  have : a\u207b\u00b9 * (a * b) = a\u207b\u00b9 * (a * c) := by rw [h]\n  simp [mul_assoc, inv_mul_can"
        },
        {
          "language": "lean",
          "line_count": 10,
          "complexity": "complex",
          "code": "-- Import specific modules\nimport Mathlib.Algebra.Group.Defs\nimport Mathlib.Data.List.Basic\n\n-- Import whole directories (slower)\nimport Mathlib.Algebra.Group\n\n-- Import everything (very slow, avoid!)"
        },
        {
          "language": "lean",
          "line_count": 7,
          "complexity": "simple",
          "code": "-- Autocomplete: type partial name\n#check Nat.add_  -- Shows: add_comm, add_assoc, add_zero, ...\n\n-- Check full name\n#check List.append_nil\n#check Ring.mul_comm\n"
        },
        {
          "language": "lean",
          "line_count": 8,
          "complexity": "simple",
          "code": "example (a b : Nat) : a + b = b + a := by\n  exact?\n  -- Try this: exact Nat.add_comm a b\n\nexample [Group G] (a : G) : a * a\u207b\u00b9 = 1 := by\n  exact?\n  -- Try this: exact mul_inv_cancel a\n"
        },
        {
          "language": "lean",
          "line_count": 4,
          "complexity": "simple",
          "code": "example (xs ys : List \u03b1) : (xs ++ ys).length = xs.length + ys.length := by\n  apply?\n  -- Try this: exact List.length_append xs ys\n"
        },
        {
          "language": "lean",
          "line_count": 6,
          "complexity": "simple",
          "code": "example (h : p) : p := by\n  assumption  -- Searches local context\n\nexample : 0 + n = n := by\n  simp  -- Searches simp lemmas\n"
        },
        {
          "language": "lean",
          "line_count": 15,
          "complexity": "complex",
          "code": "import Mathlib.Algebra.Group.Defs\nimport Mathlib.Algebra.Ring.Defs\n\n-- Groups\nexample [Group G] (a b : G) : (a * b)\u207b\u00b9 = b\u207b\u00b9 * a\u207b\u00b9 := by\n  exact mul_inv_rev a b\n\n-- Rings\nexample [Ring R] (a b : R) : ("
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "complex",
          "code": "import Mathlib.Analysis.Calculus.Deriv.Basic\nimport Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic\n\n-- Continuity\nexample : Continuous (fun x : \u211d => x ^ 2) := by\n  exact continuous_pow 2\n\n-- De"
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "complex",
          "code": "import Mathlib.Topology.Basic\nimport Mathlib.Topology.MetricSpace.Basic\n\n-- Open sets\nexample [TopologicalSpace X] (s : Set X) (hs : IsOpen s) :\n    IsOpen s\u1d9c \u2194 IsClosed s := by\n  exact isOpen_compl_i"
        },
        {
          "language": "lean",
          "line_count": 16,
          "complexity": "complex",
          "code": "import Mathlib.Data.List.Basic\nimport Mathlib.Data.Finset.Basic\nimport Mathlib.Data.Set.Basic\n\n-- Lists\nexample (xs ys : List \u03b1) : (xs ++ ys).reverse = ys.reverse ++ xs.reverse := by\n  exact List.reve"
        },
        {
          "language": "lean",
          "line_count": 11,
          "complexity": "complex",
          "code": "import Mathlib.NumberTheory.Divisors\nimport Mathlib.Data.Nat.Prime.Basic\n\n-- Primes\nexample : Nat.Prime 7 := by\n  norm_num\n\n-- Divisibility\nexample (a b c : Nat) (h1 : a \u2223 b) (h2 : b \u2223 c) : a \u2223 c := b"
        },
        {
          "language": "lean",
          "line_count": 9,
          "complexity": "simple",
          "code": "-- Automatic instance synthesis\nexample [Add \u03b1] (a b : \u03b1) : \u03b1 := a + b  -- Uses [Add \u03b1]\n\n-- Manual instance specification (rare)\nexample : Nat := @Add.add Nat instAddNat 1 2\n\n-- Check instance\n#check "
        },
        {
          "language": "lean",
          "line_count": 10,
          "complexity": "complex",
          "code": "-- Safe: single path to instance\nclass A (\u03b1 : Type)\nclass B (\u03b1 : Type) extends A \u03b1\nclass C (\u03b1 : Type) extends A \u03b1\n-- No D extending both B and C (would create diamond)\n\n-- If diamonds exist, use prior"
        },
        {
          "language": "lean",
          "line_count": 16,
          "complexity": "complex",
          "code": "-- Outparam: output parameter (determined by other args)\nclass HMul (\u03b1 : Type u) (\u03b2 : Type v) (\u03b3 : outParam (Type w)) where\n  hMul : \u03b1 \u2192 \u03b2 \u2192 \u03b3\n\n-- Example: Nat * Nat = Nat\ninstance : HMul Nat Nat Nat "
        },
        {
          "language": "lean",
          "line_count": 7,
          "complexity": "complex",
          "code": "-- BAD: Import everything (slow!)\nimport Mathlib\n\n-- GOOD: Import specific modules\nimport Mathlib.Algebra.Group.Defs\nimport Mathlib.Data.List.Basic\n"
        },
        {
          "language": "lean",
          "line_count": 15,
          "complexity": "complex",
          "code": "-- Core Lean 4\nimport Lean\nimport Std\n\n-- mathlib4: Data structures\nimport Mathlib.Data.List.Basic\nimport Mathlib.Data.Finset.Basic\n\n-- mathlib4: Algebra\nimport Mathlib.Algebra.Group.Defs\nimport Mathl"
        },
        {
          "language": "lean",
          "line_count": 9,
          "complexity": "complex",
          "code": "-- Create precompiled import file\n-- In MyProject/Imports.lean:\nimport Mathlib.Algebra.Group.Defs\nimport Mathlib.Algebra.Ring.Defs\nimport Mathlib.Data.List.Basic\n\n-- In other files:\nimport MyProject.I"
        },
        {
          "language": "bash",
          "line_count": 25,
          "complexity": "medium",
          "code": "# 1. Fork mathlib4 on GitHub\n# 2. Clone your fork\ngit clone https://github.com/YOUR_USERNAME/mathlib4.git\ncd mathlib4\n\n# 3. Create branch\ngit checkout -b my-contribution\n\n# 4. Make changes\n# Edit file"
        },
        {
          "language": "lean",
          "line_count": 20,
          "complexity": "simple",
          "code": "-- Use snake_case for theorems\ntheorem nat_add_comm (n m : Nat) : n + m = m + n := Nat.add_comm n m\n\n-- Document with docstrings\n/-- The sum of two natural numbers is commutative. -/\ntheorem add_comm "
        },
        {
          "language": "lean",
          "line_count": 13,
          "complexity": "simple",
          "code": "-- Operations\nadd, mul, neg, inv, sub, div\n\n-- Properties\ncomm, assoc, left_distrib, right_distrib\nzero, one, inv_mul_cancel\n\n-- Implications\nof (\u2190 direction), iff (\u2194)\n\n-- Variants\nleft, right, neg, i"
        },
        {
          "language": "lean",
          "line_count": 22,
          "complexity": "complex",
          "code": "-- Algebra\nimport Mathlib.Algebra.Group.Defs\nimport Mathlib.Algebra.Ring.Defs\nimport Mathlib.Algebra.Field.Defs\n\n-- Data structures\nimport Mathlib.Data.List.Basic\nimport Mathlib.Data.Finset.Basic\nimpo"
        },
        {
          "language": "lean",
          "line_count": 4,
          "complexity": "simple",
          "code": "#check (inferInstance : Add Nat)  -- Find instance\n#synth Add Nat                     -- Synthesize instance\nset_option trace.Meta.synthInstance true  -- Debug synthesis\n"
        },
        {
          "language": "lean",
          "line_count": 5,
          "complexity": "simple",
          "code": "exact?        -- Find exact proof in library\napply?        -- Find applicable theorem\nsimp?         -- Show which simp lemmas used\n#check_failure expr  -- Why doesn't expr typecheck?\n"
        },
        {
          "language": "lean",
          "line_count": 7,
          "complexity": "simple",
          "code": "-- BAD: Define your own addition commutativity\ntheorem my_add_comm (n m : Nat) : n + m = m + n := by\n  induction n <;> simp [Nat.add_succ, *]\n\n-- GOOD: Use mathlib\n#check Nat.add_comm  -- Already exis"
        },
        {
          "language": "lean",
          "line_count": 7,
          "complexity": "simple",
          "code": "-- BAD: Non-standard names\ntheorem addComm (n m : Nat) : n + m = m + n := Nat.add_comm n m\ntheorem AdditionCommutative : \u2200 n m, n + m = m + n := Nat.add_comm\n\n-- GOOD: Follow conventions\ntheorem add_c"
        },
        {
          "language": "lean",
          "line_count": 20,
          "complexity": "complex",
          "code": "-- BAD: Single massive import\nimport Mathlib\n\n-- BAD: Disorganized imports\nimport Mathlib.Topology.Basic\nimport Mathlib.Data.List.Basic\nimport Mathlib.Algebra.Group.Defs\nimport Mathlib.Data.Finset.Bas"
        },
        {
          "language": "lean",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- BAD: Manually specify instances\nexample : Nat := @Add.add Nat instAddNat 1 2\n\n-- GOOD: Let Lean infer\nexample : Nat := 1 + 2\n"
        },
        {
          "language": "lean",
          "line_count": 11,
          "complexity": "simple",
          "code": "-- BAD: Implement proof from scratch\ntheorem list_append_nil (xs : List \u03b1) : xs ++ [] = xs := by\n  induction xs with\n  | nil => rfl\n  | cons x xs ih => simp [List.append, ih]\n\n-- GOOD: Search first\nth"
        },
        {
          "language": "lean",
          "line_count": 8,
          "complexity": "complex",
          "code": "-- BAD: Duplicate type class constraints\ntheorem bad [Add \u03b1] [Monoid \u03b1] (a b : \u03b1) : a + b = b + a := by\n  sorry  -- Monoid doesn't imply commutativity anyway!\n\n-- GOOD: Use correct type class\ntheorem "
        },
        {
          "language": "lean",
          "line_count": 14,
          "complexity": "complex",
          "code": "import Mathlib.Algebra.Group.Defs\nimport Mathlib.Algebra.Ring.Defs\n\n-- Generic group theorem\ntheorem inv_unique [Group G] (a b : G) (h : a * b = 1) : b = a\u207b\u00b9 := by\n  have : a\u207b\u00b9 * (a * b) = a\u207b\u00b9 * 1 := "
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "complex",
          "code": "import Mathlib.Data.List.Basic\n\n-- Using existing theorems\ntheorem list_reverse_append (xs ys : List \u03b1) :\n    (xs ++ ys).reverse = ys.reverse ++ xs.reverse :=\n  List.reverse_append xs ys\n\n-- Building "
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "complex",
          "code": "import Mathlib.Algebra.Group.Defs\n\n-- Let Lean find instances\nexample : 1 + 1 = 2 := rfl  -- Uses instAddNat\n\n-- Check what instance is used\n#check (1 + 1 : Nat)  -- Uses Add.add via instAddNat\n\n-- Sy"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://leanprover-community.github.io/mathlib4_docs/"
        },
        {
          "type": "github",
          "url": "https://github.com/YOUR_USERNAME/mathlib4.git"
        },
        {
          "type": "external",
          "url": "https://leanprover-community.github.io/mathlib4_docs/"
        },
        {
          "type": "github",
          "url": "https://github.com/leanprover-community/mathlib4"
        },
        {
          "type": "external",
          "url": "https://leanprover-community.github.io/contribute/index.html"
        },
        {
          "type": "external",
          "url": "https://leanprover-community.github.io/contribute/naming.html"
        },
        {
          "type": "external",
          "url": "https://leanprover-community.github.io/undergrad.html"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "35 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "20 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 65.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "deployment/heroku-troubleshooting.md",
      "category": "deployment",
      "skill_name": "heroku-troubleshooting",
      "frontmatter": {
        "name": "deployment-heroku-troubleshooting",
        "description": "Application crashes on Heroku with H10, H12, H13, H14 errors"
      },
      "metrics": {
        "line_count": 653,
        "code_line_count": 248,
        "code_examples": 35,
        "external_refs": 3,
        "tools_mentioned": 3,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Tail logs (follow)\nheroku logs --tail --app myapp\n\n# Last 1000 lines\nheroku logs -n 1000\n\n# Filter by process\nheroku logs --dyno=web.1\n\n# Search for errors\nheroku logs --tail | grep -i error\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Error in logs:\n# ModuleNotFoundError: No module named 'requests'\n\n# Fix: Add to requirements.txt\necho \"requests==2.31.0\" >> requirements.txt\ngit commit -am \"Add missing dependency\"\ngit push heroku m"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "complex",
          "code": "# \u274c Wrong: Hardcoded port\napp.run(host='0.0.0.0', port=5000)\n\n# \u2705 Correct: Use $PORT environment variable\nimport os\nport = int(os.environ.get('PORT', 5000))\napp.run(host='0.0.0.0', port=port)\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Test locally first\nheroku local web\n\n# Or run bash on dyno to debug\nheroku run bash\npython manage.py check\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Check DATABASE_URL is set\nheroku config:get DATABASE_URL\n\n# Test connection\nheroku run python manage.py dbshell\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Filter for slow requests (>5000ms)\nheroku logs --tail | grep 'service=[5-9][0-9][0-9][0-9]ms'\n\n# Example output:\n# at=info method=GET path=\"/slow-endpoint\" service=12000ms status=200\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "complex",
          "code": "# Diagnose with query logging\nimport logging\nlogging.getLogger('django.db.backends').setLevel(logging.DEBUG)\n\n# Or use Django Debug Toolbar locally\n# Install: pip install django-debug-toolbar\n"
        },
        {
          "language": "sql",
          "line_count": 8,
          "complexity": "simple",
          "code": "-- Check slow queries (Postgres)\nSELECT * FROM pg_stat_statements\nORDER BY total_time DESC\nLIMIT 10;\n\n-- Add index\nCREATE INDEX idx_users_email ON users(email);\n"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "# \u274c Wrong: Blocking synchronous call\nresponse = requests.get('https://slow-api.com/data')\n\n# \u2705 Correct: Timeout + async processing\nimport requests\n\ntry:\n    response = requests.get('https://api.com/da"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# \u274c Wrong: CPU-intensive in request\ndef report_view(request):\n    data = generate_complex_report()  # Takes 45 seconds\n    return JsonResponse(data)\n\n# \u2705 Correct: Async job with status polling\nfrom ce"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# View metrics in dashboard\nheroku logs --tail | grep 'R14\\|R15'\n\n# Example output:\n# Error R14 (Memory quota exceeded)\n# Error R15 (Memory quota vastly exceeded)\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "# Install: pip install memory_profiler\n\nfrom memory_profiler import profile\n\n@profile\ndef problematic_function():\n    # This decorator logs memory usage line-by-line\n    large_list = [i for i in range"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u274c Wrong: Load entire dataset\nusers = User.objects.all()  # Fetches all rows\nfor user in users:\n    process_user(user)\n\n# \u2705 Correct: Use iterator\nusers = User.objects.all().iterator(chunk_size=1000)\n"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "# \u274c Wrong: Connection leak\nconn = psycopg2.connect(DATABASE_URL)\ncursor = conn.cursor()\ncursor.execute(\"SELECT * FROM users\")\n# Missing conn.close()\n\n# \u2705 Correct: Context manager\nimport psycopg2\nfrom "
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "# \u274c Wrong: Unbounded cache\ncache = {}\ndef get_user(user_id):\n    if user_id not in cache:\n        cache[user_id] = fetch_user(user_id)\n    return cache[user_id]\n\n# \u2705 Correct: Use Redis or LRU cache\nfr"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Check current dyno type\nheroku ps\n\n# Upgrade to more memory\n# Basic: 512MB \u2192 Standard-1X: 512MB \u2192 Standard-2X: 1GB\nheroku ps:type standard-2x\n"
        },
        {
          "language": "javascript",
          "line_count": 9,
          "complexity": "simple",
          "code": "// \u274c Wrong: Hardcoded port\napp.listen(3000);\n\n// \u2705 Correct: Use PORT environment variable\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c Wrong: Database migrations on startup\n# This can exceed 60s boot timeout\ndef app_startup():\n    run_migrations()  # 90 seconds\n    app.run()\n\n# \u2705 Correct: Use release phase in Procfile\n# Procfile:"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Optimize build time\n# Cache dependencies, use pre-built wheels\n\n# Python: Use specific versions (faster resolution)\n# requirements.txt:\nDjango==4.2.7  # Not Django>=4.0\npsycopg2-binary==2.9.9  # Use"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Error in logs:\n# OperationalError: FATAL: remaining connection slots are reserved\n# Or: psycopg2.pool.PoolError: connection pool exhausted\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Check current connections\nheroku pg:info\n\n# Connections: 18/20 (Essential plan has 20 max)\n\n# Find long-running queries\nheroku pg:ps\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Increases effective connection limit\nheroku pg:connection-pooling:attach DATABASE --as DATABASE_CONNECTION_POOL\n\n# Update DATABASE_URL to use pooled connection\nheroku config:set DATABASE_URL=$(herok"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Django: Close connections after request\nDATABASES = {\n    'default': {\n        # ... other settings\n        'CONN_MAX_AGE': 60,  # Close idle connections after 60s\n    }\n}\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "from sqlalchemy.pool import QueuePool\n\nengine = create_engine(\n    DATABASE_URL,\n    poolclass=QueuePool,\n    pool_size=5,              # Max connections per worker\n    max_overflow=10,          # Ext"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Release phase failed\n# Error: relation \"new_table\" already exists\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# View releases\nheroku releases\n\n# Rollback to previous version\nheroku rollback v123\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Run migration manually to diagnose\nheroku run python manage.py migrate --fake-initial\n\n# Or reset migration\nheroku run python manage.py migrate app_name zero\nheroku run python manage.py migrate\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "# Use idempotent migrations\nfrom django.db import migrations\n\nclass Migration(migrations.Migration):\n    def forwards(self, apps, schema_editor):\n        # Check if table exists before creating\n      "
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Error H23 (Endpoint exhaustion)\n# All dynos busy, requests queuing\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Check dyno metrics (requires app metrics add-on or dashboard)\nheroku logs --tail | grep 'at=info'\n\n# Look for high service times and queue times\n# at=info method=GET path=\"/\" service=5000ms queue=20"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Add more web dynos\nheroku ps:scale web=3\n\n# Or enable autoscaling (requires Performance dynos)\nheroku ps:autoscale:enable web --min=2 --max=5 --p95=200\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "complex",
          "code": "# Add caching\nfrom django.views.decorators.cache import cache_page\n\n@cache_page(60 * 5)  # Cache for 5 minutes\ndef homepage(request):\n    return render(request, 'home.html')\n"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "# Use Celery for async processing\nfrom celery import shared_task\n\n@shared_task\ndef send_notification_email(user_id):\n    # Offload email sending to worker dyno\n    user = User.objects.get(id=user_id)\n"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Average response time for endpoint\nheroku logs -n 10000 | grep 'path=\"/api/users\"' | \\\n  awk '{print $11}' | sed 's/service=//;s/ms//' | \\\n  awk '{sum+=$1; count++} END {print sum/count}'\n\n# Count e"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "import structlog\n\nlogger = structlog.get_logger()\n\nlogger.info(\n    \"user_login\",\n    user_id=user.id,\n    ip=request.META['REMOTE_ADDR'],\n    duration_ms=elapsed_time * 1000\n)\n\n# Search in Papertrail"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://slow-api.com/data'"
        },
        {
          "type": "external",
          "url": "https://api.com/data'"
        },
        {
          "type": "external",
          "url": "https://slow-api.com/data'"
        }
      ],
      "tools_mentioned": [
        "postgres",
        "sentry",
        "redis"
      ],
      "config_snippets": [
        "sql"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "35 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "12 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 65.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cloud/gcp/gcp-serverless.md",
      "category": "cloud",
      "skill_name": "gcp-serverless",
      "frontmatter": {
        "name": "cloud-gcp-serverless",
        "description": "Google Cloud serverless services including Cloud Functions, Cloud Run, and App Engine"
      },
      "metrics": {
        "line_count": 665,
        "code_line_count": 138,
        "code_examples": 19,
        "external_refs": 3,
        "tools_mentioned": 3,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "import functions_framework\nfrom google.cloud import storage\n\n# HTTP trigger\n@functions_framework.http\ndef hello_http(request):\n    name = request.args.get('name', 'World')\n    return f'Hello, {name}!'"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Deploy HTTP function\ngcloud functions deploy hello-http \\\n  --runtime=python311 \\\n  --trigger-http \\\n  --allow-unauthenticated \\\n  --region=us-central1\n\n# Deploy Pub/Sub function\ngcloud functions de"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Build container with Cloud Build\ngcloud builds submit --tag gcr.io/my-project/api-service\n\n# Deploy to Cloud Run\ngcloud run deploy api-service \\\n  --image=gcr.io/my-project/api-service \\\n  --region="
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "# Cloud Run service example (FastAPI)\nfrom fastapi import FastAPI\nimport os\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello from Cloud Run\"}\n\n@app.get(\"/health\")\ndef hea"
        },
        {
          "language": "yaml",
          "line_count": 22,
          "complexity": "medium",
          "code": "# app.yaml for App Engine Standard (Python 3.11)\nruntime: python311\ninstance_class: F2\n\nenv_variables:\n  DATABASE_URL: \"postgresql://host/db\"\n\nhandlers:\n- url: /static\n  static_dir: static\n\n- url: /.*"
        },
        {
          "language": "yaml",
          "line_count": 18,
          "complexity": "simple",
          "code": "# app.yaml for App Engine Flexible (custom runtime)\nruntime: custom\nenv: flex\n\nautomatic_scaling:\n  min_num_instances: 1\n  max_num_instances: 10\n  cpu_utilization:\n    target_utilization: 0.65\n\nresour"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "# \u274c Bad: Long-running task in HTTP function (times out)\n@functions_framework.http\ndef process_video(request):\n    video_url = request.json['video_url']\n    # This takes 5 minutes, function times out!\n"
        },
        {
          "language": "bash",
          "line_count": 31,
          "complexity": "medium",
          "code": "# Deploy baseline version\ngcloud run deploy api-service \\\n  --image=gcr.io/my-project/api:v1 \\\n  --region=us-central1 \\\n  --tag=v1\n\n# Deploy new version with tag (no traffic)\ngcloud run deploy api-ser"
        },
        {
          "language": "bash",
          "line_count": 39,
          "complexity": "complex",
          "code": "# Create Eventarc trigger for Cloud Storage events\ngcloud eventarc triggers create storage-trigger \\\n  --location=us-central1 \\\n  --destination-run-service=process-uploads \\\n  --destination-run-region"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "# \u274c Bad: Load heavy dependencies in request handler\n@functions_framework.http\ndef api_endpoint(request):\n    import tensorflow as tf  # 2 second import!\n    import numpy as np\n    model = tf.keras.mod"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Create job to call HTTP endpoint every hour\ngcloud scheduler jobs create http hourly-cleanup \\\n  --location=us-central1 \\\n  --schedule=\"0 * * * *\" \\\n  --uri=\"https://api-service-xxx.run.app/cleanup\""
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "from google.cloud import tasks_v2\nimport json\n\ndef enqueue_task(project_id, location, queue_name, url, payload, delay_seconds=0):\n    client = tasks_v2.CloudTasksClient()\n\n    parent = client.queue_pa"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Create Serverless VPC Access connector\ngcloud compute networks vpc-access connectors create serverless-connector \\\n  --region=us-central1 \\\n  --subnet=default \\\n  --subnet-project=my-project \\\n  --m"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "complex",
          "code": "# \u274c Bad: Environment variables for secrets (visible in console)\ngcloud run deploy api-service \\\n  --set-env-vars=\"DB_PASSWORD=super_secret\"  # Visible in UI!\n\n# \u2705 Good: Secret Manager integration\n# Cr"
        },
        {
          "language": "bash",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Cloud Functions\ngcloud functions deploy NAME --runtime=RUNTIME --trigger-http\ngcloud functions logs read NAME --limit=50\ngcloud functions delete NAME\n\n# Cloud Run\ngcloud run deploy SERVICE --image=I"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "# \u274c NEVER: Perform long-running task synchronously in HTTP function\n@functions_framework.http\ndef process_batch(request):\n    for item in request.json['items']:  # 10,000 items!\n        process_item(i"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c Don't: Store secrets in environment variables\ngcloud run deploy api-service \\\n  --set-env-vars=\"API_KEY=sk_live_abc123,DB_PASSWORD=secret\"\n# Secrets visible in console, logs, error messages\n\n# \u2705 C"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# \u274c Don't: Set unbounded concurrency without testing\n# gcloud run deploy api-service --concurrency=1000\n# Each instance handles 1000 concurrent requests!\n\n@app.get(\"/query\")\ndef query_database():\n    "
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "# \u274c Don't: Import heavy dependencies in request handler\n@functions_framework.http\ndef predict(request):\n    import tensorflow as tf  # 2 second import on every cold start!\n    model = tf.keras.models."
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://v2---api-service-xxx-uc.a.run.app"
        },
        {
          "type": "external",
          "url": "https://api-service-xxx.run.app/cleanup\""
        },
        {
          "type": "external",
          "url": "https://api-service-xxx.run.app/send-email'"
        }
      ],
      "tools_mentioned": [
        "postgres",
        "postgresql",
        "docker"
      ],
      "config_snippets": [
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "19 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "12 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 65.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "containers/container-registry-management.md",
      "category": "containers",
      "skill_name": "container-registry-management",
      "frontmatter": {
        "name": "containers-container-registry-management",
        "description": "Choosing a container registry (ECR/GCR/Harbor/Docker Hub)"
      },
      "metrics": {
        "line_count": 707,
        "code_line_count": 253,
        "code_examples": 36,
        "external_refs": 3,
        "tools_mentioned": 3,
        "config_snippets": 7
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Login\ndocker login\n\n# Tag\ndocker tag myapp:latest username/myapp:v1.0.0\n\n# Push\ndocker push username/myapp:v1.0.0\n\n# Pull\ndocker pull username/myapp:v1.0.0\n"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Login (get token from AWS)\naws ecr get-login-password --region us-east-1 | \\\n  docker login --username AWS --password-stdin \\\n  123456789012.dkr.ecr.us-east-1.amazonaws.com\n\n# Create repository\naws "
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Login (using gcloud)\ngcloud auth configure-docker\n\n# Tag\ndocker tag myapp:latest gcr.io/my-project/myapp:v1.0.0\n\n# Push\ndocker push gcr.io/my-project/myapp:v1.0.0\n\n# Pull\ndocker pull gcr.io/my-proje"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Login\ngcloud auth configure-docker us-docker.pkg.dev\n\n# Push\ndocker push us-docker.pkg.dev/my-project/my-repo/myapp:v1.0.0\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Login\naz acr login --name myregistry\n\n# Tag\ndocker tag myapp:latest myregistry.azurecr.io/myapp:v1.0.0\n\n# Push\ndocker push myregistry.azurecr.io/myapp:v1.0.0\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Login (using GitHub token)\necho $GITHUB_TOKEN | docker login ghcr.io -u USERNAME --password-stdin\n\n# Tag\ndocker tag myapp:latest ghcr.io/username/myapp:v1.0.0\n\n# Push\ndocker push ghcr.io/username/my"
        },
        {
          "language": "yaml",
          "line_count": 13,
          "complexity": "simple",
          "code": "- name: Login to GHCR\n  uses: docker/login-action@v2\n  with:\n    registry: ghcr.io\n    username: ${{ github.actor }}\n    password: ${{ secrets.GITHUB_TOKEN }}\n\n- name: Build and push\n  uses: docker/bu"
        },
        {
          "language": "yaml",
          "line_count": 16,
          "complexity": "simple",
          "code": "version: '3.8'\n\nservices:\n  registry:\n    image: goharbor/harbor-registryctl:v2.9.0\n    volumes:\n      - registry_data:/storage\n\n  core:\n    image: goharbor/harbor-core:v2.9.0\n    depends_on:\n      - "
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Tag with semantic version\ndocker tag myapp:latest myregistry/myapp:1.2.3\n\n# Also tag mutable aliases\ndocker tag myapp:latest myregistry/myapp:1.2     # Minor series\ndocker tag myapp:latest myregistr"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Production: Pin exact version\nimage: myregistry/myapp:1.2.3\n\n# Staging: Minor series (auto-patch updates)\nimage: myregistry/myapp:1.2\n\n# Dev: Latest (always newest)\nimage: myregistry/myapp:latest\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Tag with git commit SHA\nGIT_SHA=$(git rev-parse --short HEAD)\ndocker tag myapp:latest myregistry/myapp:$GIT_SHA\ndocker push myregistry/myapp:$GIT_SHA\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Tag with branch\nBRANCH=$(git rev-parse --abbrev-ref HEAD)\ndocker tag myapp:latest myregistry/myapp:$BRANCH\ndocker push myregistry/myapp:$BRANCH\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "VERSION=1.2.3\nGIT_SHA=$(git rev-parse --short HEAD)\ndocker tag myapp:latest myregistry/myapp:${VERSION}-${GIT_SHA}\ndocker push myregistry/myapp:${VERSION}-${GIT_SHA}\n# Example: myregistry/myapp:1.2.3-"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Tag by environment\ndocker tag myapp:latest myregistry/myapp:dev\ndocker tag myapp:latest myregistry/myapp:staging\ndocker tag myapp:latest myregistry/myapp:prod\n"
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "# GitHub Actions\n- name: Tag and push\n  run: |\n    docker tag myapp:latest myregistry/myapp:${{ github.sha }}\n    docker tag myapp:latest myregistry/myapp:${{ github.ref_name }}\n    docker push --all-"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "docker push myregistry/myapp:latest\n# Problem: No version history, hard to rollback\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "docker tag myapp:latest myregistry/myapp:2025-10-18\n# Problem: No semantic meaning, hard to compare\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "docker tag myapp:latest myregistry/myapp:1.2.3\ndocker push myregistry/myapp:1.2.3\n# Later: rebuild and push same tag\n# Problem: Tag now points to different image!\n"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Step 1: Build and tag\ndocker build -t myregistry/myapp:${VERSION}-${SHA} .\n\n# Step 2: Push to registry\ndocker push myregistry/myapp:${VERSION}-${SHA}\n\n# Step 3: Deploy to dev\ndocker tag myregistry/m"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Dev registry\ndocker tag myapp:latest dev-registry/myapp:1.2.3\ndocker push dev-registry/myapp:1.2.3\n\n# Promote to staging registry\ndocker pull dev-registry/myapp:1.2.3\ndocker tag dev-registry/myapp:1"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Push to dev repo\ndocker push myregistry/dev/myapp:1.2.3\n\n# Promote to staging repo\ndocker pull myregistry/dev/myapp:1.2.3\ndocker tag myregistry/dev/myapp:1.2.3 myregistry/staging/myapp:1.2.3\ndocker "
        },
        {
          "language": "yaml",
          "line_count": 49,
          "complexity": "medium",
          "code": "name: Build and Promote\n\non:\n  push:\n    branches: [main]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Login to Registry\n        uses: docker/"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Login\ndocker login\n# Enter: username, password\n\n# Logout\ndocker logout\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Get login password\naws ecr get-login-password --region us-east-1 | \\\n  docker login --username AWS --password-stdin \\\n  123456789012.dkr.ecr.us-east-1.amazonaws.com\n"
        },
        {
          "language": "json",
          "line_count": 17,
          "complexity": "simple",
          "code": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ecr:GetAuthorizationToken\",\n        \"ecr:BatchCheckLayerAvailability\",\n        \"ecr:GetDownloadU"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Configure Docker to use gcloud credentials\ngcloud auth configure-docker\n\n# Or manually\ngcloud auth print-access-token | \\\n  docker login -u oauth2accesstoken --password-stdin \\\n  https://gcr.io\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Create personal access token (read:packages, write:packages)\necho $GITHUB_TOKEN | \\\n  docker login ghcr.io -u USERNAME --password-stdin\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "docker login myregistry.example.com\n# Enter: username, password\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Via UI or API\ncurl -X DELETE \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  https://hub.docker.com/v2/repositories/username/myapp/tags/old-tag/\n"
        },
        {
          "language": "json",
          "line_count": 30,
          "complexity": "medium",
          "code": "{\n  \"rules\": [\n    {\n      \"rulePriority\": 1,\n      \"description\": \"Keep last 10 images\",\n      \"selection\": {\n        \"tagStatus\": \"any\",\n        \"countType\": \"imageCountMoreThan\",\n        \"countNumb"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "aws ecr put-lifecycle-policy \\\n  --repository-name myapp \\\n  --lifecycle-policy-text file://policy.json\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Delete images older than 30 days\ngcloud artifacts docker images delete \\\n  us-docker.pkg.dev/my-project/my-repo/myapp:old-tag \\\n  --delete-tags\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Check current login\ncat ~/.docker/config.json\n\n# Re-login\ndocker login myregistry.io\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# List tags (Docker Hub)\ncurl https://hub.docker.com/v2/repositories/username/myapp/tags\n\n# List tags (ECR)\naws ecr describe-images --repository-name myapp\n"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Login\ndocker login myregistry.io\n\n# Tag\ndocker tag myapp:latest myregistry.io/myapp:v1.0.0\n\n# Push\ndocker push myregistry.io/myapp:v1.0.0\n\n# Pull\ndocker pull myregistry.io/myapp:v1.0.0\n\n# Remove loc"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Immutable: Version + SHA\ndocker tag myapp:latest myregistry/myapp:1.2.3-abc123\n\n# Mutable: Environment\ndocker tag myapp:latest myregistry/myapp:dev\ndocker tag myapp:latest myregistry/myapp:staging\nd"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://gcr.io"
        },
        {
          "type": "external",
          "url": "https://hub.docker.com/v2/repositories/username/myapp/tags/old-tag/"
        },
        {
          "type": "external",
          "url": "https://hub.docker.com/v2/repositories/username/myapp/tags"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "docker",
        "oauth"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "json",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml, json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "36 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "2 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 65.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "product/prd-technical-specifications.md",
      "category": "product",
      "skill_name": "prd-technical-specifications",
      "frontmatter": {
        "name": "product-prd-technical-specifications",
        "description": "API specifications, data models, architecture diagrams, and technical constraints for product requirements"
      },
      "metrics": {
        "line_count": 676,
        "code_line_count": 69,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 6,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "markdown",
          "line_count": 56,
          "complexity": "complex",
          "code": "## API Requirements: User Management\n\n### Create User Account\n**Purpose**: Allow new users to sign up\n\n**Input**:\n- `email` (string, required): User's email address (validated format)\n- `password` (st"
        },
        {
          "language": "markdown",
          "line_count": 5,
          "complexity": "simple",
          "code": "## Data Model: Project Management System\n\n### Entities and Relationships\n\n"
        },
        {
          "language": "markdown",
          "line_count": 70,
          "complexity": "complex",
          "code": "## Technical Constraints: User Dashboard\n\n### Performance Requirements\n**Page Load Time**:\n- Initial load: <2 seconds on 4G network (p95)\n- Subsequent navigation: <500ms (p95)\n- Time to Interactive (T"
        },
        {
          "language": "markdown",
          "line_count": 44,
          "complexity": "medium",
          "code": "## Integration Requirements: Payment Processing\n\n### Integration: Stripe\n\n**Use Case**: Process credit card payments for subscription upgrades\n\n**Required Capabilities**:\n- Create customer records\n- P"
        },
        {
          "language": "markdown",
          "line_count": 5,
          "complexity": "simple",
          "code": "## System Architecture: Project Management Platform\n\n### Context Diagram (C4 Level 1)\n\n"
        },
        {
          "language": "markdown",
          "line_count": 50,
          "complexity": "medium",
          "code": "## Migration Plan: Legacy User System \u2192 New Authentication System\n\n### Current State\n- 50,000 active users on legacy auth (custom built)\n- Passwords stored with MD5 hashing (insecure!)\n- No email veri"
        },
        {
          "language": "yaml",
          "line_count": 68,
          "complexity": "complex",
          "code": "# This is what engineering produces in RFC (not PRD)\n# PM provides informal spec, engineering formalizes it\n\nopenapi: 3.0.0\ninfo:\n  title: User Management API\n  version: 1.0.0\n  description: API for u"
        },
        {
          "language": "markdown",
          "line_count": 20,
          "complexity": "simple",
          "code": "## Dependencies: Project Management Platform\n\n| Dependency | Purpose | Constraint | Risk | Mitigation |\n|------------|---------|------------|------|------------|\n| Stripe API | Payment processing | 99"
        },
        {
          "language": "markdown",
          "line_count": 16,
          "complexity": "simple",
          "code": "# \u274c NEVER (in PRD):\n## Technical Implementation\n- Use PostgreSQL for user table\n- Implement REST API with Express.js\n- Hash passwords with bcrypt cost factor 12\n- Deploy on AWS EC2 t3.medium instances"
        },
        {
          "language": "markdown",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c Don't:\nPOST /users\nInput: email, password\nOutput: user_id\n\n# \u2705 Correct:\nPOST /users\nInput: email, password\nOutput (Success): user_id, email, created_at\nOutput (Error): error_code, error_message, f"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgresql",
        "oauth",
        "postgres",
        "jwt",
        "redis",
        "vite"
      ],
      "config_snippets": [
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 65.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "build-systems/build-optimization.md",
      "category": "build-systems",
      "skill_name": "build-optimization",
      "frontmatter": {
        "name": "build-systems-build-optimization",
        "description": "Incremental builds, dependency tracking, build caching (ccache, sccache, Bazel), parallel builds, build time profiling, and CI/CD optimization strategies."
      },
      "metrics": {
        "line_count": 848,
        "code_line_count": 324,
        "code_examples": 44,
        "external_refs": 4,
        "tools_mentioned": 2,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "makefile",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Makefile - Automatic dependency tracking\nCC := gcc\nCFLAGS := -Wall -O2\nDEPFLAGS = -MMD -MP\n\nSOURCES := $(wildcard *.c)\nOBJECTS := $(SOURCES:.c=.o)\nDEPS := $(OBJECTS:.o=.d)\n\nprogram: $(OBJECTS)\n\t$(CC"
        },
        {
          "language": "cmake",
          "line_count": 15,
          "complexity": "simple",
          "code": "# CMakeLists.txt - Built-in dependency tracking\nadd_executable(myapp\n    main.cpp\n    utils.cpp\n    config.cpp\n)\n\n# CMake automatically tracks:\n# - Source file changes\n# - Header file changes (via com"
        },
        {
          "language": "kotlin",
          "line_count": 20,
          "complexity": "simple",
          "code": "// build.gradle.kts - Up-to-date checks\ntasks.compileJava {\n    // Gradle automatically tracks:\n    inputs.files(sourceSets.main.get().allSource)\n    outputs.dir(sourceSets.main.get().java.classesDire"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Make - Only rebuild if changed\nmake                  # Builds only if sources newer than target\n\n# CMake - Detects changes automatically\ncmake --build build   # Rebuilds only changed files\n\n# Gradle"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Use -j flag for parallel jobs\nmake -j              # Use all CPU cores\nmake -j8             # Use 8 parallel jobs\nmake -j$(nproc)      # Use number of CPU cores\n\n# Load average limit\nmake -j8 -l4   "
        },
        {
          "language": "makefile",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Makefile - Optimize for parallelism\n# Avoid recursive make (breaks parallelism)\n\n# WRONG: Recursive make\nsubdirs:\n\t$(MAKE) -C src\n\t$(MAKE) -C tests\n\n# CORRECT: Include sub-makefiles\ninclude src/Make"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Parallel build with CMake\ncmake --build build -j8          # 8 parallel jobs\ncmake --build build --parallel   # Use all cores\n\n# Ninja (faster than Make)\ncmake -G Ninja ..\nninja -j8\n"
        },
        {
          "language": "cmake",
          "line_count": 12,
          "complexity": "simple",
          "code": "# CMakeLists.txt - Optimize for parallelism\n# Use OBJECT libraries to avoid rebuilding common code\nadd_library(common OBJECT common.cpp utils.cpp)\n\nadd_executable(app1 app1.cpp)\ntarget_link_libraries("
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Enable parallel execution\n./gradlew build --parallel\n\n# Configure max workers\n./gradlew build --max-workers=8\n"
        },
        {
          "language": "properties",
          "line_count": 4,
          "complexity": "simple",
          "code": "# gradle.properties - Enable by default\norg.gradle.parallel=true\norg.gradle.workers.max=8\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Bazel parallelizes automatically\nbazel build //...\n\n# Control parallelism\nbazel build //... --jobs=8\nbazel build //... --local_ram_resources=4096  # MB\nbazel build //... --local_cpu_resources=8\n"
        },
        {
          "language": "bash",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Install ccache\nsudo apt install ccache         # Linux\nbrew install ccache             # macOS\n\n# Configure\nccache --max-size=10G\nccache --set-config=compression=true\n\n# Use with Make\nexport CC=\"cca"
        },
        {
          "language": "cmake",
          "line_count": 8,
          "complexity": "simple",
          "code": "# CMakeLists.txt - Automatic ccache detection\nfind_program(CCACHE_PROGRAM ccache)\nif(CCACHE_PROGRAM)\n    set(CMAKE_C_COMPILER_LAUNCHER \"${CCACHE_PROGRAM}\")\n    set(CMAKE_CXX_COMPILER_LAUNCHER \"${CCACH"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Install sccache (Rust-based, supports C++, Rust, Python)\ncargo install sccache\n\n# Configure\nexport SCCACHE_DIR=~/.cache/sccache\nexport SCCACHE_CACHE_SIZE=\"10G\"\n\n# Use with CMake\nexport CMAKE_C_COMPI"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Enable build cache\n./gradlew build --build-cache\n"
        },
        {
          "language": "properties",
          "line_count": 3,
          "complexity": "simple",
          "code": "# gradle.properties - Enable by default\norg.gradle.caching=true\n"
        },
        {
          "language": "kotlin",
          "line_count": 17,
          "complexity": "simple",
          "code": "// build.gradle.kts - Remote build cache\nbuildCache {\n    local {\n        isEnabled = true\n        directory = file(\"$rootDir/.gradle/build-cache\")\n    }\n\n    remote<HttpBuildCache> {\n        url = ur"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Local disk cache\nbazel build //... --disk_cache=~/.cache/bazel\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# .bazelrc - Remote cache configuration\nbuild --remote_cache=https://cache.example.com\nbuild --remote_upload_local_results=true\n\n# Google Cloud Storage\nbuild --remote_cache=https://storage.googleapis."
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Bazel remote execution (BuildBarn, BuildBuddy, etc.)\nbazel build //... \\\n    --remote_executor=grpcs://remotebuildexecution.googleapis.com \\\n    --remote_instance_name=projects/my-project/instances/"
        },
        {
          "language": "cmake",
          "line_count": 17,
          "complexity": "simple",
          "code": "# CMakeLists.txt - Precompiled headers (CMake 3.16+)\nadd_library(mylib src/lib.cpp)\n\n# Add precompiled headers\ntarget_precompile_headers(mylib PRIVATE\n    <vector>\n    <string>\n    <iostream>\n    <alg"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# GCC/Clang - Generate PCH\ng++ -x c++-header common.h -o common.h.gch\n\n# Use PCH\ng++ main.cpp -include common.h -o main\n"
        },
        {
          "language": "cmake",
          "line_count": 12,
          "complexity": "simple",
          "code": "# CMakeLists.txt - Enable LTO\nset(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\n\n# Or per-target\nadd_executable(myapp main.cpp)\nset_target_properties(myapp PROPERTIES\n    INTERPROCEDURAL_OPTIMIZATION TRUE\n"
        },
        {
          "language": "cmake",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Enable LTO only for Release builds\nif(CMAKE_BUILD_TYPE STREQUAL \"Release\")\n    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\nendif()\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Verbose build output\ncmake --build build --verbose\n\n# Time individual commands\ncmake --build build -- VERBOSE=1 2>&1 | ts -i '%.s'\n\n# Ninja build time trace\ncmake -G Ninja ..\nninja -d stats       # "
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Generate build profile\n./gradlew build --profile\n\n# Output: build/reports/profile/profile-<timestamp>.html\n\n# Build scan (detailed insights)\n./gradlew build --scan\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Generate profile\nbazel build //... --profile=profile.json\n\n# Analyze profile\nbazel analyze-profile profile.json\n\n# JSON output for custom analysis\nbazel analyze-profile profile.json --dump=json > an"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "# analyze_bazel_profile.py\nimport json\n\nwith open('profile.json') as f:\n    profile = json.load(f)\n\n# Find slow actions\nactions = [(event['dur'], event['name'])\n           for event in profile['traceE"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Clang -ftime-trace (Clang 9+)\nclang++ -ftime-trace main.cpp -o main\n\n# Generates main.json (Chrome trace format)\n# View in chrome://tracing\n"
        },
        {
          "language": "yaml",
          "line_count": 41,
          "complexity": "medium",
          "code": "# .github/workflows/optimized.yml\nname: Optimized Build\n\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Cache dependencies\n "
        },
        {
          "language": "dockerfile",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Dockerfile - Multi-stage builds with caching\nFROM rust:1.75 AS builder\n\n# Cache dependencies separately (changes less often)\nWORKDIR /app\nCOPY Cargo.toml Cargo.lock ./\nRUN mkdir src && echo \"fn main"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Use BuildKit for better caching\nDOCKER_BUILDKIT=1 docker build -t myapp .\n\n# Remote cache\ndocker buildx build \\\n    --cache-from type=registry,ref=myregistry/cache \\\n    --cache-to type=registry,ref"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "# .github/workflows/bazel-ci.yml\n- name: Build with Bazel\n  run: |\n    bazel build //... \\\n      --remote_cache=https://storage.googleapis.com/${{ secrets.GCS_BUCKET }} \\\n      --google_default_creden"
        },
        {
          "language": "cpp",
          "line_count": 28,
          "complexity": "complex",
          "code": "// WRONG: Include entire header in .h file\n// mylib.h\n#include <vector>\n#include <string>\n#include <map>\n\nclass MyLib {\n    std::vector<std::string> data;\n    std::map<int, std::string> lookup;\n};\n\n//"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Find unused dependencies\n./gradlew dependencies --configuration compileClasspath\n\n# Dependency insight\n./gradlew dependencyInsight --dependency guava\n\n# Build scan shows dependency resolution time\n."
        },
        {
          "language": "cmake",
          "line_count": 5,
          "complexity": "simple",
          "code": "# CMakeLists.txt - Build type flags\nset(CMAKE_CXX_FLAGS_DEBUG \"-g -O0\")           # Fast compile, slow runtime\nset(CMAKE_CXX_FLAGS_RELEASE \"-O3 -DNDEBUG\")   # Slow compile, fast runtime\nset(CMAKE_CXX_"
        },
        {
          "language": "makefile",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Makefile - Conditional optimization\nDEBUG ?= 0\n\nifeq ($(DEBUG), 1)\n    CFLAGS = -g -O0              # Fast build\nelse\n    CFLAGS = -O2 -DNDEBUG        # Optimized\nendif\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Setup distcc\nsudo apt install distcc\n\n# Configure\nexport DISTCC_HOSTS=\"localhost/8 remote1/4 remote2/4\"\nexport CC=\"distcc gcc\"\nexport CXX=\"distcc g++\"\n\n# Build\nmake -j16  # More jobs than local core"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Install icecc\nsudo apt install icecc\n\n# Use with CMake\nexport CC=\"icecc gcc\"\nexport CXX=\"icecc g++\"\n\ncmake -DCMAKE_C_COMPILER_LAUNCHER=icecc \\\n      -DCMAKE_CXX_COMPILER_LAUNCHER=icecc ..\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Clean build every time in CI\n./gradlew clean build  # Wastes 90% of build time\n\n# CORRECT: Incremental build with cache\n./gradlew build --build-cache\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Single-threaded build\nmake\n\n# CORRECT: Parallel build\nmake -j$(nproc)\n"
        },
        {
          "language": "cmake",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Always use -O3 (slow compilation)\nset(CMAKE_CXX_FLAGS \"-O3\")\n\n# CORRECT: Use -O0 or -O1 for development\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    set(CMAKE_CXX_FLAGS \"-O0 -g\")\nendif()\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Blindly add optimizations without measuring\n# \"I think this will help\"\n\n# CORRECT: Profile first, optimize second\nbazel build //... --profile=profile.json\nbazel analyze-profile profile.json\n#"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "# build_profiler.py - Analyze build performance\nimport json\nimport sys\nfrom collections import defaultdict\n\ndef analyze_build_profile(profile_path):\n    \"\"\"Analyze Bazel build profile JSON.\"\"\"\n    wit"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://cache.example.com\""
        },
        {
          "type": "example",
          "url": "https://cache.example.com"
        },
        {
          "type": "external",
          "url": "https://storage.googleapis.com/my-bazel-cache"
        },
        {
          "type": "external",
          "url": "https://storage.googleapis.com/${{"
        }
      ],
      "tools_mentioned": [
        "docker",
        "redis"
      ],
      "config_snippets": [
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "44 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 65.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cicd/ci-testing-strategy.md",
      "category": "cicd",
      "skill_name": "ci-testing-strategy",
      "frontmatter": {
        "name": "cicd-ci-testing-strategy",
        "description": "Designing test execution strategies for CI pipelines"
      },
      "metrics": {
        "line_count": 666,
        "code_line_count": 217,
        "code_examples": 26,
        "external_refs": 0,
        "tools_mentioned": 6,
        "config_snippets": 25
      },
      "code_examples": [
        {
          "language": "yaml",
          "line_count": 77,
          "complexity": "complex",
          "code": "name: Test Pipeline\n\non: [push, pull_request]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-ve"
        },
        {
          "language": "yaml",
          "line_count": 30,
          "complexity": "medium",
          "code": "jobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        # Split tests across 4 runners\n        shard: [1, 2, 3, 4]\n      fail-fast: false\n\n    steps:\n      - uses: actions/checkou"
        },
        {
          "language": "yaml",
          "line_count": 30,
          "complexity": "medium",
          "code": "jobs:\n  test-unit:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        package: [core, api, ui, utils]\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n     "
        },
        {
          "language": "yaml",
          "line_count": 40,
          "complexity": "medium",
          "code": "jobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          cache: 'npm'\n      - run"
        },
        {
          "language": "yaml",
          "line_count": 41,
          "complexity": "medium",
          "code": "jobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          cache: 'npm'\n      - run"
        },
        {
          "language": "yaml",
          "line_count": 34,
          "complexity": "medium",
          "code": "jobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Cache test fixtures\n      - name: Cache test data\n        uses: actions/cache@v4\n        with:\n         "
        },
        {
          "language": "yaml",
          "line_count": 28,
          "complexity": "medium",
          "code": "jobs:\n  benchmark:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          cache: 'npm'\n      "
        },
        {
          "language": "yaml",
          "line_count": 28,
          "complexity": "medium",
          "code": "jobs:\n  contract-tests:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          cache: 'npm'\n "
        },
        {
          "language": "yaml",
          "line_count": 26,
          "complexity": "medium",
          "code": "jobs:\n  visual-tests:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          cache: 'npm'\n   "
        },
        {
          "language": "yaml",
          "line_count": 32,
          "complexity": "medium",
          "code": "jobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      # Detect changed files\n      - name: Get changed files\n        id: "
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "1. Lint/Format       # Fastest, catches syntax errors\n2. Unit Tests        # Fast, isolated\n3. Integration Tests # Medium, external deps\n4. E2E Tests         # Slow, full stack\n5. Performance Tests # "
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "By Shard:        --shard=1/4\nBy Package:      packages/${{ matrix.package }}\nBy Browser:      --project=${{ matrix.browser }}\nBy Test Suite:   --testPathPattern=${{ matrix.suite }}\n"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Jest\nnpm test -- --coverage --shard=1/4\n\n# Playwright\nnpx playwright test --shard=1/4 --project=chromium\n\n# Pytest\npytest --numprocesses=4 --dist=loadscope\n\n# Go\ngo test -parallel=4 ./...\n\n# Rust\nca"
        },
        {
          "language": "json",
          "line_count": 11,
          "complexity": "simple",
          "code": "{\n  \"coverageThreshold\": {\n    \"global\": {\n      \"branches\": 80,\n      \"functions\": 80,\n      \"lines\": 80,\n      \"statements\": 80\n    }\n  }\n}\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# WRONG: Sequential execution\n- run: npm run test:unit\n- run: npm run test:integration\n- run: npm run test:e2e\n"
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "# CORRECT: Parallel jobs\njobs:\n  test-unit:\n    steps: [...]\n  test-integration:\n    steps: [...]\n  test-e2e:\n    needs: [test-unit, test-integration]\n    steps: [...]\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# WRONG: Tests share state\n- run: npm test\n  env:\n    DB_NAME: shared_test_db\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# CORRECT: Isolated databases per runner\n- run: npm test\n  env:\n    DB_NAME: test_db_${{ github.run_id }}_${{ matrix.shard }}\n"
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: Hide failures\n- run: npm test || true\n"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "# CORRECT: Track and fix flaky tests\n- run: npm test -- --retries=2\n- run: npm run test:flaky\n  continue-on-error: true\n  # File issue for flaky tests\n"
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: No coverage check\n- run: npm test\n"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "# CORRECT: Enforce coverage thresholds\n- run: npm test -- --coverage\n- run: |\n    if [ $(cat coverage/coverage-summary.json | jq '.total.lines.pct') -lt 80 ]; then\n      echo \"Coverage below 80%\"\n    "
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Full E2E suite on every push\non: [push]\njobs:\n  e2e:\n    steps: [run all 500 E2E tests]\n"
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "# CORRECT: Smoke tests on push, full suite on main\njobs:\n  e2e-smoke:\n    if: github.ref != 'refs/heads/main'\n    steps: [run critical E2E tests]\n\n  e2e-full:\n    if: github.ref == 'refs/heads/main'\n "
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: No artifacts on failure\n- run: npx playwright test\n"
        },
        {
          "language": "yaml",
          "line_count": 11,
          "complexity": "simple",
          "code": "# CORRECT: Upload screenshots/videos on failure\n- run: npx playwright test\n- uses: actions/upload-artifact@v4\n  if: failure()\n  with:\n    name: test-artifacts\n    path: |\n      test-results/\n      scr"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgresql",
        "pytest",
        "postgres",
        "jest",
        "cargo test",
        "go test"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "json",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml, json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "26 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 65.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "deployment/heroku-addons.md",
      "category": "deployment",
      "skill_name": "heroku-addons",
      "frontmatter": {
        "name": "deployment-heroku-addons",
        "description": "Adding databases (Postgres, MySQL, MongoDB) to Heroku apps"
      },
      "metrics": {
        "line_count": 600,
        "code_line_count": 198,
        "code_examples": 28,
        "external_refs": 0,
        "tools_mentioned": 8,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Add-on creates config var automatically\nheroku addons:create heroku-postgresql:essential-0\n\n# Check created config vars\nheroku config | grep DATABASE_URL\n# DATABASE_URL: postgres://user:pass@host:54"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Essential plan (~$5/mo, 10GB storage, 20 connections)\nheroku addons:create heroku-postgresql:essential-0\n\n# Check status\nheroku pg:info\n\n# Output:\n# Plan:                  Essential 0\n# Status:     "
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Enable connection pooling (increases connection limit)\nheroku pg:connection-pooling:attach DATABASE --as DATABASE_CONNECTION_POOL\n\n# Use pooled connection\nheroku config:set DATABASE_URL=$(heroku con"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "import os\nimport psycopg2\nfrom urllib.parse import urlparse\n\nDATABASE_URL = os.environ['DATABASE_URL']\n\n# Parse connection URL\nurl = urlparse(DATABASE_URL)\n\nconn = psycopg2.connect(\n    database=url.p"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Create manual backup\nheroku pg:backups:capture --app myapp\n\n# List backups\nheroku pg:backups\n\n# Restore from backup\nheroku pg:backups:restore b101 DATABASE_URL --app myapp\n\n# Download backup\nheroku "
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Mini plan (~$3/mo, 25MB memory)\nheroku addons:create heroku-redis:mini\n\n# Check status\nheroku redis:info\n\n# Output:\n# Plan:                  Mini\n# Status:                available\n# Version:       "
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# settings.py\nimport os\n\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': os.environ.get('REDIS_URL'),\n        'OPTIONS': {\n            'CLIENT_CLASS"
        },
        {
          "language": "javascript",
          "line_count": 21,
          "complexity": "medium",
          "code": "const Redis = require('ioredis');\nconst redis = new Redis(process.env.REDIS_URL);\n\n// Set with expiration\nawait redis.set('user:123', JSON.stringify(userData), 'EX', 3600);\n\n// Get\nconst data = await "
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Django sessions in Redis\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\nSESSION_CACHE_ALIAS = 'default'\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Choklad plan (free, 50MB/mo, 2-day retention)\nheroku addons:create papertrail:choklad\n\n# Open dashboard\nheroku addons:open papertrail\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Search for errors\nheroku logs --tail | grep ERROR\n\n# Or via Papertrail CLI\npapertrail -f -S 'error OR exception'\n\n# Search specific time range\npapertrail -S 'status=500' --min-time '1 hour ago'\n"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "import logging\nimport json\n\n# JSON formatter for better Papertrail parsing\nclass JSONFormatter(logging.Formatter):\n    def format(self, record):\n        log_data = {\n            'timestamp': self.form"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Starter plan (free, 100 emails/day)\nheroku addons:create sendgrid:starter\n\n# Get API key\nheroku config:get SENDGRID_API_KEY\n"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "from flask import Flask\nfrom flask_mail import Mail, Message\nimport os\n\napp = Flask(__name__)\n\napp.config['MAIL_SERVER'] = 'smtp.sendgrid.net'\napp.config['MAIL_PORT'] = 587\napp.config['MAIL_USE_TLS'] "
        },
        {
          "language": "javascript",
          "line_count": 15,
          "complexity": "simple",
          "code": "const sgMail = require('@sendgrid/mail');\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\n\nasync function sendWelcomeEmail(email) {\n  const msg = {\n    to: email,\n    from: 'noreply@example.com',\n    "
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Free add-on\nheroku addons:create scheduler:standard\n\n# Open dashboard to configure jobs\nheroku addons:open scheduler\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Data cleanup\npython manage.py cleanup_old_records\n\n# Report generation\npython manage.py generate_daily_report && python manage.py email_report\n\n# Cache warming\npython manage.py warm_cache\n\n# Databas"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "from apscheduler.schedulers.background import BackgroundScheduler\n\nscheduler = BackgroundScheduler()\n\n@scheduler.scheduled_job('cron', hour=2, minute=0)\ndef cleanup_task():\n    # Run at 2:00 AM daily\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Wayne plan (free, 100GB/mo data)\nheroku addons:create newrelic:wayne\n\n# Open dashboard\nheroku addons:open newrelic\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Install agent\npip install newrelic\n\n# Generate config\nnewrelic-admin generate-config $NEW_RELIC_LICENSE_KEY newrelic.ini\n\n# Update Procfile\nweb: newrelic-admin run-program gunicorn myapp.wsgi\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "heroku config:set NEW_RELIC_APP_NAME='MyApp Production'\nheroku config:set NEW_RELIC_LOG=stdout\nheroku config:set NEW_RELIC_LOG_LEVEL=info\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "import newrelic.agent\n\n@newrelic.agent.function_trace()\ndef expensive_operation():\n    # Track function execution time\n    pass\n\n# Record custom metric\nnewrelic.agent.record_custom_metric('Custom/Acti"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# List all add-ons with pricing\nheroku addons --all\n\n# Check specific add-on details\nheroku addons:info heroku-postgresql-12345\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Downgrade if under-utilized\nheroku pg:info  # Check data size and connections\n\n# If using <3GB on Standard-0 (50GB, $50/mo)\n# Downgrade to Essential-0 (10GB, $5/mo)\nheroku addons:upgrade heroku-post"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Increases effective connection limit\nheroku pg:connection-pooling:attach DATABASE\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Use namespaces instead of multiple Redis instances\n# cache:user:123\n# session:abc456\n# queue:high_priority\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Use Heroku Scheduler to scale down at night\n# Job at 11pm: heroku ps:scale web=1 worker=0\n# Job at 6am: heroku ps:scale web=2 worker=1\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Destroy add-on (DESTRUCTIVE, backs up data first!)\nheroku addons:destroy heroku-postgresql-12345 --confirm myapp\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgresql",
        "tls",
        "postgres",
        "sentry",
        "mongodb",
        "redis",
        "apache",
        "mysql"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "28 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 65.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cloud/aws/aws-databases.md",
      "category": "cloud",
      "skill_name": "aws-databases",
      "frontmatter": {
        "name": "cloud-aws-databases",
        "description": "AWS database services - RDS, DynamoDB, ElastiCache, Aurora, migration, backup, and optimization"
      },
      "metrics": {
        "line_count": 695,
        "code_line_count": 78,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 5,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 50,
          "complexity": "complex",
          "code": "import boto3\n\nrds = boto3.client('rds')\n\ndef create_rds_instance():\n    \"\"\"Create RDS PostgreSQL instance with Multi-AZ\"\"\"\n\n    response = rds.create_db_instance(\n        DBInstanceIdentifier='myapp-d"
        },
        {
          "language": "python",
          "line_count": 106,
          "complexity": "complex",
          "code": "import boto3\nfrom boto3.dynamodb.conditions import Key, Attr\nfrom datetime import datetime\n\ndynamodb = boto3.resource('dynamodb')\n\ndef create_dynamodb_table():\n    \"\"\"Create DynamoDB table with indexe"
        },
        {
          "language": "python",
          "line_count": 69,
          "complexity": "complex",
          "code": "import boto3\nimport redis\n\nelasticache = boto3.client('elasticache')\n\ndef create_redis_cluster():\n    \"\"\"Create ElastiCache Redis cluster\"\"\"\n\n    response = elasticache.create_replication_group(\n     "
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "medium",
          "code": "def create_aurora_serverless_cluster():\n    \"\"\"Create Aurora Serverless v2 cluster\"\"\"\n\n    response = rds.create_db_cluster(\n        DBClusterIdentifier='myapp-aurora',\n        Engine='aurora-postgres"
        },
        {
          "language": "python",
          "line_count": 75,
          "complexity": "complex",
          "code": "import boto3\n\ndms = boto3.client('dms')\n\ndef create_dms_replication():\n    \"\"\"Create DMS replication instance and task\"\"\"\n\n    # Create replication instance\n    replication_response = dms.create_repli"
        },
        {
          "language": "python",
          "line_count": 66,
          "complexity": "complex",
          "code": "import psycopg2\nfrom psycopg2 import pool\n\n# Create connection pool\ndb_pool = psycopg2.pool.SimpleConnectionPool(\n    minconn=1,\n    maxconn=20,\n    host='myapp-db.abc123.us-east-1.rds.amazonaws.com',"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "medium",
          "code": "def batch_write_items(table_name, items):\n    \"\"\"Batch write up to 25 items at a time\"\"\"\n\n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table(table_name)\n\n    # DynamoDB limits batch "
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "medium",
          "code": "def create_rds_snapshot(db_instance_id):\n    \"\"\"Create manual snapshot\"\"\"\n\n    snapshot_id = f\"{db_instance_id}-{datetime.utcnow().strftime('%Y%m%d-%H%M%S')}\"\n\n    response = rds.create_db_snapshot(\n "
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "medium",
          "code": "# \u274c NEVER: Create new connection per Lambda invocation\ndef lambda_handler(event, context):\n    conn = psycopg2.connect(\n        host='db.example.com',\n        database='myapp',\n        user='dbadmin',"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u274c Don't scan entire DynamoDB table\nresponse = table.scan()\nitems = response['Items']\n# Consumes read capacity, expensive, slow\n\n# \u2705 Correct: Use query with key condition\nresponse = table.query(\n    "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgresql",
        "postgres",
        "ssl",
        "redis",
        "mysql"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 65.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "collaboration/github/github-issues-projects.md",
      "category": "collaboration",
      "skill_name": "github-issues-projects",
      "frontmatter": {
        "name": "collaboration-github-issues-projects",
        "description": "Issue management, templates, labels, milestones, GitHub Projects, and issue linking workflows"
      },
      "metrics": {
        "line_count": 678,
        "code_line_count": 173,
        "code_examples": 23,
        "external_refs": 5,
        "tools_mentioned": 1,
        "config_snippets": 3
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 42,
          "complexity": "medium",
          "code": "# Create basic issue\ngh issue create\n\n# Create with title and body\ngh issue create \\\n  --title \"Fix login timeout bug\" \\\n  --body \"Users are getting timeout errors after 30 seconds\"\n\n# Create with lab"
        },
        {
          "language": "yaml",
          "line_count": 70,
          "complexity": "complex",
          "code": "name: Bug Report\ndescription: File a bug report\ntitle: \"[Bug]: \"\nlabels: [\"bug\", \"needs-triage\"]\nassignees:\n  - octocat\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        Thanks for takin"
        },
        {
          "language": "markdown",
          "line_count": 24,
          "complexity": "medium",
          "code": "---\nname: Feature Request\nabout: Suggest an idea for this project\ntitle: '[FEATURE] '\nlabels: enhancement\nassignees: ''\n---\n\n## Problem Statement\nA clear description of the problem this feature would "
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "blank_issues_enabled: false\ncontact_links:\n  - name: Community Support\n    url: https://github.com/org/repo/discussions\n    about: Please ask questions and discuss ideas here\n  - name: Security Issue\n"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Create label\ngh label create \"priority:high\" \\\n  --description \"High priority issue\" \\\n  --color \"d73a4a\"\n\n# List labels\ngh label list\n\n# Edit label\ngh label edit \"bug\" --color \"ff0000\"\n\n# Delete la"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Create milestone\ngh api repos/owner/repo/milestones \\\n  --method POST \\\n  --field title=\"v2.0.0\" \\\n  --field description=\"Major release with new features\" \\\n  --field due_on=\"2025-12-31T23:59:59Z\"\n\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Add issue to project (requires project ID)\ngh project item-add <project-id> --owner @me --url https://github.com/owner/repo/issues/123\n\n# Or via web UI:\n# 1. Open project\n# 2. Click \"Add item\"\n# 3. "
        },
        {
          "language": "yaml",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Auto-add issues to project\n# Settings \u2192 Actions \u2192 New workflow\nname: Add to project\non:\n  issues:\n    types: [opened]\n\njobs:\n  add-to-project:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: act"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# In PR description or commit message\nCloses #123\nFixes #456\nResolves #789\n\n# Multiple issues\nCloses #123, #456, #789\n\n# Cross-repository\nFixes owner/other-repo#123\n"
        },
        {
          "language": "markdown",
          "line_count": 11,
          "complexity": "simple",
          "code": "## Summary\nAdds rate limiting to API endpoints.\n\n## Changes\n- Implements Redis-based rate limiter\n- Adds configuration for limits per endpoint\n- Includes tests\n\nCloses #456\nRelated to #123, #234\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "git commit -m \"Add rate limiting\n\nImplements Redis-based rate limiter to prevent API abuse.\n\nFixes #456\"\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Create discussion (via Web UI)\n# Discussions tab \u2192 New discussion\n# Choose category: Announcements, General, Ideas, Q&A, Show and tell\n\n# Convert issue to discussion\ngh issue close 123 --comment \"Mo"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Create and manage\ngh issue create [flags]          # Create issue\ngh issue list [flags]            # List issues\ngh issue view <number>           # View issue details\ngh issue edit <number> [flags] "
        },
        {
          "language": "markdown",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG: Users create inconsistent issues\nTitle: it doesn't work\nBody: when I click the button nothing happens\n"
        },
        {
          "language": "markdown",
          "line_count": 20,
          "complexity": "simple",
          "code": "# CORRECT: Use structured templates\nTitle: [Bug] Login button unresponsive on mobile Safari\n\n**Environment:**\n- OS: iOS 17.0\n- Browser: Safari 17.0\n- App Version: 1.2.3\n\n**Steps to Reproduce:**\n1. Ope"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: Random, inconsistent labels\nbug1, bug2, needs work, todo, urgent, ASAP, help\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# CORRECT: Structured label system\nType:        bug, enhancement, documentation\nPriority:    priority:critical, priority:high, priority:medium, priority:low\nStatus:      needs-triage, in-progress, blo"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG: PR merged without closing issue\n# Issue #123 remains open\n# No connection between fix and issue\n"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# CORRECT: Link PRs to issues\n# In PR description:\nFixes #123\n\n# Or in commit message:\ngit commit -m \"Add rate limiting\n\nImplements Redis-based rate limiter.\n\nCloses #123\"\n\n# Result: Issue automatical"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG: 500 open issues, many years old\n# No activity on 300+ issues\n# Overwhelms actual work\n"
        },
        {
          "language": "bash",
          "line_count": 25,
          "complexity": "medium",
          "code": "# CORRECT: Manage stale issues\n# 1. Use Stale bot or GitHub Actions\n# 2. Close inactive issues after 60-90 days\n# 3. Add \"stale\" label after 30 days warning\n# 4. Allow \"keep-alive\" label to prevent cl"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG: Creating issues for questions\nTitle: How do I configure the API?\nBody: I don't understand the documentation...\n"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# CORRECT: Use Discussions for questions\n# Enable Discussions in repository\n# Settings \u2192 Features \u2192 Discussions\n\n# Create categories:\n# - Q&A: Questions and answers\n# - Ideas: Feature brainstorming\n# "
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com"
        },
        {
          "type": "github",
          "url": "https://github.com/org/repo/discussions"
        },
        {
          "type": "github",
          "url": "https://github.com/org/repo/security/advisories/new"
        },
        {
          "type": "github",
          "url": "https://github.com/owner/repo/issues/123"
        },
        {
          "type": "github",
          "url": "https://github.com/orgs/org/projects/1"
        }
      ],
      "tools_mentioned": [
        "redis"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "23 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 64.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "deployment/netlify-optimization.md",
      "category": "deployment",
      "skill_name": "netlify-optimization",
      "frontmatter": {
        "name": "deployment-netlify-optimization",
        "description": "Improving site load times and Core Web Vitals"
      },
      "metrics": {
        "line_count": 511,
        "code_line_count": 129,
        "code_examples": 16,
        "external_refs": 1,
        "tools_mentioned": 4,
        "config_snippets": 7
      },
      "code_examples": [
        {
          "language": "toml",
          "line_count": 36,
          "complexity": "medium",
          "code": "# netlify.toml - Cache optimization\n[[headers]]\n  for = \"/*.html\"\n  [headers.values]\n    Cache-Control = \"public, max-age=0, must-revalidate\"\n\n[[headers]]\n  for = \"/assets/*\"\n  [headers.values]\n    Ca"
        },
        {
          "language": "toml",
          "line_count": 15,
          "complexity": "simple",
          "code": "# netlify.toml - Image optimization plugin\n[[plugins]]\n  package = \"@netlify/plugin-image-optim\"\n\n[plugins.inputs]\n  # Optimize quality (0-100)\n  quality = 85\n\n  # Generate WebP versions\n  formats = ["
        },
        {
          "language": "javascript",
          "line_count": 10,
          "complexity": "simple",
          "code": "// next.config.js\nmodule.exports = {\n  images: {\n    domains: ['cdn.example.com'],\n    formats: ['image/avif', 'image/webp'],\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920],\n    imageSizes: [16, 3"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Use sharp for build-time optimization\nnpm install sharp\n\n# Optimize during build\nnode scripts/optimize-images.js\n"
        },
        {
          "language": "toml",
          "line_count": 13,
          "complexity": "simple",
          "code": "# netlify.toml - Build plugins for caching\n[[plugins]]\n  package = \"netlify-plugin-cache\"\n\n[plugins.inputs]\n  # Cache directories\n  paths = [\n    \"node_modules\",\n    \".next/cache\",\n    \".cache\",\n    \""
        },
        {
          "language": "javascript",
          "line_count": 8,
          "complexity": "simple",
          "code": "// next.config.js\nmodule.exports = {\n  // Enable Next.js cache\n  experimental: {\n    outputStandalone: true,\n  },\n};\n"
        },
        {
          "language": "toml",
          "line_count": 8,
          "complexity": "simple",
          "code": "# netlify.toml\n[build.environment]\n  GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES = \"true\"\n\n[build]\n  command = \"npm run build\"\n  publish = \"public\"\n"
        },
        {
          "language": "toml",
          "line_count": 8,
          "complexity": "simple",
          "code": "# netlify.toml - Skip builds conditionally\n[build]\n  command = \"npm run build\"\n  publish = \"dist\"\n\n  # Skip build if no relevant changes\n  ignore = \"git diff --quiet $CACHED_COMMIT_REF $COMMIT_REF -- "
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Only build if src/ or config changed, not docs/\nignore = \"git diff --quiet $CACHED_COMMIT_REF $COMMIT_REF -- src/ package.json netlify.toml\"\n"
        },
        {
          "language": "toml",
          "line_count": 19,
          "complexity": "simple",
          "code": "# netlify.toml - Asset optimization\n[build]\n  command = \"npm run build && npm run optimize\"\n  publish = \"dist\"\n\n[build.processing]\n  skip_processing = false\n\n[build.processing.css]\n  bundle = true\n  m"
        },
        {
          "language": "javascript",
          "line_count": 22,
          "complexity": "complex",
          "code": "// vite.config.js\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  build: {\n    minify: 'terser',\n    terserOptions: {\n      compress: {\n        drop_console: true, // Remove cons"
        },
        {
          "language": "toml",
          "line_count": 16,
          "complexity": "simple",
          "code": "# netlify.toml - Prerender routes\n[[redirects]]\n  from = \"/blog/*\"\n  to = \"/blog/:splat\"\n  status = 200\n  force = true\n  # Cache prerendered pages\n  headers = {Cache-Control = \"public, max-age=3600, s"
        },
        {
          "language": "javascript",
          "line_count": 18,
          "complexity": "complex",
          "code": "// netlify/functions/expensive-page.js\nimport { builder } from '@netlify/functions';\n\nexport const handler = builder(async (event) => {\n  // Expensive computation, cached until next deploy\n  const dat"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Analyze Next.js bundle\nnpm install @next/bundle-analyzer\n\n# next.config.js\nconst withBundleAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n});\n\nmodule.export"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "complex",
          "code": "npm install rollup-plugin-visualizer\n\n# vite.config.js\nimport { visualizer } from 'rollup-plugin-visualizer';\n\nexport default defineConfig({\n  plugins: [\n    visualizer({\n      open: true,\n      gzipS"
        },
        {
          "language": "typescript",
          "line_count": 24,
          "complexity": "complex",
          "code": "// netlify/edge-functions/cache-control.ts\nimport { Context } from \"https://edge.netlify.com\";\n\nexport default async (request: Request, context: Context) => {\n  const response = await context.next();\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://edge.netlify.com\""
        }
      ],
      "tools_mentioned": [
        "ssl",
        "vite",
        "rollup",
        "tls"
      ],
      "config_snippets": [
        "toml",
        "toml",
        "toml",
        "toml",
        "toml",
        "toml",
        "toml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (toml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 64.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "elegant-design/foundation/colors-and-spacing.md",
      "category": "elegant-design",
      "skill_name": "colors-and-spacing",
      "frontmatter": {},
      "metrics": {
        "line_count": 362,
        "code_line_count": 70,
        "code_examples": 10,
        "external_refs": 6,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "css",
          "line_count": 41,
          "complexity": "medium",
          "code": ":root {\n  /* Background colors */\n  --color-background: hsl(0 0% 100%);\n  --color-foreground: hsl(222.2 84% 4.9%);\n  \n  /* Primary brand color */\n  --color-primary: hsl(222.2 47.4% 11.2%);\n  --color-p"
        },
        {
          "language": "css",
          "line_count": 26,
          "complexity": "medium",
          "code": "@media (prefers-color-scheme: dark) {\n  :root {\n    --color-background: hsl(222.2 84% 4.9%);\n    --color-foreground: hsl(210 40% 98%);\n    \n    --color-primary: hsl(210 40% 98%);\n    --color-primary-h"
        },
        {
          "language": "javascript",
          "line_count": 16,
          "complexity": "simple",
          "code": "// Example: Generate color scale from base\nconst baseColor = 'hsl(222, 47%, 11%)';\n\nconst scale = {\n  50: lighten(baseColor, 0.5),   // lightest\n  100: lighten(baseColor, 0.4),\n  200: lighten(baseColo"
        },
        {
          "language": "css",
          "line_count": 17,
          "complexity": "simple",
          "code": "/* Good contrast examples */\n.good-text {\n  background: #ffffff;\n  color: #222222; /* 16.1:1 ratio */\n}\n\n.good-button {\n  background: #0066cc;\n  color: #ffffff; /* 7.5:1 ratio */\n}\n\n/* Poor contrast -"
        },
        {
          "language": "css",
          "line_count": 17,
          "complexity": "simple",
          "code": ":root {\n  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);\n  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);\n  --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1)"
        },
        {
          "language": "css",
          "line_count": 10,
          "complexity": "simple",
          "code": "@media (prefers-color-scheme: dark) {\n  :root {\n    /* Stronger shadows needed in dark mode for depth */\n    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.3);\n    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.4)"
        },
        {
          "language": "css",
          "line_count": 18,
          "complexity": "simple",
          "code": ":root {\n  --space-0: 0;\n  --space-0-5: 0.125rem;  /* 2px */\n  --space-1: 0.25rem;     /* 4px */\n  --space-2: 0.5rem;      /* 8px */\n  --space-3: 0.75rem;     /* 12px */\n  --space-4: 1rem;        /* 16"
        },
        {
          "language": "css",
          "line_count": 15,
          "complexity": "simple",
          "code": "/* Example: Card component */\n.card {\n  padding: var(--space-6);          /* 24px internal padding */\n  margin-bottom: var(--space-4);     /* 16px between cards */\n  gap: var(--space-4);              "
        },
        {
          "language": "css",
          "line_count": 13,
          "complexity": "simple",
          "code": "/* Good: Clear grouping with space */\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: var(--space-2);              /* 8px between label and input */\n  margin-bottom: var(--space-6);   "
        },
        {
          "language": "css",
          "line_count": 47,
          "complexity": "medium",
          "code": ":root {\n  /* ===== COLORS ===== */\n  /* Light mode */\n  --color-background: #ffffff;\n  --color-foreground: #0a0a0a;\n  --color-primary: #0070f3;\n  --color-primary-hover: #0051cc;\n  --color-border: #eae"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://coolors.co"
        },
        {
          "type": "external",
          "url": "https://huemint.com"
        },
        {
          "type": "external",
          "url": "https://color.adobe.com"
        },
        {
          "type": "external",
          "url": "https://webaim.org/resources/contrastchecker"
        },
        {
          "type": "external",
          "url": "https://color.review"
        },
        {
          "type": "external",
          "url": "https://colorable.jxnblk.com"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        },
        {
          "type": "validate_examples",
          "reason": "3 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 64.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "diagrams/mermaid-sequence-diagrams.md",
      "category": "diagrams",
      "skill_name": "mermaid-sequence-diagrams",
      "frontmatter": {
        "name": "mermaid-sequence-diagrams",
        "description": "Create interaction and message flow diagrams with Mermaid showing communication between actors, services, and components over time"
      },
      "metrics": {
        "line_count": 544,
        "code_line_count": 256,
        "code_examples": 28,
        "external_refs": 2,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant A as Alice\n    participant B as Bob\n    A->>B: Hello Bob!\n    B->>A: Hi Alice!\n"
        },
        {
          "language": "mermaid",
          "line_count": 15,
          "complexity": "simple",
          "code": "sequenceDiagram\n    actor User\n    participant API as API Gateway\n    participant Auth as Auth Service\n    database DB as PostgreSQL\n    queue Q as Message Queue\n\n    User->>API: POST /login\n    API->"
        },
        {
          "language": "mermaid",
          "line_count": 16,
          "complexity": "simple",
          "code": "sequenceDiagram\n    %% Define order explicitly\n    participant C as Client\n    participant API\n    participant Cache\n    participant DB\n\n    C->>API: Request\n    API->>Cache: Check cache\n    alt Cache"
        },
        {
          "language": "mermaid",
          "line_count": 13,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant A\n    participant B\n\n    A->>B: Solid line with arrow (synchronous)\n    A-->>B: Dotted line with arrow (async/response)\n    A->B: Solid line without arrow (simple messa"
        },
        {
          "language": "mermaid",
          "line_count": 17,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant Client\n    participant Server\n    participant DB\n\n    Client->>Server: Synchronous request\n    activate Server\n    Server->>DB: Query (sync)\n    activate DB\n    DB-->>S"
        },
        {
          "language": "mermaid",
          "line_count": 10,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant A\n    participant B\n\n    A->>B: Request\n    activate B\n    B->>B: Process internally\n    B-->>A: Response\n    deactivate B\n"
        },
        {
          "language": "mermaid",
          "line_count": 10,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant Client\n    participant API\n    participant Service\n\n    Client->>+API: Request\n    API->>+Service: Forward\n    Service-->>-API: Response\n    API-->>-Client: Result\n"
        },
        {
          "language": "mermaid",
          "line_count": 12,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant A\n    participant B\n    participant C\n\n    A->>+B: Start\n    B->>+C: Call helper\n    C-->>-B: Helper result\n    B->>+C: Another call\n    C-->>-B: Second result\n    B-->"
        },
        {
          "language": "mermaid",
          "line_count": 19,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant Client\n    participant API\n    participant DB\n\n    Client->>API: Request user\n    API->>DB: Query\n\n    alt User found\n        DB-->>API: User data\n        API-->>Client"
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant User\n    participant App\n    participant Analytics\n\n    User->>App: Perform action\n    App->>App: Process\n\n    opt Analytics enabled\n        App-)Analytics: Track event"
        },
        {
          "language": "mermaid",
          "line_count": 18,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant Client\n    participant API\n    participant Queue\n\n    loop Until success or max retries\n        Client->>API: Poll for result\n        API->>Queue: Check status\n\n       "
        },
        {
          "language": "mermaid",
          "line_count": 22,
          "complexity": "medium",
          "code": "sequenceDiagram\n    participant Client\n    participant Gateway\n    participant ServiceA\n    participant ServiceB\n    participant ServiceC\n\n    Client->>Gateway: Request\n\n    par Call ServiceA\n        "
        },
        {
          "language": "mermaid",
          "line_count": 15,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant P1 as Process 1\n    participant Resource\n    participant P2 as Process 2\n\n    critical Acquire lock\n        P1->>Resource: Lock\n        Resource-->>P1: Locked\n        P"
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant A\n    participant B\n    participant C\n\n    Note left of A: Client initiates\n    A->>B: Request\n    Note right of B: Server validates\n    B->>C: Forward\n    Note over C:"
        },
        {
          "language": "mermaid",
          "line_count": 11,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant API\n    participant DB\n\n    Note over API,DB: Transaction begins<br/>Multiple operations<br/>Must complete atomically\n\n    API->>DB: BEGIN\n    API->>DB: INSERT\n    API-"
        },
        {
          "language": "mermaid",
          "line_count": 10,
          "complexity": "simple",
          "code": "sequenceDiagram\n    %% This is a comment explaining the flow\n    participant A\n    participant B\n\n    %% Main interaction\n    A->>B: Message\n\n    %% TODO: Add error handling\n"
        },
        {
          "language": "mermaid",
          "line_count": 23,
          "complexity": "medium",
          "code": "sequenceDiagram\n    actor Client\n    participant Gateway as API Gateway\n    participant Auth as Auth Service\n    participant API as User Service\n    database DB as PostgreSQL\n\n    Client->>+Gateway: P"
        },
        {
          "language": "mermaid",
          "line_count": 28,
          "complexity": "medium",
          "code": "sequenceDiagram\n    participant Order as Order Service\n    participant Inventory as Inventory Service\n    participant Payment as Payment Service\n    participant Shipping as Shipping Service\n    queue "
        },
        {
          "language": "mermaid",
          "line_count": 24,
          "complexity": "medium",
          "code": "sequenceDiagram\n    participant Client\n    participant API\n    participant Service\n\n    loop Retry up to 3 times\n        Client->>+API: Request\n        API->>+Service: Call external API\n\n        alt S"
        },
        {
          "language": "mermaid",
          "line_count": 12,
          "complexity": "simple",
          "code": "sequenceDiagram\n    %% Good: Descriptive names\n    actor User\n    participant WebApp as Web Application\n    participant AuthAPI as Authentication API\n    database UserDB as User Database\n\n    %% Bad: "
        },
        {
          "language": "mermaid",
          "line_count": 13,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant A\n    participant B\n\n    %% Shows that B is processing\n    A->>+B: Request\n    B->>B: Long process\n    B-->>-A: Response\n\n    %% Not needed for simple pass-through\n    "
        },
        {
          "language": "mermaid",
          "line_count": 22,
          "complexity": "medium",
          "code": "sequenceDiagram\n    box User Layer\n        actor User\n        participant UI\n    end\n\n    box Application Layer\n        participant API\n        participant Service\n    end\n\n    box Data Layer\n        "
        },
        {
          "language": "mermaid",
          "line_count": 12,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant A\n    participant B\n\n    %% Good: Shows what's returned\n    A->>B: GET /user/123\n    B-->>A: 200 OK + {id, name, email}\n\n    %% Bad: Generic response\n    A->>B: Request"
        },
        {
          "language": "mermaid",
          "line_count": 9,
          "complexity": "simple",
          "code": "sequenceDiagram\n    participant A\n    participant B\n    participant C\n    participant D\n    participant E\n    participant F\n    participant G\n"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "sequenceDiagram\n    A->>B: Start long process\n    B->>C: Sub-task\n    C-->>B: Done\n    B-->>A: Complete\n"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "sequenceDiagram\n    A->>+B: Start long process\n    B->>+C: Sub-task\n    C-->>-B: Done\n    B-->>-A: Complete\n"
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "sequenceDiagram\n    A->>B: Request\n    alt\n        B-->>A: Response1\n    else\n        B-->>A: Response2\n    end\n"
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "sequenceDiagram\n    A->>B: Request\n    alt Valid input\n        B-->>A: 200 OK\n    else Invalid input\n        B-->>A: 400 Bad Request\n    end\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/sequenceDiagram.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.live"
        }
      ],
      "tools_mentioned": [
        "postgres",
        "postgresql",
        "jwt"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "28 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 64.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "diagrams/mermaid-flowcharts.md",
      "category": "diagrams",
      "skill_name": "mermaid-flowcharts",
      "frontmatter": {
        "name": "mermaid-flowcharts",
        "description": "Create process flow diagrams with Mermaid using nodes, arrows, decisions, and subgraphs for visual documentation"
      },
      "metrics": {
        "line_count": 499,
        "code_line_count": 202,
        "code_examples": 28,
        "external_refs": 2,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "mermaid",
          "line_count": 4,
          "complexity": "simple",
          "code": "graph TD\n    A[Start] --> B[Process]\n    B --> C[End]\n"
        },
        {
          "language": "mermaid",
          "line_count": 4,
          "complexity": "simple",
          "code": "graph LR\n    A[Input] --> B[Transform]\n    B --> C[Output]\n"
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "graph TD\n    A[Rectangle - Standard process]\n    B(Rounded - Start/End alternative)\n    C([Stadium - Start/End points])\n    D[[Subroutine - Function call]]\n    E[(Database - Data storage)]\n    F((Circ"
        },
        {
          "language": "mermaid",
          "line_count": 11,
          "complexity": "simple",
          "code": "graph TD\n    Start([Start Process])\n    Start --> Input[/Get User Input/]\n    Input --> Validate{Valid Input?}\n    Validate -->|No| Error[Show Error]\n    Error --> Input\n    Validate -->|Yes| Process["
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "simple",
          "code": "graph LR\n    A --> B\n    B --- C\n    C -.-> D\n    D ==> E\n    E <--> F\n"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "graph TD\n    A[Check Status] -->|Success| B[Continue]\n    A -->|Failure| C[Retry]\n    A -.->|Timeout| D[Alert]\n    C ==>|Max Retries| D\n"
        },
        {
          "language": "mermaid",
          "line_count": 5,
          "complexity": "simple",
          "code": "graph LR\n    A -->|\"Step 1: Validate\"| B\n    B -->|\"Step 2: Process\"| C\n    C -->|\"Step 3: Save\"| D\n"
        },
        {
          "language": "mermaid",
          "line_count": 20,
          "complexity": "simple",
          "code": "graph TD\n    A[Start] --> B[Login]\n\n    subgraph Authentication\n        B --> C{Credentials Valid?}\n        C -->|Yes| D[Generate Token]\n        C -->|No| E[Show Error]\n        E --> B\n    end\n\n    D "
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "graph TD\n    subgraph API Layer\n        A[Request] --> B[Validate]\n\n        subgraph Auth\n            B --> C[Check Token]\n            C --> D[Verify Permissions]\n        end\n\n        D --> E[Route]\n "
        },
        {
          "language": "mermaid",
          "line_count": 11,
          "complexity": "simple",
          "code": "graph TD\n    A[Start]\n\n    subgraph Processing[\"Data Processing\"]\n        direction LR\n        B[Parse] --> C[Transform] --> D[Validate]\n    end\n\n    A --> B\n    D --> E[Save]\n"
        },
        {
          "language": "mermaid",
          "line_count": 5,
          "complexity": "simple",
          "code": "graph TD\n    A[Normal]\n    B[Highlighted]\n    style B fill:#f9f,stroke:#333,stroke-width:4px\n"
        },
        {
          "language": "mermaid",
          "line_count": 9,
          "complexity": "simple",
          "code": "graph TD\n    A[Success]:::success\n    B[Error]:::error\n    C[Warning]:::warning\n\n    classDef success fill:#9f6,stroke:#333,stroke-width:2px\n    classDef error fill:#f66,stroke:#333,stroke-width:2px\n "
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "simple",
          "code": "graph TD\n    subgraph Critical [Critical Path]\n        A[Step 1] --> B[Step 2]\n    end\n\n    style Critical fill:#ffe6e6,stroke:#ff0000,stroke-width:2px\n"
        },
        {
          "language": "mermaid",
          "line_count": 19,
          "complexity": "simple",
          "code": "graph TD\n    Start([Start]) --> Input[/Enter Data/]\n    Input --> Validate{Validate}\n\n    Validate -->|Valid| TypeCheck{Check Type}\n    Validate -->|Invalid| Error1[Show Validation Error]\n    Error1 -"
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "graph TD\n    Start([Start]) --> Split[Split Work]\n\n    Split --> T1[Task 1]\n    Split --> T2[Task 2]\n    Split --> T3[Task 3]\n\n    T1 --> Join((Join))\n    T2 --> Join\n    T3 --> Join\n\n    Join --> Agg"
        },
        {
          "language": "mermaid",
          "line_count": 18,
          "complexity": "simple",
          "code": "graph TD\n    Start([Start])\n    Start --> Try[Try Operation]\n\n    Try --> Success{Success?}\n    Success -->|Yes| Continue[Continue]\n    Success -->|No| Retry{Retry Count < 3?}\n\n    Retry -->|Yes| Wait"
        },
        {
          "language": "mermaid",
          "line_count": 21,
          "complexity": "medium",
          "code": "graph TD\n    Client([Client]) --> Request[HTTP Request]\n    Request --> Gateway[API Gateway]\n\n    Gateway --> Auth{Authenticated?}\n    Auth -->|No| Reject[401 Unauthorized]\n    Auth -->|Yes| Rate{Rate"
        },
        {
          "language": "mermaid",
          "line_count": 15,
          "complexity": "simple",
          "code": "graph LR\n    Source[(Source DB)] -->|Extract| ETL\n\n    subgraph ETL Process\n        direction TB\n        E[Extract] --> T[Transform]\n        T --> V{Validate}\n        V -->|Invalid| Log[/Log Error/]\n "
        },
        {
          "language": "mermaid",
          "line_count": 27,
          "complexity": "medium",
          "code": "graph TD\n    Start([User Login]) --> Input[/Enter Credentials/]\n    Input --> Validate{Valid Format?}\n\n    Validate -->|No| FormatError[Show Format Error]\n    FormatError --> Input\n\n    Validate -->|Y"
        },
        {
          "language": "mermaid",
          "line_count": 11,
          "complexity": "simple",
          "code": "graph TD\n    %% Good: Clear, descriptive names\n    UserInput[/Get User Input/]\n    ValidateEmail{Email Valid?}\n    SendConfirmation[\\Send Email\\]\n\n    %% Bad: Cryptic abbreviations\n    UI[/UI/]\n    VE"
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "graph TD\n    Start([Start/End - Stadium])\n    Process[Process - Rectangle]\n    Decision{Decision - Diamond}\n    IO[/Input or Output - Parallelogram/]\n    Data[(Database - Cylinder)]\n    Function[[Func"
        },
        {
          "language": "mermaid",
          "line_count": 10,
          "complexity": "simple",
          "code": "graph TD\n    Normal[Normal Flow]\n    Critical[Critical Path]:::critical\n    Error[Error Handler]:::error\n    Success[Success State]:::success\n\n    classDef critical fill:#ffa,stroke:#ff0,stroke-width:"
        },
        {
          "language": "markdown",
          "line_count": 5,
          "complexity": "simple",
          "code": "# User Registration Process\n\nOur registration flow follows this pattern:\n\n\\"
        },
        {
          "language": "markdown",
          "line_count": 3,
          "complexity": "simple",
          "code": "## Architecture Flow\n\n\\"
        },
        {
          "language": "mermaid",
          "line_count": 11,
          "complexity": "simple",
          "code": "graph TD\n    A --> B\n    A --> C\n    A --> D\n    B --> C\n    B --> D\n    B --> E\n    C --> D\n    C --> E\n    D --> E\n"
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "simple",
          "code": "graph TD\n    A[Start]\n    B(Process)\n    C{Decision}\n    D[Another Process]\n    E((End))\n"
        },
        {
          "language": "mermaid",
          "line_count": 4,
          "complexity": "simple",
          "code": "graph TD\n    A{Check} --> B\n    A --> C\n"
        },
        {
          "language": "mermaid",
          "line_count": 4,
          "complexity": "simple",
          "code": "graph TD\n    A{Valid Input?} -->|Yes| B[Process]\n    A -->|No| C[Error]\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/flowchart.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.live"
        }
      ],
      "tools_mentioned": [
        "postgres",
        "postgresql",
        "jwt"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "28 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "2 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 64.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "modal/modal-image-building.md",
      "category": "modal",
      "skill_name": "modal-image-building",
      "frontmatter": {
        "name": "modal-image-building",
        "description": "Configuring Modal runtime environments"
      },
      "metrics": {
        "line_count": 456,
        "code_line_count": 152,
        "code_examples": 18,
        "external_refs": 2,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "import modal\n\n# Debian Slim (recommended for most cases)\nimage = modal.Image.debian_slim()\n\n# Debian Slim with specific Python version\nimage = modal.Image.debian_slim(python_version=\"3.11\")\n\n# Ubuntu "
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Single package\nimage = modal.Image.debian_slim().uv_pip_install(\"requests\")\n\n# Multiple packages\nimage = modal.Image.debian_slim().uv_pip_install(\n    \"numpy\",\n    \"pandas\",\n    \"scikit-learn\"\n)\n\n# "
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c SLOWER - Traditional pip\nimage = modal.Image.debian_slim().pip_install(\n    \"torch\",\n    \"transformers\"\n)  # Can take minutes\n\n# \u2705 FASTER - uv\nimage = modal.Image.debian_slim().uv_pip_install(\n   "
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "medium",
          "code": "# Single package\nimage = modal.Image.debian_slim().apt_install(\"ffmpeg\")\n\n# Multiple packages\nimage = modal.Image.debian_slim().apt_install(\n    \"ffmpeg\",\n    \"libsm6\",\n    \"libxext6\",\n    \"libxrender"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "medium",
          "code": "# Download and setup model\nimage = (\n    modal.Image.debian_slim()\n    .uv_pip_install(\"torch\")\n    .run_commands(\n        \"mkdir -p /models\",\n        \"wget https://example.com/model.bin -O /models/mo"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# \u2705 GOOD - System deps first (change rarely)\nimage = (\n    modal.Image.debian_slim()\n    .apt_install(\"ffmpeg\", \"libsm6\")  # Cached\n    .uv_pip_install(\"opencv-python\")   # Cached if deps unchanged\n  "
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Base image (changes rarely)\nbase_image = (\n    modal.Image.debian_slim()\n    .apt_install(\"ffmpeg\", \"libsm6\")\n    .uv_pip_install(\n        \"torch==2.1.0\",\n        \"transformers==4.35.0\"\n    )\n)\n\n# A"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "image = (\n    modal.Image.debian_slim()\n    .env({\"HF_HOME\": \"/models/cache\"})\n    .uv_pip_install(\"transformers\")\n)\n\n# Multiple variables\nimage = (\n    modal.Image.debian_slim()\n    .env({\n        \"T"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Single file\nimage = (\n    modal.Image.debian_slim()\n    .copy_local_file(\"config.yaml\", \"/app/config.yaml\")\n)\n\n# Directory\nimage = (\n    modal.Image.debian_slim()\n    .copy_local_dir(\"./src\", \"/app/"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# From Dockerfile in repo\nimage = modal.Image.from_dockerfile(\"Dockerfile\")\n\n# From Dockerfile with context\nimage = modal.Image.from_dockerfile(\n    \"docker/Dockerfile\",\n    context_mount=modal.Mount."
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "ml_image = (\n    modal.Image.debian_slim(python_version=\"3.11\")\n    .apt_install(\n        \"git\",\n        \"wget\",\n        \"libsm6\",\n        \"libxext6\"\n    )\n    .uv_pip_install(\n        \"torch==2.1.0\","
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "data_image = (\n    modal.Image.debian_slim(python_version=\"3.11\")\n    .apt_install(\"postgresql-client\", \"libpq-dev\")\n    .uv_pip_install(\n        \"pandas==2.1.0\",\n        \"numpy==1.24.0\",\n        \"sql"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "scraping_image = (\n    modal.Image.debian_slim()\n    .apt_install(\n        \"chromium\",\n        \"chromium-driver\"\n    )\n    .uv_pip_install(\n        \"selenium==4.15.0\",\n        \"beautifulsoup4==4.12.0\""
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "@app.function(image=my_image)\ndef debug_image():\n    import subprocess\n    import sys\n\n    # Check Python version\n    print(f\"Python: {sys.version}\")\n\n    # Check installed packages\n    result = subpr"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c SLOW\nimage = modal.Image.debian_slim().pip_install(\"torch\", \"transformers\")\n\n# \u2705 FAST\nimage = modal.Image.debian_slim().uv_pip_install(\"torch\", \"transformers\")\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u274c BAD - Copies everything including .git, node_modules\nimage = modal.Image.debian_slim().copy_local_dir(\".\", \"/app\")\n\n# \u2705 GOOD - Only copy what's needed\nimage = (\n    modal.Image.debian_slim()\n    ."
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c BAD - Non-reproducible\nimage = modal.Image.debian_slim().uv_pip_install(\"torch\", \"transformers\")\n\n# \u2705 GOOD - Pinned versions\nimage = modal.Image.debian_slim().uv_pip_install(\n    \"torch==2.1.0\",\n "
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# \u274c BAD - Invalidates cache on every code change\nimage = (\n    modal.Image.debian_slim()\n    .copy_local_dir(\"./src\", \"/app\")  # Changes often!\n    .uv_pip_install(\"torch\")          # Has to rebuild\n)"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com/model.bin"
        },
        {
          "type": "github",
          "url": "https://github.com/example/lib.git\""
        }
      ],
      "tools_mentioned": [
        "postgres",
        "postgresql",
        "docker"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 64.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "networking/network-resilience-patterns.md",
      "category": "networking",
      "skill_name": "network-resilience-patterns",
      "frontmatter": {
        "name": "network-resilience-patterns",
        "description": "Building robust network applications"
      },
      "metrics": {
        "line_count": 347,
        "code_line_count": 95,
        "code_examples": 10,
        "external_refs": 3,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "import time\nimport random\n\ndef exponential_backoff_retry(func, max_retries=5, base_delay=1, max_delay=60):\n    for attempt in range(max_retries):\n        try:\n            return func()\n        except "
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "from tenacity import (\n    retry,\n    stop_after_attempt,\n    wait_exponential,\n    retry_if_exception_type\n)\nimport httpx\n\n@retry(\n    stop=stop_after_attempt(5),\n    wait=wait_exponential(multiplier"
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "from enum import Enum\nimport time\n\nclass CircuitState(Enum):\n    CLOSED = \"closed\"\n    OPEN = \"open\"\n    HALF_OPEN = \"half_open\"\n\nclass CircuitBreaker:\n    def __init__(self, failure_threshold=5, time"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "import httpx\n\nasync def fetch_with_timeout(url, timeout_seconds=10):\n    try:\n        async with httpx.AsyncClient(timeout=timeout_seconds) as client:\n            response = await client.get(url)\n    "
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "async def get_user_data(user_id):\n    # Try primary source\n    try:\n        return await fetch_from_primary_api(user_id)\n    except Exception as e:\n        print(f\"Primary failed: {e}\")\n\n        # Try"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "import httpx\n\n# Reuse connections\nclient = httpx.AsyncClient(\n    limits=httpx.Limits(\n        max_keepalive_connections=20,\n        max_connections=100\n    ),\n    timeout=30.0\n)\n\nasync def make_reque"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "import time\nimport asyncio\n\nclass TokenBucket:\n    def __init__(self, capacity, refill_rate):\n        self.capacity = capacity\n        self.tokens = capacity\n        self.refill_rate = refill_rate\n   "
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "import asyncio\nfrom dataclasses import dataclass\nfrom typing import Dict\n\n@dataclass\nclass HealthStatus:\n    healthy: bool\n    latency_ms: float\n    last_check: float\n\nclass HealthMonitor:\n    def __i"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# \u274c BAD\nwhile True:\n    try:\n        return api_call()\n    except:\n        pass  # Infinite loop!\n\n# \u2705 GOOD\nfor attempt in range(max_retries):\n    try:\n        return api_call()\n    except Exception a"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c BAD - Default timeout might be too long\nresponse = requests.get(url)\n\n# \u2705 GOOD\nresponse = requests.get(url, timeout=10)\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/data\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/item/{i}\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/health\""
        }
      ],
      "tools_mentioned": [
        "tls",
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 63.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "diagrams/mermaid-project-diagrams.md",
      "category": "diagrams",
      "skill_name": "mermaid-project-diagrams",
      "frontmatter": {
        "name": "mermaid-project-diagrams",
        "description": "Create Gantt charts and timeline diagrams with Mermaid for project planning and chronological visualization"
      },
      "metrics": {
        "line_count": 505,
        "code_line_count": 164,
        "code_examples": 20,
        "external_refs": 3,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "mermaid",
          "line_count": 12,
          "complexity": "simple",
          "code": "gantt\n    title Project Timeline\n    dateFormat YYYY-MM-DD\n\n    section Planning\n    Define Requirements    :2024-01-01, 10d\n    Design Architecture    :2024-01-11, 15d\n\n    section Development\n    Bu"
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "gantt\n    dateFormat YYYY-MM-DD\n    %% Also supported: MM-DD, DD, etc.\n\n    Task 1    :2024-01-01, 5d\n    Task 2    :2024-01-06, 1w\n    Task 3    :2024-01-13, 2w\n"
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "gantt\n    title Development Sprint\n    dateFormat YYYY-MM-DD\n\n    section Backend\n    API Design         :done, api, 2024-01-01, 5d\n    Database Schema    :done, db, 2024-01-06, 3d\n    API Implementat"
        },
        {
          "language": "mermaid",
          "line_count": 13,
          "complexity": "simple",
          "code": "gantt\n    title Task Dependencies\n    dateFormat YYYY-MM-DD\n\n    section Phase 1\n    Task A    :a, 2024-01-01, 5d\n    Task B    :b, after a, 7d\n    Task C    :c, after b, 4d\n\n    section Phase 2\n    T"
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "gantt\n    dateFormat YYYY-MM-DD\n\n    section Core\n    Foundation    :f, 2024-01-01, 10d\n\n    section Parallel\n    Feature A     :a, after f, 15d\n    Feature B     :b, after f, 12d\n    Feature C     :c"
        },
        {
          "language": "mermaid",
          "line_count": 16,
          "complexity": "simple",
          "code": "gantt\n    title Product Launch Timeline\n    dateFormat YYYY-MM-DD\n\n    section Q1\n    Planning           :2024-01-01, 30d\n    MVP Complete       :milestone, 2024-01-31, 0d\n\n    section Q2\n    Beta Dev"
        },
        {
          "language": "mermaid",
          "line_count": 23,
          "complexity": "medium",
          "code": "gantt\n    title Release 2.0 Schedule\n    dateFormat YYYY-MM-DD\n\n    section Planning\n    Requirements Gathering    :done, 2024-01-01, 10d\n    Technical Design          :done, 2024-01-11, 7d\n    Sprint"
        },
        {
          "language": "mermaid",
          "line_count": 28,
          "complexity": "medium",
          "code": "gantt\n    title User Authentication Feature\n    dateFormat YYYY-MM-DD\n    excludes weekends\n\n    section Backend\n    Database Schema      :done, 2024-01-08, 2d\n    API Endpoints        :done, 2024-01-"
        },
        {
          "language": "mermaid",
          "line_count": 28,
          "complexity": "medium",
          "code": "gantt\n    title Cloud Migration Project\n    dateFormat YYYY-MM-DD\n\n    section Preparation\n    Audit Current Infra       :done, 2024-01-01, 14d\n    Choose Cloud Provider     :done, 2024-01-15, 7d\n    "
        },
        {
          "language": "mermaid",
          "line_count": 11,
          "complexity": "simple",
          "code": "timeline\n    title History of JavaScript\n    1995 : Brendan Eich creates JavaScript in 10 days\n    1997 : ECMAScript 1 released\n    1999 : ECMAScript 3 released\n    2005 : AJAX becomes popular\n    200"
        },
        {
          "language": "mermaid",
          "line_count": 11,
          "complexity": "simple",
          "code": "timeline\n    title Product Evolution\n    2020 : MVP Launch\n         : 1K Users\n    2021 : Mobile App\n         : 10K Users\n         : Series A Funding\n    2022 : Enterprise Features\n         : 100K Use"
        },
        {
          "language": "mermaid",
          "line_count": 21,
          "complexity": "medium",
          "code": "timeline\n    title Company Milestones\n\n    section Startup Phase\n    2019 : Founded\n         : Seed Funding $1M\n    2020 : Product Launch\n         : First 100 customers\n\n    section Growth Phase\n    2"
        },
        {
          "language": "mermaid",
          "line_count": 24,
          "complexity": "medium",
          "code": "timeline\n    title Product Roadmap 2024\n\n    section Q1\n    Jan 2024 : Dark Mode\n             : Mobile App v2.0\n    Feb 2024 : API v3.0\n    Mar 2024 : Admin Dashboard\n\n    section Q2\n    Apr 2024 : Mu"
        },
        {
          "language": "mermaid",
          "line_count": 25,
          "complexity": "medium",
          "code": "timeline\n    title Frontend Framework Evolution\n\n    section Early Web\n    1995 : JavaScript invented\n    1999 : XMLHttpRequest (AJAX precursor)\n\n    section Library Era\n    2006 : jQuery released\n   "
        },
        {
          "language": "mermaid",
          "line_count": 25,
          "complexity": "medium",
          "code": "timeline\n    title Project XYZ History\n\n    section Discovery\n    Week 1 : Initial brainstorming\n           : Market research\n    Week 2 : Competitive analysis\n           : User interviews\n\n    sectio"
        },
        {
          "language": "mermaid",
          "line_count": 22,
          "complexity": "medium",
          "code": "timeline\n    title Professional Journey\n\n    section Education\n    2015-2019 : BS Computer Science\n              : Internship at Startup\n\n    section Early Career\n    2019-2021 : Junior Developer at T"
        },
        {
          "language": "mermaid",
          "line_count": 4,
          "complexity": "simple",
          "code": "gantt\n    Task A    :2024-01-01, 5d\n    Task B    :2024-01-01, 10d  %% Should start after A?\n"
        },
        {
          "language": "mermaid",
          "line_count": 3,
          "complexity": "simple",
          "code": "gantt\n    Important Task    :2024-01-01, 10d\n"
        },
        {
          "language": "mermaid",
          "line_count": 3,
          "complexity": "simple",
          "code": "gantt\n    Important Task    :crit, 2024-01-01, 10d\n"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "timeline\n    1990 : Event A\n    1995 : Event B\n    Jan 2020 : Event C  %% Suddenly very specific\n    2025 : Event D\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/gantt.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/timeline.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.live"
        }
      ],
      "tools_mentioned": [
        "jwt",
        "oauth"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "20 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 63.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "debugging/core-dump-analysis.md",
      "category": "debugging",
      "skill_name": "core-dump-analysis",
      "frontmatter": {
        "name": "debugging-core-dump-analysis",
        "description": "Core dump generation, GDB/LLDB analysis, crash reporting, and post-mortem debugging across platforms"
      },
      "metrics": {
        "line_count": 696,
        "code_line_count": 146,
        "code_examples": 19,
        "external_refs": 3,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Linux: Check core pattern\ncat /proc/sys/kernel/core_pattern\n# Common values:\n# core                      \u2192 core in CWD\n# core.%p                   \u2192 core.<pid> in CWD\n# /var/crash/core.%p.%e     \u2192 s"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Check if binary has symbols (Linux)\nfile ./app\n# with debug: ELF 64-bit LSB executable, not stripped\n# without:    ELF 64-bit LSB executable, stripped\n\n# Extract debug info (Linux)\nobjcopy --only-ke"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Compile with frame pointers (easier unwinding)\ngcc -fno-omit-frame-pointer -g app.c -o app\n\n# Without -fno-omit-frame-pointer, debugger may fail to unwind\n# (common in optimized builds: -O2, -O3)\n"
        },
        {
          "language": "bash",
          "line_count": 29,
          "complexity": "medium",
          "code": "# Enable core dumps for current shell session\nulimit -c unlimited\n\n# Persist across reboots (systemd)\nsudo mkdir -p /etc/systemd/system.conf.d/\ncat <<EOF | sudo tee /etc/systemd/system.conf.d/coredump"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Modern systems use systemd-coredump\ncoredumpctl list\n\n# Show specific core dump\ncoredumpctl info 12345\n\n# Extract core dump\ncoredumpctl dump 12345 > core.12345\n\n# Debug directly\ncoredumpctl debug 12"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Load core dump in GDB\ngdb /path/to/app /path/to/core\n\n# Alternative: attach core to matching binary\ngdb -c core ./app\n\n# Inside GDB session:\n(gdb) bt              # Show backtrace\n(gdb) bt full     "
        },
        {
          "language": "bash",
          "line_count": 28,
          "complexity": "medium",
          "code": "$ gdb ./myapp core.12345\n\nReading symbols from ./myapp...\n[New LWP 12345]\nCore was generated by `./myapp --config prod.conf'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x00000000"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# macOS core dumps location\nls -lh /cores/\n\n# Load core dump in LLDB\nlldb -c /cores/core.12345 ./app\n\n# LLDB commands (similar to GDB but different syntax)\n(lldb) bt                    # Backtrace\n(ll"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# System crash reports\nls ~/Library/Logs/DiagnosticReports/\nls /Library/Logs/DiagnosticReports/\n\n# Symbolicate crash report (convert addresses to symbols)\n# Requires .dSYM file matching binary UUID\nsy"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# Enable faulthandler at startup\nimport faulthandler\nfaulthandler.enable(file=open('/var/log/python_crashes.log', 'a'))\n\n# Dump traceback on SIGUSR1 signal\nimport signal\nfaulthandler.register(signal.S"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Install pystack\npip install pystack\n\n# Analyze Python process core dump\npystack core /path/to/python /path/to/core.12345\n\n# Attach to running Python process\nsudo pystack remote --pid 12345\n\n# Exampl"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "# Install Sentry SDK\n# pip install sentry-sdk\n\nimport sentry_sdk\n\n# Initialize Sentry\nsentry_sdk.init(\n    dsn=\"https://examplePublicKey@o0.ingest.sentry.io/0\",\n    environment=\"production\",\n    relea"
        },
        {
          "language": "swift",
          "line_count": 21,
          "complexity": "complex",
          "code": "// iOS: Firebase Crashlytics\nimport FirebaseCrashlytics\n\n// Enable Crashlytics\nFirebaseApp.configure()\n\n// Record non-fatal errors\nCrashlytics.crashlytics().record(error: error)\n\n// Set user identifie"
        },
        {
          "language": "kotlin",
          "line_count": 21,
          "complexity": "complex",
          "code": "// Android: Firebase Crashlytics\nimport com.google.firebase.crashlytics.FirebaseCrashlytics\n\n// Get Crashlytics instance\nval crashlytics = FirebaseCrashlytics.getInstance()\n\n// Record non-fatal except"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Visual Studio: File > Open > Crash Dump\n# Set symbol path: Tools > Options > Debugging > Symbols\n\n# WinDbg analysis\nwindbg -z crash.dmp\n\n# WinDbg commands:\n# !analyze -v        # Automatic crash ana"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Linux: GDB symbol server (debuginfod)\nexport DEBUGINFOD_URLS=\"https://debuginfod.elfutils.org/\"\ngdb ./app core  # Automatically fetches symbols\n\n# macOS: Spotlight indexing for .dSYM\n# Xcode automat"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c NEVER: Disable core dumps globally in production\nulimit -c 0  # \u274c No crash analysis possible\n\n# \u2705 CORRECT: Enable with size limit\nulimit -c 102400  # Limit to 100MB per core\necho '/var/crash/core."
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "# \u274c Don't: Ignore Python C extension crashes\n# Crashes from C extensions produce no Python traceback\n\n# \u2705 Correct: Enable faulthandler\nimport faulthandler\nimport sys\n\nfaulthandler.enable(file=sys.stde"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u274c Don't: Analyze core dump without matching symbols\ngdb app core.old  # \u274c Symbols don't match binary version\n\n# \u2705 Correct: Use matching binary and symbols\ngdb app.v1.2.3 core.v1.2.3.12345\n# Or load "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://examplePublicKey@o0.ingest.sentry.io/0\""
        },
        {
          "type": "external",
          "url": "https://debuginfod.elfutils.org/\""
        },
        {
          "type": "external",
          "url": "https://msdl.microsoft.com/download/symbols"
        }
      ],
      "tools_mentioned": [
        "sentry",
        "docker"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "19 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 63.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/dspy-rag.md",
      "category": "ml",
      "skill_name": "dspy-rag",
      "frontmatter": {
        "name": "dspy-rag",
        "description": "Building Retrieval-Augmented Generation pipelines with DSPy and vector databases"
      },
      "metrics": {
        "line_count": 642,
        "code_line_count": 117,
        "code_examples": 16,
        "external_refs": 3,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "import dspy\nimport chromadb\n\n# Set up ChromaDB\nchroma_client = chromadb.Client()\ncollection = chroma_client.create_collection(\"knowledge_base\")\n\n# Add documents\ndocuments = [\n    \"DSPy is a framework "
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "import dspy\n\nclass CitedRAG(dspy.Module):\n    \"\"\"RAG system that cites sources.\"\"\"\n\n    def __init__(self, k=5):\n        super().__init__()\n        self.retrieve = dspy.Retrieve(k=k)\n\n        # Signat"
        },
        {
          "language": "python",
          "line_count": 56,
          "complexity": "complex",
          "code": "import dspy\n\nclass MultiHopRAG(dspy.Module):\n    \"\"\"RAG with multiple retrieval rounds for complex questions.\"\"\"\n\n    def __init__(self, max_hops=2):\n        super().__init__()\n        self.max_hops ="
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "import dspy\nimport weaviate\n\n# Connect to Weaviate\nweaviate_client = weaviate.Client(\"http://localhost:8080\")\n\n# Create schema\nschema = {\n    \"class\": \"Document\",\n    \"properties\": [\n        {\"name\": "
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "import dspy\n\nclass RerankedRAG(dspy.Module):\n    \"\"\"RAG with passage reranking for better quality.\"\"\"\n\n    def __init__(self, retrieve_k=10, use_k=3):\n        super().__init__()\n        self.retrieve_"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "import dspy\n\n# Define RAG module\nclass SimpleRAG(dspy.Module):\n    def __init__(self):\n        super().__init__()\n        self.retrieve = dspy.Retrieve(k=3)\n        self.generate = dspy.ChainOfThought"
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "import dspy\nimport modal\n\n# Deploy retrieval-optimized model on Modal\napp = modal.App(\"dspy-rag\")\n\n@app.function(\n    image=modal.Image.debian_slim().pip_install(\"vllm\", \"sentence-transformers\"),\n    "
        },
        {
          "language": "python",
          "line_count": 66,
          "complexity": "complex",
          "code": "import dspy\nfrom typing import List, Optional\n\nclass ProductionRAG(dspy.Module):\n    \"\"\"Production-ready RAG with error handling and logging.\"\"\"\n\n    def __init__(self, k=5, min_relevance=0.3):\n      "
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "class SimpleRAG(dspy.Module):\n    def __init__(self):\n        super().__init__()\n        self.retrieve = dspy.Retrieve(k=3)\n        self.generate = dspy.ChainOfThought(\"context, question -> answer\")\n\n"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "# ChromaDB (local)\nimport chromadb\nclient = chromadb.Client()\ncollection = client.create_collection(\"docs\")\nrm = dspy.chromadb_rm.ChromadbRM(\"docs\")\n\n# Weaviate (production)\nimport weaviate\nclient = w"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad\nself.retrieve = dspy.Retrieve(k=50)  # Too many!\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Good\nself.retrieve = dspy.Retrieve(k=10)\n# Rerank to top 3\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad\npassages = self.retrieve(question).passages  # May fail!\ncontext = \"\\n\".join(passages)\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Good\ntry:\n    passages = self.retrieve(question).passages\n    if not passages:\n        return fallback_response()\nexcept Exception as e:\n    log_error(e)\n    return error_response()\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad - use all retrieved passages blindly\npassages = self.retrieve(question).passages\ncontext = \"\\n\".join(passages)  # May include irrelevant content\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Good - rerank or filter\npassages = self.retrieve(question).passages\nrelevant = [p for p in passages if is_relevant(question, p)]\ncontext = \"\\n\".join(relevant)\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "http://localhost:8080\""
        },
        {
          "type": "external",
          "url": "https://your-app--serve.modal.run/v1\""
        },
        {
          "type": "example",
          "url": "http://localhost:8080\""
        }
      ],
      "tools_mentioned": [
        "postgres",
        "mongodb"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 63.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "caching/service-worker-caching.md",
      "category": "caching",
      "skill_name": "service-worker-caching",
      "frontmatter": {
        "name": "caching-service-worker-caching",
        "description": "Progressive Web App (PWA) caching with Service Workers - offline-first architecture, caching strategies, Workbox patterns, and modern browser caching."
      },
      "metrics": {
        "line_count": 708,
        "code_line_count": 136,
        "code_examples": 20,
        "external_refs": 3,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "javascript",
          "line_count": 53,
          "complexity": "complex",
          "code": "// service-worker.js - Lifecycle events\n\nconst CACHE_VERSION = 'v1';\nconst CACHE_NAME = `app-cache-${CACHE_VERSION}`;\n\n// 1. INSTALL: Cache initial resources\nself.addEventListener('install', (event) ="
        },
        {
          "language": "javascript",
          "line_count": 36,
          "complexity": "medium",
          "code": "// main.js - Register service worker from main page\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker\n      .register('/service-worker.js')\n   "
        },
        {
          "language": "javascript",
          "line_count": 21,
          "complexity": "medium",
          "code": "// Strategy: Try cache first, fallback to network\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request).then((cachedResponse) => {\n      if (cachedResponse) "
        },
        {
          "language": "javascript",
          "line_count": 23,
          "complexity": "medium",
          "code": "// Strategy: Try network first, fallback to cache if offline\nfunction networkFirst(request) {\n  return fetch(request)\n    .then((networkResponse) => {\n      // Update cache with fresh response\n      c"
        },
        {
          "language": "javascript",
          "line_count": 23,
          "complexity": "medium",
          "code": "// Strategy: Serve from cache, fetch fresh copy in background\nfunction staleWhileRevalidate(request) {\n  return caches.open(CACHE_NAME).then((cache) => {\n    return cache.match(request).then((cachedRe"
        },
        {
          "language": "javascript",
          "line_count": 7,
          "complexity": "simple",
          "code": "// Strategy: Always use network, never cache\nself.addEventListener('fetch', (event) => {\n  if (event.request.method === 'POST') {\n    event.respondWith(fetch(event.request));\n  }\n});\n"
        },
        {
          "language": "javascript",
          "line_count": 7,
          "complexity": "simple",
          "code": "// Strategy: Only serve from cache\nself.addEventListener('fetch', (event) => {\n  if (event.request.url.includes('/app-shell/')) {\n    event.respondWith(caches.match(event.request));\n  }\n});\n"
        },
        {
          "language": "javascript",
          "line_count": 78,
          "complexity": "complex",
          "code": "// service-worker.js - Using Workbox\nimportScripts('https://storage.googleapis.com/workbox-cdn/releases/7.0.0/workbox-sw.js');\n\nconst { registerRoute } = workbox.routing;\nconst { CacheFirst, NetworkFi"
        },
        {
          "language": "javascript",
          "line_count": 31,
          "complexity": "complex",
          "code": "// vite.config.js - Workbox with Vite PWA Plugin\nimport { defineConfig } from 'vite';\nimport { VitePWA } from 'vite-plugin-pwa';\n\nexport default defineConfig({\n  plugins: [\n    VitePWA({\n      registe"
        },
        {
          "language": "javascript",
          "line_count": 22,
          "complexity": "medium",
          "code": "// service-worker.js - Show offline page when network fails\n\nconst OFFLINE_PAGE = '/offline.html';\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME).then((c"
        },
        {
          "language": "javascript",
          "line_count": 53,
          "complexity": "complex",
          "code": "// service-worker.js - Background Sync API\n\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'sync-posts') {\n    event.waitUntil(syncPendingPosts());\n  }\n});\n\nasync function syncPendingP"
        },
        {
          "language": "javascript",
          "line_count": 16,
          "complexity": "simple",
          "code": "const CACHE_VERSION = 'v2';\nconst CACHE_NAME = `app-cache-${CACHE_VERSION}`;\n\n// Activate: Delete old versions\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then("
        },
        {
          "language": "javascript",
          "line_count": 30,
          "complexity": "medium",
          "code": "// service-worker.js - Migrate cache data between versions\n\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    (async () => {\n      const oldCacheName = 'app-cache-v1';\n      const "
        },
        {
          "language": "javascript",
          "line_count": 25,
          "complexity": "medium",
          "code": "// Cache only successful GET requests\nself.addEventListener('fetch', (event) => {\n  if (event.request.method !== 'GET') {\n    return; // Don't cache POST/PUT/DELETE\n  }\n\n  event.respondWith(\n    cache"
        },
        {
          "language": "javascript",
          "line_count": 18,
          "complexity": "simple",
          "code": "// Network with timeout fallback\nfunction fetchWithTimeout(request, timeout = 3000) {\n  return Promise.race([\n    fetch(request),\n    new Promise((_, reject) =>\n      setTimeout(() => reject(new Error"
        },
        {
          "language": "javascript",
          "line_count": 15,
          "complexity": "simple",
          "code": "// service-worker.js - Debug logging\n\nconst DEBUG = true;\n\nfunction log(...args) {\n  if (DEBUG) {\n    console.log('[SW]', ...args);\n  }\n}\n\nself.addEventListener('fetch', (event) => {\n  log('Fetch:', e"
        },
        {
          "language": "javascript",
          "line_count": 16,
          "complexity": "simple",
          "code": "// main.js - Force service worker update\n\nnavigator.serviceWorker.register('/service-worker.js').then((registration) => {\n  // Check for updates every hour\n  setInterval(() => {\n    registration.updat"
        },
        {
          "language": "javascript",
          "line_count": 11,
          "complexity": "simple",
          "code": "// WRONG: Cache all requests indiscriminately\nself.addEventListener('fetch', (event) => {\n  event.respondWith(caches.match(event.request) || fetch(event.request));\n  // Problem: Caches POST requests, "
        },
        {
          "language": "javascript",
          "line_count": 7,
          "complexity": "simple",
          "code": "// WRONG: Same cache name forever\nconst CACHE_NAME = 'app-cache'; // Never changes\n\n// CORRECT: Version your caches\nconst CACHE_VERSION = 'v2';\nconst CACHE_NAME = `app-cache-${CACHE_VERSION}`;\n"
        },
        {
          "language": "javascript",
          "line_count": 12,
          "complexity": "simple",
          "code": "// WRONG: No activation cleanup\n// Old caches accumulate, waste storage\n\n// CORRECT: Delete old caches on activate\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().t"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://storage.googleapis.com/workbox-cdn/releases/7.0.0/workbox-sw.js'"
        },
        {
          "type": "external",
          "url": "https://fonts.googleapis.com'"
        },
        {
          "type": "external",
          "url": "https://fonts.gstatic.com'"
        }
      ],
      "tools_mentioned": [
        "vite",
        "webpack"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "20 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 63.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "debugging/memory-leak-debugging.md",
      "category": "debugging",
      "skill_name": "memory-leak-debugging",
      "frontmatter": {
        "name": "debugging-memory-leak-debugging",
        "description": "Comprehensive memory leak detection and debugging using heap profiling tools across multiple languages"
      },
      "metrics": {
        "line_count": 679,
        "code_line_count": 145,
        "code_examples": 19,
        "external_refs": 4,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "# \u274c Memory leak: cached data never evicted\ncache = {}\n\ndef get_user(user_id):\n    if user_id not in cache:\n        cache[user_id] = fetch_user(user_id)  # Cache grows forever\n    return cache[user_id]"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Production-safe sampling (low overhead)\npy-spy record -o profile.svg --duration 60 python app.py\n\n# Development tracking (high overhead)\nvalgrind --leak-check=full --track-origins=yes ./binary\n"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Full leak check with origins tracking\nvalgrind --leak-check=full \\\n         --show-leak-kinds=all \\\n         --track-origins=yes \\\n         --log-file=valgrind.log \\\n         ./myapp arg1 arg2\n\n# An"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Compile with ASan\ng++ -fsanitize=address -g -O1 app.cpp -o app\n# or\nclang++ -fsanitize=address -g -O1 app.cpp -o app\n\n# Run instrumented binary\nASAN_OPTIONS=detect_leaks=1:log_path=asan.log ./app\n\n#"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Common ASan options\nexport ASAN_OPTIONS=\"detect_leaks=1:\\\n                     fast_unwind_on_malloc=0:\\\n                     malloc_context_size=30:\\\n                     log_path=asan.log\"\n"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "import tracemalloc\nimport linecache\n\ndef display_top(snapshot, key_type='lineno', limit=10):\n    \"\"\"Display top memory allocations.\"\"\"\n    snapshot = snapshot.filter_traces((\n        tracemalloc.Filte"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Identify memory growth between snapshots\nfor stat in top_stats[:10]:\n    print(f\"{stat.size_diff / 1024:.1f} KiB | {stat.count_diff:+} allocations\")\n    print(f\"  {stat.traceback.format()[0]}\")\n"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "# Install: pip install memory_profiler\n\nfrom memory_profiler import profile\n\n@profile\ndef process_data(data):\n    \"\"\"Process large dataset.\"\"\"\n    result = []\n    for item in data:\n        # This line"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Record memory usage over time\nmprof run python script.py\n\n# Plot memory usage graph\nmprof plot\n\n# Show peak memory\nmprof peak\n"
        },
        {
          "language": "go",
          "line_count": 26,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"net/http\"\n    _ \"net/http/pprof\"  // Registers /debug/pprof/* handlers\n    \"runtime\"\n)\n\nfunc main() {\n    // Enable pprof HTTP endpoint\n    go func() {\n        http.ListenA"
        },
        {
          "language": "bash",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Capture heap profile from running service\ncurl http://localhost:6060/debug/pprof/heap > heap.prof\n\n# Interactive analysis\ngo tool pprof heap.prof\n# Commands in interactive mode:\n# > top10        # S"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Install MIRI\nrustup +nightly component add miri\n\n# Run tests with MIRI\ncargo +nightly miri test\n\n# Run specific binary with MIRI\ncargo +nightly miri run\n\n# Example MIRI output for use-after-free:\n# "
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Install dotnet-dump\ndotnet tool install --global dotnet-dump\n\n# Capture memory dump from running process\ndotnet-dump collect --process-id 12345\n\n# Analyze dump\ndotnet-dump analyze core_20251026_1234"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Find objects consuming most memory\n> dumpheap -stat\n# Output shows types sorted by total size:\n# MT            Count    TotalSize Class Name\n# 00007f1234567890  50000  12800000 System.String\n# 00007"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Install heaptrack\nsudo apt install heaptrack heaptrack-gui\n\n# Record heap allocations\nheaptrack ./myapp arg1 arg2\n# Creates heaptrack.myapp.XXXXX.gz\n\n# Analyze with GUI\nheaptrack_gui heaptrack.myapp"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "# \u274c NEVER: Unbounded cache growth\nclass UserService:\n    def __init__(self):\n        self.cache = {}  # Grows forever\n\n    def get_user(self, user_id):\n        if user_id not in self.cache:\n          "
        },
        {
          "language": "go",
          "line_count": 27,
          "complexity": "medium",
          "code": "// \u274c Don't: Forget to close resources in goroutines\nfunc processFiles(files []string) {\n    for _, file := range files {\n        go func(f string) {\n            data, _ := os.ReadFile(f)  // Leaks if "
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "# \u274c Don't: Create reference cycles without weak references\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.parent = None  # Strong reference\n        self.children = "
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u274c Don't: Run production with tracking profilers\nvalgrind ./production-server  # 10-30x slowdown!\n\n# \u2705 Correct: Use sampling profilers in production\n# Go\ncurl http://localhost:6060/debug/pprof/heap >"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/heap"
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/heap"
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/heap"
        },
        {
          "type": "example",
          "url": "http://localhost:6060/debug/pprof/heap"
        }
      ],
      "tools_mentioned": [
        "docker"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "19 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 63.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cloud/gcp/gcp-compute.md",
      "category": "cloud",
      "skill_name": "gcp-compute",
      "frontmatter": {
        "name": "cloud-gcp-compute",
        "description": "Google Cloud compute services including Compute Engine, Cloud Run, and GKE"
      },
      "metrics": {
        "line_count": 485,
        "code_line_count": 92,
        "code_examples": 16,
        "external_refs": 0,
        "tools_mentioned": 4,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Create a general-purpose VM with sustained use discount benefits\ngcloud compute instances create web-server \\\n  --machine-type=n2-standard-4 \\\n  --zone=us-central1-a \\\n  --image-family=debian-11 \\\n "
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "# Deploy a container to Cloud Run using Python client\nfrom google.cloud import run_v2\n\ndef deploy_cloud_run_service(project_id, service_name, image_url, region=\"us-central1\"):\n    client = run_v2.Serv"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Create an Autopilot cluster (recommended for most use cases)\ngcloud container clusters create-auto prod-cluster \\\n  --region=us-central1 \\\n  --release-channel=regular\n\n# Create a Standard cluster wi"
        },
        {
          "language": "bash",
          "line_count": 29,
          "complexity": "medium",
          "code": "# \u274c Bad: Creating VMs one at a time manually\ngcloud compute instances create vm-1 --machine-type=n2-standard-2 --zone=us-central1-a\ngcloud compute instances create vm-2 --machine-type=n2-standard-2 --"
        },
        {
          "language": "bash",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Deploy revision 1\ngcloud run deploy api-service \\\n  --image=gcr.io/project/api:v1 \\\n  --region=us-central1 \\\n  --tag=v1\n\n# Deploy revision 2\ngcloud run deploy api-service \\\n  --image=gcr.io/project/"
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "from google.cloud import compute_v1\n\ndef create_preemptible_instance(project_id, zone, instance_name):\n    client = compute_v1.InstancesClient()\n\n    # Shutdown script to save state before preemption\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Create regional MIG for automatic zone distribution\ngcloud compute instance-groups managed create web-regional-mig \\\n  --base-instance-name=web \\\n  --template=web-template \\\n  --size=6 \\\n  --region="
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Create secret in Secret Manager\necho -n \"my-database-password\" | gcloud secrets create db-password \\\n  --data-file=- \\\n  --replication-policy=automatic\n\n# Deploy Cloud Run with secret and environmen"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Enable OS Login on a project\ngcloud compute project-info add-metadata \\\n  --metadata enable-oslogin=TRUE\n\n# Grant user SSH access via IAM\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n  --memb"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Purchase committed use contract for compute resources\ngcloud compute commitments create web-commitment \\\n  --region=us-central1 \\\n  --plan=12-month \\\n  --resources=vcpu=100,memory=400GB\n\n# View acti"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Create GKE cluster with Workload Identity enabled\ngcloud container clusters create prod-cluster \\\n  --workload-pool=PROJECT_ID.svc.id.goog \\\n  --zone=us-central1-a\n\n# Create Kubernetes service accou"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Compute Engine\ngcloud compute instances create NAME --machine-type=TYPE --zone=ZONE\ngcloud compute instances list\ngcloud compute instances stop/start/delete NAME --zone=ZONE\ngcloud compute ssh INSTA"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u274c NEVER: Run stateful databases on preemptible VMs without proper HA setup\ngcloud compute instances create db-primary \\\n  --preemptible  # Database will be terminated within 24 hours!\n\n# \u2705 CORRECT: "
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u274c Don't: Use oversized machine types \"just in case\"\ngcloud compute instances create web-server \\\n  --machine-type=n2-standard-32  # 32 vCPUs for a low-traffic web app!\n\n# \u2705 Correct: Right-size and u"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "# \u274c Don't: Deploy Cloud Run without concurrency limits\n# Default concurrency of 80 may overwhelm downstream services\n\n# \u2705 Correct: Set appropriate concurrency based on backend capacity\nfrom google.clo"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u274c Don't: Ignore sustained use discounts when evaluating costs\n# Manually calculating costs without considering automatic discounts\n\n# \u2705 Correct: Use Pricing Calculator and understand automatic disco"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "nginx",
        "postgresql",
        "kubernetes"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 63.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cloud/gcp/gcp-databases.md",
      "category": "cloud",
      "skill_name": "gcp-databases",
      "frontmatter": {
        "name": "cloud-gcp-databases",
        "description": "Google Cloud managed database services including Cloud SQL, Firestore, Bigtable, and Spanner"
      },
      "metrics": {
        "line_count": 603,
        "code_line_count": 113,
        "code_examples": 18,
        "external_refs": 0,
        "tools_mentioned": 4,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Create PostgreSQL instance with high availability\ngcloud sql instances create production-db \\\n  --database-version=POSTGRES_15 \\\n  --tier=db-n1-standard-4 \\\n  --region=us-central1 \\\n  --availability"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "from google.cloud import firestore\n\n# Initialize Firestore client\ndb = firestore.Client()\n\n# Create document with auto-generated ID\nusers_ref = db.collection('users')\nnew_user = users_ref.add({\n    'n"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "from google.cloud import bigtable\nfrom google.cloud.bigtable import column_family, row_filters\n\n# Create Bigtable instance and table\nclient = bigtable.Client(project='my-project', admin=True)\ninstance"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "from google.cloud import spanner\n\n# Create Spanner instance with multi-region configuration\nspanner_client = spanner.Client()\ninstance = spanner_client.instance(\n    'global-instance',\n    configurati"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# \u274c Bad: Single-zone instance (no automatic failover)\ngcloud sql instances create db \\\n  --tier=db-n1-standard-2 \\\n  --region=us-central1\n# Zone failure causes downtime\n\n# \u2705 Good: Regional HA instance"
        },
        {
          "language": "javascript",
          "line_count": 23,
          "complexity": "medium",
          "code": "rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Users can only read/write their own documents\n    match /users/{userId} {\n      allow read, write: if re"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "# \u274c Bad: Sequential timestamps create hotspot on single tablet\nrow_key = f\"{sensor_id}#{timestamp}\".encode()\n# All recent writes go to same tablet server\n\n# \u2705 Good: Hash prefix distributes writes, rev"
        },
        {
          "language": "sql",
          "line_count": 31,
          "complexity": "medium",
          "code": "-- \u274c Bad: Separate tables (data distributed, slow joins)\nCREATE TABLE Customers (\n  CustomerId STRING(36),\n  Name STRING(100)\n) PRIMARY KEY (CustomerId);\n\nCREATE TABLE Orders (\n  OrderId STRING(36),\n "
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "import sqlalchemy\nfrom sqlalchemy import create_engine\n\n# \u274c Bad: Create new connection per request (connection exhaustion)\ndef query_database():\n    engine = create_engine('postgresql://user:pass@host"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Query requiring composite index\nusers_ref = db.collection('users')\nquery = users_ref.where('status', '==', 'active') \\\n                 .where('country', '==', 'US') \\\n                 .order_by('cr"
        },
        {
          "language": "json",
          "line_count": 14,
          "complexity": "simple",
          "code": "{\n  \"indexes\": [\n    {\n      \"collectionGroup\": \"users\",\n      \"queryScope\": \"COLLECTION\",\n      \"fields\": [\n        {\"fieldPath\": \"status\", \"order\": \"ASCENDING\"},\n        {\"fieldPath\": \"country\", \"or"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "import redis\nfrom google.cloud import secretmanager\n\n# Connect to Memorystore Redis\nredis_client = redis.Redis(\n    host='10.0.0.3',  # Memorystore instance IP\n    port=6379,\n    decode_responses=True"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Create migration job from MySQL source to Cloud SQL\ngcloud database-migration migration-jobs create migrate-prod-db \\\n  --region=us-central1 \\\n  --type=CONTINUOUS \\\n  --source=on-prem-mysql \\\n  --de"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Cloud SQL\ngcloud sql instances create NAME --database-version=POSTGRES_15 --tier=TIER\ngcloud sql instances list\ngcloud sql databases create DB --instance=INSTANCE\ngcloud sql backups create --instanc"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "# \u274c NEVER: Store large files in Firestore documents\ndb.collection('users').document('user-123').set({\n    'name': 'Alice',\n    'profile_image': base64_encode(image_data)  # 10MB image - FAILS!\n})\n# Fi"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "# \u274c Don't: Use sequential row keys in Bigtable\nrow_key = f\"{timestamp}#{sensor_id}\".encode()\n# Creates hotspot - all writes go to single tablet server\n\n# \u2705 Correct: Distribute writes with hash prefix "
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u274c Don't: Use Spanner for small databases\ngcloud spanner instances create small-app-db --config=regional-us-central1 --nodes=1\n# Minimum cost: ~$650/month for single node!\n\n# \u2705 Correct: Use Cloud SQL"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# \u274c Don't: Perform analytics queries on Firestore\n# Query all orders from last year (millions of documents)\norders = db.collection('orders').where('created_at', '>', last_year).stream()\ntotal_revenue "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "mysql",
        "postgresql",
        "redis"
      ],
      "config_snippets": [
        "sql",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (sql, json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 63.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cloud/aws/aws-ec2-compute.md",
      "category": "cloud",
      "skill_name": "aws-ec2-compute",
      "frontmatter": {
        "name": "cloud-aws-ec2-compute",
        "description": "AWS EC2 instances, Auto Scaling, Load Balancing, AMIs, and instance lifecycle management"
      },
      "metrics": {
        "line_count": 669,
        "code_line_count": 107,
        "code_examples": 12,
        "external_refs": 4,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Launch t3.medium instance (2 vCPU, 4 GB RAM)\naws ec2 run-instances \\\n  --image-id ami-0abcdef1234567890 \\\n  --instance-type t3.medium \\\n  --key-name my-key-pair \\\n  --security-group-ids sg-012345678"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "import boto3\n\nec2 = boto3.client('ec2')\n\ndef launch_instance(instance_type, ami_id, key_name, security_group_ids):\n    \"\"\"Launch EC2 instance with configuration\"\"\"\n\n    response = ec2.run_instances(\n "
        },
        {
          "language": "python",
          "line_count": 86,
          "complexity": "complex",
          "code": "import boto3\n\nautoscaling = boto3.client('autoscaling')\n\ndef create_auto_scaling_group():\n    \"\"\"Create Auto Scaling Group with launch template\"\"\"\n\n    # Create launch template\n    ec2 = boto3.client("
        },
        {
          "language": "python",
          "line_count": 97,
          "complexity": "complex",
          "code": "import boto3\n\nelbv2 = boto3.client('elbv2')\n\ndef create_application_load_balancer():\n    \"\"\"Create Application Load Balancer with target group\"\"\"\n\n    # Create ALB\n    alb_response = elbv2.create_load"
        },
        {
          "language": "bash",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Create AMI from running instance\naws ec2 create-image \\\n  --instance-id i-0123456789abcdef0 \\\n  --name \"my-app-v1.2.3-$(date +%Y%m%d)\" \\\n  --description \"My app version 1.2.3\" \\\n  --no-reboot\n\n# Cop"
        },
        {
          "language": "python",
          "line_count": 66,
          "complexity": "complex",
          "code": "import boto3\n\nec2 = boto3.client('ec2')\n\ndef create_ami(instance_id, name, description):\n    \"\"\"Create AMI from instance\"\"\"\n\n    response = ec2.create_image(\n        InstanceId=instance_id,\n        Na"
        },
        {
          "language": "bash",
          "line_count": 29,
          "complexity": "medium",
          "code": "#!/bin/bash\n# User data script - runs on first boot\n\n# Update packages\nyum update -y\n\n# Install application dependencies\nyum install -y docker git\n\n# Start Docker\nsystemctl start docker\nsystemctl enab"
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "import base64\n\n# User data in Python\nUSER_DATA = \"\"\"#!/bin/bash\nset -e\n\n# Install dependencies\nyum update -y\nyum install -y python3 pip3\n\n# Clone application\ncd /opt\ngit clone https://github.com/myorg"
        },
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "def request_spot_instances():\n    \"\"\"Request spot instances at target price\"\"\"\n\n    ec2 = boto3.client('ec2')\n\n    response = ec2.request_spot_instances(\n        SpotPrice='0.05',  # Max price per hou"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "import requests\n\nMETADATA_URL = \"http://169.254.169.254/latest/meta-data/\"\nTOKEN_URL = \"http://169.254.169.254/latest/api/token\"\n\ndef get_instance_metadata(path):\n    \"\"\"Fetch instance metadata using "
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c NEVER: Store credentials in user data\n#!/bin/bash\nexport AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\nexport AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG\n# Visible in console, metadata, logs\n\n# \u2705 CORRECT"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "# \u274c Don't run single instance without Auto Scaling\nec2.run_instances(\n    ImageId='ami-123',\n    InstanceType='t3.medium',\n    MinCount=1,\n    MaxCount=1\n)\n# Instance failure = downtime\n\n# \u2705 Correct: "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm"
        },
        {
          "type": "github",
          "url": "https://github.com/myorg/myapp.git"
        },
        {
          "type": "external",
          "url": "http://169.254.169.254/latest/meta-data/\""
        },
        {
          "type": "external",
          "url": "http://169.254.169.254/latest/api/token\""
        }
      ],
      "tools_mentioned": [
        "docker"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "12 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 63.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "modal/modal-common-errors.md",
      "category": "modal",
      "skill_name": "modal-common-errors",
      "frontmatter": {
        "name": "modal-modal-common-errors",
        "description": "Encountering Modal deployment or runtime errors"
      },
      "metrics": {
        "line_count": 512,
        "code_line_count": 114,
        "code_examples": 13,
        "external_refs": 4,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "# \u274c Bad: Package not in image\n@app.function()\ndef fetch_data():\n    import requests  # Will fail!\n    return requests.get(\"https://api.example.com\").json()\n\n# \u2705 Good: Install package in image\nimage = "
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c Bad: Wrong version or typo\nimage = modal.Image.debian_slim().uv_pip_install(\n    \"numpy==2.0.0\",  # Version doesn't exist\n    \"pandass\"        # Typo\n)\n\n# \u2705 Good: Verify versions and names\nimage ="
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u274c Bad: Only Python package\nimage = modal.Image.debian_slim().uv_pip_install(\"opencv-python\")\n\n# \u2705 Good: Install system dependencies first\nimage = (\n    modal.Image.debian_slim()\n    .apt_install(\"li"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u274c Bad: Default timeout too short\n@app.function()\ndef train_model():\n    # Takes 5 minutes\n    model.fit(X_train, y_train)\n    return model\n\n# \u2705 Good: Set appropriate timeout\n@app.function(timeout=60"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "# \u274c Bad: Default memory (1GB) insufficient\n@app.function()\ndef process_large_file():\n    df = pd.read_csv(\"huge_file.csv\")  # 5GB file\n    return df.shape\n\n# \u2705 Good: Increase memory limit\n@app.functio"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# \u274c Bad: Batch size too large\n@app.function(gpu=\"A10G\")  # 24GB VRAM\ndef train():\n    batch_size = 128  # Too large\n    train_loader = DataLoader(dataset, batch_size=batch_size)\n    # OOM error\n\n# \u2705 G"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "# \u274c Bad: Relative imports\nfrom .utils import helper_function\nfrom ..models import Model\n\n# \u2705 Good: Absolute imports or inline code\n# Option 1: Include code in same file\n@app.function()\ndef helper_func"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# \u274c Bad: Global variable\nMY_CONSTANT = 42\n\n@app.function()\ndef use_constant():\n    return MY_CONSTANT  # Not available!\n\n# \u2705 Good: Pass as parameter or use class\n@app.function()\ndef use_constant(const"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# \u274c Bad: No retry logic\n@app.function()\ndef fetch_data():\n    response = requests.get(\"https://api.example.com/data\")\n    return response.json()\n\n# \u2705 Good: Add retries and timeout\nfrom tenacity import"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Re-authenticate with Modal\nmodal token set --token-id <YOUR_TOKEN_ID> --token-secret <YOUR_SECRET>\n\n# Or use interactive auth\nmodal setup\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c Bad: GPU not specified\n@app.function()\ndef train_model():\n    device = torch.device(\"cuda\")  # Fails!\n    model.to(device)\n\n# \u2705 Good: Specify GPU\n@app.function(gpu=\"A10G\")\ndef train_model():\n    d"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# \u274c Bad: Single GPU type\n@app.function(gpu=\"H100\")  # Might not be available\ndef train():\n    pass\n\n# \u2705 Good: Use fallback GPUs\n@app.function(gpu=\"L40S\")  # More availability\ndef train():\n    pass\n\n# "
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# View real-time logs\nmodal logs my-app\n\n# Interactive shell in container\nmodal shell my-app::my_function\n\n# Test locally with dev mode\nmodal run --dev my_app.py\n\n# Check app status\nmodal app list\n\n# "
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com\""
        },
        {
          "type": "example",
          "url": "https://api.example.com\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/data\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/data\""
        }
      ],
      "tools_mentioned": [
        "docker"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 63.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "caching/cache-invalidation-strategies.md",
      "category": "caching",
      "skill_name": "cache-invalidation-strategies",
      "frontmatter": {
        "name": "caching-cache-invalidation-strategies",
        "description": "Cache invalidation patterns and techniques - time-based, event-based, key-based, and version-based invalidation for maintaining cache consistency."
      },
      "metrics": {
        "line_count": 623,
        "code_line_count": 95,
        "code_examples": 15,
        "external_refs": 0,
        "tools_mentioned": 4,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "import redis\nimport json\nfrom datetime import datetime, timedelta\n\nclass FixedTTLCache:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n\n    def set_with_ttl(self,"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "from datetime import datetime, timezone\n\nclass AbsoluteExpirationCache:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n\n    def set_expire_at(self, key: str, valu"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "class SlidingExpirationCache:\n    def __init__(self, redis_client: redis.Redis, ttl: int = 1800):\n        self.cache = redis_client\n        self.ttl = ttl  # 30 minutes default\n\n    def get_with_slidi"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "import threading\n\nclass PubSubInvalidation:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n        self.pubsub = redis_client.pubsub()\n\n    def start_listener(sel"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "# Pseudo-code for CDC-based invalidation (using Debezium/Kafka pattern)\nclass CDCInvalidation:\n    def __init__(self, kafka_consumer, redis_client):\n        self.consumer = kafka_consumer\n        self"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "class CacheTagInvalidation:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n\n    def set_with_tags(self, key: str, value: dict, tags: list[str], ttl: int = 3600):\n"
        },
        {
          "language": "python",
          "line_count": 50,
          "complexity": "complex",
          "code": "class DependencyGraphInvalidation:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n\n    def set_with_dependencies(self, key: str, value: dict, dependencies: list[s"
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "import hashlib\n\nclass VersionBasedCache:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n\n    def set_versioned(self, base_key: str, value: dict, ttl: int = 86400)"
        },
        {
          "language": "typescript",
          "line_count": 37,
          "complexity": "complex",
          "code": "// TypeScript: Frontend asset fingerprinting\nclass AssetFingerprinting {\n  private manifest: Map<string, string> = new Map();\n\n  // Build time: Generate manifest\n  generateManifest(files: string[]): v"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "class NetflixStyleInvalidation:\n    \"\"\"\n    Netflix invalidation strategy (simplified):\n    - Time-based for most content (TTL)\n    - Event-based for critical updates (user actions)\n    - Key-based fo"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "import asyncio\nimport aiohttp\n\nclass CacheWarming:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n\n    async def warm_cache(self, keys_to_warm: list[str], fetch_f"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "class GracefulCacheInvalidation:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n\n    def get_with_stale_fallback(self, key: str, fetch_fn, ttl: int = 300):\n      "
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# WRONG: Invalidate on every write\ndef update_user(user_id: int, data: dict):\n    save_to_db(user_id, data)\n    cache.delete(f\"user:{user_id}\")\n    cache.delete(f\"user:{user_id}:*\")  # Overly aggressi"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Set cache, never invalidate\ncache.set(\"config\", config_data)  # Stale data forever\n\n# CORRECT: Use appropriate TTL or event-based invalidation\ncache.setex(\"config\", 300, json.dumps(config_dat"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: Invalidate during traffic spike\ncache.delete(\"popular_product:*\")  # Thundering herd to database\n\n# CORRECT: Warm cache before invalidating\nwarm_cache(popular_products)\ncache.delete(\"popular_"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "postgresql",
        "tls",
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "12 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 63.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "formal/lean-proof-basics.md",
      "category": "formal",
      "skill_name": "lean-proof-basics",
      "frontmatter": {
        "name": "formal-lean-proof-basics",
        "description": "Learning Lean 4 from scratch"
      },
      "metrics": {
        "line_count": 590,
        "code_line_count": 266,
        "code_examples": 30,
        "external_refs": 5,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Install Lean 4 (via elan)\ncurl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf | sh\n\n# Create new project\nlake new my_project\ncd my_project\n\n# Build project\nlake build\n\n# "
        },
        {
          "language": "lean",
          "line_count": 9,
          "complexity": "simple",
          "code": "-- Proposition: 2 + 2 = 4\n#check (2 + 2 = 4 : Prop)\n\n-- Proof: a term of type \"2 + 2 = 4\"\nexample : 2 + 2 = 4 := rfl\n\n-- Type of a proof\n#check (rfl : 2 + 2 = 4)\n"
        },
        {
          "language": "lean",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- Prove implication directly\nexample : p \u2192 q \u2192 p := fun hp hq => hp\n\n-- Prove conjunction\nexample : p \u2227 q \u2192 q \u2227 p := fun \u27e8hp, hq\u27e9 => \u27e8hq, hp\u27e9\n"
        },
        {
          "language": "lean",
          "line_count": 8,
          "complexity": "simple",
          "code": "example : p \u2192 q \u2192 p := by\n  intro hp hq\n  exact hp\n\nexample : p \u2227 q \u2192 q \u2227 p := by\n  intro \u27e8hp, hq\u27e9\n  exact \u27e8hq, hp\u27e9\n"
        },
        {
          "language": "lean",
          "line_count": 7,
          "complexity": "simple",
          "code": "-- Theorem statement\ntheorem my_theorem (assumptions : Type) : conclusion := by\n  -- Tactic 1\n  -- Tactic 2\n  -- ...\n  -- Tactic N (closes goal)\n"
        },
        {
          "language": "lean",
          "line_count": 4,
          "complexity": "simple",
          "code": "theorem and_comm (p q : Prop) : p \u2227 q \u2192 q \u2227 p := by\n  intro \u27e8hp, hq\u27e9  -- Introduce hypothesis, destructure\n  exact \u27e8hq, hp\u27e9  -- Provide exact proof term\n"
        },
        {
          "language": "lean",
          "line_count": 7,
          "complexity": "simple",
          "code": "-- These are equivalent\nexample : \u2200 (n : Nat), n + 0 = n := fun n => Nat.add_zero n\nexample : \u2200 (n : Nat), n + 0 = n := by intro n; exact Nat.add_zero n\n\n-- Implication is a function\nexample : p \u2192 q :"
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "simple",
          "code": "-- Template\ntheorem impl_proof : P \u2192 Q := by\n  intro hP    -- Assume P (hypothesis hP)\n  -- Now prove Q using hP\n  sorry\n\n-- Example\ntheorem modus_ponens : p \u2192 (p \u2192 q) \u2192 q := by\n  intro hp hpq\n  apply"
        },
        {
          "language": "lean",
          "line_count": 15,
          "complexity": "simple",
          "code": "-- Template\ntheorem conj_proof : P \u2227 Q := by\n  constructor\n  \u00b7 -- Prove P\n    sorry\n  \u00b7 -- Prove Q\n    sorry\n\n-- Example\ntheorem and_intro : p \u2192 q \u2192 p \u2227 q := by\n  intro hp hq\n  constructor\n  \u00b7 exact h"
        },
        {
          "language": "lean",
          "line_count": 11,
          "complexity": "simple",
          "code": "-- Destructuring in intro\ntheorem and_left : p \u2227 q \u2192 p := by\n  intro \u27e8hp, hq\u27e9\n  exact hp\n\n-- Using cases\ntheorem and_right : p \u2227 q \u2192 q := by\n  intro h\n  cases h with\n  | intro hp hq => exact hq\n"
        },
        {
          "language": "lean",
          "line_count": 11,
          "complexity": "simple",
          "code": "-- Template: prove one side\ntheorem disj_left : P \u2192 P \u2228 Q := by\n  intro hP\n  left\n  exact hP\n\ntheorem disj_right : Q \u2192 P \u2228 Q := by\n  intro hQ\n  right\n  exact hQ\n"
        },
        {
          "language": "lean",
          "line_count": 14,
          "complexity": "simple",
          "code": "-- Template\ntheorem disj_elim : P \u2228 Q \u2192 (P \u2192 R) \u2192 (Q \u2192 R) \u2192 R := by\n  intro hPQ hPR hQR\n  cases hPQ with\n  | inl hP => exact hPR hP\n  | inr hQ => exact hQR hQ\n\n-- Example\ntheorem or_comm : p \u2228 q \u2192 q \u2228"
        },
        {
          "language": "lean",
          "line_count": 14,
          "complexity": "simple",
          "code": "-- Negation is implication to False\n#check (\u00acp : Prop)  -- p \u2192 False\n\n-- Proof by contradiction\ntheorem not_not_intro : p \u2192 \u00ac\u00acp := by\n  intro hp hnp\n  exact hnp hp\n\n-- Using contradiction\ntheorem cont"
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "simple",
          "code": "-- Template\ntheorem forall_intro : \u2200 (x : \u03b1), P x := by\n  intro x\n  -- Prove P x for arbitrary x\n  sorry\n\n-- Example\ntheorem forall_impl : (\u2200 x, P x \u2192 Q x) \u2192 (\u2200 x, P x) \u2192 (\u2200 x, Q x) := by\n  intro hPQ "
        },
        {
          "language": "lean",
          "line_count": 11,
          "complexity": "simple",
          "code": "-- Proving existence\ntheorem exists_intro : P a \u2192 \u2203 x, P x := by\n  intro hPa\n  use a\n  exact hPa\n\n-- Using existential hypothesis\ntheorem exists_elim : (\u2203 x, P x) \u2192 (\u2200 x, P x \u2192 Q) \u2192 Q := by\n  intro \u27e8x"
        },
        {
          "language": "lean",
          "line_count": 19,
          "complexity": "simple",
          "code": "-- Reflexivity\nexample : a = a := rfl\n\n-- Symmetry\nexample (h : a = b) : b = a := h.symm\n\n-- Transitivity\nexample (h1 : a = b) (h2 : b = c) : a = c := by\n  rw [h1, h2]\n\n-- Rewriting in goal\nexample (h"
        },
        {
          "language": "lean",
          "line_count": 17,
          "complexity": "simple",
          "code": "-- Template\ntheorem nat_induction (P : Nat \u2192 Prop)\n    (base : P 0)\n    (step : \u2200 n, P n \u2192 P (n + 1)) :\n    \u2200 n, P n := by\n  intro n\n  induction n with\n  | zero => exact base\n  | succ n ih => exact st"
        },
        {
          "language": "lean",
          "line_count": 33,
          "complexity": "medium",
          "code": "-- intro: Introduce hypothesis or variable\nintro h        -- Name hypothesis h\nintro          -- Auto-generate name\nintro \u27e8h1, h2\u27e9 -- Destructure simultaneously\n\n-- exact: Provide exact proof term\nexa"
        },
        {
          "language": "lean",
          "line_count": 13,
          "complexity": "simple",
          "code": "-- Sequential execution\ntac1; tac2     -- Do tac1 then tac2\n\n-- All goals\nall_goals tac  -- Apply tac to all goals\n\n-- Focus on goals\n\u00b7 tac          -- Focus on first goal\nnext => tac    -- Focus on n"
        },
        {
          "language": "lean",
          "line_count": 29,
          "complexity": "medium",
          "code": "-- Implication\nP \u2192 Q         -- Function type\nfun h => ...  -- Proof (term mode)\nintro h       -- Proof (tactic mode)\n\n-- Conjunction\nP \u2227 Q         -- And.intro : P \u2192 Q \u2192 P \u2227 Q\n\u27e8hp, hq\u27e9      -- Constr"
        },
        {
          "language": "lean",
          "line_count": 8,
          "complexity": "simple",
          "code": "rfl           -- a = a\nh.symm        -- a = b \u2192 b = a\nrw [h]        -- Rewrite using h : a = b\nrw [\u2190h]       -- Rewrite backwards\ncalc          -- Chain equalities\n  a = b := h1\n  _ = c := h2\n"
        },
        {
          "language": "lean",
          "line_count": 14,
          "complexity": "simple",
          "code": "-- By cases\ncases h with\n| case1 => ...\n| case2 => ...\n\n-- By induction\ninduction n with\n| zero => ...\n| succ n ih => ...\n\n-- Let binding\nlet x := value\nshow goal\n"
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "simple",
          "code": "-- BAD: Verbose tactic proof\nexample : p \u2192 p := by\n  intro h\n  have h2 : p := h\n  exact h2\n\n-- GOOD: Direct term\nexample : p \u2192 p := fun h => h\n\n-- GOOD: Minimal tactics\nexample : p \u2192 p := by intro h; "
        },
        {
          "language": "lean",
          "line_count": 10,
          "complexity": "simple",
          "code": "-- BAD: Explicit types everywhere\nexample : (fun (x : Nat) => (x : Nat) + (0 : Nat)) = (fun (x : Nat) => x) := by\n  funext (x : Nat)\n  simp\n\n-- GOOD: Let Lean infer\nexample : (fun x => x + 0) = (fun x"
        },
        {
          "language": "lean",
          "line_count": 9,
          "complexity": "simple",
          "code": "-- BAD: Building complex terms manually\nexample : p \u2227 q \u2192 q \u2227 p :=\n  fun h => And.intro (And.right h) (And.left h)\n\n-- GOOD: Use tactics for clarity\nexample : p \u2227 q \u2192 q \u2227 p := by\n  intro \u27e8hp, hq\u27e9\n  ex"
        },
        {
          "language": "lean",
          "line_count": 20,
          "complexity": "simple",
          "code": "-- BAD: All tactics at same level\nexample : p \u2228 q \u2192 q \u2228 p := by\n  intro h\n  cases h\n  right\n  assumption\n  left\n  assumption\n\n-- GOOD: Use bullets for structure\nexample : p \u2228 q \u2192 q \u2228 p := by\n  intro h"
        },
        {
          "language": "lean",
          "line_count": 13,
          "complexity": "simple",
          "code": "-- BAD: Leaving sorries\ntheorem important_theorem : P := by\n  sorry  -- TODO: prove this later\n\n-- GOOD: Use admit only for exploration, remove before committing\n-- GOOD: Break into lemmas with clear "
        },
        {
          "language": "lean",
          "line_count": 17,
          "complexity": "simple",
          "code": "-- Modus tollens\ntheorem modus_tollens : (p \u2192 q) \u2192 \u00acq \u2192 \u00acp := by\n  intro hpq hnq hp\n  exact hnq (hpq hp)\n\n-- Hypothetical syllogism\ntheorem hyp_syllogism : (p \u2192 q) \u2192 (q \u2192 r) \u2192 (p \u2192 r) := by\n  intro hp"
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "simple",
          "code": "-- Swap quantifiers\ntheorem forall_swap : (\u2200 x y, P x y) \u2192 (\u2200 y x, P x y) := by\n  intro h y x\n  exact h x y\n\n-- Distribute quantifier over conjunction\ntheorem forall_and : (\u2200 x, P x \u2227 Q x) \u2192 (\u2200 x, P x"
        },
        {
          "language": "lean",
          "line_count": 15,
          "complexity": "simple",
          "code": "-- Addition is commutative (using built-in)\nexample (m n : Nat) : m + n = n + m := Nat.add_comm m n\n\n-- Zero is right identity\ntheorem add_zero (n : Nat) : n + 0 = n := by\n  induction n with\n  | zero "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh"
        },
        {
          "type": "external",
          "url": "https://lean-lang.org/lean4/doc/"
        },
        {
          "type": "external",
          "url": "https://lean-lang.org/theorem_proving_in_lean4/"
        },
        {
          "type": "external",
          "url": "https://lean-lang.org/functional_programming_in_lean/"
        },
        {
          "type": "external",
          "url": "https://adam.math.hhu.de/#/g/leanprover-community/nng4"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "30 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "2 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 62.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "formal/lean-theorem-proving.md",
      "category": "formal",
      "skill_name": "lean-theorem-proving",
      "frontmatter": {
        "name": "formal-lean-theorem-proving",
        "description": "Formalizing complex mathematics"
      },
      "metrics": {
        "line_count": 686,
        "code_line_count": 243,
        "code_examples": 30,
        "external_refs": 5,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Lean 4 with mathlib4\nlake +leanprover/lean4:nightly-2024-01-15 new my_formalization math\ncd my_formalization\nlake exe cache get\nlake build\n"
        },
        {
          "language": "lean",
          "line_count": 25,
          "complexity": "medium",
          "code": "-- Simple inductive type\ninductive MyNat where\n  | zero : MyNat\n  | succ : MyNat \u2192 MyNat\n\n-- Indexed inductive type (dependent)\ninductive Vec (\u03b1 : Type u) : Nat \u2192 Type u where\n  | nil : Vec \u03b1 0\n  | co"
        },
        {
          "language": "lean",
          "line_count": 25,
          "complexity": "medium",
          "code": "-- Well-founded relation\ndef sizeOf_list {\u03b1 : Type} : List \u03b1 \u2192 Nat\n  | [] => 0\n  | _::xs => 1 + sizeOf_list xs\n\n-- Structural recursion (automatic termination)\ndef length {\u03b1 : Type} : List \u03b1 \u2192 Nat\n  |"
        },
        {
          "language": "lean",
          "line_count": 28,
          "complexity": "medium",
          "code": "-- Define equivalence relation\ndef IntEqv : (Nat \u00d7 Nat) \u2192 (Nat \u00d7 Nat) \u2192 Prop :=\n  fun (a, b) (c, d) => a + d = b + c\n\n-- Prove it's an equivalence\ninstance : Setoid (Nat \u00d7 Nat) where\n  r := IntEqv\n  i"
        },
        {
          "language": "lean",
          "line_count": 18,
          "complexity": "simple",
          "code": "-- Decidable propositions via computation\ndef isEven (n : Nat) : Bool :=\n  n % 2 == 0\n\n-- Reflect to proposition\ntheorem even_4 : isEven 4 = true := rfl\n\n-- General reflection pattern\ntheorem even_iff"
        },
        {
          "language": "lean",
          "line_count": 20,
          "complexity": "simple",
          "code": "-- Define accessibility predicate\ninductive Acc {\u03b1 : Type} (r : \u03b1 \u2192 \u03b1 \u2192 Prop) : \u03b1 \u2192 Prop where\n  | intro : (\u2200 y, r y x \u2192 Acc r y) \u2192 Acc r x\n\n-- Prove well-foundedness\ntheorem natLt_wf : WellFounded (\u00b7"
        },
        {
          "language": "lean",
          "line_count": 13,
          "complexity": "simple",
          "code": "-- Size-indexed vector operations\ndef Vec.append {\u03b1 : Type} : Vec \u03b1 m \u2192 Vec \u03b1 n \u2192 Vec \u03b1 (m + n)\n  | .nil, ys => ys\n  | .cons x xs, ys => .cons x (xs.append ys)\n\n-- Type-safe head\ndef Vec.head {\u03b1 : Typ"
        },
        {
          "language": "lean",
          "line_count": 13,
          "complexity": "simple",
          "code": "-- Existential without data\nstructure Nonempty (\u03b1 : Type u) : Prop where\n  intro :: (val : \u03b1)\n\n-- Use for proof irrelevance\ntheorem exists_of_nonempty {\u03b1 : Type} {p : \u03b1 \u2192 Prop}\n    (h : Nonempty \u03b1) : "
        },
        {
          "language": "lean",
          "line_count": 13,
          "complexity": "simple",
          "code": "-- Simple tactic macro\nmacro \"solve_nat_eq\" : tactic =>\n  `(tactic| omega)\n\nexample (n : Nat) : n + 0 = n := by solve_nat_eq\n\n-- Macro with arguments\nmacro \"rw_all\" t:term : tactic =>\n  `(tactic| rw ["
        },
        {
          "language": "lean",
          "line_count": 17,
          "complexity": "simple",
          "code": "-- Define custom induction principle\ntheorem nat_strong_induction {p : Nat \u2192 Prop}\n    (h : \u2200 n, (\u2200 m, m < n \u2192 p m) \u2192 p n) :\n    \u2200 n, p n := by\n  intro n\n  suffices \u2200 m, m < n \u2192 p m from h n this\n  in"
        },
        {
          "language": "lean",
          "line_count": 16,
          "complexity": "simple",
          "code": "-- Infinite streams (coinductive)\ncoinductive Stream (\u03b1 : Type u) : Type u where\n  | cons : \u03b1 \u2192 Stream \u03b1 \u2192 Stream \u03b1\n\n-- Operations on streams\ndef Stream.head : Stream \u03b1 \u2192 \u03b1\n  | .cons x _ => x\n\ndef Str"
        },
        {
          "language": "lean",
          "line_count": 15,
          "complexity": "simple",
          "code": "-- Use Subtype for computationally relevant data\ndef Pos : Type := { n : Nat // n > 0 }\n\ndef Pos.toNat (p : Pos) : Nat := p.val\n\n-- Proofs are irrelevant\ntheorem pos_eq_of_val_eq (p q : Pos) (h : p.va"
        },
        {
          "language": "lean",
          "line_count": 20,
          "complexity": "simple",
          "code": "-- Mutually recursive functions\nmutual\n  def even : Nat \u2192 Bool\n    | 0 => true\n    | n+1 => odd n\n\n  def odd : Nat \u2192 Bool\n    | 0 => false\n    | n+1 => even n\nend\n\n-- Prove properties mutually\nmutual\n"
        },
        {
          "language": "lean",
          "line_count": 20,
          "complexity": "complex",
          "code": "-- Abstract interface\nclass Functor (F : Type u \u2192 Type v) where\n  map : (\u03b1 \u2192 \u03b2) \u2192 F \u03b1 \u2192 F \u03b2\n  map_id : map (id : \u03b1 \u2192 \u03b1) = id\n  map_comp : map (g \u2218 f) = map g \u2218 map f\n\n-- Concrete instances\ninstance : "
        },
        {
          "language": "lean",
          "line_count": 14,
          "complexity": "simple",
          "code": "-- Compose proofs\ndef proof_comp {p q r : Prop} (h1 : p \u2192 q) (h2 : q \u2192 r) : p \u2192 r :=\n  fun hp => h2 (h1 hp)\n\n-- Proof lifting\ndef lift_iff {p q : Prop} (h : p \u2194 q) : (p \u2192 r) \u2194 (q \u2192 r) :=\n  \u27e8fun hpr hq"
        },
        {
          "language": "lean",
          "line_count": 15,
          "complexity": "complex",
          "code": "-- File: MyProject/Basic.lean\n-- Foundational definitions\n\n-- File: MyProject/Properties.lean\nimport MyProject.Basic\n-- Basic properties and lemmas\n\n-- File: MyProject/Advanced.lean\nimport MyProject.P"
        },
        {
          "language": "lean",
          "line_count": 16,
          "complexity": "complex",
          "code": "-- Level 1: Raw definition\ndef raw_gcd (a b : Nat) : Nat := sorry\n\n-- Level 2: Specification\ntheorem gcd_spec (a b : Nat) :\n    (raw_gcd a b \u2223 a) \u2227\n    (raw_gcd a b \u2223 b) \u2227\n    (\u2200 d, d \u2223 a \u2192 d \u2223 b \u2192 d "
        },
        {
          "language": "lean",
          "line_count": 11,
          "complexity": "simple",
          "code": "-- Separate concerns\nnamespace IntegerProps\n  theorem add_comm : \u2200 a b : Int, a + b = b + a := sorry\n  theorem mul_comm : \u2200 a b : Int, a * b = b * a := sorry\nend IntegerProps\n\nnamespace RingProps\n  va"
        },
        {
          "language": "lean",
          "line_count": 17,
          "complexity": "simple",
          "code": "-- 1. Define constructors\ninductive MyType where\n  | constructor1 : ...\n  | constructor2 : ...\n\n-- 2. Define recursion principle (if needed)\ndef MyType.rec ...\n\n-- 3. Prove induction principle\ntheorem"
        },
        {
          "language": "lean",
          "line_count": 10,
          "complexity": "simple",
          "code": "def recursiveFunction (x : \u03b1) : \u03b2 :=\n  match ... with\n  | base_case => ...\n  | recursive_case => ... recursiveFunction ...\ntermination_by measure_function x\ndecreasing_by\n  -- Prove recursive calls de"
        },
        {
          "language": "lean",
          "line_count": 14,
          "complexity": "simple",
          "code": "-- 1. Define relation\ndef myRel : \u03b1 \u2192 \u03b1 \u2192 Prop := ...\n\n-- 2. Prove equivalence\ninstance : Setoid \u03b1 where\n  r := myRel\n  iseqv := \u27e8refl_proof, symm_proof, trans_proof\u27e9\n\n-- 3. Define quotient\ndef MyQuot"
        },
        {
          "language": "lean",
          "line_count": 10,
          "complexity": "simple",
          "code": "-- BAD: Over-concrete definition\ndef list_sum_nat : List Nat \u2192 Nat\n  | [] => 0\n  | x::xs => x + list_sum_nat xs\n\n-- GOOD: Generic with type classes\ndef list_sum {\u03b1 : Type} [Add \u03b1] [Zero \u03b1] : List \u03b1 \u2192 "
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "simple",
          "code": "-- BAD: Manual proof\ntheorem add_assoc (a b c : Nat) : (a + b) + c = a + (b + c) := by\n  induction a with\n  | zero => rfl\n  | succ a ih =>\n    simp [Nat.add_succ]\n    rw [ih]\n\n-- GOOD: Use automation\n"
        },
        {
          "language": "lean",
          "line_count": 18,
          "complexity": "simple",
          "code": "-- BAD: Overly detailed\ntheorem my_theorem : p \u2227 q \u2192 q \u2227 p := by\n  intro h\n  have hp := h.left\n  have hq := h.right\n  have hq_again := hq\n  have hp_again := hp\n  exact \u27e8hq_again, hp_again\u27e9\n\n-- GOOD: C"
        },
        {
          "language": "lean",
          "line_count": 10,
          "complexity": "simple",
          "code": "-- BAD: Manual chaining\ntheorem transitivity (h1 : a = b) (h2 : b = c) (h3 : c = d) : a = d := by\n  rw [h1, h2, h3]\n\n-- GOOD: calc for clarity\ntheorem transitivity (h1 : a = b) (h2 : b = c) (h3 : c = "
        },
        {
          "language": "lean",
          "line_count": 13,
          "complexity": "simple",
          "code": "-- BAD: 100-line proof\ntheorem huge_theorem : complicated_statement := by\n  -- 100 lines of tactics\n  sorry\n\n-- GOOD: Modular with lemmas\ntheorem helper_lemma1 : ... := by ...\ntheorem helper_lemma2 : "
        },
        {
          "language": "lean",
          "line_count": 8,
          "complexity": "simple",
          "code": "-- BAD: Type errors due to universe levels\ndef bad_list_of_types : List Type := [Nat, String]\n-- Error: Type : Type 1, not Type 0\n\n-- GOOD: Explicit universe polymorphism\ndef good_wrapper {\u03b1 : Type u}"
        },
        {
          "language": "lean",
          "line_count": 32,
          "complexity": "medium",
          "code": "-- Define binary tree\ninductive Tree (\u03b1 : Type) where\n  | leaf : Tree \u03b1\n  | node : \u03b1 \u2192 Tree \u03b1 \u2192 Tree \u03b1 \u2192 Tree \u03b1\n\n-- Size function\ndef Tree.size {\u03b1 : Type} : Tree \u03b1 \u2192 Nat\n  | .leaf => 0\n  | .node _ l r"
        },
        {
          "language": "lean",
          "line_count": 20,
          "complexity": "simple",
          "code": "-- Ackermann function (classic well-founded recursion)\ndef ackermann : Nat \u2192 Nat \u2192 Nat\n  | 0, n => n + 1\n  | m + 1, 0 => ackermann m 1\n  | m + 1, n + 1 => ackermann m (ackermann (m + 1) n)\ntermination"
        },
        {
          "language": "lean",
          "line_count": 26,
          "complexity": "medium",
          "code": "-- Rational numbers as quotient\ndef RatEqv : (Int \u00d7 Int) \u2192 (Int \u00d7 Int) \u2192 Prop :=\n  fun (a, b) (c, d) => a * d = b * c\n\ninstance : Setoid (Int \u00d7 Int) where\n  r := RatEqv\n  iseqv := {\n    refl := fun (a"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://lean-lang.org/theorem_proving_in_lean4/"
        },
        {
          "type": "external",
          "url": "https://lean-lang.org/functional_programming_in_lean/"
        },
        {
          "type": "external",
          "url": "https://lean-lang.org/lean4/doc/reference.html"
        },
        {
          "type": "github",
          "url": "https://github.com/leanprover-community/mathlib4/tree/master/Archive"
        },
        {
          "type": "external",
          "url": "https://leanprover.zulipchat.com/"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "30 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 62.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "debugging/container-debugging.md",
      "category": "debugging",
      "skill_name": "container-debugging",
      "frontmatter": {
        "name": "debugging-container-debugging",
        "description": "Debugging applications inside containers using docker exec, kubectl debug, ephemeral containers, and distroless debugging techniques"
      },
      "metrics": {
        "line_count": 560,
        "code_line_count": 144,
        "code_examples": 16,
        "external_refs": 1,
        "tools_mentioned": 3,
        "config_snippets": 4
      },
      "code_examples": [
        {
          "language": "dockerfile",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Production image: Minimal, secure\nFROM gcr.io/distroless/python3-debian11\nCOPY app.py /app/\nCMD [\"/app/app.py\"]\n# No shell, no package manager, no debug tools!\n\n# Debug image: Full tooling\nFROM pyth"
        },
        {
          "language": "bash",
          "line_count": 35,
          "complexity": "medium",
          "code": "# 1. Check container status\ndocker ps -a  # Show all containers (including stopped)\ndocker inspect <container_id>  # Full container metadata\n\n# 2. View logs\ndocker logs <container_id>\ndocker logs -f <"
        },
        {
          "language": "bash",
          "line_count": 29,
          "complexity": "medium",
          "code": "# 1. Check pod status\nkubectl get pods -n <namespace>\nkubectl describe pod <pod_name> -n <namespace>\n\n# 2. View logs\nkubectl logs <pod_name> -n <namespace>\nkubectl logs <pod_name> -c <container_name> "
        },
        {
          "language": "bash",
          "line_count": 32,
          "complexity": "medium",
          "code": "# Create ephemeral debug container with all tools\nkubectl debug <pod_name> -n <namespace> \\\n  -it --image=nicolaka/netshoot \\\n  --target=<container_name>\n\n# Debug with specific debug image\nkubectl deb"
        },
        {
          "language": "yaml",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Original pod (distroless, no shell)\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-app\nspec:\n  containers:\n  - name: app\n    image: gcr.io/distroless/python3\n    command: [\"/app/main.py\"]\n\n# Debug wi"
        },
        {
          "language": "bash",
          "line_count": 32,
          "complexity": "medium",
          "code": "# Get container PID\ndocker inspect --format '{{.State.Pid}}' <container_id>\n# Or:\ndocker inspect <container_id> | jq '.[0].State.Pid'\n\n# Enter container namespaces from host\nPID=$(docker inspect --for"
        },
        {
          "language": "yaml",
          "line_count": 49,
          "complexity": "medium",
          "code": "# Deployment with debug sidecar\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:"
        },
        {
          "language": "bash",
          "line_count": 32,
          "complexity": "medium",
          "code": "# Option 1: Ephemeral container (Kubernetes 1.23+)\nkubectl debug <pod_name> \\\n  -it --image=busybox:1.35 \\\n  --target=distroless-app \\\n  --share-processes\n\n# Option 2: Debug image with same app\n# Buil"
        },
        {
          "language": "bash",
          "line_count": 32,
          "complexity": "medium",
          "code": "# Debugging DNS\nkubectl exec -it <pod_name> -- nslookup kubernetes.default\nkubectl exec -it <pod_name> -- cat /etc/resolv.conf\n\n# If no nslookup, use debug container\nkubectl debug <pod_name> -it --ima"
        },
        {
          "language": "bash",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Logs\ndocker logs <container> [-f] [--tail N] [--since TIME]\n\n# Stats\ndocker stats [<container>]\ndocker top <container>\n\n# Filesystem\ndocker exec <container> ls /app\ndocker cp <container>:/path/to/fi"
        },
        {
          "language": "bash",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Logs\nkubectl logs <pod> [-c <container>] [-f] [--previous]\n\n# Stats\nkubectl top pod <pod>\nkubectl top nodes\n\n# Filesystem\nkubectl exec <pod> -- ls /app\nkubectl cp <pod>:/path/to/file ./file\n\n# Shell"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Trace syscalls of running process\nstrace -p <pid>\n\n# Trace specific syscalls\nstrace -e trace=open,read,write -p <pid>\n\n# Trace with timestamps\nstrace -tt -p <pid>\n\n# Count syscalls\nstrace -c -p <pid"
        },
        {
          "language": "dockerfile",
          "line_count": 17,
          "complexity": "simple",
          "code": "# WRONG: Bloated production image\nFROM python:3.11-slim\nRUN apt-get update && apt-get install -y \\\n    vim curl tcpdump strace gdb  # Increases attack surface!\nCOPY app.py /app/\nCMD [\"python\", \"/app/a"
        },
        {
          "language": "yaml",
          "line_count": 15,
          "complexity": "simple",
          "code": "# WRONG: Root user in container\ncontainers:\n- name: app\n  image: my-app:latest\n  # Runs as root by default!\n\n# CORRECT: Non-root user\ncontainers:\n- name: app\n  image: my-app:latest\n  securityContext:\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: Edit code in running container\nkubectl exec -it <pod> -- vi /app/main.py  # Changes lost on restart!\n\n# CORRECT: Rebuild image with changes\ndocker build -t my-app:debug .\nkubectl set image de"
        },
        {
          "language": "yaml",
          "line_count": 17,
          "complexity": "simple",
          "code": "# WRONG: No resource limits (can OOM)\ncontainers:\n- name: app\n  image: my-app:latest\n\n# CORRECT: Define limits\ncontainers:\n- name: app\n  image: my-app:latest\n  resources:\n    requests:\n      memory: \""
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://service-name:8080/health"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "nginx",
        "docker"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 62.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/unsloth-finetuning.md",
      "category": "ml",
      "skill_name": "unsloth-finetuning",
      "frontmatter": {
        "name": "ml-unsloth-finetuning",
        "description": "Fine-tuning LLMs (Llama, Mistral, Qwen) efficiently"
      },
      "metrics": {
        "line_count": 520,
        "code_line_count": 92,
        "code_examples": 12,
        "external_refs": 5,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "from unsloth import FastLanguageModel\nimport torch\n\n# Load model with 4-bit quantization\nmodel, tokenizer = FastLanguageModel.from_pretrained(\n    model_name=\"unsloth/llama-3-8b-bnb-4bit\",\n    max_seq"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "from datasets import load_dataset\n\n# Load dataset (Alpaca format)\ndataset = load_dataset(\"yahma/alpaca-cleaned\", split=\"train\")\n\n# Format for instruction tuning\nalpaca_prompt = \"\"\"Below is an instruct"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "from trl import SFTTrainer\nfrom transformers import TrainingArguments\n\ntrainer = SFTTrainer(\n    model=model,\n    tokenizer=tokenizer,\n    train_dataset=dataset,\n    dataset_text_field=\"text\",\n    max"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "# Use with torchrun or Modal multi-GPU\nimport modal\n\napp = modal.App(\"unsloth-multi-gpu\")\n\nimage = (\n    modal.Image.debian_slim()\n    .pip_install(\"unsloth[colab-new] @ git+https://github.com/unsloth"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "medium",
          "code": "# Save LoRA adapter only (small, ~100MB)\nmodel.save_pretrained(\"lora_model\")\ntokenizer.save_pretrained(\"lora_model\")\n\n# Save merged model (full weights)\nmodel.save_pretrained_merged(\n    \"merged_model"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Enable fast inference (disables dropout, etc.)\nFastLanguageModel.for_inference(model)\n\n# Generate\ninputs = tokenizer(\n    [alpaca_prompt.format(\n        \"What is the capital of France?\",\n        \"\" "
        },
        {
          "language": "python",
          "line_count": 85,
          "complexity": "complex",
          "code": "import modal\n\napp = modal.App(\"unsloth-finetune\")\n\nimage = (\n    modal.Image.debian_slim()\n    .pip_install(\n        \"unsloth[colab-new] @ git+https://github.com/unslothai/unsloth.git\",\n        \"xform"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "# ChatML format\nchat_template = \"\"\"<|im_start|>system\n{system}<|im_end|>\n<|im_start|>user\n{user}<|im_end|>\n<|im_start|>assistant\n{assistant}<|im_end|>\"\"\"\n\ndef format_chat(examples):\n    texts = []\n   "
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Standard installation\npip install \"unsloth[colab-new] @ git+https://github.com/unslothai/unsloth.git\"\npip install xformers trl peft accelerate\n\n# For CUDA 11.8\npip install \"unsloth[cu118-ampere-new]"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# LoRA Configuration\nr = 16                    # Rank: 8-64 (higher = more params, better quality)\nlora_alpha = 16           # Usually same as r\nlora_dropout = 0          # Unsloth optimized for 0\ntar"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Enable inference mode\nFastLanguageModel.for_inference(model)\n\n# Save adapter only\nmodel.save_pretrained(\"path\")\n\n# Save merged 16-bit\nmodel.save_pretrained_merged(\"path\", tokenizer, save_method=\"mer"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c Bad: Forces FP16 on Ampere+ GPUs\nargs = TrainingArguments(fp16=True, bf16=False)\n\n# \u2705 Good: Auto-detect best dtype\nargs = TrainingArguments(\n    fp16=not torch.cuda.is_bf16_supported(),\n    bf16=t"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/unslothai/unsloth.git\""
        },
        {
          "type": "github",
          "url": "https://github.com/unslothai/unsloth.git\""
        },
        {
          "type": "github",
          "url": "https://github.com/unslothai/unsloth.git\""
        },
        {
          "type": "github",
          "url": "https://github.com/unslothai/unsloth.git\""
        },
        {
          "type": "github",
          "url": "https://github.com/unslothai/unsloth.git\""
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "12 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 62.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "containers/dockerfile-optimization.md",
      "category": "containers",
      "skill_name": "dockerfile-optimization",
      "frontmatter": {
        "name": "containers-dockerfile-optimization",
        "description": "Writing Dockerfiles for production applications"
      },
      "metrics": {
        "line_count": 674,
        "code_line_count": 236,
        "code_examples": 33,
        "external_refs": 1,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "dockerfile",
          "line_count": 6,
          "complexity": "simple",
          "code": "FROM python:3.11-slim    # Layer 1: Base image\nRUN apt-get update       # Layer 2: Package manager update\nCOPY requirements.txt    # Layer 3: Copy requirements\nRUN pip install -r req   # Layer 4: Inst"
        },
        {
          "language": "dockerfile",
          "line_count": 5,
          "complexity": "simple",
          "code": "FROM python:3.11-slim\nCOPY . .                        # Changes frequently\nRUN pip install -r requirements.txt  # Reinstalls every time\nCMD [\"python\", \"app.py\"]\n"
        },
        {
          "language": "dockerfile",
          "line_count": 6,
          "complexity": "simple",
          "code": "FROM python:3.11-slim\nCOPY requirements.txt .         # Changes rarely\nRUN pip install -r requirements.txt  # Cached unless requirements change\nCOPY . .                        # Changes frequently\nCMD"
        },
        {
          "language": "dockerfile",
          "line_count": 6,
          "complexity": "simple",
          "code": "RUN apt-get update\nRUN apt-get install -y curl\nRUN apt-get install -y git\nRUN apt-get install -y vim\nRUN rm -rf /var/lib/apt/lists/*\n"
        },
        {
          "language": "dockerfile",
          "line_count": 7,
          "complexity": "simple",
          "code": "RUN apt-get update && \\\n    apt-get install -y \\\n        curl \\\n        git \\\n        vim && \\\n    rm -rf /var/lib/apt/lists/*\n"
        },
        {
          "language": "dockerfile",
          "line_count": 5,
          "complexity": "simple",
          "code": "# \u2705 Cache pip dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\n"
        },
        {
          "language": "dockerfile",
          "line_count": 5,
          "complexity": "simple",
          "code": "# \u2705 Cache npm dependencies\nCOPY package.json pnpm-lock.yaml .\nRUN pnpm install --frozen-lockfile\nCOPY . .\n"
        },
        {
          "language": "dockerfile",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u2705 Cache Go modules\nCOPY go.mod go.sum .\nRUN go mod download\nCOPY . .\nRUN go build -o app\n"
        },
        {
          "language": "dockerfile",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u2705 Cache Cargo dependencies\nCOPY Cargo.toml Cargo.lock .\nRUN mkdir src && echo \"fn main() {}\" > src/main.rs\nRUN cargo build --release\nCOPY . .\nRUN cargo build --release\n"
        },
        {
          "language": "dockerfile",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Stage 1: Build\nFROM golang:1.21 AS builder\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux go build -o app\n\n# Stage 2: Runtime\nFROM alpine:3.19\nWORKDIR /"
        },
        {
          "language": "dockerfile",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Stage 1: Build dependencies\nFROM python:3.11 AS builder\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --user --no-cache-dir -r requirements.txt\n\n# Stage 2: Runtime\nFROM python:3.11-slim\nWORKD"
        },
        {
          "language": "dockerfile",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Stage 1: Build\nFROM node:20 AS builder\nWORKDIR /app\nCOPY package.json pnpm-lock.yaml ./\nRUN npm install -g pnpm && pnpm install --frozen-lockfile\nCOPY . .\nRUN pnpm build\n\n# Stage 2: Runtime\nFROM nod"
        },
        {
          "language": "dockerfile",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Stage 1: Build\nFROM node:20 AS builder\nWORKDIR /app\nCOPY package.json pnpm-lock.yaml ./\nRUN npm install -g pnpm && pnpm install\nCOPY . .\nRUN pnpm build\n\n# Stage 2: Serve with nginx\nFROM nginx:alpine"
        },
        {
          "language": "dockerfile",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Build stage\nFROM golang:1.21 AS builder\nWORKDIR /app\nCOPY . .\nRUN CGO_ENABLED=0 go build -o app\n\n# Runtime stage with distroless\nFROM gcr.io/distroless/static-debian12\nCOPY --from=builder /app/app /"
        },
        {
          "language": "dockerfile",
          "line_count": 11,
          "complexity": "simple",
          "code": "RUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        build-essential \\\n        curl && \\\n    # Build app \\\n    make build && \\\n    # Clean up in same layer \\\n    apt-get pu"
        },
        {
          "language": "dockerfile",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Python\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Alpine apk\nRUN apk add --no-cache curl git\n\n# Debian/Ubuntu apt\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends cu"
        },
        {
          "language": "dockerfile",
          "line_count": 2,
          "complexity": "simple",
          "code": "COPY . .\n"
        },
        {
          "language": "dockerfile",
          "line_count": 5,
          "complexity": "simple",
          "code": "COPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY src/ ./src/\nCOPY config/ ./config/\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Linux/Mac\nexport DOCKER_BUILDKIT=1\ndocker build .\n\n# Or per-command\nDOCKER_BUILDKIT=1 docker build .\n"
        },
        {
          "language": "dockerfile",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Python with cache mount\nFROM python:3.11-slim\nCOPY requirements.txt .\nRUN --mount=type=cache,target=/root/.cache/pip \\\n    pip install -r requirements.txt\n"
        },
        {
          "language": "dockerfile",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Clone private repo without embedding SSH key\nFROM golang:1.21\nRUN --mount=type=ssh \\\n    git clone git@github.com:private/repo.git\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "docker build --ssh default .\n"
        },
        {
          "language": "dockerfile",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Use secret without embedding in layer\nFROM alpine\nRUN --mount=type=secret,id=github_token \\\n    wget --header=\"Authorization: token $(cat /run/secrets/github_token)\" \\\n    https://api.github.com/rep"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "docker build --secret id=github_token,src=$HOME/.github_token .\n"
        },
        {
          "language": "dockerfile",
          "line_count": 18,
          "complexity": "simple",
          "code": "FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application\nCOPY . .\n\n# Non-root user\nRUN useradd -m appu"
        },
        {
          "language": "dockerfile",
          "line_count": 18,
          "complexity": "simple",
          "code": "FROM node:20-slim\n\nWORKDIR /app\n\n# Install dependencies\nCOPY package.json pnpm-lock.yaml ./\nRUN npm install -g pnpm && pnpm install --frozen-lockfile --prod\n\n# Copy application\nCOPY . .\n\n# Non-root us"
        },
        {
          "language": "dockerfile",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Build stage\nFROM golang:1.21 AS builder\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux go build -ldflags=\"-w -s\" -o app\n\n# Runtime stage\nFROM scratch\nCO"
        },
        {
          "language": "dockerfile",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Build stage\nFROM rust:1.75 AS builder\nWORKDIR /app\nCOPY Cargo.toml Cargo.lock ./\nRUN mkdir src && echo \"fn main() {}\" > src/main.rs\nRUN cargo build --release\nCOPY . .\nRUN cargo build --release\n\n# Ru"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Install\nbrew install hadolint\n\n# Lint Dockerfile\nhadolint Dockerfile\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Install\nbrew install dive\n\n# Analyze image\ndive myimage:latest\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Show layer sizes\ndocker history myimage:latest\n\n# Show layer commands\ndocker history --no-trunc myimage:latest\n"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Basic build\ndocker build -t myapp:latest .\n\n# BuildKit build\nDOCKER_BUILDKIT=1 docker build -t myapp:latest .\n\n# Build with secrets\ndocker build --secret id=token,src=./token.txt -t myapp .\n\n# Build"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Show layers\ndocker history myapp:latest\n\n# Inspect image\ndocker inspect myapp:latest\n\n# Analyze with dive\ndive myapp:latest\n\n# Lint Dockerfile\nhadolint Dockerfile\n"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://api.github.com/repos/private/repo/tarball"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "nginx",
        "docker"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "33 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        }
      ],
      "priority_score": 62.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ir/ir-vector-search.md",
      "category": "ir",
      "skill_name": "ir-vector-search",
      "frontmatter": {
        "name": "ir-vector-search",
        "description": "Dense retrieval using embeddings, vector databases, approximate nearest neighbors, and hybrid search"
      },
      "metrics": {
        "line_count": 677,
        "code_line_count": 116,
        "code_examples": 16,
        "external_refs": 2,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "from sentence_transformers import SentenceTransformer\nimport numpy as np\n\n# Load embedding model\nmodel = SentenceTransformer('all-MiniLM-L6-v2')  # 384 dimensions\n\n# Encode documents\ndocuments = [\n   "
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "import chromadb\nfrom chromadb.config import Settings\n\n# Initialize Chroma (local, persistent)\nclient = chromadb.Client(Settings(\n    chroma_db_impl=\"duckdb+parquet\",\n    persist_directory=\"./chroma_db"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "import faiss\nimport numpy as np\n\n# Build IVF index with FAISS\ndimension = 384\nnlist = 100  # Number of clusters\n\n# Create index\nquantizer = faiss.IndexFlatL2(dimension)  # L2 distance\nindex = faiss.In"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "# Configure metric in Pinecone\nimport pinecone\n\npinecone.init(api_key=\"your-api-key\")\n\n# Cosine similarity (most common for text)\npinecone.create_index(\n    \"documents\",\n    dimension=384,\n    metric="
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "# \u274c Bad: Encode one at a time (slow)\nembeddings = []\nfor doc in documents:\n    emb = model.encode(doc)\n    embeddings.append(emb)\n\n# \u2705 Good: Batch encoding (10-100x faster)\nembeddings = model.encode(\n"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "from weaviate import Client\n\nclient = Client(\"http://localhost:8080\")\n\n# Create schema with hybrid search enabled\nschema = {\n    \"class\": \"Article\",\n    \"vectorizer\": \"text2vec-transformers\",\n    \"pro"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "import qdrant_client\nfrom qdrant_client.models import Distance, VectorParams, Filter, FieldCondition\n\n# Initialize Qdrant\nclient = qdrant_client.QdrantClient(host=\"localhost\", port=6333)\n\n# Create col"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "from sentence_transformers import SentenceTransformer\n\n# \u2705 General purpose, fast (384 dim)\nmodel_general = SentenceTransformer('all-MiniLM-L6-v2')\n\n# \u2705 High quality, slower (768 dim)\nmodel_quality = S"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "# Pinecone incremental updates\nimport pinecone\n\npinecone.init(api_key=\"your-key\", environment=\"us-west1-gcp\")\nindex = pinecone.Index(\"documents\")\n\n# Upsert new vectors (inserts or updates)\nindex.upser"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "# \u2705 Query expansion: add related terms\nfrom sentence_transformers import SentenceTransformer, util\n\nmodel = SentenceTransformer('all-MiniLM-L6-v2')\n\ndef expand_query(query, corpus_embeddings, corpus_d"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "import faiss\n\n# \u2705 Exact search (brute force)\nindex_exact = faiss.IndexFlatL2(dimension)\nindex_exact.add(embeddings.astype('float32'))\n\n# Search all vectors (slow but 100% accurate)\ndistances, indices "
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "# \u274c NEVER: Store raw text in vector DB without chunking\nlong_document = \"...\" * 10000  # 50k words\nembedding = model.encode(long_document)  # Loses information, poor quality\n\n# \u2705 CORRECT: Chunk docume"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c Don't: Use wrong metric for normalized embeddings\n# Sentence-transformers normalize embeddings by default\nindex = faiss.IndexFlatL2(dimension)  # L2 distance (wrong for normalized)\n\n# \u2705 Correct: U"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u274c Don't: Rebuild entire index for small updates\n# Bad: Re-embed and rebuild for every new document\nall_docs.append(new_doc)\nall_embeddings = model.encode(all_docs)  # Re-encodes everything\nindex = b"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c Don't: Ignore query-document asymmetry\n# Same encoder for \"What is ML?\" and \"Machine learning is...\"\nmodel = SentenceTransformer('all-MiniLM-L6-v2')\nquery_emb = model.encode(\"What is ML?\")\ndoc_emb"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "# \u274c Don't: Store embeddings without metadata\nindex.upsert(id=\"doc1\", vector=embedding.tolist())\n# Later: No way to filter by category, date, etc.\n\n# \u2705 Correct: Always include useful metadata\nindex.ups"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "http://localhost:8080\""
        },
        {
          "type": "external",
          "url": "https://...\""
        }
      ],
      "tools_mentioned": [
        "postgres",
        "ssl"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 62.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "debugging/crash-debugging.md",
      "category": "debugging",
      "skill_name": "crash-debugging",
      "frontmatter": {
        "name": "debugging-crash-debugging",
        "description": "Signal handling, crash reproduction, fuzzing for crash discovery, telemetry aggregation, and post-mortem workflows"
      },
      "metrics": {
        "line_count": 767,
        "code_line_count": 145,
        "code_examples": 18,
        "external_refs": 2,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "c",
          "line_count": 20,
          "complexity": "simple",
          "code": "#include <signal.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid signal_handler(int sig) {\n    fprintf(stderr, \"Caught signal %d (%s)\\n\", sig, strsignal(sig));\n    // Log crash, generate backtrace, cl"
        },
        {
          "language": "c",
          "line_count": 34,
          "complexity": "medium",
          "code": "// Linux: backtrace() from execinfo.h\n#include <execinfo.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <signal.h>\n\nvoid print_backtrace() {\n    void *array[20];\n    size_t size = backtrace(array,"
        },
        {
          "language": "cpp",
          "line_count": 9,
          "complexity": "simple",
          "code": "#include <stacktrace>\n#include <iostream>\n\nvoid crash_handler(int sig) {\n    std::cerr << \"Caught signal \" << sig << \"\\n\";\n    std::cerr << std::stacktrace::current() << \"\\n\";\n    std::exit(1);\n}\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "# \u274c Bug report: \"App crashes when processing data\"\n# Not reproducible (what data? what operation?)\n\n# \u2705 Minimal reproduction\nimport app\n\n# Trigger crash with minimal input\ndata = {\"user_id\": None}  # "
        },
        {
          "language": "c",
          "line_count": 66,
          "complexity": "complex",
          "code": "#include <signal.h>\n#include <execinfo.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <time.h>\n\nstatic void write_crash_log(int sig, void *addr) {\n    char filename[256];\n    t"
        },
        {
          "language": "cpp",
          "line_count": 46,
          "complexity": "medium",
          "code": "#include <exception>\n#include <signal.h>\n#include <execinfo.h>\n#include <iostream>\n\nvoid signal_handler(int sig) {\n    std::cerr << \"Signal \" << sig << \" caught\\n\";\n\n    void *array[20];\n    size_t si"
        },
        {
          "language": "bash",
          "line_count": 27,
          "complexity": "medium",
          "code": "# Install AFL++\ngit clone https://github.com/AFLplusplus/AFLplusplus\ncd AFLplusplus\nmake\nsudo make install\n\n# Compile target with AFL instrumentation\nafl-gcc -g -O0 -fsanitize=address target.c -o targ"
        },
        {
          "language": "c",
          "line_count": 23,
          "complexity": "medium",
          "code": "// target.c - vulnerable program\n#include <stdio.h>\n#include <string.h>\n\nint main(int argc, char **argv) {\n    if (argc != 2) {\n        return 1;\n    }\n\n    FILE *f = fopen(argv[1], \"r\");\n    if (!f) "
        },
        {
          "language": "cpp",
          "line_count": 16,
          "complexity": "simple",
          "code": "// fuzz_target.cpp\n#include <stdint.h>\n#include <stddef.h>\n\n// Fuzz entry point (called by libFuzzer)\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n    if (size < 4) {\n    "
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Compile with libFuzzer and ASan\nclang++ -g -O1 -fsanitize=fuzzer,address fuzz_target.cpp -o fuzz_target\n\n# Run fuzzer\n./fuzz_target\n\n# LibFuzzer output:\n# #1      INITED cov: 42 ft: 56 corp: 1/1b ex"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "# Using Sentry for crash aggregation\nimport sentry_sdk\n\nsentry_sdk.init(\n    dsn=\"https://example@o0.ingest.sentry.io/0\",\n    environment=\"production\",\n    release=\"myapp@1.0.0\",\n)\n\n# Automatic crash "
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "# Crash report from production:\n# Stack trace shows: process_message() \u2192 parse_json() \u2192 crash\n\n# Step 1: Extract minimal failing input\ndef test_crash_reproduction():\n    # From logs: \"Processing messa"
        },
        {
          "language": "c",
          "line_count": 42,
          "complexity": "medium",
          "code": "#include <sys/resource.h>\n#include <stdio.h>\n\nvoid check_stack_limit() {\n    struct rlimit rl;\n    getrlimit(RLIMIT_STACK, &rl);\n\n    printf(\"Stack limit: %ld bytes (soft), %ld bytes (hard)\\n\",\n      "
        },
        {
          "language": "rust",
          "line_count": 12,
          "complexity": "simple",
          "code": "// Rust detects stack overflow and panics\nfn recursive_function(depth: u32) {\n    let _buffer = [0u8; 1024];  // Stack allocation\n\n    if depth < 1_000_000 {\n        recursive_function(depth + 1);\n   "
        },
        {
          "language": "markdown",
          "line_count": 6,
          "complexity": "simple",
          "code": "## Crash Report: SIGSEGV in process_request()\n\n**Signature**: `process_request() \u2192 parse_header() \u2192 strlen(NULL)`\n\n**Stack Trace**:\n"
        },
        {
          "language": "c",
          "line_count": 12,
          "complexity": "simple",
          "code": "// \u274c NEVER: Empty signal handler (hides crashes)\nvoid signal_handler(int sig) {\n    // Do nothing - crash ignored!\n}\n\n// \u2705 CORRECT: Log and abort\nvoid signal_handler(int sig) {\n    write(STDERR_FILENO"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# \u274c Don't: Generic exception handling (hides crashes)\ntry:\n    process_data(user_input)\nexcept Exception:\n    pass  # \u274c Silently ignores all errors\n\n# \u2705 Correct: Catch specific exceptions, log unknown"
        },
        {
          "language": "cpp",
          "line_count": 13,
          "complexity": "simple",
          "code": "// \u274c Don't: Allocate memory in signal handler\nvoid crash_handler(int sig) {\n    std::string msg = \"Crash!\";  // \u274c Allocates memory (unsafe)\n    std::cout << msg << std::endl;  // \u274c Not async-signal-sa"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/AFLplusplus/AFLplusplus"
        },
        {
          "type": "external",
          "url": "https://example@o0.ingest.sentry.io/0\""
        }
      ],
      "tools_mentioned": [
        "pytest",
        "sentry"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 62.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cicd/ci-security.md",
      "category": "cicd",
      "skill_name": "ci-security",
      "frontmatter": {
        "name": "cicd-ci-security",
        "description": "Managing secrets and credentials in CI/CD pipelines"
      },
      "metrics": {
        "line_count": 778,
        "code_line_count": 201,
        "code_examples": 23,
        "external_refs": 2,
        "tools_mentioned": 2,
        "config_snippets": 22
      },
      "code_examples": [
        {
          "language": "yaml",
          "line_count": 31,
          "complexity": "medium",
          "code": "name: Secure Secrets\n\non: [push]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment: production\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Access secrets from environment\n      - "
        },
        {
          "language": "yaml",
          "line_count": 59,
          "complexity": "complex",
          "code": "name: OIDC Deploy\n\non: [push]\n\npermissions:\n  id-token: write  # Required for OIDC\n  contents: read\n\njobs:\n  deploy-aws:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n     "
        },
        {
          "language": "yaml",
          "line_count": 73,
          "complexity": "complex",
          "code": "name: Dependency Security\n\non:\n  pull_request:\n  schedule:\n    - cron: '0 0 * * *'  # Daily\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request'\n\n    step"
        },
        {
          "language": "yaml",
          "line_count": 71,
          "complexity": "complex",
          "code": "name: SBOM and Provenance\n\non:\n  push:\n    branches: [main]\n  release:\n    types: [published]\n\njobs:\n  sbom:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Generate "
        },
        {
          "language": "yaml",
          "line_count": 58,
          "complexity": "complex",
          "code": "name: Container Security\n\non: [push]\n\njobs:\n  scan:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Build image\n      - name: Build Docker image\n        run: docker b"
        },
        {
          "language": "yaml",
          "line_count": 72,
          "complexity": "complex",
          "code": "name: Code Security Scanning\n\non:\n  push:\n    branches: [main]\n  pull_request:\n  schedule:\n    - cron: '0 0 * * 0'  # Weekly\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    permissions:\n      security"
        },
        {
          "language": "yaml",
          "line_count": 34,
          "complexity": "medium",
          "code": "name: Secret Detection\n\non: [push, pull_request]\n\njobs:\n  scan-secrets:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      # Gitleak"
        },
        {
          "language": "yaml",
          "line_count": 37,
          "complexity": "medium",
          "code": "name: Minimal Permissions\n\non: [push]\n\n# Default: read-only\npermissions:\n  contents: read\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    # Explicit minimal permissions\n    permissions:\n      contents:"
        },
        {
          "language": "yaml",
          "line_count": 48,
          "complexity": "medium",
          "code": "name: Security Gates\n\non:\n  pull_request:\n  push:\n    branches: [main]\n\njobs:\n  security-gate:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Gate 1: No secrets\n    "
        },
        {
          "language": "yaml",
          "line_count": 44,
          "complexity": "medium",
          "code": "name: Security Audit\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  audit:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Log security-relevant events\n  "
        },
        {
          "language": "bash",
          "line_count": 23,
          "complexity": "medium",
          "code": "# 1. Create OIDC provider in AWS\naws iam create-open-id-connect-provider \\\n  --url https://token.actions.githubusercontent.com \\\n  --client-id-list sts.amazonaws.com\n\n# 2. Create IAM role with trust p"
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "Secrets:         gitleaks, trufflehog, detect-secrets\nDependencies:    npm audit, snyk, dependabot\nContainers:      trivy, grype, snyk container\nCode (SAST):     codeql, semgrep, sonarcloud\nLicense:  "
        },
        {
          "language": "yaml",
          "line_count": 4,
          "complexity": "simple",
          "code": "Development:  Allow MEDIUM and below\nStaging:      Allow LOW and below\nProduction:   Block HIGH and CRITICAL\n"
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: Secrets in logs\n- run: echo \"API Key: ${{ secrets.API_KEY }}\"\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# CORRECT: Never log secrets\n- run: echo \"Deploying with credentials\"\n  env:\n    API_KEY: ${{ secrets.API_KEY }}\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# WRONG: Static credentials\n- env:\n    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY }}\n    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET }}\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# CORRECT: OIDC\n- uses: aws-actions/configure-aws-credentials@v4\n  with:\n    role-to-assume: ${{ secrets.AWS_ROLE }}\n"
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: Write access to everything\npermissions: write-all\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# CORRECT: Minimal permissions\npermissions:\n  contents: read\n  id-token: write\n"
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: Deploy without scanning\n- run: docker push myapp:latest\n"
        },
        {
          "language": "yaml",
          "line_count": 4,
          "complexity": "simple",
          "code": "# CORRECT: Scan before push\n- run: trivy image --exit-code 1 myapp:latest\n- run: docker push myapp:latest\n"
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: Bypass security\n- run: npm audit || true\n"
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# CORRECT: Fail on vulnerabilities\n- run: npm audit --audit-level=moderate\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://logs.example.com/api/events"
        },
        {
          "type": "external",
          "url": "https://token.actions.githubusercontent.com"
        }
      ],
      "tools_mentioned": [
        "apache",
        "docker"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "23 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 62.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cloud/gcp/gcp-iam-security.md",
      "category": "cloud",
      "skill_name": "gcp-iam-security",
      "frontmatter": {
        "name": "cloud-gcp-iam-security",
        "description": "Google Cloud IAM, service accounts, Secret Manager, and Cloud KMS security practices"
      },
      "metrics": {
        "line_count": 635,
        "code_line_count": 111,
        "code_examples": 18,
        "external_refs": 2,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Grant user a predefined role at project level\ngcloud projects add-iam-policy-binding my-project \\\n  --member=user:alice@example.com \\\n  --role=roles/compute.instanceAdmin.v1\n\n# Grant service account"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "from google.cloud import iam_admin_v1\nfrom google.oauth2 import service_account\n\n# Create service account\ndef create_service_account(project_id, account_id, display_name):\n    client = iam_admin_v1.IA"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "from google.cloud import secretmanager\n\ndef create_secret(project_id, secret_id, secret_value):\n    client = secretmanager.SecretManagerServiceClient()\n\n    # Create secret\n    parent = f\"projects/{pr"
        },
        {
          "language": "python",
          "line_count": 53,
          "complexity": "complex",
          "code": "from google.cloud import kms\n\ndef create_key_ring_and_key(project_id, location_id, key_ring_id, key_id):\n    client = kms.KeyManagementServiceClient()\n\n    # Create key ring\n    location_name = f\"proj"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "# \u274c Bad: Grant broad access without conditions\n# Member can access from anywhere, anytime\ngcloud projects add-iam-policy-binding my-project \\\n  --member=user:contractor@example.com \\\n  --role=roles/co"
        },
        {
          "language": "bash",
          "line_count": 28,
          "complexity": "complex",
          "code": "# \u274c Bad: Download service account key and share with developers\ngcloud iam service-accounts keys create key.json \\\n  --iam-account=app@my-project.iam.gserviceaccount.com\n# Key can be leaked, no audit "
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "from google.cloud import secretmanager\n\ndef rotate_secret(project_id, secret_id, new_value):\n    client = secretmanager.SecretManagerServiceClient()\n\n    # Add new version\n    secret_name = f\"projects"
        },
        {
          "language": "bash",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Disable service account key creation organization-wide\ngcloud resource-manager org-policies set-policy \\\n  --organization=ORGANIZATION_ID \\\n  policy.yaml\n\n# policy.yaml\nconstraint: constraints/iam.d"
        },
        {
          "language": "bash",
          "line_count": 34,
          "complexity": "medium",
          "code": "# \u274c Bad: Mount service account key as Kubernetes secret\nkubectl create secret generic gcp-key \\\n  --from-file=key.json=./service-account-key.json\n# Key can be extracted from cluster\n\n# \u2705 Good: Use Wor"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "from google.cloud import logging\n\ndef query_admin_activity_logs(project_id, hours=24):\n    client = logging.Client(project=project_id)\n\n    # Query admin activity logs\n    filter_str = f\"\"\"\n        lo"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Create log sink to export logs to Cloud Storage\ngcloud logging sinks create audit-logs-sink \\\n  storage.googleapis.com/audit-logs-bucket \\\n  --log-filter='logName:\"cloudaudit.googleapis.com\"'\n"
        },
        {
          "language": "bash",
          "line_count": 25,
          "complexity": "medium",
          "code": "# Create access policy\ngcloud access-context-manager policies create \\\n  --organization=ORGANIZATION_ID \\\n  --title=\"Corporate Policy\"\n\n# Create access level (who can access)\ngcloud access-context-man"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# List IAM recommendations\ngcloud recommender recommendations list \\\n  --project=my-project \\\n  --location=global \\\n  --recommender=google.iam.policy.Recommender\n\n# Apply recommendation to remove unus"
        },
        {
          "language": "bash",
          "line_count": 19,
          "complexity": "simple",
          "code": "# IAM\ngcloud projects add-iam-policy-binding PROJECT --member=MEMBER --role=ROLE\ngcloud projects get-iam-policy PROJECT\ngcloud projects remove-iam-policy-binding PROJECT --member=MEMBER --role=ROLE\n\n#"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# \u274c NEVER: Grant Owner role to service accounts\ngcloud projects add-iam-policy-binding my-project \\\n  --member=serviceAccount:app@my-project.iam.gserviceaccount.com \\\n  --role=roles/owner\n# Service ac"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "# \u274c Don't: Hardcode secrets in code\nDATABASE_PASSWORD = \"super_secret_password\"  # Exposed in source control!\n\n# \u2705 Correct: Load from Secret Manager\nfrom google.cloud import secretmanager\n\nclient = se"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c Don't: Create service account keys unnecessarily\ngcloud iam service-accounts keys create key.json \\\n  --iam-account=app@my-project.iam.gserviceaccount.com\n# Keys can be leaked, hard to rotate\n\n# \u2705"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# \u274c Don't: Disable organization policies to \"get things working\"\ngcloud resource-manager org-policies disable-enforce \\\n  constraints/compute.requireOsLogin \\\n  --organization=ORG_ID\n# Opens security "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://www.googleapis.com/auth/cloud-platform']"
        },
        {
          "type": "external",
          "url": "https://www.googleapis.com/auth/cloud-platform']"
        }
      ],
      "tools_mentioned": [
        "kubernetes",
        "oauth"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 62.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cloud/aws/aws-networking.md",
      "category": "cloud",
      "skill_name": "aws-networking",
      "frontmatter": {
        "name": "cloud-aws-networking",
        "description": "AWS networking - VPC, subnets, security groups, NACLs, Route53, CloudFront, Transit Gateway"
      },
      "metrics": {
        "line_count": 703,
        "code_line_count": 63,
        "code_examples": 8,
        "external_refs": 0,
        "tools_mentioned": 4,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 166,
          "complexity": "complex",
          "code": "import boto3\n\nec2 = boto3.client('ec2')\n\ndef create_vpc_architecture():\n    \"\"\"Create VPC with public and private subnets\"\"\"\n\n    # Create VPC\n    vpc_response = ec2.create_vpc(\n        CidrBlock='10."
        },
        {
          "language": "python",
          "line_count": 68,
          "complexity": "complex",
          "code": "def create_security_groups(vpc_id):\n    \"\"\"Create security groups for web tier and database tier\"\"\"\n\n    # Web tier security group\n    web_sg = ec2.create_security_group(\n        GroupName='web-tier-s"
        },
        {
          "language": "python",
          "line_count": 95,
          "complexity": "complex",
          "code": "import boto3\n\nroute53 = boto3.client('route53')\n\ndef create_weighted_routing():\n    \"\"\"Create weighted routing for A/B testing\"\"\"\n\n    hosted_zone_id = 'Z1234567890ABC'\n\n    # Version A (80% traffic)\n"
        },
        {
          "language": "python",
          "line_count": 74,
          "complexity": "complex",
          "code": "import boto3\n\ncloudfront = boto3.client('cloudfront')\n\ndef create_cloudfront_distribution(origin_domain, certificate_arn):\n    \"\"\"Create CloudFront distribution for S3 or ALB origin\"\"\"\n\n    response ="
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "medium",
          "code": "def create_vpc_endpoints(vpc_id, route_table_ids, subnet_ids):\n    \"\"\"Create VPC endpoints for S3 and DynamoDB\"\"\"\n\n    # Gateway endpoint for S3 (free)\n    s3_endpoint = ec2.create_vpc_endpoint(\n     "
        },
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "def create_transit_gateway():\n    \"\"\"Create Transit Gateway and attach VPCs\"\"\"\n\n    ec2 = boto3.client('ec2')\n\n    # Create Transit Gateway\n    tgw_response = ec2.create_transit_gateway(\n        Descr"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "medium",
          "code": "# \u274c NEVER: Expose database to internet\nec2.authorize_security_group_ingress(\n    GroupId=db_sg,\n    IpPermissions=[\n        {\n            'IpProtocol': 'tcp',\n            'FromPort': 5432,\n           "
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c Don't use default VPC for production\n# Default VPC has public subnets, less isolation\n\n# \u2705 Correct: Create custom VPC with proper subnet architecture\naws ec2 create-vpc --cidr-block 10.0.0.0/16\n# "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "ssl",
        "postgresql",
        "tls"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 62.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "modal/modal-volumes-secrets.md",
      "category": "modal",
      "skill_name": "modal-volumes-secrets",
      "frontmatter": {
        "name": "modal-volumes-secrets",
        "description": "Persisting data across function invocations"
      },
      "metrics": {
        "line_count": 376,
        "code_line_count": 103,
        "code_examples": 13,
        "external_refs": 2,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "import modal\n\napp = modal.App(\"volume-app\")\n\n# Create volume\nvolume = modal.Volume.from_name(\"my-data\", create_if_missing=True)\n\n@app.function(volumes={\"/data\": volume})\ndef write_data():\n    with ope"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "# Model storage\nmodel_volume = modal.Volume.from_name(\"models\", create_if_missing=True)\n\n@app.function(volumes={\"/models\": model_volume})\ndef download_model():\n    import torch\n    from transformers i"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "data_volume = modal.Volume.from_name(\"datasets\", create_if_missing=True)\n\n@app.function(volumes={\"/datasets\": data_volume}, timeout=3600)\ndef download_dataset():\n    import urllib.request\n\n    url = \""
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "# Create secret in Modal dashboard or CLI:\n# modal secret create my-secrets \\\n#   API_KEY=abc123 \\\n#   DATABASE_URL=postgresql://...\n\napp = modal.App(\"secrets-app\")\n\n@app.function(secrets=[modal.Secre"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "@app.function(secrets=[\n    modal.Secret.from_name(\"api-keys\"),\n    modal.Secret.from_name(\"database-creds\"),\n    modal.Secret.from_name(\"cloud-storage\")\n])\ndef multi_secret_function():\n    import os\n"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "@app.function(secrets=[modal.Secret.from_name(\"production-keys\")])\ndef secure_function():\n    import os\n\n    # \u2705 GOOD - Use directly\n    api_key = os.environ[\"API_KEY\"]\n    result = api_call(api_key)\n"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "download_volume = modal.Volume.from_name(\"downloads\", create_if_missing=True)\n\n@app.function(\n    volumes={\"/downloads\": download_volume},\n    secrets=[modal.Secret.from_name(\"api-keys\")]\n)\ndef authen"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "backup_volume = modal.Volume.from_name(\"backups\", create_if_missing=True)\n\n@app.function(\n    volumes={\"/backups\": backup_volume},\n    secrets=[modal.Secret.from_name(\"database-creds\")],\n    schedule="
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "@app.function(volumes={\"/data\": volume})\ndef list_files():\n    import os\n\n    files = []\n    for root, dirs, filenames in os.walk(\"/data\"):\n        for filename in filenames:\n            filepath = os"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "from datetime import datetime, timedelta\n\n@app.function(volumes={\"/cache\": cache_volume})\ndef cleanup_old_cache():\n    import os\n    from datetime import datetime\n\n    cutoff = datetime.now() - timede"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# \u274c BAD - Changes lost!\n@app.function(volumes={\"/data\": volume})\ndef bad_write():\n    with open(\"/data/file.txt\", \"w\") as f:\n        f.write(\"data\")\n    # Missing: volume.commit()\n\n# \u2705 GOOD\n@app.funct"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# \u274c BAD\n@app.function(secrets=[secret])\ndef bad():\n    api_key = os.environ[\"API_KEY\"]\n    print(f\"Key: {api_key}\")  # Logged!\n    return {\"key\": api_key}   # Exposed!\n\n# \u2705 GOOD\n@app.function(secrets="
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# \u274c BAD - Volume for temp data\n@app.function(volumes={\"/tmp\": volume})\ndef bad_temp():\n    with open(\"/tmp/temp.txt\", \"w\") as f:\n        f.write(\"temp\")\n    volume.commit()\n\n# \u2705 GOOD - Use /tmp (ephem"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com/large-dataset.zip\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/data\""
        }
      ],
      "tools_mentioned": [
        "postgres",
        "postgresql"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 62.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "mobile/ios-networking.md",
      "category": "mobile",
      "skill_name": "ios-networking",
      "frontmatter": {
        "name": "ios-networking",
        "description": "Building network layers for iOS/macOS apps"
      },
      "metrics": {
        "line_count": 752,
        "code_line_count": 102,
        "code_examples": 14,
        "external_refs": 3,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "swift",
          "line_count": 79,
          "complexity": "complex",
          "code": "actor NetworkService {\n    static let shared = NetworkService()\n\n    private let session: URLSession\n    private let baseURL: URL\n\n    init(\n        baseURL: URL = URL(string: \"https://api.example.com"
        },
        {
          "language": "swift",
          "line_count": 97,
          "complexity": "complex",
          "code": "protocol Endpoint {\n    var path: String { get }\n    var method: HTTPMethod { get }\n    var headers: [String: String]? { get }\n    var queryItems: [URLQueryItem]? { get }\n    var body: Encodable? { ge"
        },
        {
          "language": "swift",
          "line_count": 90,
          "complexity": "complex",
          "code": "actor AuthenticationService {\n    static let shared = AuthenticationService()\n\n    private var accessToken: String?\n    private var refreshToken: String?\n    private var tokenExpirationDate: Date?\n\n  "
        },
        {
          "language": "swift",
          "line_count": 30,
          "complexity": "medium",
          "code": "extension NetworkService {\n    func authenticatedRequest<T: Decodable>(\n        _ endpoint: Endpoint,\n        as type: T.Type\n    ) async throws -> T {\n        let token = try await AuthenticationServ"
        },
        {
          "language": "swift",
          "line_count": 32,
          "complexity": "medium",
          "code": "extension NetworkService {\n    func requestWithRetry<T: Decodable>(\n        _ endpoint: Endpoint,\n        as type: T.Type,\n        maxRetries: Int = 3\n    ) async throws -> T {\n        var lastError: "
        },
        {
          "language": "swift",
          "line_count": 43,
          "complexity": "medium",
          "code": "enum DomainError: LocalizedError {\n    case network(NetworkError)\n    case validation(String)\n    case notFound\n    case unauthorized\n    case serverError\n\n    init(from networkError: NetworkError) {\n"
        },
        {
          "language": "swift",
          "line_count": 76,
          "complexity": "complex",
          "code": "actor UserAPIClient {\n    private let networkService: NetworkService\n\n    init(networkService: NetworkService = .shared) {\n        self.networkService = networkService\n    }\n\n    func getUser(id: UUID"
        },
        {
          "language": "swift",
          "line_count": 44,
          "complexity": "complex",
          "code": "extension NetworkService {\n    func upload(\n        _ endpoint: Endpoint,\n        file: URL,\n        progressHandler: @escaping (Double) -> Void\n    ) async throws -> Data {\n        var request = try "
        },
        {
          "language": "swift",
          "line_count": 22,
          "complexity": "medium",
          "code": "extension NetworkService {\n    func download(\n        from url: URL,\n        to destination: URL,\n        progressHandler: @escaping (Double) -> Void\n    ) async throws {\n        let downloadTask = se"
        },
        {
          "language": "swift",
          "line_count": 56,
          "complexity": "complex",
          "code": "actor ResponseCache {\n    private var cache: [URL: CachedResponse] = [:]\n    private let maxAge: TimeInterval = 300  // 5 minutes\n\n    struct CachedResponse {\n        let data: Data\n        let timest"
        },
        {
          "language": "swift",
          "line_count": 40,
          "complexity": "complex",
          "code": "protocol NetworkServiceProtocol {\n    func request<T: Decodable>(_ endpoint: Endpoint, as type: T.Type) async throws -> T\n}\n\nextension NetworkService: NetworkServiceProtocol {}\n\nfinal class MockNetwor"
        },
        {
          "language": "swift",
          "line_count": 6,
          "complexity": "simple",
          "code": "// \u274c BAD - Blocks thread\nlet data = try Data(contentsOf: url)\n\n// \u2705 GOOD\nlet (data, _) = try await URLSession.shared.data(from: url)\n"
        },
        {
          "language": "swift",
          "line_count": 12,
          "complexity": "simple",
          "code": "// \u274c BAD\nlet (data, _) = try await session.data(for: request)\nreturn try JSONDecoder().decode(T.self, from: data)\n\n// \u2705 GOOD\nlet (data, response) = try await session.data(for: request)\nguard let httpR"
        },
        {
          "language": "swift",
          "line_count": 9,
          "complexity": "simple",
          "code": "// \u274c BAD\nlet url = URL(string: \"https://api.example.com/users/\\(id)\")!\n\n// \u2705 GOOD\nenum UserEndpoint: Endpoint {\n    case getUser(id: UUID)\n    var path: String { \"/users/\\(id)\" }\n}\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/auth/refresh\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/users/\\(id"
        }
      ],
      "tools_mentioned": [
        "jwt"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 61.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "data/etl-patterns.md",
      "category": "data",
      "skill_name": "etl-patterns",
      "frontmatter": {
        "name": "data-etl-patterns",
        "description": "Designing data extraction from multiple sources (databases, APIs, files)"
      },
      "metrics": {
        "line_count": 524,
        "code_line_count": 67,
        "code_examples": 8,
        "external_refs": 1,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 66,
          "complexity": "complex",
          "code": "# Python with SQLAlchemy\nfrom sqlalchemy import create_engine, text\nfrom datetime import datetime, timedelta\nimport pandas as pd\n\nclass IncrementalExtractor:\n    def __init__(self, source_conn_str, st"
        },
        {
          "language": "python",
          "line_count": 58,
          "complexity": "complex",
          "code": "import requests\nfrom typing import Iterator, Dict, Any\nimport time\n\nclass PaginatedAPIExtractor:\n    def __init__(self, base_url: str, api_key: str):\n        self.base_url = base_url\n        self.head"
        },
        {
          "language": "python",
          "line_count": 74,
          "complexity": "complex",
          "code": "from typing import Callable\nimport pandas as pd\nfrom dataclasses import dataclass\n\n@dataclass\nclass TransformResult:\n    valid_records: pd.DataFrame\n    invalid_records: pd.DataFrame\n    validation_er"
        },
        {
          "language": "python",
          "line_count": 66,
          "complexity": "complex",
          "code": "# PostgreSQL upsert\ndef upsert_postgres(df: pd.DataFrame, table_name: str, key_columns: list):\n    \"\"\"Upsert using INSERT ON CONFLICT\"\"\"\n    from sqlalchemy import create_engine\n    from io import Str"
        },
        {
          "language": "python",
          "line_count": 67,
          "complexity": "complex",
          "code": "from pathlib import Path\nimport json\nfrom datetime import datetime\n\nclass ETLPipeline:\n    def __init__(self, name: str, state_file: Path):\n        self.name = name\n        self.state_file = state_fil"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# PostgreSQL/MySQL\npd.read_sql(\"SELECT * FROM table\", engine)\n\n# REST API\nrequests.get(url, headers=headers).json()\n\n# CSV/Parquet\npd.read_csv(\"file.csv\")\npd.read_parquet(\"file.parquet\")\n\n# S3\ns3 = bo"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Type casting\ndf['date'] = pd.to_datetime(df['date'])\ndf['amount'] = df['amount'].astype(float)\n\n# Null handling\ndf.fillna({'column': default_value})\ndf.dropna(subset=['required_col'])\n\n# String clea"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "# Append\ndf.to_sql('table', engine, if_exists='append', index=False)\n\n# Replace\ndf.to_sql('table', engine, if_exists='replace', index=False)\n\n# Bulk insert (faster)\nfrom sqlalchemy import insert\nrecor"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com\""
        }
      ],
      "tools_mentioned": [
        "postgres",
        "mysql",
        "postgresql"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 61.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "formal/lean-tactics.md",
      "category": "formal",
      "skill_name": "lean-tactics",
      "frontmatter": {
        "name": "formal-lean-tactics",
        "description": "Optimizing proof efficiency"
      },
      "metrics": {
        "line_count": 747,
        "code_line_count": 336,
        "code_examples": 38,
        "external_refs": 4,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Lean 4 with mathlib4 (for advanced tactics)\nlake new my_project math\ncd my_project\nlake update\nlake build\n"
        },
        {
          "language": "lean",
          "line_count": 15,
          "complexity": "simple",
          "code": "-- Goal state structure\n-- \u22a2 goal\n-- Context:\n--   h1 : assumption1\n-- h2 : assumption2\n-- Goal: conclusion\n\n-- Tactics transform this state\nexample (h : p) : p \u2228 q := by\n  -- State: h : p \u22a2 p \u2228 q\n  l"
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "simple",
          "code": "-- rw: Directed rewriting\nexample (h : a = b) : f a = f b := by\n  rw [h]\n\n-- simp: Simplification with simp set\nexample : 0 + n = n := by\n  simp\n\n-- simp with arguments\nexample : xs.reverse.reverse = "
        },
        {
          "language": "lean",
          "line_count": 10,
          "complexity": "simple",
          "code": "-- apply unifies with goal\nexample (h : p \u2192 q) : p \u2192 q := by\n  apply h  -- Unifies goal with conclusion of h\n\n-- refine for partial terms with holes\nexample : \u2203 n, n + 0 = n := by\n  refine \u27e8?_, ?_\u27e9\n  "
        },
        {
          "language": "lean",
          "line_count": 9,
          "complexity": "simple",
          "code": "-- Declaring simp lemmas\n@[simp]\ntheorem zero_add (n : Nat) : 0 + n = n := by\n  induction n <;> simp [*, Nat.add_succ]\n\n-- Using simp\nexample (n : Nat) : 0 + (0 + n) = n := by\n  simp  -- Applies zero_"
        },
        {
          "language": "lean",
          "line_count": 22,
          "complexity": "medium",
          "code": "-- Basic rewrite\nexample (h : a = b) : a + c = b + c := by\n  rw [h]\n\n-- Multiple rewrites\nexample (h1 : a = b) (h2 : b = c) : a = c := by\n  rw [h1, h2]\n\n-- Rewrite backwards\nexample (h : a = b) : b = "
        },
        {
          "language": "lean",
          "line_count": 20,
          "complexity": "simple",
          "code": "-- Basic simplification\nexample : [1, 2] ++ [] = [1, 2] := by simp\n\n-- With specific lemmas\nexample : xs.reverse.reverse = xs := by\n  simp only [List.reverse_reverse]\n\n-- With hypotheses\nexample (h : "
        },
        {
          "language": "lean",
          "line_count": 7,
          "complexity": "simple",
          "code": "simp           -- Use full simp set\nsimp only [...]  -- Use only specified lemmas\nsimp [h1, h2]  -- Add hypotheses to simp set\nsimp at h      -- Simplify hypothesis\nsimp at *      -- Simplify all\nsimp"
        },
        {
          "language": "lean",
          "line_count": 13,
          "complexity": "simple",
          "code": "-- Polynomial equality\nexample (a b : Nat) : (a + b) * (a + b) = a * a + 2 * a * b + b * b := by\n  ring\n\n-- Complex expressions\nexample (x y z : Int) :\n    (x + y) * z - x * z = y * z := by\n  ring\n\n--"
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "simple",
          "code": "-- From linear inequalities\nexample (h1 : a \u2264 b) (h2 : b < c) : a < c := by\n  linarith\n\n-- With arithmetic\nexample (h : x \u2264 3) : 2 * x + 1 \u2264 7 := by\n  linarith\n\n-- Complex linear reasoning\nexample (h1"
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "simple",
          "code": "-- Natural number arithmetic\nexample (n m : Nat) (h : n + m = 5) (h2 : n \u2265 3) : m \u2264 2 := by\n  omega\n\n-- Integer arithmetic\nexample (x y : Int) (h1 : x + y = 10) (h2 : x - y = 2) : x = 6 := by\n  omega\n"
        },
        {
          "language": "lean",
          "line_count": 22,
          "complexity": "medium",
          "code": "-- Rewrite specific subterm\nexample : (1 + 2) + 3 = 3 + 3 := by\n  conv_lhs =>\n    arg 1  -- Select first argument\n    rw [Nat.add_comm]\n  rfl\n\n-- Navigate expression tree\nexample : f (g (h a)) = f (g "
        },
        {
          "language": "lean",
          "line_count": 16,
          "complexity": "simple",
          "code": "-- Chain equalities\nexample (h1 : a = b) (h2 : b = c) : a = c := by\n  calc a = b := h1\n       _ = c := h2\n\n-- Chain inequalities\nexample (h1 : a \u2264 b) (h2 : b < c) : a < c := by\n  calc a \u2264 b := h1\n    "
        },
        {
          "language": "lean",
          "line_count": 8,
          "complexity": "simple",
          "code": "-- Solves goals by searching\nexample (h : p \u2227 q) : q \u2227 p := by\n  aesop\n\n-- With custom rule sets\nexample : \u2200 x, x \u2208 xs \u2192 x \u2208 xs ++ ys := by\n  aesop (add norm simp List.mem_append)\n"
        },
        {
          "language": "lean",
          "line_count": 8,
          "complexity": "simple",
          "code": "-- Propositional logic\nexample : p \u2227 q \u2192 q \u2227 p := by\n  tauto\n\n-- Complex tautologies\nexample : (p \u2192 q) \u2192 (q \u2192 r) \u2192 (p \u2192 r) := by\n  tauto\n"
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "simple",
          "code": "-- Decidable equality\nexample : (5 : Nat) \u2260 3 := by\n  decide\n\n-- Boolean conditions\nexample : (10 < 20) = true := by\n  decide\n\n-- List membership\nexample : 3 \u2208 [1, 2, 3, 4] := by\n  decide\n"
        },
        {
          "language": "lean",
          "line_count": 16,
          "complexity": "simple",
          "code": "-- Sequential (;)\nexample : p \u2192 p \u2227 p := by\n  intro h; constructor; exact h; exact h\n\n-- All goals (<;>)\nexample : p \u2192 p \u2227 p := by\n  intro h\n  constructor <;> exact h  -- Apply to both goals\n\n-- Focus"
        },
        {
          "language": "lean",
          "line_count": 15,
          "complexity": "simple",
          "code": "-- Alternative (first success)\nexample : p \u2228 q := by\n  first | left; assumption | right; assumption\n\n-- Try (don't fail)\nexample : p \u2192 p := by\n  try rw [some_lemma]  -- Continue even if rw fails\n  int"
        },
        {
          "language": "lean",
          "line_count": 14,
          "complexity": "simple",
          "code": "-- By cases\nexample : p \u2228 \u00acp \u2192 q \u2192 q := by\n  intro h hq\n  cases h <;> exact hq\n\n-- If-then-else pattern\nby\n  if h : condition then\n    -- Proof with h : condition\n    sorry\n  else\n    -- Proof with h "
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "simple",
          "code": "-- Name intermediate facts\nexample (h1 : a = b) (h2 : b = c) : f a = f c := by\n  have hab : a = b := h1\n  have hbc : b = c := h2\n  have hac : a = c := by rw [hab, hbc]\n  rw [hac]\n\n-- Anonymous have\nex"
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "simple",
          "code": "-- Explicitly show what you're proving\nexample : p \u2192 q \u2192 p \u2227 q := by\n  intro hp hq\n  show p \u2227 q\n  exact \u27e8hp, hq\u27e9\n\n-- Useful for type-directed proof\nexample : (fun x => x + 0) = (fun x => x) := by\n  sh"
        },
        {
          "language": "lean",
          "line_count": 11,
          "complexity": "simple",
          "code": "-- Prove it suffices to show something simpler\nexample (h : p) : p \u2227 p := by\n  suffices hp : p from \u27e8hp, hp\u27e9\n  exact h\n\n-- Chain backwards\nexample : a = d := by\n  suffices a = c by rw [this, hcd]\n  su"
        },
        {
          "language": "lean",
          "line_count": 11,
          "complexity": "simple",
          "code": "-- Clean existential elimination\nexample (h : \u2203 x, P x \u2227 Q x) : \u2203 x, P x := by\n  obtain \u27e8x, hPx, hQx\u27e9 := h\n  exact \u27e8x, hPx\u27e9\n\n-- With pattern matching\nexample (h : \u2203 x y, x + y = 10) : \u2203 z, z \u2264 10 := b"
        },
        {
          "language": "lean",
          "line_count": 15,
          "complexity": "simple",
          "code": "-- Show current goal state\nexample : p \u2192 p := by\n  intro h\n  trace \"{h}\"  -- Print hypothesis\n  exact h\n\n-- Show term\n#check (rfl : a = a)\n#print Nat.add  -- Print definition\n\n-- simp? shows which lem"
        },
        {
          "language": "lean",
          "line_count": 18,
          "complexity": "simple",
          "code": "-- Tactic failed: goal doesn't match\nexample : p := by\n  exact q  -- Error: type mismatch\n\n-- Fix: check types\nexample : p := by\n  have hq : q := sorry\n  -- Can't use hq to prove p directly\n\n-- Unknow"
        },
        {
          "language": "lean",
          "line_count": 25,
          "complexity": "medium",
          "code": "-- Equality/Rewriting\nrfl            -- Reflexivity\nrw [h]         -- Rewrite with h\nsimp           -- Simplify\n\n-- Arithmetic\nring           -- Ring equality\nlinarith       -- Linear arithmetic\nomega"
        },
        {
          "language": "lean",
          "line_count": 8,
          "complexity": "simple",
          "code": "t1; t2         -- Sequential\nt1 <;> t2      -- All goals\n\u00b7 t            -- Focus first\nfirst | t1 | t2 -- Alternative\ntry t          -- Don't fail\nrepeat t       -- Repeat until failure\nall_goals t   "
        },
        {
          "language": "lean",
          "line_count": 9,
          "complexity": "simple",
          "code": "conv =>\n  lhs          -- Left-hand side\n  rhs          -- Right-hand side\n  arg n        -- nth argument\n  args         -- All arguments\n  enter [1, 2] -- Navigate path\n  rw [h]       -- Rewrite\n  si"
        },
        {
          "language": "lean",
          "line_count": 19,
          "complexity": "simple",
          "code": "-- BAD: Long sequence of low-level tactics\nexample : complicated_goal := by\n  intro h1\n  intro h2\n  intro h3\n  have x := h1\n  have y := h2\n  rw [x]\n  rw [y]\n  simp\n  ring\n  sorry\n\n-- GOOD: Structure a"
        },
        {
          "language": "lean",
          "line_count": 14,
          "complexity": "simple",
          "code": "-- BAD: Manual chaining\nexample (h1 : a = b) (h2 : b = c) (h3 : c = d) : a = d := by\n  have hab := h1\n  rw [hab]\n  have hbc := h2\n  rw [hbc]\n  exact h3\n\n-- GOOD: Use calc\nexample (h1 : a = b) (h2 : b "
        },
        {
          "language": "lean",
          "line_count": 17,
          "complexity": "simple",
          "code": "-- BAD: Sorry as crutch\ntheorem main_result : important_property := by\n  have lemma1 := sorry\n  have lemma2 := sorry\n  sorry\n\n-- GOOD: Explicit admits with tracking\n-- In separate file or section\naxio"
        },
        {
          "language": "lean",
          "line_count": 13,
          "complexity": "simple",
          "code": "-- BAD: Manual propositional reasoning\nexample : (p \u2227 q) \u2227 r \u2192 r \u2227 (q \u2227 p) := by\n  intro \u27e8\u27e8hp, hq\u27e9, hr\u27e9\n  constructor\n  \u00b7 exact hr\n  \u00b7 constructor\n    \u00b7 exact hq\n    \u00b7 exact hp\n\n-- GOOD: Let automatio"
        },
        {
          "language": "lean",
          "line_count": 10,
          "complexity": "simple",
          "code": "-- BAD: Rewrite one at a time\nexample (h1 : a = b) (h2 : b = c) (h3 : c = d) : f a = f d := by\n  rw [h1]\n  rw [h2]\n  rw [h3]\n\n-- GOOD: Batch rewrites\nexample (h1 : a = b) (h2 : b = c) (h3 : c = d) : f"
        },
        {
          "language": "lean",
          "line_count": 10,
          "complexity": "simple",
          "code": "-- BAD: Rewrite everything (may fail)\nexample : f (g a + h a) = f (h a + g a) := by\n  rw [add_comm]  -- Might rewrite wrong occurrence\n\n-- GOOD: Target specific subterm\nexample : f (g a + h a) = f (h "
        },
        {
          "language": "lean",
          "line_count": 10,
          "complexity": "simple",
          "code": "-- Expanding and simplifying\nexample (a b : Nat) : (a + b) ^ 2 = a ^ 2 + 2 * a * b + b ^ 2 := by\n  ring\n\n-- Using calc for clarity\nexample (x y : Int) : (x + y) * (x - y) = x ^ 2 - y ^ 2 := by\n  calc "
        },
        {
          "language": "lean",
          "line_count": 13,
          "complexity": "simple",
          "code": "-- Combining linarith with other tactics\nexample (x y z : Nat) (h1 : x \u2264 y) (h2 : y < z) : x < z := by\n  linarith\n\n-- Complex linear reasoning\nexample (a b c : Int)\n    (h1 : 2 * a + b \u2264 10)\n    (h2 :"
        },
        {
          "language": "lean",
          "line_count": 14,
          "complexity": "simple",
          "code": "-- Controlled simplification\nexample (xs ys : List \u03b1) :\n    (xs ++ ys).reverse = ys.reverse ++ xs.reverse := by\n  simp only [List.reverse_append]\n\n-- Simplification with arithmetic\nexample (n m : Nat)"
        },
        {
          "language": "lean",
          "line_count": 20,
          "complexity": "simple",
          "code": "-- Target specific subexpression\nexample (h : a = b) : f (g a + c) + d = f (g b + c) + d := by\n  conv_lhs =>\n    arg 1  -- Enter first argument of +\n    arg 1  -- Enter first argument of f\n    arg 1  "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://lean-lang.org/theorem_proving_in_lean4/tactics.html"
        },
        {
          "type": "external",
          "url": "https://leanprover-community.github.io/mathlib4_docs/tactics.html"
        },
        {
          "type": "github",
          "url": "https://github.com/leanprover-community/aesop"
        },
        {
          "type": "github",
          "url": "https://github.com/leanprover-community/batteries"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "38 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "3 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 61.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "debugging/browser-devtools.md",
      "category": "debugging",
      "skill_name": "browser-devtools",
      "frontmatter": {
        "name": "debugging-browser-devtools",
        "description": "Comprehensive guide to browser developer tools for debugging web applications. Covers Chrome/Firefox/Safari DevTools including Sources panel, breakpoints, performance profiling, memory analysis, network debugging, Console API, React/Vue debugging, and Lighthouse/Core Web Vitals."
      },
      "metrics": {
        "line_count": 902,
        "code_line_count": 74,
        "code_examples": 9,
        "external_refs": 1,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "javascript",
          "line_count": 14,
          "complexity": "simple",
          "code": "// Click element \u2192 Styles panel \u2192 Edit\n\n// Toggle property\n\u2611 color: red;  // Click checkbox to disable\n\n// Add property\nelement.style {\n  /* Click here, type property: value */\n  background: blue;\n}\n\n"
        },
        {
          "language": "javascript",
          "line_count": 14,
          "complexity": "simple",
          "code": "// Basic logging\nconsole.log('Hello', 'World');  // Multiple args\nconsole.log('User:', { name: 'Alice', age: 30 });\n\n// Log levels\nconsole.info('Information');\nconsole.warn('Warning!');\nconsole.error("
        },
        {
          "language": "javascript",
          "line_count": 18,
          "complexity": "simple",
          "code": "// Table view\nconst users = [\n  { name: 'Alice', age: 30 },\n  { name: 'Bob', age: 25 }\n];\nconsole.table(users);\n\n// Group related logs\nconsole.group('User Details');\nconsole.log('Name:', name);\nconsol"
        },
        {
          "language": "javascript",
          "line_count": 16,
          "complexity": "simple",
          "code": "// Assert (logs only if false)\nconsole.assert(x > 0, 'x must be positive', { x });\n\n// Stack trace\nconsole.trace('How did we get here?');\n\n// Count calls\nconsole.count('API call');  // API call: 1\ncon"
        },
        {
          "language": "javascript",
          "line_count": 12,
          "complexity": "simple",
          "code": "// $ (jQuery-like selector)\n$('.my-class')  // querySelector\n$$('.my-class')  // querySelectorAll\n\n// Recent inspected elements\n$0  // Most recently selected element\n$1  // Second most recent\n$2  // T"
        },
        {
          "language": "javascript",
          "line_count": 12,
          "complexity": "simple",
          "code": "// Monitor function calls\nmonitor(myFunction);  // Logs when myFunction is called\nunmonitor(myFunction);\n\n// Monitor events\nmonitorEvents($0);  // Log all events on $0\nmonitorEvents($0, 'click');  // "
        },
        {
          "language": "javascript",
          "line_count": 11,
          "complexity": "simple",
          "code": "// Inspect object\ninspect($0);  // Opens Elements panel at $0\n\n// List properties\ndir($0);  // Interactive object explorer\ndirxml($0);  // XML/HTML representation\n\n// Values\nvalues({ a: 1, b: 2, c: 3 "
        },
        {
          "language": "javascript",
          "line_count": 7,
          "complexity": "simple",
          "code": "// Right-click line number \u2192 Add conditional breakpoint\n// Expression: i === 99 (only breaks when true)\n\nfor (let i = 0; i < 100; i++) {\n  console.log(i);  // Breakpoint here with condition \"i === 99\""
        },
        {
          "language": "javascript",
          "line_count": 5,
          "complexity": "simple",
          "code": "// Right-click line number \u2192 Add logpoint\n// Message: \"Count is\", count\n\n// Equivalent to console.log but without modifying code\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/users"
        }
      ],
      "tools_mentioned": [
        "ssl",
        "tls"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        }
      ],
      "priority_score": 60.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "build-systems/gradle-jvm-builds.md",
      "category": "build-systems",
      "skill_name": "gradle-jvm-builds",
      "frontmatter": {
        "name": "build-systems-gradle-jvm-builds",
        "description": "Gradle Kotlin DSL and Groovy DSL, dependency management, version catalogs, build lifecycle, task configuration, multi-project builds, and performance optimization for Java/Kotlin projects."
      },
      "metrics": {
        "line_count": 742,
        "code_line_count": 272,
        "code_examples": 33,
        "external_refs": 1,
        "tools_mentioned": 2,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Initialize project with wrapper\ngradle init --type java-application --dsl kotlin\n\n# Use wrapper (ensures consistent Gradle version)\n./gradlew build        # Unix/macOS\ngradlew.bat build      # Windo"
        },
        {
          "language": "kotlin",
          "line_count": 23,
          "complexity": "medium",
          "code": "// Type-safe, IDE support, refactoring\nplugins {\n    kotlin(\"jvm\") version \"1.9.24\"\n    application\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(\"com.google.guava:guava:32"
        },
        {
          "language": "groovy",
          "line_count": 22,
          "complexity": "medium",
          "code": "plugins {\n    id 'org.jetbrains.kotlin.jvm' version '1.9.24'\n    id 'application'\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'com.google.guava:guava:32.1.3-jre'\n    test"
        },
        {
          "language": "kotlin",
          "line_count": 23,
          "complexity": "medium",
          "code": "// build.gradle.kts\ndependencies {\n    // Compile and runtime\n    implementation(\"org.slf4j:slf4j-api:2.0.9\")\n\n    // Compile only (not in runtime classpath)\n    compileOnly(\"org.projectlombok:lombok:"
        },
        {
          "language": "toml",
          "line_count": 14,
          "complexity": "simple",
          "code": "# gradle/libs.versions.toml\n[versions]\nkotlin = \"1.9.24\"\njunit = \"5.10.0\"\nguava = \"32.1.3-jre\"\n\n[libraries]\nkotlin-stdlib = { module = \"org.jetbrains.kotlin:kotlin-stdlib\", version.ref = \"kotlin\" }\ngu"
        },
        {
          "language": "kotlin",
          "line_count": 11,
          "complexity": "simple",
          "code": "// build.gradle.kts - Use catalog\ndependencies {\n    implementation(libs.kotlin.stdlib)\n    implementation(libs.guava)\n    testImplementation(libs.junit.jupiter)\n}\n\nplugins {\n    alias(libs.plugins.ko"
        },
        {
          "language": "kotlin",
          "line_count": 25,
          "complexity": "medium",
          "code": "// Force specific version\nconfigurations.all {\n    resolutionStrategy {\n        force(\"com.google.guava:guava:32.1.3-jre\")\n    }\n}\n\n// Exclude transitive dependency\ndependencies {\n    implementation(\""
        },
        {
          "language": "kotlin",
          "line_count": 31,
          "complexity": "medium",
          "code": "// Define custom task\ntasks.register(\"hello\") {\n    doLast {\n        println(\"Hello, Gradle!\")\n    }\n}\n\n// Configure existing task\ntasks.named<Test>(\"test\") {\n    useJUnitPlatform()\n    maxHeapSize = "
        },
        {
          "language": "kotlin",
          "line_count": 20,
          "complexity": "complex",
          "code": "// Define task class\nabstract class GenerateVersionTask : DefaultTask() {\n    @get:Input\n    abstract val version: Property<String>\n\n    @get:OutputFile\n    abstract val outputFile: RegularFilePropert"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Run specific task\n./gradlew build                # Build project\n./gradlew clean                # Clean build directory\n./gradlew test                 # Run tests\n./gradlew assemble             # Bu"
        },
        {
          "language": "kotlin",
          "line_count": 8,
          "complexity": "simple",
          "code": "// settings.gradle.kts\nrootProject.name = \"multi-project\"\n\ninclude(\"app\", \"core\", \"utils\")\n\n// Optional: change project directory\nproject(\":app\").projectDir = file(\"application\")\n"
        },
        {
          "language": "kotlin",
          "line_count": 27,
          "complexity": "medium",
          "code": "// build.gradle.kts (root)\nplugins {\n    kotlin(\"jvm\") version \"1.9.24\" apply false\n}\n\nallprojects {\n    group = \"com.example\"\n    version = \"1.0.0\"\n\n    repositories {\n        mavenCentral()\n    }\n}\n"
        },
        {
          "language": "kotlin",
          "line_count": 16,
          "complexity": "simple",
          "code": "// app/build.gradle.kts\nplugins {\n    application\n}\n\ndependencies {\n    implementation(project(\":core\"))\n    implementation(project(\":utils\"))\n\n    implementation(\"com.google.guava:guava:32.1.3-jre\")\n"
        },
        {
          "language": "kotlin",
          "line_count": 8,
          "complexity": "simple",
          "code": "// settings.gradle.kts\nincludeBuild(\"../shared-library\")\n\n// Now can depend on included build\ndependencies {\n    implementation(\"com.example:shared-library:1.0\")\n}\n"
        },
        {
          "language": "kotlin",
          "line_count": 8,
          "complexity": "simple",
          "code": "// gradle.properties\norg.gradle.caching=true\n\n// build.gradle.kts\ntasks.withType<Test> {\n    outputs.cacheIf { true }\n}\n"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Local cache (default: ~/.gradle/caches)\n./gradlew build --build-cache\n\n# Remote cache (for teams/CI)\n# buildCache {\n#     remote<HttpBuildCache> {\n#         url = uri(\"https://cache.example.com\")\n# "
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Enable configuration cache\n./gradlew build --configuration-cache\n\n# gradle.properties\norg.gradle.configuration-cache=true\n"
        },
        {
          "language": "properties",
          "line_count": 5,
          "complexity": "simple",
          "code": "# gradle.properties\norg.gradle.parallel=true\norg.gradle.workers.max=4\norg.gradle.caching=true\n"
        },
        {
          "language": "properties",
          "line_count": 4,
          "complexity": "simple",
          "code": "# gradle.properties\norg.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError\norg.gradle.daemon=true\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Generate performance report\n./gradlew build --profile\n\n# Report at: build/reports/profile/profile-*.html\n\n# Scan for insights (requires Gradle account)\n./gradlew build --scan\n"
        },
        {
          "language": "kotlin",
          "line_count": 17,
          "complexity": "simple",
          "code": "// Core plugins (no version)\nplugins {\n    java\n    application\n}\n\n// Community plugins (from Gradle Plugin Portal)\nplugins {\n    id(\"org.springframework.boot\") version \"3.2.0\"\n    id(\"io.spring.depen"
        },
        {
          "language": "kotlin",
          "line_count": 23,
          "complexity": "medium",
          "code": "// Java projects\nplugins {\n    java\n    `java-library`      // For libraries (exposes API)\n    application         // For executables\n}\n\n// Kotlin projects\nplugins {\n    kotlin(\"jvm\") version \"1.9.24\""
        },
        {
          "language": "kotlin",
          "line_count": 22,
          "complexity": "medium",
          "code": "// Configure Java plugin\njava {\n    toolchain {\n        languageVersion.set(JavaLanguageVersion.of(17))\n    }\n    withSourcesJar()\n    withJavadocJar()\n}\n\n// Configure application plugin\napplication {"
        },
        {
          "language": "kotlin",
          "line_count": 30,
          "complexity": "medium",
          "code": "dependencies {\n    testImplementation(\"org.junit.jupiter:junit-jupiter:5.10.0\")\n    testRuntimeOnly(\"org.junit.platform:junit-platform-launcher\")\n}\n\ntasks.test {\n    useJUnitPlatform()\n\n    // Test se"
        },
        {
          "language": "kotlin",
          "line_count": 16,
          "complexity": "simple",
          "code": "// Create separate source set\nsourceSets {\n    create(\"integrationTest\") {\n        compileClasspath += sourceSets.main.get().output\n        runtimeClasspath += sourceSets.main.get().output\n    }\n}\n\nco"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Direct gradle command (version varies by machine)\ngradle build\n\n# CORRECT: Use wrapper (consistent version)\n./gradlew build\n"
        },
        {
          "language": "kotlin",
          "line_count": 12,
          "complexity": "simple",
          "code": "// WRONG: Configuration in doLast (runs at execution)\ntasks.register(\"bad\") {\n    doLast {\n        project.dependencies.add(\"implementation\", \"com.example:lib:1.0\")\n    }\n}\n\n// CORRECT: Configuration "
        },
        {
          "language": "kotlin",
          "line_count": 12,
          "complexity": "simple",
          "code": "// WRONG: Deprecated configurations\ndependencies {\n    compile(\"com.example:lib:1.0\")     // Removed in Gradle 7\n    testCompile(\"junit:junit:4.13.2\")\n}\n\n// CORRECT: Modern configurations\ndependencies"
        },
        {
          "language": "kotlin",
          "line_count": 13,
          "complexity": "simple",
          "code": "// WRONG: Scattered versions\ndependencies {\n    implementation(\"org.springframework.boot:spring-boot-starter-web:3.2.0\")\n    implementation(\"org.springframework.boot:spring-boot-starter-data-jpa:3.2.0"
        },
        {
          "language": "bash",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Build lifecycle\n./gradlew clean                # Clean build directory\n./gradlew build                # Compile, test, assemble\n./gradlew assemble             # Build without tests\n./gradlew test   "
        },
        {
          "language": "properties",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Build performance\norg.gradle.parallel=true\norg.gradle.caching=true\norg.gradle.configuration-cache=true\norg.gradle.workers.max=4\n\n# JVM settings\norg.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m\n\n#"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "# generate_buildscript.py - Generate Gradle dependencies\nimport json\n\nwith open('dependencies.json') as f:\n    deps = json.load(f)\n\nfor dep in deps:\n    config = dep.get('configuration', 'implementati"
        },
        {
          "language": "kotlin",
          "line_count": 7,
          "complexity": "simple",
          "code": "// build.gradle.kts - Use generated dependencies\nval generatedDeps = providers.exec {\n    commandLine(\"python\", \"generate_buildscript.py\")\n}.standardOutput.asText.get()\n\n// Note: This is illustrative;"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://cache.example.com\""
        }
      ],
      "tools_mentioned": [
        "postgres",
        "postgresql"
      ],
      "config_snippets": [
        "toml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (toml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "33 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "12 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 60.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "modal/modal-web-endpoints.md",
      "category": "modal",
      "skill_name": "modal-web-endpoints",
      "frontmatter": {
        "name": "modal-web-endpoints",
        "description": "Creating HTTP APIs on Modal"
      },
      "metrics": {
        "line_count": 610,
        "code_line_count": 156,
        "code_examples": 17,
        "external_refs": 2,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "import modal\n\napp = modal.App(\"web-app\")\n\n@app.function()\n@modal.web_endpoint()\ndef hello():\n    return \"Hello, World!\"\n\n# Access at: https://<username>--web-app-hello.modal.run\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "@app.function()\n@modal.web_endpoint()\ndef greet(name: str):\n    return f\"Hello, {name}!\"\n\n# GET /greet?name=Alice\n# Returns: \"Hello, Alice!\"\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "@app.function()\n@modal.web_endpoint(method=\"POST\")\ndef create_item(item: dict):\n    # Process item\n    return {\"id\": 123, \"status\": \"created\"}\n\n@app.function()\n@modal.web_endpoint(method=\"GET\")\ndef ge"
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "from fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\n\nweb_app = FastAPI()\n\nclass PredictionRequest(BaseModel):\n    text: str\n    max_length: int = 100\n"
        },
        {
          "language": "python",
          "line_count": 79,
          "complexity": "complex",
          "code": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\nweb_app = FastAPI()\n\nclass GenerateRequest(BaseModel):\n    prompt: str\n    max_tokens: int = 100\n    temperature: float = 0.7\n\nclass Generat"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel, Field\nfrom typing import List\n\nweb_app = FastAPI()\n\nclass BatchRequest(BaseModel):\n    texts: List[str] = Field(..., min_item"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import JSONResponse\nimport io\n\nweb_app = FastAPI()\n\n@web_app.post(\"/upload/image\")\nasync def upload_image(file: UploadFile = File(."
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "from fastapi import FastAPI\nfrom fastapi.responses import (\n    JSONResponse,\n    PlainTextResponse,\n    StreamingResponse,\n    FileResponse\n)\n\nweb_app = FastAPI()\n\n@web_app.get(\"/json\")\ndef json_resp"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, HTTPException, Header\nfrom typing import Optional\n\nweb_app = FastAPI()\n\n# Store in Modal secrets\nVALID_API_KEYS = {\"key123\", \"key456\"}\n\ndef verify_api_key(x_api_key: str ="
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, HTTPException, Depends\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\n\nweb_app = FastAPI()\nsecurity = HTTPBearer()\n\ndef verify_token(\n    credential"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\nweb_app = FastAPI()\n\n# Configure CORS\nweb_app.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"https://example.co"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, Request\nimport hmac\nimport hashlib\n\nweb_app = FastAPI()\n\ndef verify_signature(payload: bytes, signature: str, secret: str) -> bool:\n    expected = hmac.new(\n        secret"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, HTTPException, Request\nfrom fastapi.responses import JSONResponse\n\nweb_app = FastAPI()\n\nclass ModelError(Exception):\n    def __init__(self, message: str):\n        self.mes"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, HTTPException, Request\nfrom collections import defaultdict\nfrom datetime import datetime, timedelta\n\nweb_app = FastAPI()\n\n# In-memory rate limit tracker\nrequest_counts = d"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "# test_api.py\nfrom fastapi.testclient import TestClient\n\ndef test_endpoint():\n    client = TestClient(web_app)\n\n    response = client.post(\"/predict\", json={\"text\": \"test\"})\n\n    assert response.statu"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "# \u274c BAD\n@web_app.post(\"/predict\")\ndef predict(text: str):\n    model = load_model()  # Slow!\n    return model(text)\n\n# \u2705 GOOD - Use class with @enter\n@app.cls(gpu=\"l40s\")\nclass API:\n    @modal.enter()\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u274c BAD - No auth on expensive endpoint\n@web_app.post(\"/expensive-operation\")\ndef expensive(data: dict):\n    return run_expensive_gpu_task(data)\n\n# \u2705 GOOD\n@web_app.post(\"/expensive-operation\")\ndef exp"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://<username>--web-app-hello.modal.run"
        },
        {
          "type": "example",
          "url": "https://example.com\"]"
        }
      ],
      "tools_mentioned": [
        "jwt"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "14 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 60.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "formal/sat-solving-strategies.md",
      "category": "formal",
      "skill_name": "sat-solving-strategies",
      "frontmatter": {
        "name": "formal-sat-solving-strategies",
        "description": "Skill for formal sat solving strategies"
      },
      "metrics": {
        "line_count": 793,
        "code_line_count": 188,
        "code_examples": 24,
        "external_refs": 3,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Each variable has activity score\nactivity[var] = 0.0\nincrement = 1.0\n\n# On conflict learning:\nfor var in learned_clause:\n    activity[var] += increment\n\n# Periodic decay\nif num_conflicts % 256 == 0:"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Remember last assigned value for each variable\nlast_value[var] = assigned_value\n\n# On branching:\nvar = pick_var_vsids()\nvalue = last_value[var]  # Try last value first\nassign(var, value)\n"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "from pysat.solvers import Glucose3\nfrom pysat.formula import CNF\n\ndef solve_cnf_file(filename):\n    \"\"\"Solve CNF in DIMACS format\"\"\"\n    cnf = CNF(from_file=filename)\n\n    with Glucose3(bootstrap_with"
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "from pysat.solvers import Solver\n\ndef solve_graph_coloring(edges, num_colors=3):\n    \"\"\"3-coloring of graph using SAT\"\"\"\n    nodes = set()\n    for u, v in edges:\n        nodes.add(u)\n        nodes.add"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "from pysat.card import CardEnc\n\ndef at_most_k_constraint(lits, k):\n    \"\"\"At most k of lits can be true\"\"\"\n    # Encoding options: sequential, ladder, totalizer, etc.\n    cnf = CardEnc.atmost(lits, bo"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "from pysat.pb import PBEnc\n\ndef weighted_constraint(lits, weights, bound):\n    \"\"\"Sum of weights * lits <= bound\"\"\"\n    cnf = PBEnc.leq(lits, weights, bound)\n    return cnf.clauses\n\ndef solve_knapsack"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "from pysat.solvers import Glucose4\n\ndef solve_with_assumptions():\n    \"\"\"Use assumptions for incremental solving\"\"\"\n    solver = Glucose4()\n\n    # Base clauses\n    x1, x2, x3 = 1, 2, 3\n    solver.add_"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "from pysat.solvers import Glucose3\n\ndef find_minimal_unsat_core(clauses):\n    \"\"\"Find minimal subset of clauses that are UNSAT\"\"\"\n    # Add selector variables to each clause\n    selectors = []\n    aug"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "from pysat.solvers import Solver\n\ndef solve_with_custom_restarts(clauses, restart_interval=100):\n    \"\"\"SAT solving with periodic restarts\"\"\"\n    solver = Solver(name='minisat22')\n\n    for clause in c"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "complex",
          "code": "# PySAT (Python SAT library)\npip install python-sat\n\n# Or with uv\nuv add python-sat\n\n# CryptoMiniSat (standalone)\npip install pycryptosat\n\n# Verify\npython -c \"from pysat.solvers import Glucose3; print"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# At-least-one (ALO)\n[x1, x2, x3]\n\n# At-most-one (AMO) - pairwise\n[-x1, -x2]\n[-x1, -x3]\n[-x2, -x3]\n\n# Exactly-one (EXO)\nALO + AMO\n\n# Implication: x \u2192 y\n[-x, y]\n\n# Equivalence: x \u2194 y\n[-x, y], [x, -y]\n\n"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "from pysat.solvers import Glucose3\nfrom pysat.formula import CNF\n\n# Create solver\nsolver = Glucose3()  # or Minisat22, Cadical, etc.\n\n# Add clauses\nsolver.add_clause([1, -2, 3])\nsolver.add_clause([-1,"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# BAD: Direct encoding of (x1 \u2227 x2) \u2228 (x3 \u2227 x4)\n# Converts to: (x1 \u2228 x3) \u2227 (x1 \u2228 x4) \u2227 (x2 \u2228 x3) \u2227 (x2 \u2228 x4)\n# 4 clauses, but loses structure\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# GOOD: Introduce auxiliary variables\n# y1 \u2194 (x1 \u2227 x2)\n# y2 \u2194 (x3 \u2227 x4)\n# y1 \u2228 y2\n\n# Clauses:\n# y1 \u2192 x1, y1 \u2192 x2, (x1 \u2227 x2) \u2192 y1\n# y2 \u2192 x3, y2 \u2192 x4, (x3 \u2227 x4) \u2192 y2\n# y1 \u2228 y2\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# BAD: Pairwise AMO for 100 variables\n# O(n\u00b2) clauses: 100 * 99 / 2 = 4950 clauses\nlits = list(range(1, 101))\nfor i in range(len(lits)):\n    for j in range(i+1, len(lits)):\n        clauses.append([-li"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "complex",
          "code": "# GOOD: Sequential encoding for AMO\nfrom pysat.card import CardEnc, EncType\ncnf = CardEnc.atmost(lits, bound=1, encoding=EncType.seqcounter)\n# O(n) clauses and variables\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# BAD: Create new solver each time\nfor scenario in scenarios:\n    solver = Glucose3()\n    for clause in base_clauses:  # Re-add every time\n        solver.add_clause(clause)\n    solver.add_clause(scena"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# GOOD: Single solver with assumptions\nsolver = Glucose3()\nfor clause in base_clauses:\n    solver.add_clause(clause)\n\nfor scenario_lit in scenario_lits:\n    if solver.solve(assumptions=[scenario_lit])"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# BAD: Directly solve complex formula\nsolver.add_clause([1, 2, 3])\nsolver.add_clause([1, 2, -3])  # Subsumes to [1, 2]\nsolver.solve()\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "# GOOD: Simplify first\nfrom pysat.formula import CNF\ncnf = CNF()\ncnf.append([1, 2, 3])\ncnf.append([1, 2, -3])\n\n# Subsumption: [1, 2, 3] subsumed by [1, 2]\nsimplified = CNF()\nsimplified.append([1, 2]) "
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# BAD: SAT for pure arithmetic\n# Problem: x + y + z <= 2 (encoded as CNF)\n# Explosion of clauses for cardinality constraint\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "complex",
          "code": "# GOOD: Use Z3 for arithmetic\nfrom z3 import *\nx, y, z = Ints('x y z')\ns = Solver()\ns.add(x + y + z <= 2)\ns.check()\n# More natural and efficient\n"
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "from pysat.solvers import Glucose3\n\ndef solve_n_queens(n):\n    \"\"\"Solve N-Queens using SAT encoding\"\"\"\n    def var(row, col):\n        return row * n + col + 1\n\n    clauses = []\n\n    # Each row has exa"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "medium",
          "code": "def bounded_model_check(initial, transition, bad, k):\n    \"\"\"BMC: Check if bad state reachable in k steps\"\"\"\n    # Variables: state[time][var]\n    def var(time, state_var):\n        return time * num_s"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://minisat.se/"
        },
        {
          "type": "external",
          "url": "https://pysathq.github.io/"
        },
        {
          "type": "external",
          "url": "http://www.satcompetition.org/"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "24 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "14 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "formal/z3-solver-basics.md",
      "category": "formal",
      "skill_name": "z3-solver-basics",
      "frontmatter": {
        "name": "formal-z3-solver-basics",
        "description": "Skill for formal z3 solver basics"
      },
      "metrics": {
        "line_count": 700,
        "code_line_count": 233,
        "code_examples": 31,
        "external_refs": 3,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "from z3 import *\n\ns = Solver()\nx = Int('x')\ns.add(x > 0)\ns.add(x < 10)\nresult = s.check()  # sat, unsat, unknown\nif result == sat:\n    print(s.model())  # Solution: x = 1 (or any value in [1, 9])\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "opt = Optimize()\nx = Int('x')\ny = Int('y')\nopt.add(x + y <= 10)\nopt.add(x >= 0, y >= 0)\nopt.maximize(x + 2*y)  # Objective function\nif opt.check() == sat:\n    print(opt.model())  # x=0, y=10 (maximize"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "x, y = Ints('x y')\nconstraints = [\n    x + y == 10,           # Linear equality\n    2*x - 3*y <= 5,        # Linear inequality\n    x * y == 24,           # Nonlinear (switches to NRA theory)\n    x % 2"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "x = BitVec('x', 32)  # 32-bit bitvector\ny = BitVec('y', 32)\nconstraints = [\n    x & y == 0,              # Bitwise AND\n    x | y == 0xFFFFFFFF,     # Bitwise OR (all bits set)\n    x >> 2 == y,        "
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "A = Array('A', IntSort(), IntSort())  # Array: Int -> Int\ni, j = Ints('i j')\nconstraints = [\n    Store(A, i, 10)[i] == 10,         # Write then read\n    Select(A, i) == Select(A, j),     # Same values"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "from z3 import *\n\n# Problem: Find x, y such that x^2 + y^2 = 25 and x > y\ndef solve_pythagorean():\n    s = Solver()\n    x = Int('x')\n    y = Int('y')\n\n    s.add(x*x + y*y == 25)\n    s.add(x > y)\n\n    "
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "medium",
          "code": "def find_all_solutions(solver, variables, max_solutions=10):\n    \"\"\"Find multiple solutions by blocking previous ones\"\"\"\n    solutions = []\n\n    for _ in range(max_solutions):\n        if solver.check("
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "medium",
          "code": "def solve_multiobjective():\n    \"\"\"Lexicographic optimization: prioritize objectives\"\"\"\n    opt = Optimize()\n    x, y = Ints('x y')\n\n    # Constraints\n    opt.add(x + y <= 10)\n    opt.add(x >= 0, y >="
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "def analyze_conflicting_constraints():\n    \"\"\"Find minimal subset of constraints that cause unsat\"\"\"\n    s = Solver()\n    x = Int('x')\n\n    # Create named constraints\n    c1 = x > 10\n    c2 = x < 5\n  "
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "def solve_with_tactics():\n    \"\"\"Use tactics for performance tuning\"\"\"\n    x, y = Ints('x y')\n    formula = And(x + y == 10, x - y == 2)\n\n    # Strategy: simplify, then solve with LIA solver\n    tacti"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "def incremental_solving():\n    \"\"\"Efficient solving with push/pop for backtracking\"\"\"\n    s = Solver()\n    x, y = Ints('x y')\n\n    # Base constraints\n    s.add(x + y <= 10)\n\n    # Try scenario 1: x > "
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "def verify_array_swap():\n    \"\"\"Verify swap operation using array theory\"\"\"\n    A = Array('A', IntSort(), IntSort())\n    i, j = Ints('i j')\n\n    # Swap operation\n    A_swap = Store(Store(A, i, Select("
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "def check_overflow():\n    \"\"\"Detect integer overflow in bitvector arithmetic\"\"\"\n    x = BitVec('x', 8)  # 8-bit unsigned integer\n    y = BitVec('y', 8)\n\n    s = Solver()\n    s.add(x + y > 255)  # Over"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "complex",
          "code": "# Python Z3\npip install z3-solver\n\n# Or with uv\nuv add z3-solver\n\n# Verify\npython -c \"import z3; print(z3.get_version_string())\"\n"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Integer variables\nx = Int('x')\nx, y, z = Ints('x y z')\n\n# Real variables\nr = Real('r')\n\n# Boolean variables\nb = Bool('b')\n\n# Bitvectors\nbv = BitVec('bv', 32)  # 32-bit\n\n# Arrays\nA = Array('A', IntSo"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "medium",
          "code": "# Logical\nAnd(c1, c2, c3)\nOr(c1, c2)\nNot(c)\nImplies(c1, c2)\nXor(c1, c2)\n\n# Arithmetic\nx + y, x - y, x * y, x / y  # Division is integer division for Int\nx % y  # Modulo\nx ** 2  # Exponentiation (switc"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "s = Solver()\ns.add(constraint)  # Add constraint\ns.check()  # Returns sat, unsat, or unknown\ns.model()  # Get model if sat\ns.push()  # Save state\ns.pop()  # Restore state\ns.reset()  # Clear all constr"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Common tactics\ntactics = [\n    'simplify',      # Algebraic simplification\n    'solve-eqs',     # Gaussian elimination\n    'qflia',         # Quantifier-free linear integer arithmetic\n    'qfbv',   "
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# 1. Set timeout (milliseconds)\ns = Solver()\ns.set('timeout', 5000)  # 5 seconds\n\n# 2. Enable parallel mode\nset_param('parallel.enable', True)\n\n# 3. Use appropriate theory\n# QF_LIA faster than general"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# BAD: Redundant constraints slow down solver\ns = Solver()\nx = Int('x')\ns.add(x > 0)\ns.add(x > 1)  # Implies x > 0 (redundant)\ns.add(x >= 2)  # Also redundant\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# GOOD: Minimal constraint set\ns = Solver()\nx = Int('x')\ns.add(x >= 2)  # Sufficient (implies x > 0 and x > 1)\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# BAD: Nonlinear (slower)\nx, y = Reals('x y')\ns = Solver()\ns.add(x * y == 10)  # Nonlinear\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# GOOD: Linear (if y is constant)\nx = Real('x')\ny_value = 2.0\ns = Solver()\ns.add(x == 10 / y_value)  # Linear\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# BAD: May crash if unsat\ns = Solver()\ns.add(False)\nm = s.model()  # Error: solver is unsat\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# GOOD: Check before model access\nif s.check() == sat:\n    m = s.model()\nelse:\n    print(\"No solution exists\")\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# BAD: Blocks each variable separately (exponential clauses)\nfor _ in range(100):\n    if s.check() == sat:\n        m = s.model()\n        for v in variables:\n            s.add(v != m[v])  # Wrong: adds"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# GOOD: Single blocking clause per solution\nfor _ in range(100):\n    if s.check() == sat:\n        m = s.model()\n        s.add(Or([v != m[v] for v in variables]))  # 1 clause\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# BAD: Recreates solver (slow)\nfor scenario in scenarios:\n    s = Solver()  # New solver each time\n    s.add(base_constraints)\n    s.add(scenario)\n    s.check()\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# GOOD: Reuse solver with push/pop\ns = Solver()\ns.add(base_constraints)\nfor scenario in scenarios:\n    s.push()\n    s.add(scenario)\n    s.check()\n    s.pop()\n"
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "medium",
          "code": "def solve_sudoku(grid):\n    \"\"\"Solve 9x9 Sudoku using Z3\"\"\"\n    cells = [[Int(f\"c_{i}_{j}\") for j in range(9)] for i in range(9)]\n\n    s = Solver()\n\n    # Each cell in [1, 9]\n    for i in range(9):\n  "
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "medium",
          "code": "def verify_binary_search(arr_size=10):\n    \"\"\"Verify binary search finds element if present\"\"\"\n    A = Array('A', IntSort(), IntSort())\n    target = Int('target')\n    low, high, mid = Ints('low high m"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://ericpony.github.io/z3py-tutorial/guide-examples.htm"
        },
        {
          "type": "external",
          "url": "https://z3prover.github.io/api/html/namespacez3py.html"
        },
        {
          "type": "external",
          "url": "http://smtlib.cs.uiowa.edu/"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "31 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "diagrams/mermaid-class-state-diagrams.md",
      "category": "diagrams",
      "skill_name": "mermaid-class-state-diagrams",
      "frontmatter": {
        "name": "mermaid-class-state-diagrams",
        "description": "Create UML class diagrams and state machines with Mermaid for object-oriented design and state modeling"
      },
      "metrics": {
        "line_count": 758,
        "code_line_count": 343,
        "code_examples": 35,
        "external_refs": 3,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "complex",
          "code": "classDiagram\n    class Animal {\n        +String name\n        +int age\n        +makeSound()\n        +eat(food)\n    }\n"
        },
        {
          "language": "mermaid",
          "line_count": 13,
          "complexity": "complex",
          "code": "classDiagram\n    class BankAccount {\n        +String accountNumber\n        #double balance\n        -String pin\n        ~int transactionCount\n\n        +deposit(amount)\n        +withdraw(amount)\n       "
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "complex",
          "code": "classDiagram\n    class Calculator {\n        +int add(int a, int b)\n        +double divide(double a, double b) throws DivideByZeroError\n        +List~int~ getHistory()\n    }\n"
        },
        {
          "language": "mermaid",
          "line_count": 15,
          "complexity": "complex",
          "code": "classDiagram\n    Animal <|-- Dog\n    Animal <|-- Cat\n    Animal <|-- Bird\n\n    class Animal {\n        +String name\n        +makeSound()\n    }\n\n    class Dog {\n        +String breed\n        +bark()\n   "
        },
        {
          "language": "mermaid",
          "line_count": 11,
          "complexity": "complex",
          "code": "classDiagram\n    Car *-- Engine\n    Car *-- Wheel\n\n    class Car {\n        -Engine engine\n        -List~Wheel~ wheels\n    }\n\n    note for Car \"Engine destroyed when Car is destroyed\"\n"
        },
        {
          "language": "mermaid",
          "line_count": 10,
          "complexity": "complex",
          "code": "classDiagram\n    Department o-- Employee\n\n    class Department {\n        -List~Employee~ employees\n        +addEmployee(emp)\n    }\n\n    note for Department \"Employees exist independently\"\n"
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "complex",
          "code": "classDiagram\n    Driver --> Car\n    Student --> Course\n\n    class Driver {\n        +drive(car)\n    }\n"
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "complex",
          "code": "classDiagram\n    OrderProcessor ..> PaymentGateway\n\n    class OrderProcessor {\n        +processOrder(order, gateway)\n    }\n"
        },
        {
          "language": "mermaid",
          "line_count": 12,
          "complexity": "complex",
          "code": "classDiagram\n    Customer \"1\" --> \"0..*\" Order\n    Order \"1\" *-- \"1..*\" LineItem\n\n    class Customer {\n        +List~Order~ orders\n    }\n\n    class Order {\n        +List~LineItem~ items\n    }\n"
        },
        {
          "language": "mermaid",
          "line_count": 13,
          "complexity": "complex",
          "code": "classDiagram\n    Student \"0..*\" --> \"0..*\" Course\n\n    class Student {\n        +List~Course~ enrolledCourses\n        +enroll(course)\n    }\n\n    class Course {\n        +List~Student~ students\n        +"
        },
        {
          "language": "mermaid",
          "line_count": 23,
          "complexity": "complex",
          "code": "classDiagram\n    class Shape {\n        <<Abstract>>\n        #String color\n        +getColor()\n        +setColor(color)*\n        +calculateArea()*\n    }\n\n    Shape <|-- Circle\n    Shape <|-- Rectangle\n"
        },
        {
          "language": "mermaid",
          "line_count": 23,
          "complexity": "complex",
          "code": "classDiagram\n    class Drawable {\n        <<Interface>>\n        +draw()\n        +resize(scale)\n    }\n\n    class Serializable {\n        <<Interface>>\n        +serialize() String\n        +deserialize(da"
        },
        {
          "language": "mermaid",
          "line_count": 20,
          "complexity": "complex",
          "code": "classDiagram\n    class List~T~ {\n        +add(item ~T~)\n        +get(index) ~T~\n        +remove(item ~T~) boolean\n    }\n\n    class Repository~T~ {\n        +save(entity ~T~)\n        +findById(id) ~T~\n "
        },
        {
          "language": "mermaid",
          "line_count": 18,
          "complexity": "complex",
          "code": "classDiagram\n    class UserService {\n        <<Service>>\n        -UserRepository repo\n        +getUser(id) User\n    }\n\n    class UserRepository {\n        <<Repository>>\n        +findById(id) User\n    "
        },
        {
          "language": "mermaid",
          "line_count": 32,
          "complexity": "complex",
          "code": "classDiagram\n    class User {\n        +UUID id\n        +String email\n        +String name\n        +DateTime createdAt\n        +List~Post~ posts\n        +createPost(content) Post\n    }\n\n    class Post "
        },
        {
          "language": "mermaid",
          "line_count": 32,
          "complexity": "complex",
          "code": "classDiagram\n    class Repository~T~ {\n        <<Interface>>\n        +save(entity ~T~) ~T~\n        +findById(id) ~T~\n        +findAll() List~T~\n        +delete(entity ~T~)\n    }\n\n    Repository~T~ <|."
        },
        {
          "language": "mermaid",
          "line_count": 9,
          "complexity": "simple",
          "code": "stateDiagram-v2\n    [*] --> Idle\n    Idle --> Running: start()\n    Running --> Paused: pause()\n    Paused --> Running: resume()\n    Running --> Stopped: stop()\n    Paused --> Stopped: stop()\n    Stopp"
        },
        {
          "language": "mermaid",
          "line_count": 13,
          "complexity": "simple",
          "code": "stateDiagram-v2\n    [*] --> Draft\n\n    Draft: Article being written\n    Review: Under editorial review\n    Published: Live on website\n    Archived: Removed from site\n\n    Draft --> Review: submit()\n  "
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "stateDiagram-v2\n    [*] --> Active\n\n    state Active {\n        [*] --> Editing\n        Editing --> Saving: save()\n        Saving --> Editing: complete\n        Saving --> Error: fail\n        Error --> "
        },
        {
          "language": "mermaid",
          "line_count": 19,
          "complexity": "simple",
          "code": "stateDiagram-v2\n    [*] --> Application\n\n    state Application {\n        [*] --> LoggedOut\n\n        LoggedOut --> LoggedIn: login()\n\n        state LoggedIn {\n            [*] --> Dashboard\n            "
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "stateDiagram-v2\n    [*] --> CheckAuth\n    CheckAuth --> choice\n\n    state choice <<choice>>\n\n    choice --> Admin: if isAdmin\n    choice --> User: if isUser\n    choice --> Guest: else\n\n    Admin --> ["
        },
        {
          "language": "mermaid",
          "line_count": 19,
          "complexity": "simple",
          "code": "stateDiagram-v2\n    [*] --> Processing\n\n    Processing --> fork\n    state fork <<fork>>\n\n    fork --> ValidationStream\n    fork --> TransformStream\n    fork --> LoggingStream\n\n    ValidationStream -->"
        },
        {
          "language": "mermaid",
          "line_count": 21,
          "complexity": "medium",
          "code": "stateDiagram-v2\n    [*] --> Pending\n\n    Pending --> Processing: start\n\n    note right of Pending\n        Waiting for resources\n        Max wait: 5 minutes\n    end note\n\n    Processing --> Complete\n  "
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "stateDiagram-v2\n    direction LR\n\n    [*] --> Step1\n    Step1 --> Step2\n    Step2 --> Step3\n    Step3 --> [*]\n"
        },
        {
          "language": "mermaid",
          "line_count": 9,
          "complexity": "simple",
          "code": "stateDiagram-v2\n    direction TB\n\n    [*] --> Init\n    Init --> Ready\n    Ready --> Active\n    Active --> Done\n    Done --> [*]\n"
        },
        {
          "language": "mermaid",
          "line_count": 27,
          "complexity": "medium",
          "code": "stateDiagram-v2\n    [*] --> Created\n\n    Created --> Pending: submit\n    Pending --> PaymentProcessing: initiate payment\n\n    state PaymentProcessing {\n        [*] --> Authorizing\n        Authorizing "
        },
        {
          "language": "mermaid",
          "line_count": 28,
          "complexity": "medium",
          "code": "stateDiagram-v2\n    [*] --> Draft\n\n    state Draft {\n        [*] --> Writing\n        Writing --> AutoSaving\n        AutoSaving --> Writing\n    }\n\n    Draft --> Review: submit\n\n    state Review {\n     "
        },
        {
          "language": "mermaid",
          "line_count": 28,
          "complexity": "medium",
          "code": "stateDiagram-v2\n    [*] --> Disconnected\n\n    Disconnected --> Connecting: connect()\n    Connecting --> Connected: success\n    Connecting --> Failed: error\n\n    Failed --> Disconnected: reset\n    Fail"
        },
        {
          "language": "mermaid",
          "line_count": 11,
          "complexity": "complex",
          "code": "classDiagram\n    %% Good: Descriptive names\n    class UserAuthenticationService {\n        +authenticate(credentials)\n    }\n\n    %% Bad: Cryptic abbreviations\n    class UAServ {\n        +auth(cred)\n   "
        },
        {
          "language": "mermaid",
          "line_count": 22,
          "complexity": "complex",
          "code": "classDiagram\n    %% Good: Focused interfaces\n    class Readable {\n        <<Interface>>\n        +read() String\n    }\n\n    class Writable {\n        <<Interface>>\n        +write(data)\n    }\n\n    %% Bad:"
        },
        {
          "language": "mermaid",
          "line_count": 9,
          "complexity": "simple",
          "code": "stateDiagram-v2\n    %% Good: Clear labels\n    Idle --> Processing: startJob()\n    Processing --> Complete: onSuccess()\n\n    %% Bad: Unlabeled\n    Idle --> Processing\n    Processing --> Complete\n"
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "complex",
          "code": "classDiagram\n    class User {\n        id\n        password\n        email\n    }\n"
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "complex",
          "code": "classDiagram\n    class User {\n        +UUID id\n        -String password\n        +String email\n    }\n"
        },
        {
          "language": "mermaid",
          "line_count": 5,
          "complexity": "simple",
          "code": "stateDiagram-v2\n    [*] --> Processing\n    Processing --> Complete\n    Complete --> [*]\n"
        },
        {
          "language": "mermaid",
          "line_count": 8,
          "complexity": "simple",
          "code": "stateDiagram-v2\n    [*] --> Processing\n    Processing --> Complete: success\n    Processing --> Failed: error\n    Failed --> Processing: retry\n    Failed --> [*]: max retries\n    Complete --> [*]\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/classDiagram.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/stateDiagram.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.live"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "35 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "24 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "diagrams/mermaid-er-diagrams.md",
      "category": "diagrams",
      "skill_name": "mermaid-er-diagrams",
      "frontmatter": {
        "name": "mermaid-er-diagrams",
        "description": "Create entity-relationship diagrams with Mermaid for database schema design and data modeling"
      },
      "metrics": {
        "line_count": 619,
        "code_line_count": 202,
        "code_examples": 29,
        "external_refs": 3,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "mermaid",
          "line_count": 5,
          "complexity": "simple",
          "code": "erDiagram\n    CUSTOMER\n    ORDER\n    PRODUCT\n"
        },
        {
          "language": "mermaid",
          "line_count": 5,
          "complexity": "simple",
          "code": "erDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE_ITEM : contains\n    PRODUCT ||--o{ LINE_ITEM : includes\n"
        },
        {
          "language": "mermaid",
          "line_count": 3,
          "complexity": "simple",
          "code": "erDiagram\n    USER ||--o| PROFILE : has\n"
        },
        {
          "language": "mermaid",
          "line_count": 3,
          "complexity": "simple",
          "code": "erDiagram\n    ORDER ||--|| INVOICE : generates\n"
        },
        {
          "language": "mermaid",
          "line_count": 3,
          "complexity": "simple",
          "code": "erDiagram\n    AUTHOR }o--o{ BOOK : writes\n"
        },
        {
          "language": "mermaid",
          "line_count": 3,
          "complexity": "simple",
          "code": "erDiagram\n    COMPANY ||--|{ EMPLOYEE : employs\n"
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "simple",
          "code": "erDiagram\n    A ||--|| B : \"one-to-one (exactly)\"\n    C ||--o| D : \"one-to-zero-or-one\"\n    E ||--|{ F : \"one-to-one-or-more\"\n    G ||--o{ H : \"one-to-zero-or-more\"\n    I }o--o{ J : \"zero-or-more to z"
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "erDiagram\n    ORDER ||--|{ LINE_ITEM : contains\n\n    ORDER {\n        int order_id PK\n        date order_date\n    }\n\n    LINE_ITEM {\n        int order_id PK,FK\n        int line_number PK\n        int qu"
        },
        {
          "language": "mermaid",
          "line_count": 14,
          "complexity": "simple",
          "code": "erDiagram\n    CUSTOMER ||..o{ ORDER : places\n\n    CUSTOMER {\n        int customer_id PK\n        string name\n    }\n\n    ORDER {\n        int order_id PK\n        int customer_id FK\n        date order_dat"
        },
        {
          "language": "mermaid",
          "line_count": 10,
          "complexity": "simple",
          "code": "erDiagram\n    USER {\n        int id PK\n        string email UK\n        string username UK\n        string password_hash\n        datetime created_at\n        datetime updated_at\n    }\n"
        },
        {
          "language": "mermaid",
          "line_count": 18,
          "complexity": "simple",
          "code": "erDiagram\n    PRODUCT {\n        uuid product_id PK \"Primary Key\"\n        string sku UK \"Unique identifier\"\n        int category_id FK \"References category\"\n        string name\n        decimal price\n  "
        },
        {
          "language": "mermaid",
          "line_count": 10,
          "complexity": "simple",
          "code": "erDiagram\n    EMPLOYEE ||--o{ EMPLOYEE : manages\n\n    EMPLOYEE {\n        int employee_id PK\n        string name\n        int manager_id FK\n        string position\n    }\n"
        },
        {
          "language": "mermaid",
          "line_count": 25,
          "complexity": "medium",
          "code": "erDiagram\n    STUDENT ||--o{ ENROLLMENT : \"\"\n    ENROLLMENT }o--|| COURSE : \"\"\n\n    STUDENT {\n        int student_id PK\n        string name\n        string email UK\n    }\n\n    ENROLLMENT {\n        int "
        },
        {
          "language": "mermaid",
          "line_count": 56,
          "complexity": "complex",
          "code": "erDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ ORDER_ITEM : contains\n    PRODUCT ||--o{ ORDER_ITEM : included_in\n    PRODUCT }o--|| CATEGORY : belongs_to\n    ORDER ||--o| PAYMENT : has\n"
        },
        {
          "language": "mermaid",
          "line_count": 50,
          "complexity": "medium",
          "code": "erDiagram\n    USER ||--o{ SESSION : has\n    USER ||--o{ ROLE_ASSIGNMENT : has\n    ROLE ||--o{ ROLE_ASSIGNMENT : assigned_to\n    ROLE ||--o{ PERMISSION : includes\n    USER ||--o| USER_PROFILE : has\n\n  "
        },
        {
          "language": "mermaid",
          "line_count": 55,
          "complexity": "complex",
          "code": "erDiagram\n    USER ||--o{ POST : authors\n    POST ||--o{ COMMENT : has\n    USER ||--o{ COMMENT : writes\n    POST }o--o{ TAG : tagged_with\n    POST_TAG }o--|| POST : \"\"\n    POST_TAG }o--|| TAG : \"\"\n   "
        },
        {
          "language": "mermaid",
          "line_count": 58,
          "complexity": "complex",
          "code": "erDiagram\n    ORGANIZATION ||--|{ USER : employs\n    ORGANIZATION ||--|{ PROJECT : owns\n    PROJECT ||--o{ TASK : contains\n    USER ||--o{ TASK : assigned_to\n    USER ||--o{ ACTIVITY_LOG : generates\n "
        },
        {
          "language": "mermaid",
          "line_count": 9,
          "complexity": "simple",
          "code": "erDiagram\n    %% Good: Singular nouns, uppercase\n    USER ||--o{ ORDER : places\n    ORDER ||--|{ LINE_ITEM : contains\n\n    %% Bad: Plural, lowercase, inconsistent\n    users ||--o{ order : places\n    o"
        },
        {
          "language": "mermaid",
          "line_count": 18,
          "complexity": "simple",
          "code": "erDiagram\n    POST {\n        uuid post_id PK\n        uuid author_id FK \"References USER\"\n        uuid category_id FK \"References CATEGORY\"\n    }\n\n    USER {\n        uuid user_id PK\n    }\n\n    CATEGORY"
        },
        {
          "language": "mermaid",
          "line_count": 11,
          "complexity": "simple",
          "code": "erDiagram\n    STUDENT ||--o{ ENROLLMENT : \"\"\n    COURSE ||--o{ ENROLLMENT : \"\"\n\n    ENROLLMENT {\n        int student_id PK,FK\n        int course_id PK,FK\n        date enrolled_date\n        string grad"
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "simple",
          "code": "erDiagram\n    STUDENT {\n        int student_id PK\n        string name\n        json course_ids\n    }\n"
        },
        {
          "language": "mermaid",
          "line_count": 11,
          "complexity": "simple",
          "code": "erDiagram\n    %% Good: Clear action verbs\n    USER ||--o{ POST : authors\n    COMPANY ||--|{ EMPLOYEE : employs\n    ORDER ||--o| SHIPMENT : fulfilled_by\n\n    %% Bad: Generic or missing\n    USER ||--o{ "
        },
        {
          "language": "mermaid",
          "line_count": 3,
          "complexity": "simple",
          "code": "erDiagram\n    USER -- ORDER : places\n"
        },
        {
          "language": "mermaid",
          "line_count": 3,
          "complexity": "simple",
          "code": "erDiagram\n    USER ||--o{ ORDER : places\n"
        },
        {
          "language": "mermaid",
          "line_count": 6,
          "complexity": "simple",
          "code": "erDiagram\n    USER {\n        string email\n        string name\n    }\n"
        },
        {
          "language": "mermaid",
          "line_count": 7,
          "complexity": "simple",
          "code": "erDiagram\n    USER {\n        uuid user_id PK\n        string email UK\n        string name\n    }\n"
        },
        {
          "language": "mermaid",
          "line_count": 10,
          "complexity": "simple",
          "code": "erDiagram\n    ENTITY {\n        int id PK\n        string type\n        json data1\n        json data2\n        json data3\n        json data4\n    }\n"
        },
        {
          "language": "mermaid",
          "line_count": 4,
          "complexity": "simple",
          "code": "erDiagram\n    USER ||--|| PROFILE : has\n    PROFILE ||--|| USER : belongs_to\n"
        },
        {
          "language": "mermaid",
          "line_count": 3,
          "complexity": "simple",
          "code": "erDiagram\n    USER ||--o| PROFILE : has\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://mermaid.js.org/syntax/entityRelationshipDiagram.html"
        },
        {
          "type": "external",
          "url": "https://mermaid.live"
        },
        {
          "type": "external",
          "url": "https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "29 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/huggingface/huggingface-spaces.md",
      "category": "ml",
      "skill_name": "huggingface-spaces",
      "frontmatter": {
        "name": "ml-huggingface-spaces",
        "description": "Deploying Gradio and Streamlit apps on HuggingFace Spaces"
      },
      "metrics": {
        "line_count": 585,
        "code_line_count": 145,
        "code_examples": 16,
        "external_refs": 3,
        "tools_mentioned": 0,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "yaml",
          "line_count": 12,
          "complexity": "simple",
          "code": "---\ntitle: My Demo App\nemoji: \ud83d\ude80\ncolorFrom: blue\ncolorTo: purple\nsdk: gradio  # or streamlit, static\nsdk_version: 4.0.0\napp_file: app.py\npinned: false\nlicense: mit\n---\n"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "import gradio as gr\nfrom transformers import pipeline\n\n# Load model\nclassifier = pipeline(\"sentiment-analysis\", model=\"distilbert-base-uncased-finetuned-sst-2-english\")\n\n# Define function\ndef classify"
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "import gradio as gr\nfrom transformers import pipeline\n\ngenerator = pipeline(\"text-generation\", model=\"gpt2\")\n\ndef generate_text(prompt, max_length, temperature, top_p):\n    result = generator(\n       "
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "import gradio as gr\nfrom PIL import Image\nfrom transformers import pipeline\n\n# Image classification\nclassifier = pipeline(\"image-classification\", model=\"google/vit-base-patch16-224\")\n\ndef classify_ima"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "import streamlit as st\nfrom transformers import pipeline\n\nst.title(\"Sentiment Analysis App\")\nst.write(\"Analyze the sentiment of your text\")\n\n# Load model (cached)\n@st.cache_resource\ndef load_model():\n"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "import streamlit as st\nfrom transformers import pipeline\n\nst.title(\"Chat with GPT-2\")\n\n# Initialize session state\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\n# Load mode"
        },
        {
          "language": "markdown",
          "line_count": 33,
          "complexity": "medium",
          "code": "---\ntitle: Sentiment Analysis Demo\nemoji: \ud83d\ude0a\ncolorFrom: blue\ncolorTo: green\nsdk: gradio\nsdk_version: 4.0.0\napp_file: app.py\npinned: false\nlicense: mit\ntags:\n- sentiment-analysis\n- nlp\n- transformers\nmo"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "import os\nimport gradio as gr\nfrom openai import OpenAI\n\n# Access secret (set in Space settings)\napi_key = os.environ.get(\"OPENAI_API_KEY\")\n\nif not api_key:\n    raise ValueError(\"OPENAI_API_KEY not fo"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "import gradio as gr\nimport torch\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\n\n# Check GPU availability\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nprint(f\"Using device: {d"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "import gradio as gr\n\ndemo = gr.Interface(\n    fn=lambda x: x,\n    inputs=gr.Textbox(),\n    outputs=gr.Textbox(),\n    title=\"My App\"\n)\n\n# Launch with custom settings\ndemo.launch(\n    share=False,  # Do"
        },
        {
          "language": "html",
          "line_count": 13,
          "complexity": "simple",
          "code": "<!-- Embed Space in website -->\n<iframe\n  src=\"https://username-space-name.hf.space\"\n  frameborder=\"0\"\n  width=\"850\"\n  height=\"450\"\n></iframe>\n\n<!-- Embed with Gradio JS -->\n<script type=\"module\" src="
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c NEVER: Hardcode secrets\napi_key = \"sk-xxxxxxxxxxxx\"  # SECURITY RISK!\n\n# \u2705 CORRECT: Use environment variables\napi_key = os.environ.get(\"OPENAI_API_KEY\")\n"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# \u274c Don't: Load model on every call (Streamlit)\ndef predict(text):\n    model = pipeline(\"sentiment-analysis\")  # Reloads every time!\n    return model(text)\n\n# \u2705 Correct: Cache model loading\n@st.cache_"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u274c Don't: Use GPU for small models\n# Running CPU-compatible model on A100 ($4/hr)\nmodel = pipeline(\"sentiment-analysis\", model=\"distilbert-base-uncased\")\n\n# \u2705 Correct: Use CPU for small models\n# Save"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u274c Don't: No error handling\ndef predict(text):\n    return model(text)  # Crashes on invalid input\n\n# \u2705 Correct: Handle errors gracefully\ndef predict(text):\n    try:\n        if not text or len(text.st"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# \u274c Don't: Missing examples\ndemo = gr.Interface(fn=predict, inputs=..., outputs=...)\n\n# \u2705 Correct: Provide examples\ndemo = gr.Interface(\n    fn=predict,\n    inputs=...,\n    outputs=...,\n    examples=["
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://username-space-name.hf.space\""
        },
        {
          "type": "external",
          "url": "https://gradio.s3-us-west-2.amazonaws.com/3.50.0/gradio.js\"></script>"
        },
        {
          "type": "external",
          "url": "https://username-space-name.hf.space\"></gradio-app>"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "modal/modal-functions-basics.md",
      "category": "modal",
      "skill_name": "modal-functions-basics",
      "frontmatter": {
        "name": "modal-functions-basics",
        "description": "Building serverless functions on Modal.com"
      },
      "metrics": {
        "line_count": 583,
        "code_line_count": 201,
        "code_examples": 22,
        "external_refs": 3,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "import modal\n\n# Create app instance\napp = modal.App(\"my-app\")\n\n# Define simple function\n@app.function()\ndef hello(name: str) -> str:\n    return f\"Hello, {name}!\"\n\n# Local invocation\n@app.local_entrypo"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "@app.function()\ndef simple_function():\n    \"\"\"Basic function with no special configuration\"\"\"\n    return \"Hello from Modal!\"\n\n# With timeout\n@app.function(timeout=300)  # 5 minutes\ndef long_running_ta"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Debian slim base\nimage = modal.Image.debian_slim()\n\n# Ubuntu base\nimage = modal.Image.ubuntu()\n\n# Specific Python version\nimage = modal.Image.debian_slim(python_version=\"3.11\")\n\n# Use image in funct"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "# Single package\nimage = modal.Image.debian_slim().uv_pip_install(\"requests\")\n\n# Multiple packages\nimage = modal.Image.debian_slim().uv_pip_install(\n    \"numpy\",\n    \"pandas\",\n    \"scikit-learn\"\n)\n\n# "
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "# Install system packages\nimage = (\n    modal.Image.debian_slim()\n    .apt_install(\"ffmpeg\", \"libsm6\", \"libxext6\")\n    .uv_pip_install(\"opencv-python\")\n)\n\n@app.function(image=image)\ndef process_video("
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "image = (\n    modal.Image.debian_slim()\n    .uv_pip_install(\"torch\")\n    .run_commands(\n        \"mkdir -p /models\",\n        \"wget https://example.com/model.bin -O /models/model.bin\"\n    )\n)\n\n@app.func"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "@app.function()\ndef process_item(item_id: int) -> dict:\n    # Processing logic\n    return {\"id\": item_id, \"status\": \"processed\"}\n\n@app.local_entrypoint()\ndef main():\n    # Synchronous call (waits for "
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "@app.function()\ndef process_item(item: dict) -> dict:\n    import time\n    time.sleep(2)  # Simulate work\n    return {\"id\": item[\"id\"], \"processed\": True}\n\n@app.local_entrypoint()\ndef main():\n    items"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "@app.function()\ndef send_notification(user_id: int, message: str):\n    # Send notification (don't need to wait)\n    import requests\n    requests.post(\n        \"https://notifications.example.com/send\","
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "@app.local_entrypoint()\ndef main(name: str = \"World\"):\n    \"\"\"\n    Simple greeting CLI\n\n    Usage:\n        modal run app.py --name Alice\n    \"\"\"\n    result = hello.remote(name)\n    print(result)\n\n# Mu"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "# Global state persists across invocations in same container\nmodel = None\n\n@app.function()\ndef predict(text: str):\n    global model\n\n    # Load model once per container\n    if model is None:\n        p"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "@app.cls()\nclass ModelInference:\n    @modal.enter()\n    def load_model(self):\n        \"\"\"Called once when container starts\"\"\"\n        print(\"Loading model...\")\n        from transformers import pipelin"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "from typing import List, Dict, Any\n\n@app.function()\ndef process_primitives(\n    count: int,\n    ratio: float,\n    enabled: bool,\n    name: str\n) -> dict:\n    return {\n        \"count\": count,\n        \""
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "@app.function()\ndef return_dict() -> dict:\n    return {\"status\": \"success\", \"count\": 42}\n\n@app.function()\ndef return_list() -> list:\n    return [1, 2, 3, 4, 5]\n\n@app.function()\ndef return_dataclass() "
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "@app.function(retries=3)\ndef flaky_api_call():\n    \"\"\"Retries up to 3 times on failure\"\"\"\n    import requests\n    response = requests.get(\"https://api.example.com/data\")\n    response.raise_for_status("
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "@app.function()\ndef safe_processing(data: dict):\n    try:\n        result = risky_operation(data)\n        return {\"status\": \"success\", \"result\": result}\n    except ValueError as e:\n        return {\"sta"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "@app.function()\ndef logged_function(item_id: int):\n    print(f\"Processing item {item_id}\")\n\n    result = process(item_id)\n    print(f\"Item {item_id} result: {result}\")\n\n    return result\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "import logging\n\n@app.function()\ndef structured_logging():\n    logger = logging.getLogger(__name__)\n\n    logger.info(\"Starting processing\")\n    logger.warning(\"This is a warning\")\n    logger.error(\"Thi"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "# test_app.py\nfrom app import process_item\n\ndef test_process_item():\n    result = process_item.local(42)\n    assert result[\"id\"] == 42\n    assert result[\"status\"] == \"processed\"\n\nif __name__ == \"__mai"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# \u274c BAD - Assumes single invocation\ncounter = 0\n\n@app.function()\ndef bad_counter():\n    global counter\n    counter += 1\n    return counter  # Unpredictable across containers\n\n# \u2705 GOOD - Use parameters"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u274c BAD - Slow and may hit size limits\n@app.function()\ndef bad_large_data():\n    huge_list = [i for i in range(10_000_000)]\n    return huge_list\n\n# \u2705 GOOD - Use volumes or object storage\n@app.function"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c BAD - Wastes container time\n@app.function()\ndef bad_polling():\n    while True:\n        time.sleep(60)\n        check_status()\n\n# \u2705 GOOD - Use scheduled functions\n@app.function(schedule=modal.Period"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com/model.bin"
        },
        {
          "type": "example",
          "url": "https://notifications.example.com/send\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/data\""
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "22 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "collaboration/github/github-pull-requests.md",
      "category": "collaboration",
      "skill_name": "github-pull-requests",
      "frontmatter": {
        "name": "collaboration-github-pull-requests",
        "description": "Pull request workflow, code review, merge strategies, PR checks, and collaboration best practices"
      },
      "metrics": {
        "line_count": 640,
        "code_line_count": 174,
        "code_examples": 25,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 37,
          "complexity": "medium",
          "code": "# Create PR from current branch\ngh pr create\n\n# Create with title and body\ngh pr create \\\n  --title \"Add user authentication\" \\\n  --body \"Implements JWT-based authentication\"\n\n# Create from specific b"
        },
        {
          "language": "bash",
          "line_count": 30,
          "complexity": "medium",
          "code": "# List open PRs\ngh pr list\n\n# List PRs by state\ngh pr list --state merged\ngh pr list --state closed\n\n# View PR details\ngh pr view 42\n\n# View PR in browser\ngh pr view 42 --web\n\n# Check PR status\ngh pr "
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Request review from users\ngh pr edit 42 --add-reviewer user1,user2\n\n# Request review from team\ngh api repos/owner/repo/pulls/42/requested_reviewers \\\n  --method POST \\\n  --field team_reviewers[]=\"ba"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Approve PR\ngh pr review 42 --approve\n\n# Request changes\ngh pr review 42 --request-changes \\\n  --body \"Please add tests for edge cases\"\n\n# Comment without approval\ngh pr review 42 --comment \\\n  --bod"
        },
        {
          "language": "markdown",
          "line_count": 5,
          "complexity": "simple",
          "code": "## Good Review Comment\n**Issue**: The error handling doesn't cover network timeouts.\n\n**Suggestion**: Add timeout handling:\n"
        },
        {
          "language": "markdown",
          "line_count": 2,
          "complexity": "simple",
          "code": "This is wrong.\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Merge with merge commit\ngh pr merge 42 --merge\n\n# Or via API\ngh api repos/owner/repo/pulls/42/merge \\\n  --method PUT \\\n  --field merge_method=merge\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Squash and merge\ngh pr merge 42 --squash\n\n# Customize squash commit message\ngh pr merge 42 --squash \\\n  --subject \"Add user authentication\" \\\n  --body \"Implements JWT-based auth with refresh tokens\""
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Rebase and merge\ngh pr merge 42 --rebase\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Enable auto-merge when checks pass\ngh pr merge 42 --auto --squash\n\n# Auto-merge with merge commit\ngh pr merge 42 --auto --merge\n\n# Disable auto-merge\ngh api repos/owner/repo/pulls/42 \\\n  --method DE"
        },
        {
          "language": "yaml",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Example: GitHub Actions workflow\nname: PR Checks\non: pull_request\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - run: npm run lint\n\n  test:\n    runs-o"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# View PR checks\ngh pr checks 42\n\n# Wait for checks to complete\ngh pr checks 42 --watch\n\n# View specific check logs\ngh run view <run-id>\n"
        },
        {
          "language": "markdown",
          "line_count": 37,
          "complexity": "medium",
          "code": "## Description\nWhat does this PR do?\n\n## Motivation and Context\nWhy is this change needed? What problem does it solve?\n\n## Type of Change\n- [ ] Bug fix (non-breaking change)\n- [ ] New feature (non-bre"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Create PR with specific template\ngh pr create --template feature.md\n"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Create and manage\ngh pr create [flags]             # Create pull request\ngh pr list                       # List open PRs\ngh pr view <number>              # View PR details\ngh pr checkout <number>  "
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG: 50 files changed, 5000 lines added\n# Touches frontend, backend, database, and infrastructure\n# Impossible to review effectively\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# CORRECT: Break into smaller PRs\n# PR 1: Database schema changes\n# PR 2: Backend API updates\n# PR 3: Frontend integration\n# PR 4: Documentation updates\n\n# Each PR: 3-5 files, 200-400 lines\n"
        },
        {
          "language": "markdown",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG\nTitle: Update code\nDescription: (empty)\n"
        },
        {
          "language": "markdown",
          "line_count": 14,
          "complexity": "simple",
          "code": "# CORRECT\nTitle: Add rate limiting to API endpoints\n\nDescription:\nImplements rate limiting to prevent API abuse.\n\n- Adds Redis-based rate limiter\n- Configurable limits per endpoint\n- Returns 429 statu"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG: Mark PR as ready without addressing comments\n# Reviewer: \"Please add error handling\"\n# Author: (ignores feedback and merges)\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# CORRECT: Address all feedback\n# 1. Make requested changes\n# 2. Respond to comments\n# 3. Request re-review\n# 4. Wait for approval\n\n# If you disagree:\n# - Explain your reasoning\n# - Discuss alternativ"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: Rewrite history after review started\ngit push --force origin feature/auth\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# CORRECT: Add fixup commits during review\ngit commit -m \"Address review feedback: add tests\"\ngit push origin feature/auth\n\n# Squash when merging (if using squash merge)\ngh pr merge 42 --squash\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG: Override failing checks and merge\n# Tests failing, linter errors, build broken\n# Merge anyway because \"it works on my machine\"\n"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# CORRECT: Fix issues before merging\n# 1. Ensure all status checks pass\n# 2. Fix failing tests\n# 3. Resolve linter errors\n# 4. Update branch if behind main\n# 5. Merge only when green\n\n# Enable branch "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "jwt",
        "redis"
      ],
      "config_snippets": [
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "25 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "collaboration/github/github-actions-workflows.md",
      "category": "collaboration",
      "skill_name": "github-actions-workflows",
      "frontmatter": {
        "name": "collaboration-github-actions-workflows",
        "description": "Setting up CI/CD pipelines with GitHub Actions"
      },
      "metrics": {
        "line_count": 685,
        "code_line_count": 269,
        "code_examples": 30,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 30
      },
      "code_examples": [
        {
          "language": "yaml",
          "line_count": 11,
          "complexity": "simple",
          "code": "name: Workflow Name\non: [triggers]\nenv:\n  GLOBAL_VAR: value\njobs:\n  job-name:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step name\n        uses: actions/checkout@v4\n"
        },
        {
          "language": "yaml",
          "line_count": 30,
          "complexity": "medium",
          "code": "name: CI Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\nenv:\n  NODE_VERSION: '20'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checko"
        },
        {
          "language": "yaml",
          "line_count": 40,
          "complexity": "medium",
          "code": "on:\n  # Multiple events\n  push:\n    branches:\n      - main\n      - 'releases/**'\n    paths:\n      - 'src/**'\n      - '!src/docs/**'\n\n  pull_request:\n    types: [opened, synchronize, reopened]\n\n  # Sch"
        },
        {
          "language": "yaml",
          "line_count": 35,
          "complexity": "medium",
          "code": "jobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        node: [18, 20, 22]\n        exclude:\n          # Don't test Nod"
        },
        {
          "language": "yaml",
          "line_count": 25,
          "complexity": "medium",
          "code": "jobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - run: npm run build\n\n  test:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - run: npm test\n\n  deploy-staging:\n    needs: [bui"
        },
        {
          "language": "yaml",
          "line_count": 41,
          "complexity": "medium",
          "code": "jobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Node.js with automatic caching\n      - uses: actions/setup-node@v4\n        with:\n          node-version"
        },
        {
          "language": "yaml",
          "line_count": 32,
          "complexity": "medium",
          "code": "jobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Build artifacts\n        run: npm run build\n\n      # Upload artifacts\n      - name: Upload build ar"
        },
        {
          "language": "yaml",
          "line_count": 30,
          "complexity": "medium",
          "code": "jobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Step-level condition\n      - name: Deploy to staging\n        if: github.ref == 'refs/heads/develop'\n  "
        },
        {
          "language": "yaml",
          "line_count": 16,
          "complexity": "simple",
          "code": "# .github/workflows/deploy.yml\nname: Deploy\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy-prod:\n    uses: ./.github/workflows/reusable-deploy.yml\n    with:\n      environment: production\n      regi"
        },
        {
          "language": "yaml",
          "line_count": 30,
          "complexity": "medium",
          "code": "# .github/workflows/reusable-deploy.yml\nname: Reusable Deploy\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        required: true\n        type: string\n      region:\n        required: true\n    "
        },
        {
          "language": "yaml",
          "line_count": 26,
          "complexity": "medium",
          "code": "# .github/actions/setup-node-app/action.yml\nname: 'Setup Node.js Application'\ndescription: 'Checkout, setup Node.js, install dependencies'\n\ninputs:\n  node-version:\n    description: 'Node.js version'\n "
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "jobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: ./.github/actions/setup-node-app\n        with:\n          node-version: '20'\n\n      - run: npm run build\n"
        },
        {
          "language": "yaml",
          "line_count": 25,
          "complexity": "medium",
          "code": "jobs:\n  build:\n    runs-on: ubuntu-latest\n\n    env:\n      # Job-level environment variable\n      BUILD_ENV: production\n\n    steps:\n      - name: Print contexts\n        env:\n          # Step-level envi"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "on:\n  push:                    # Code pushed\n  pull_request:           # PR opened/updated\n  schedule:               # Cron schedule\n  workflow_dispatch:      # Manual trigger\n  release:              "
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "runs-on: ubuntu-latest          # Linux (fastest, cheapest)\nruns-on: macos-latest           # macOS\nruns-on: windows-latest         # Windows\nruns-on: [self-hosted, linux]   # Self-hosted runner\n"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "actions/checkout@v4              # Clone repository\nactions/setup-node@v4            # Setup Node.js\nactions/setup-python@v5          # Setup Python\nactions/cache@v4                 # Cache dependenci"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "${{ github.event_name }}         # Event that triggered workflow\n${{ github.ref }}                # Branch or tag ref\n${{ github.sha }}                # Commit SHA\n${{ github.actor }}              # U"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "if: success()       # Previous steps succeeded (default)\nif: failure()       # Previous step failed\nif: always()        # Run regardless of status\nif: cancelled()     # Workflow was cancelled\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# WRONG: Secrets in plain text\nenv:\n  API_KEY: abc123xyz\n  DATABASE_URL: postgresql://user:pass@host/db\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# CORRECT: Use GitHub Secrets\nenv:\n  API_KEY: ${{ secrets.API_KEY }}\n  DATABASE_URL: ${{ secrets.DATABASE_URL }}\n"
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: Install dependencies every time\n- run: npm install\n"
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "# CORRECT: Cache dependencies\n- uses: actions/setup-node@v4\n  with:\n    node-version: '20'\n    cache: 'npm'\n- run: npm ci\n"
        },
        {
          "language": "yaml",
          "line_count": 11,
          "complexity": "simple",
          "code": "# WRONG: Sequential tests\njobs:\n  test-unit:\n    runs-on: ubuntu-latest\n    steps: [...]\n\n  test-integration:\n    needs: test-unit\n    runs-on: ubuntu-latest\n    steps: [...]\n"
        },
        {
          "language": "yaml",
          "line_count": 14,
          "complexity": "simple",
          "code": "# CORRECT: Parallel tests\njobs:\n  test-unit:\n    runs-on: ubuntu-latest\n    steps: [...]\n\n  test-integration:\n    runs-on: ubuntu-latest\n    steps: [...]\n\n  deploy:\n    needs: [test-unit, test-integra"
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: Non-deterministic installs\n- run: npm install\n"
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# CORRECT: Reproducible installs\n- run: npm ci\n"
        },
        {
          "language": "yaml",
          "line_count": 12,
          "complexity": "simple",
          "code": "# WRONG: Build in multiple jobs\njobs:\n  test:\n    steps:\n      - run: npm run build\n      - run: npm test\n\n  deploy:\n    steps:\n      - run: npm run build\n      - run: ./deploy.sh\n"
        },
        {
          "language": "yaml",
          "line_count": 18,
          "complexity": "simple",
          "code": "# CORRECT: Build once, share artifacts\njobs:\n  build:\n    steps:\n      - run: npm run build\n      - uses: actions/upload-artifact@v4\n        with:\n          name: dist\n          path: dist/\n\n  test:\n "
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "# WRONG: Separate jobs for each platform\njobs:\n  test-ubuntu:\n    runs-on: ubuntu-latest\n    steps: [...]\n\n  test-macos:\n    runs-on: macos-latest\n    steps: [...]\n"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "# CORRECT: Use matrix\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n    steps: [...]\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "postgresql"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "30 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "debugging/concurrency-debugging.md",
      "category": "debugging",
      "skill_name": "concurrency-debugging",
      "frontmatter": {
        "name": "debugging-concurrency-debugging",
        "description": "Race condition detection, deadlock debugging, and data race analysis using ThreadSanitizer and specialized tools"
      },
      "metrics": {
        "line_count": 738,
        "code_line_count": 130,
        "code_examples": 16,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "c",
          "line_count": 21,
          "complexity": "medium",
          "code": "// Data race (undefined behavior in C/C++)\nint counter = 0;\nvoid thread1() { counter++; }  // Read-modify-write, not atomic\nvoid thread2() { counter++; }  // Race: both may read 0, write 1\n\n// Race co"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# C/C++: Compile with TSan\nclang++ -fsanitize=thread -g -O1 app.cpp -o app\n# or\ng++ -fsanitize=thread -g -O1 app.cpp -o app\n\n# Run instrumented binary\n./app\n\n# Example TSan report:\n# WARNING: ThreadSa"
        },
        {
          "language": "bash",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Build and run with race detector\ngo run -race main.go\n\n# Test with race detector\ngo test -race ./...\n\n# Build with race detector for deployment (staging only)\ngo build -race -o app\n\n# Example Go rac"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Suppress false positives\nexport TSAN_OPTIONS=\"suppressions=tsan.supp:history_size=7\"\n\n# tsan.supp file:\n# race:external_library_function\n# race:known_benign_race\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Run with Helgrind\nvalgrind --tool=helgrind ./app\n\n# Example Helgrind report:\n# ==12345== Possible data race during read of size 4 at 0x601040 by thread #2\n# ==12345== Locks held: none\n# ==12345==   "
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Command-line data race detection\ninspxe-cl -collect ti2 -result-dir results -- ./app\n\n# Deadlock detection\ninspxe-cl -collect ti3 -result-dir results -- ./app\n\n# View results in GUI\ninspxe-gui resul"
        },
        {
          "language": "bash",
          "line_count": 26,
          "complexity": "medium",
          "code": "# Attach to running process\ngdb -p 12345\n\n# Show all threads\n(gdb) info threads\n#   Id   Target Id         Frame\n# * 1    Thread 0x7f123... main () at app.cpp:42\n#   2    Thread 0x7f124... worker () a"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Find threads blocked on mutexes\n(gdb) thread apply all bt full\n# Look for frames containing:\n# - pthread_mutex_lock\n# - pthread_cond_wait\n# - __lll_lock_wait\n\n# Identify lock holders\n(gdb) p *(pthre"
        },
        {
          "language": "go",
          "line_count": 26,
          "complexity": "medium",
          "code": "// \u274c Data race: shared map access\nvar cache = make(map[string]string)\n\nfunc set(key, value string) {\n    cache[key] = value  // Race if concurrent\n}\n\nfunc get(key string) string {\n    return cache[key"
        },
        {
          "language": "go",
          "line_count": 34,
          "complexity": "medium",
          "code": "func TestConcurrentAccess(t *testing.T) {\n    var counter int64\n    var wg sync.WaitGroup\n\n    // Spawn 100 goroutines incrementing counter\n    for i := 0; i < 100; i++ {\n        wg.Add(1)\n        go "
        },
        {
          "language": "rust",
          "line_count": 11,
          "complexity": "simple",
          "code": "// Use type system to enforce lock order\nstruct DatabaseLock(Mutex<Database>);\nstruct CacheLock<'db>(Mutex<Cache>, PhantomData<&'db DatabaseLock>);\n\n// Lifetime ensures database locked before cache\nfn"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "# Lamport timestamps for happens-before tracking\nimport threading\n\nclass LamportClock:\n    def __init__(self):\n        self.time = 0\n        self.lock = threading.Lock()\n\n    def increment(self):\n    "
        },
        {
          "language": "rust",
          "line_count": 19,
          "complexity": "simple",
          "code": "// \u274c Data race in async code\nuse std::sync::Arc;\n\nasync fn buggy_counter(counter: Arc<i32>) {\n    // \u274c Arc provides shared ownership, not synchronization\n    let val = *counter;\n    tokio::time::sleep"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Add to Cargo.toml\n# [dependencies]\n# console-subscriber = \"0.1\"\n\n# In main.rs\nconsole_subscriber::init();\n\n# Run tokio-console\ntokio-console\n"
        },
        {
          "language": "go",
          "line_count": 8,
          "complexity": "simple",
          "code": "// \u274c Don't: Ignore race detector warnings\n// $ go test -race\n// WARNING: DATA RACE\n// ... but tests pass, so ship it \u274c\n\n// \u2705 Correct: Fix all races before merge\n// Races are undefined behavior, may ma"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "# \u274c Don't: Assume Python GIL prevents all races\nshared_list = []\n\ndef thread1():\n    shared_list.append(1)  # \u274c Not atomic despite GIL\n\ndef thread2():\n    shared_list.append(2)  # \u274c Race on internal l"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "cargo test",
        "go test"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "wasm/wasm-server-side.md",
      "category": "wasm",
      "skill_name": "wasm-server-side",
      "frontmatter": {
        "name": "wasm-server-side",
        "description": "Server-side WebAssembly execution with Wasmtime, WASI support, edge computing, and plugin systems"
      },
      "metrics": {
        "line_count": 566,
        "code_line_count": 131,
        "code_examples": 16,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "rust",
          "line_count": 28,
          "complexity": "medium",
          "code": "// Embedding Wasmtime in Rust\nuse wasmtime::*;\n\nfn main() -> Result<()> {\n    let engine = Engine::default();\n    let mut store = Store::new(&engine, ());\n\n    // Compile module\n    let module = Modul"
        },
        {
          "language": "rust",
          "line_count": 28,
          "complexity": "medium",
          "code": "use wasmtime::*;\nuse wasmtime_wasi::{WasiCtxBuilder, sync::WasiCtx};\n\nfn main() -> Result<()> {\n    let engine = Engine::default();\n    let mut linker = Linker::new(&engine);\n    wasmtime_wasi::add_to"
        },
        {
          "language": "rust",
          "line_count": 15,
          "complexity": "simple",
          "code": "// WASI guest code\nuse std::fs;\n\nfn main() {\n    // Reads from pre-opened /data directory\n    let content = fs::read_to_string(\"/data/input.txt\")\n        .expect(\"Failed to read file\");\n\n    println!("
        },
        {
          "language": "rust",
          "line_count": 37,
          "complexity": "medium",
          "code": "use wasmtime::*;\n\nfn main() -> Result<()> {\n    // Configure with limits\n    let mut config = Config::default();\n    config.consume_fuel(true); // Enable fuel metering\n\n    let engine = Engine::new(&c"
        },
        {
          "language": "rust",
          "line_count": 15,
          "complexity": "simple",
          "code": "// wrangler.toml\nname = \"my-worker\"\ntype = \"webpack\"\naccount_id = \"your-account-id\"\nworkers_dev = true\nroute = \"\"\nzone_id = \"\"\n\n[build]\ncommand = \"wasm-pack build --target bundler\"\n\n[build.upload]\nfor"
        },
        {
          "language": "rust",
          "line_count": 12,
          "complexity": "simple",
          "code": "// src/lib.rs\nuse wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\npub fn handle_request(url: String, method: String) -> String {\n    match method.as_str() {\n        \"GET\" => format!(\"GET request to {}\", ur"
        },
        {
          "language": "javascript",
          "line_count": 18,
          "complexity": "complex",
          "code": "// worker.js\nimport init, { handle_request } from './pkg/my_worker.js';\n\nexport default {\n    async fetch(request) {\n        await init();\n\n        const response = handle_request(\n            request"
        },
        {
          "language": "rust",
          "line_count": 50,
          "complexity": "medium",
          "code": "use wasmtime::*;\nuse std::collections::HashMap;\n\npub struct PluginManager {\n    engine: Engine,\n    plugins: HashMap<String, Module>,\n}\n\nimpl PluginManager {\n    pub fn new() -> Self {\n        PluginM"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, UploadFile\nfrom wasmtime import Store, Module, Instance, Engine, Func, FuncType, ValType\nimport io\n\napp = FastAPI()\nengine = Engine()\n\ndef log_callback(val: int):\n    prin"
        },
        {
          "language": "rust",
          "line_count": 27,
          "complexity": "medium",
          "code": "use wasmtime::*;\n\nfn compile_ahead_of_time() -> Result<()> {\n    let engine = Engine::default();\n    let module = Module::from_file(&engine, \"app.wasm\")?;\n\n    // Serialize compiled module\n    let com"
        },
        {
          "language": "rust",
          "line_count": 33,
          "complexity": "medium",
          "code": "use wasmtime::*;\nuse std::time::Duration;\n\nstruct Tenant {\n    id: String,\n    fuel_limit: u64,\n    memory_limit: u32, // pages\n}\n\nfn execute_tenant_code(tenant: &Tenant, wasm_bytes: &[u8]) -> Result<"
        },
        {
          "language": "rust",
          "line_count": 24,
          "complexity": "medium",
          "code": "use wasmtime::*;\nuse wasmtime_wasi::WasiCtxBuilder;\n\nfn main() -> Result<()> {\n    let engine = Engine::default();\n    let mut linker = Linker::new(&engine);\n    wasmtime_wasi::add_to_linker(&mut link"
        },
        {
          "language": "rust",
          "line_count": 9,
          "complexity": "simple",
          "code": "// Guest code accessing env vars\nfn main() {\n    let db_url = std::env::var(\"DATABASE_URL\")\n        .expect(\"DATABASE_URL not set\");\n\n    let args: Vec<String> = std::env::args().collect();\n    printl"
        },
        {
          "language": "rust",
          "line_count": 32,
          "complexity": "medium",
          "code": "use wasmtime::*;\n\nfn process_stream(wasm_path: &str, data: &[u8]) -> Result<Vec<u8>> {\n    let engine = Engine::default();\n    let module = Module::from_file(&engine, wasm_path)?;\n    let mut store = "
        },
        {
          "language": "rust",
          "line_count": 32,
          "complexity": "medium",
          "code": "// \u274c NEVER: Run untrusted code without limits\nfn unsafe_execute(wasm_bytes: &[u8]) -> Result<()> {\n    let engine = Engine::default();\n    let module = Module::new(&engine, wasm_bytes)?;\n    let mut s"
        },
        {
          "language": "rust",
          "line_count": 10,
          "complexity": "simple",
          "code": "// \u274c Don't: Grant unrestricted filesystem access\nlet wasi = WasiCtxBuilder::new()\n    .preopened_dir(Dir::open_ambient_dir(\"/\", ambient_authority())?, \"/\")?\n    .build();\n\n// \u2705 Correct: Minimal necess"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "webpack"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "product/prd-user-stories-acceptance.md",
      "category": "product",
      "skill_name": "prd-user-stories-acceptance",
      "frontmatter": {
        "name": "product-prd-user-stories-acceptance",
        "description": "Writing effective user stories, epics, acceptance criteria, and story mapping for product requirements"
      },
      "metrics": {
        "line_count": 561,
        "code_line_count": 105,
        "code_examples": 13,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "markdown",
          "line_count": 33,
          "complexity": "medium",
          "code": "# Epic: User Authentication System\n\n## Epic Goal\nEnable users to securely create accounts, log in, and manage their credentials.\n\n## User Segments\n- New users (signing up for first time)\n- Returning u"
        },
        {
          "language": "markdown",
          "line_count": 39,
          "complexity": "medium",
          "code": "## User Story: Sign Up with Email\n\n**As a** new user\n**I want** to create an account using my email and password\n**So that** I can access personalized features and save my data\n\n### Acceptance Criteri"
        },
        {
          "language": "markdown",
          "line_count": 24,
          "complexity": "medium",
          "code": "## User Story: Export Data as CSV\n\n**As a** data analyst\n**I want** to export my dashboard data as a CSV file\n**So that** I can analyze it in Excel or other tools\n\n### Acceptance Criteria\n- [ ] \"Expor"
        },
        {
          "language": "markdown",
          "line_count": 41,
          "complexity": "medium",
          "code": "## User Story: Password Reset Flow\n\n**As a** user who forgot my password\n**I want** to reset it via email link\n**So that** I can regain access to my account\n\n### Acceptance Criteria\n\n**Scenario 1: Suc"
        },
        {
          "language": "markdown",
          "line_count": 47,
          "complexity": "medium",
          "code": "## Story Map: User Onboarding Journey\n\n### Backbone (Major Activities)\n1. Discover Product\n2. Sign Up\n3. Complete Profile\n4. First Use\n5. Become Active User\n\n### User Stories (organized by activity)\n\n"
        },
        {
          "language": "markdown",
          "line_count": 30,
          "complexity": "medium",
          "code": "## Story Sizing Reference\n\n**XS (1 point)**: ~1-2 hours\n- Add a label to a form field\n- Change button color\n- Update copy on a page\n\n**S (2 points)**: ~half day\n- Add a new form field with validation\n"
        },
        {
          "language": "markdown",
          "line_count": 43,
          "complexity": "medium",
          "code": "## Edge Cases Checklist for User Stories\n\n### Input Validation\n- [ ] Empty input (required fields)\n- [ ] Extremely long input (>1000 chars)\n- [ ] Special characters (unicode, emojis, SQL injection att"
        },
        {
          "language": "markdown",
          "line_count": 39,
          "complexity": "medium",
          "code": "## User Story: Real-Time Dashboard Updates\n\n**As a** operations manager\n**I want** dashboard metrics to update in real-time\n**So that** I can monitor system health without refreshing\n\n### Functional A"
        },
        {
          "language": "markdown",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c NEVER:\n**As a** developer\n**I want** to create a REST API endpoint for user data\n**So that** the frontend can call it\n\n# \u2705 CORRECT:\n**As a** dashboard user\n**I want** to see my profile information"
        },
        {
          "language": "markdown",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c Don't:\n- Dashboard should load fast\n- Form should be easy to use\n\n# \u2705 Correct:\n- Dashboard loads in <2 seconds on 3G network\n- Form has real-time validation with clear error messages\n- Form is key"
        },
        {
          "language": "markdown",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c Don't:\n\"As a user, I want a complete user management system\"\n\n# \u2705 Correct: Break into stories\n- Story 1: Create user account with email\n- Story 2: Edit user profile\n- Story 3: Deactivate user acco"
        },
        {
          "language": "markdown",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c Don't:\nGIVEN I enter valid credentials\nWHEN I click login\nTHEN I am logged in\n\n# \u2705 Correct: Include error scenarios\n- Valid credentials \u2192 Login succeeds\n- Invalid password \u2192 Error message shown\n- "
        },
        {
          "language": "markdown",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c Don't:\n\"As a user, I want the app to use Redis caching so page loads are faster\"\n\n# \u2705 Correct:\n\"As a user, I want dashboard to load in <2 seconds so I can quickly check metrics\"\n[Engineering decid"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "vite",
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/hybrid-search-rag.md",
      "category": "ml",
      "skill_name": "hybrid-search-rag",
      "frontmatter": {
        "name": "hybrid-search-rag",
        "description": "Combining vector search with BM25 sparse retrieval using fusion algorithms for improved RAG accuracy"
      },
      "metrics": {
        "line_count": 657,
        "code_line_count": 84,
        "code_examples": 18,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 2,
          "complexity": "simple",
          "code": "norm_score = (score - min_score) / (max_score - min_score)\n"
        },
        {
          "language": "python",
          "line_count": 2,
          "complexity": "simple",
          "code": "norm_score = (score - mean) / std_dev\n"
        },
        {
          "language": "python",
          "line_count": 2,
          "complexity": "simple",
          "code": "norm_score = exp(score) / \u03a3 exp(all_scores)\n"
        },
        {
          "language": "python",
          "line_count": 91,
          "complexity": "complex",
          "code": "import dspy\nfrom typing import List, Dict, Tuple\nfrom collections import defaultdict\n\nclass RRFHybridRetriever(dspy.Module):\n    \"\"\"Hybrid retrieval using Reciprocal Rank Fusion.\"\"\"\n\n    def __init__("
        },
        {
          "language": "python",
          "line_count": 69,
          "complexity": "complex",
          "code": "import dspy\nfrom elasticsearch import Elasticsearch\n\nclass ElasticsearchHybridRetriever:\n    \"\"\"Hybrid retrieval using Elasticsearch native capabilities.\"\"\"\n\n    def __init__(self, es_client: Elastics"
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "import dspy\nimport weaviate\n\nclass WeaviateHybridRetriever:\n    \"\"\"Hybrid retrieval using Weaviate native hybrid search.\"\"\"\n\n    def __init__(self, client: weaviate.Client, class_name: str, k=10, alph"
        },
        {
          "language": "python",
          "line_count": 53,
          "complexity": "complex",
          "code": "import dspy\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.models import SparseVector, NamedSparseVector\n\nclass QdrantHybridRetriever:\n    \"\"\"Hybrid retrieval using Qdrant sparse + dense ve"
        },
        {
          "language": "python",
          "line_count": 53,
          "complexity": "complex",
          "code": "import dspy\nimport numpy as np\nfrom typing import List, Tuple\n\nclass WeightedHybridRetriever(dspy.Module):\n    \"\"\"Hybrid retrieval with weighted score fusion.\"\"\"\n\n    def __init__(self, k=10, alpha=0."
        },
        {
          "language": "python",
          "line_count": 73,
          "complexity": "complex",
          "code": "import dspy\nfrom phoenix.trace import dsl as trace_dsl\nfrom phoenix.evals import RetrievalEvaluator\n\nclass ObservableHybridRAG(dspy.Module):\n    \"\"\"Hybrid RAG with Phoenix observability.\"\"\"\n\n    def _"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "def rrf_score(rank, k=60):\n    return 1.0 / (k + rank)\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad - misses exact product codes\nretrieve = dspy.Retrieve(k=5)  # Vector only\nresult = retrieve(\"Find part number ABC-12345\")\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Good - combines semantic + exact match\nretrieve = RRFHybridRetriever(k=5)\nresult = retrieve(\"Find part number ABC-12345\")\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad - raw scores have different scales\ncombined_score = vector_score + bm25_score  # Invalid!\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Good - normalize then combine\nnorm_vector = normalize(vector_score)\nnorm_bm25 = normalize(bm25_score)\ncombined_score = 0.6 * norm_vector + 0.4 * norm_bm25\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad - using default without evaluation\nretriever = WeaviateHybridRetriever(alpha=0.5)  # Is 0.5 optimal?\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Good - grid search for optimal alpha\nfor alpha in [0.3, 0.5, 0.7, 0.9]:\n    retriever = WeaviateHybridRetriever(alpha=alpha)\n    score = evaluate(retriever, test_set)\n    # Choose best alpha\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad - vector search alone for medical/legal/technical\nretrieve = dspy.Retrieve(k=5)  # Misses terminology\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Good - hybrid catches exact medical terms\nretrieve = RRFHybridRetriever(k=5)\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/hierarchical-rag.md",
      "category": "ml",
      "skill_name": "hierarchical-rag",
      "frontmatter": {
        "name": "hierarchical-rag",
        "description": "Multi-level retrieval with recursive summarization and parent-child document structures for improved context selection"
      },
      "metrics": {
        "line_count": 695,
        "code_line_count": 75,
        "code_examples": 13,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 134,
          "complexity": "complex",
          "code": "import dspy\nfrom typing import List, Dict\n\nclass RecursiveSummarizer(dspy.Module):\n    \"\"\"Build hierarchical summaries bottom-up.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.su"
        },
        {
          "language": "python",
          "line_count": 90,
          "complexity": "complex",
          "code": "import dspy\nfrom typing import List, Dict, Tuple\n\nclass ParentChildRetriever:\n    \"\"\"Retrieve child chunks with parent context.\"\"\"\n\n    def __init__(self, hierarchy: Dict):\n        self.hierarchy = hi"
        },
        {
          "language": "python",
          "line_count": 85,
          "complexity": "complex",
          "code": "import dspy\n\nclass TopDownRetriever(dspy.Module):\n    \"\"\"Top-down coarse-to-fine retrieval.\"\"\"\n\n    def __init__(self, hierarchy: Dict, max_depth=3):\n        super().__init__()\n        self.hierarchy "
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "import dspy\nfrom llama_index.core import Document, VectorStoreIndex\nfrom llama_index.core.node_parser import HierarchicalNodeParser\n\nclass LlamaIndexHierarchicalRAG:\n    \"\"\"Hierarchical RAG using Llam"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "import dspy\nfrom ragas import evaluate\nfrom ragas.metrics import context_precision, context_recall, faithfulness\n\nclass HierarchicalRAGEvaluator:\n    \"\"\"Evaluate hierarchical RAG quality.\"\"\"\n\n    def "
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad - retrieve paragraphs without parent context\nchunks = retrieve(query, k=5)  # Just paragraphs\ncontext = \"\\n\".join(chunks)  # No section/chapter info\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Good - retrieve with parent summaries\nchunks = retrieve_with_parents(query, k=5)\ncontext = format_hierarchical_context(chunks)  # Includes parent info\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad - split book into equal 512-token chunks\nchunks = split_text(book, chunk_size=512)  # Loses structure\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Good - parse hierarchy first\nhierarchy = parse_hierarchical(book)  # Chapters \u2192 sections \u2192 paragraphs\nchunks = hierarchical_chunks(hierarchy)\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad - only store leaf paragraphs\nfor paragraph in document:\n    store(paragraph)  # No chapter/section summaries\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Good - recursive summarization\nhierarchy = build_hierarchy(document)\nadd_summaries_recursive(hierarchy)  # All levels have summaries\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Bad - 512 tokens for everything\nchunks = [\n    {\"level\": \"chapter\", \"size\": 512},  # Too small!\n    {\"level\": \"paragraph\", \"size\": 512}  # Too large!\n]\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Good - larger chunks for higher levels\nchunks = [\n    {\"level\": \"chapter\", \"size\": 2048},\n    {\"level\": \"section\", \"size\": 512},\n    {\"level\": \"paragraph\", \"size\": 128}\n]\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "postgresql"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/huggingface/huggingface-datasets.md",
      "category": "ml",
      "skill_name": "huggingface-datasets",
      "frontmatter": {
        "name": "ml-huggingface-datasets",
        "description": "Loading, processing, and managing datasets with HuggingFace datasets library"
      },
      "metrics": {
        "line_count": 596,
        "code_line_count": 155,
        "code_examples": 22,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 8,
          "complexity": "complex",
          "code": "from datasets import load_dataset\n\ndataset = load_dataset(\"imdb\")\n# DatasetDict({\n#     train: Dataset({features: ['text', 'label'], num_rows: 25000})\n#     test: Dataset({features: ['text', 'label'],"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "train_dataset = dataset[\"train\"]\n# Dataset({\n#     features: ['text', 'label'],\n#     num_rows: 25000\n# })\n"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "from datasets import load_dataset\n\n# Load entire dataset\ndataset = load_dataset(\"squad\")\n\n# Load specific split\ntrain_data = load_dataset(\"squad\", split=\"train\")\n\n# Load specific configuration\ndataset"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# CSV\ndataset = load_dataset(\"csv\", data_files=\"data.csv\")\n\n# JSON\ndataset = load_dataset(\"json\", data_files=\"data.json\")\n\n# Multiple files\ndataset = load_dataset(\"json\", data_files={\n    \"train\": \"tr"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "def tokenize(example):\n    return tokenizer(example[\"text\"], truncation=True, padding=\"max_length\")\n\ndataset = dataset.map(tokenize, batched=True)\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Filter by condition\ndataset = dataset.filter(lambda x: len(x[\"text\"]) > 100)\n\n# Filter with index\ndataset = dataset.filter(lambda x, i: i % 2 == 0, with_indices=True)\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Select by index\nsmall_dataset = dataset.select(range(1000))\n\n# Select random sample\nsample = dataset.shuffle(seed=42).select(range(100))\n"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "from datasets import load_dataset\n\n# Text classification\nimdb = load_dataset(\"imdb\")\nsst2 = load_dataset(\"glue\", \"sst2\")\n\n# Question answering\nsquad = load_dataset(\"squad\")\nsquad_v2 = load_dataset(\"sq"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "from datasets import load_dataset\nfrom transformers import AutoTokenizer\n\ndataset = load_dataset(\"imdb\")\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-uncased\")\n\n# Simple mapping\ndef tokenize_f"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "from datasets import load_dataset\n\ndataset = load_dataset(\"imdb\", split=\"train\")\n\n# Filter by length\nlong_reviews = dataset.filter(lambda x: len(x[\"text\"]) > 500)\n\n# Filter by label\npositive_only = da"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "from datasets import Dataset, DatasetDict\n\n# From dictionary\ndata = {\n    \"text\": [\"Example 1\", \"Example 2\", \"Example 3\"],\n    \"label\": [0, 1, 0]\n}\ndataset = Dataset.from_dict(data)\n\n# From pandas Dat"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "from datasets import load_dataset\n\n# Load in streaming mode\ndataset = load_dataset(\"c4\", \"en\", streaming=True)\n\n# Iterate through examples\nfor example in dataset[\"train\"]:\n    print(example[\"text\"])\n "
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "from datasets import Dataset, Features, Value, ClassLabel, Sequence\n\n# Define custom features\nfeatures = Features({\n    \"text\": Value(\"string\"),\n    \"label\": ClassLabel(names=[\"negative\", \"positive\"])"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "from datasets import load_dataset, disable_caching, enable_caching\n\n# Default: caching enabled (~/.cache/huggingface/datasets/)\n\n# Disable caching\ndisable_caching()\ndataset = load_dataset(\"imdb\")\n\n# R"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "from transformers import DataCollatorWithPadding, DataCollatorForLanguageModeling\nfrom datasets import load_dataset\nfrom transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"b"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "from datasets import load_dataset, concatenate_datasets, interleave_datasets\n\n# Load multiple datasets\ndataset1 = load_dataset(\"imdb\", split=\"train\")\ndataset2 = load_dataset(\"yelp_polarity\", split=\"tr"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c NEVER: Process without batching for large datasets\ndataset = dataset.map(tokenize)  # Processes one example at a time\n\n# \u2705 CORRECT: Use batched processing\ndataset = dataset.map(tokenize, batched=T"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c Don't: Keep unnecessary columns\ntokenized = dataset.map(tokenize, batched=True)\n# Still has original \"text\" column, wastes memory\n\n# \u2705 Correct: Remove columns not needed for training\ntokenized = d"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c Don't: Load entire dataset when you need subset\ndataset = load_dataset(\"c4\", \"en\")  # Hundreds of GB!\nsmall_dataset = dataset[\"train\"].select(range(1000))\n\n# \u2705 Correct: Use streaming or split para"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c Don't: Forget to set seed for shuffling\nshuffled = dataset.shuffle()\n# Different order each run, not reproducible\n\n# \u2705 Correct: Set seed\nshuffled = dataset.shuffle(seed=42)\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c Don't: Process serially when you can parallelize\nprocessed = dataset.map(expensive_function, batched=True)\n# Uses single process\n\n# \u2705 Correct: Use multiple processes\nprocessed = dataset.map(\n    e"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# \u274c Don't: Create dataset without features for custom data\ndataset = Dataset.from_dict({\n    \"text\": [\"Example\"],\n    \"label\": [\"positive\"]  # Should be integer/ClassLabel\n})\n\n# \u2705 Correct: Define feat"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "ssl"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "22 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "typed-holes-refactor/references/CONSTRAINT_RULES.md",
      "category": "typed-holes-refactor",
      "skill_name": "CONSTRAINT_RULES",
      "frontmatter": {
        "name": "constraint-rules",
        "description": "Reference guide for constraint propagation rules in typed holes refactoring including dependency tracking and solution space narrowing. Use as reference when propagating constraints between resolved holes."
      },
      "metrics": {
        "line_count": 464,
        "code_line_count": 129,
        "code_examples": 15,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "# Resolution of R3_abstraction_layers\nclass NodeInterface:\n    async def run(self, context: Context) -> Result\n    \n# Propagates to:\nR4_parallel_execution:\n    MUST handle async/await\n    MUST use asy"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "# Resolution of R2_module_boundaries  \nclass Repository(Protocol[T]):\n    def get(self, id: str) -> T\n    def save(self, entity: T) -> None\n\n# Propagates to:\nR4_implementations:\n    MUST provide type "
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Resolution of R4_parallelization\nparallel_executor = {\n    \"max_concurrent\": 3,\n    \"strategy\": \"asyncio.gather\"\n}\n\n# Propagates to:\nR8_rate_limiting:\n    rate_limit = provider_limit / 3\n    \nR9_mem"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Resolution of R5_caching_strategy\ncache = {\n    \"max_size\": 1000,\n    \"eviction\": \"LRU\",\n    \"ttl\": 3600\n}\n\n# Propagates to:\nR9_memory_budget:\n    cache_memory = 1000 * avg_entry_size\n    total_memo"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Resolution of R8_optimization_testing\nvalidation = {\n    \"required_examples\": 50,\n    \"statistical_significance\": 0.05,\n    \"comparison_metric\": \"accuracy\"\n}\n\n# Propagates to:\nR6_test_data:\n    MUST"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Resolution of R9_performance_validation\nperf_tests = {\n    \"required_scenarios\": 20,\n    \"iterations_per_scenario\": 100,\n    \"metrics\": [\"latency_p50\", \"latency_p99\", \"throughput\"]\n}\n\n# Propagates t"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Resolution of R2_testing_framework\ntesting = {\n    \"framework\": \"pytest\",\n    \"version\": \"7.4.0\",\n    \"plugins\": [\"pytest-asyncio\", \"pytest-cov\"]\n}\n\n# Propagates to:\nR7_test_writing:\n    MUST use py"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Resolution of R3_http_client\nhttp = {\n    \"library\": \"httpx\",\n    \"version\": \"0.24.0\",\n    \"features\": [\"async\", \"http2\"]\n}\n\n# Propagates to:\nR4_api_implementations:\n    MUST use httpx.AsyncClient\n "
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "# Resolution of R1_target_architecture\narchitecture = {\n    \"layers\": [\"api\", \"domain\", \"data\"],\n    \"rules\": {\n        \"api\": {\n            \"can_import\": [\"domain\"],\n            \"cannot_import\": [\"da"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Resolution of R1_dependency_flow\nflow = {\n    \"direction\": \"top-down\",\n    \"rule\": \"Higher layers depend on lower, never reverse\"\n}\n\n# Propagates to:\nR4_all_implementations:\n    abstractions in lowe"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Resolution of R4_parallelization\n# Attempts max_concurrent=10\n\n# During testing, discovers:\n- Provider rate limit = 30 req/min\n- Memory per operation = 500MB\n- Total memory = 4GB\n\n# This DISCOVERS n"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "# R4_performance resolved\nconstraint_1 = \"latency < 100ms\"\n\n# R5_security resolved  \nconstraint_2 = \"encrypt all data (adds 150ms overhead)\"\n\n# CONFLICT DETECTED:\n# Cannot satisfy both constraints sim"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "medium",
          "code": "def propagate_constraints(resolved_hole, resolution):\n    \"\"\"Propagate constraints from resolved hole to dependents\"\"\"\n    \n    # 1. Extract constraints from resolution\n    new_constraints = extract_c"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "medium",
          "code": "# Resolve R1: target_architecture\nresolution_R1 = {\n    \"layers\": [\"api\", \"domain\", \"infrastructure\"],\n    \"principle\": \"dependency inversion\"\n}\n\n# Propagates to R2: module_boundaries\nconstraint_R2 = "
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "def validate_all_constraints():\n    \"\"\"Check that all constraints are satisfiable\"\"\"\n    \n    for hole in all_holes:\n        # Check local constraint satisfaction\n        if not are_satisfiable(hole.c"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "pytest"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 59.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "realtime/websocket-implementation.md",
      "category": "realtime",
      "skill_name": "websocket-implementation",
      "frontmatter": {
        "name": "realtime-websocket-implementation",
        "description": "Use WebSocket implementation when you need:"
      },
      "metrics": {
        "line_count": 696,
        "code_line_count": 120,
        "code_examples": 17,
        "external_refs": 1,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 108,
          "complexity": "complex",
          "code": "// TypeScript/JavaScript client\nclass WebSocketClient {\n  private ws: WebSocket | null = null;\n  private url: string;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private rec"
        },
        {
          "language": "typescript",
          "line_count": 153,
          "complexity": "complex",
          "code": "// Using ws library\nimport { WebSocketServer, WebSocket } from 'ws';\nimport http from 'http';\n\ninterface Client {\n  ws: WebSocket;\n  id: string;\n  rooms: Set<string>;\n  lastPing: number;\n}\n\nclass WebS"
        },
        {
          "language": "typescript",
          "line_count": 70,
          "complexity": "complex",
          "code": "class ReconnectingWebSocket {\n  private url: string;\n  private ws: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectDelay = 30000;\n  private minReconnectDelay = 1000;\n  "
        },
        {
          "language": "typescript",
          "line_count": 90,
          "complexity": "complex",
          "code": "// Client-side: Send auth token on connection\nclass AuthenticatedWebSocket {\n  private ws: WebSocket | null = null;\n\n  async connect(url: string, token: string): Promise<void> {\n    return new Promise"
        },
        {
          "language": "typescript",
          "line_count": 14,
          "complexity": "simple",
          "code": "// Basic connection\nconst ws = new WebSocket('wss://api.example.com/ws');\n\n// With protocols\nconst ws = new WebSocket('wss://api.example.com/ws', ['v1.protocol']);\n\n// Check state\nws.readyState // CON"
        },
        {
          "language": "typescript",
          "line_count": 5,
          "complexity": "simple",
          "code": "ws.onopen = (event) => { /* Connection opened */ };\nws.onmessage = (event) => { /* Message received: event.data */ };\nws.onerror = (event) => { /* Error occurred */ };\nws.onclose = (event) => { /* Con"
        },
        {
          "language": "typescript",
          "line_count": 12,
          "complexity": "complex",
          "code": "// Node.js: ws\nimport { WebSocketServer } from 'ws';\n\n// Node.js: uWebSockets.js (high performance)\nimport uWS from 'uWebSockets.js';\n\n// Python: websockets\nimport websockets\n\n// Go: gorilla/websocket"
        },
        {
          "language": "typescript",
          "line_count": 6,
          "complexity": "simple",
          "code": "// Wrong: No reconnection handling\nconst ws = new WebSocket(url);\nws.onclose = () => {\n  console.log('Disconnected'); // Connection lost forever\n};\n"
        },
        {
          "language": "typescript",
          "line_count": 6,
          "complexity": "complex",
          "code": "class WebSocketClient {\n  private reconnect() {\n    setTimeout(() => this.connect(), this.getBackoffDelay());\n  }\n}\n"
        },
        {
          "language": "typescript",
          "line_count": 4,
          "complexity": "simple",
          "code": "// Wrong: No connection health check\nconst ws = new WebSocket(url);\n// Connection might be dead but readyState still shows OPEN\n"
        },
        {
          "language": "typescript",
          "line_count": 6,
          "complexity": "simple",
          "code": "setInterval(() => {\n  if (ws.readyState === WebSocket.OPEN) {\n    ws.send(JSON.stringify({ type: 'ping' }));\n  }\n}, 30000);\n"
        },
        {
          "language": "typescript",
          "line_count": 4,
          "complexity": "simple",
          "code": "// Wrong: Send immediately\nconst ws = new WebSocket(url);\nws.send('hello'); // Error: WebSocket is not open\n"
        },
        {
          "language": "typescript",
          "line_count": 5,
          "complexity": "simple",
          "code": "const ws = new WebSocket(url);\nws.onopen = () => {\n  ws.send('hello'); // Safe\n};\n"
        },
        {
          "language": "typescript",
          "line_count": 8,
          "complexity": "simple",
          "code": "// Wrong: Drop messages during reconnection\nsend(data: any) {\n  if (this.ws?.readyState === WebSocket.OPEN) {\n    this.ws.send(data);\n  }\n  // Message is lost if not connected\n}\n"
        },
        {
          "language": "typescript",
          "line_count": 16,
          "complexity": "simple",
          "code": "private queue: any[] = [];\n\nsend(data: any) {\n  if (this.ws?.readyState === WebSocket.OPEN) {\n    this.ws.send(data);\n  } else {\n    this.queue.push(data);\n  }\n}\n\nprivate flushQueue() {\n  while (this."
        },
        {
          "language": "typescript",
          "line_count": 6,
          "complexity": "simple",
          "code": "// Wrong: Assume all messages are valid JSON\nws.onmessage = (event) => {\n  const data = JSON.parse(event.data); // Can throw\n  handleMessage(data);\n};\n"
        },
        {
          "language": "typescript",
          "line_count": 9,
          "complexity": "simple",
          "code": "ws.onmessage = (event) => {\n  try {\n    const data = JSON.parse(event.data);\n    handleMessage(data);\n  } catch (error) {\n    console.error('Invalid message:', error);\n  }\n};\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "http://${req.headers.host}`"
        }
      ],
      "tools_mentioned": [
        "jwt"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/rag-evaluation-metrics.md",
      "category": "ml",
      "skill_name": "rag-evaluation-metrics",
      "frontmatter": {
        "name": "ml-rag-evaluation-metrics",
        "description": "Comprehensive guide to RAG evaluation using RAGAS (Faithfulness, Answer Relevancy, Context Precision/Recall), LLM-as-judge patterns, synthetic datasets, and integration with Arize Phoenix and Langfuse"
      },
      "metrics": {
        "line_count": 970,
        "code_line_count": 83,
        "code_examples": 13,
        "external_refs": 1,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 66,
          "complexity": "complex",
          "code": "from ragas import evaluate\nfrom ragas.metrics import (\n    faithfulness,\n    answer_relevancy,\n    context_precision,\n    context_recall,\n    answer_correctness,\n)\nfrom datasets import Dataset\n\n# Prep"
        },
        {
          "language": "python",
          "line_count": 115,
          "complexity": "complex",
          "code": "from ragas.metrics.base import Metric\nfrom ragas.metrics._faithfulness import FaithfulnesswithHHEM\nfrom langchain_openai import ChatOpenAI\n\n# Custom metric: Code Correctness for code RAG\nclass CodeCor"
        },
        {
          "language": "python",
          "line_count": 82,
          "complexity": "complex",
          "code": "from ragas.testset.generator import TestsetGenerator\nfrom ragas.testset.evolutions import simple, reasoning, multi_context\nfrom langchain_openai import ChatOpenAI, OpenAIEmbeddings\nfrom langchain_comm"
        },
        {
          "language": "python",
          "line_count": 79,
          "complexity": "complex",
          "code": "import phoenix as px\nfrom phoenix.trace.langchain import LangChainInstrumentor\nfrom phoenix.evals import (\n    HallucinationEvaluator,\n    RelevanceEvaluator,\n    OpenAIModel,\n)\nfrom langchain_openai "
        },
        {
          "language": "python",
          "line_count": 219,
          "complexity": "complex",
          "code": "from typing import List, Dict, Tuple\nimport numpy as np\nfrom ragas import evaluate\nfrom ragas.metrics import (\n    faithfulness,\n    answer_relevancy,\n    context_precision,\n    context_recall,\n)\nfrom"
        },
        {
          "language": "python",
          "line_count": 108,
          "complexity": "complex",
          "code": "from ragas import evaluate\nfrom ragas.metrics import faithfulness, answer_relevancy, context_precision\nfrom datasets import Dataset\nimport pandas as pd\n\nclass RAGComparison:\n    \"\"\"Compare different R"
        },
        {
          "language": "python",
          "line_count": 89,
          "complexity": "complex",
          "code": "import phoenix as px\nfrom phoenix.trace.langchain import LangChainInstrumentor\nfrom phoenix.evals import HallucinationEvaluator, OpenAIModel\nfrom datetime import datetime, timedelta\nimport pandas as p"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# BAD: Only measure answer quality\nresults = evaluate(dataset, metrics=[answer_relevancy])\n# Misses retrieval failures!\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# GOOD: Measure both components\nresults = evaluate(\n    dataset,\n    metrics=[\n        context_precision,  # Retrieval\n        context_recall,     # Retrieval\n        faithfulness,       # Generation\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# BAD: Can't evaluate without manual labels\n# Wait months for human annotations...\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# GOOD: Generate test data from documents\ntestset = generator.generate_with_langchain_docs(\n    documents=chunks,\n    test_size=100,\n)\n# Evaluate immediately!\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# BAD: Always retrieve 10 chunks\nretriever = vectorstore.as_retriever(k=10)\n# May exceed context window or waste tokens\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# GOOD: Experiment with different k values\nfor k in [3, 5, 7, 10]:\n    retriever = vectorstore.as_retriever(k=k)\n    # Evaluate context precision vs recall\n    # Find optimal k that balances both\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "http://localhost:6006\""
        }
      ],
      "tools_mentioned": [
        "consul"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/custom-llm-evaluation.md",
      "category": "ml",
      "skill_name": "custom-llm-evaluation",
      "frontmatter": {
        "name": "ml-custom-llm-evaluation",
        "description": "Domain-specific LLM evaluation including custom metrics, RLHF evaluation, adversarial testing, bias detection, Arize Phoenix integration, and continuous evaluation patterns for production systems"
      },
      "metrics": {
        "line_count": 1054,
        "code_line_count": 67,
        "code_examples": 11,
        "external_refs": 1,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 166,
          "complexity": "complex",
          "code": "from typing import List, Dict\nimport re\nfrom openai import OpenAI\n\nclass MedicalLLMEvaluator:\n    \"\"\"Custom evaluator for medical LLM applications.\"\"\"\n\n    def __init__(self, judge_model: str = \"gpt-4"
        },
        {
          "language": "python",
          "line_count": 185,
          "complexity": "complex",
          "code": "from transformers import pipeline\nimport pandas as pd\nfrom typing import List, Dict\n\nclass BiasAndToxicityEvaluator:\n    \"\"\"Evaluate LLM outputs for bias and toxicity.\"\"\"\n\n    def __init__(self):\n    "
        },
        {
          "language": "python",
          "line_count": 214,
          "complexity": "complex",
          "code": "from typing import List, Dict, Callable\nimport re\n\nclass AdversarialTester:\n    \"\"\"Test LLM for vulnerabilities and jailbreaks.\"\"\"\n\n    def __init__(self, llm_function: Callable[[str], str]):\n        "
        },
        {
          "language": "python",
          "line_count": 166,
          "complexity": "complex",
          "code": "import phoenix as px\nfrom phoenix.trace.openai import OpenAIInstrumentor\nfrom phoenix.evals import Evaluator, OpenAIModel\nfrom openai import OpenAI\nfrom typing import Dict, List\nimport pandas as pd\n\nc"
        },
        {
          "language": "python",
          "line_count": 131,
          "complexity": "complex",
          "code": "from typing import List, Tuple\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, roc_auc_score\nimport pandas as pd\n\nclass RewardModelEvaluator:\n    \"\"\"Evaluate reward models for RLHF.\"\"\"\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# BAD: Generic metrics for medical LLM\nresults = evaluate(dataset, metrics=[perplexity, bleu])\n# Misses medical accuracy, safety!\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# GOOD: Medical-specific evaluation\nmedical_eval = MedicalLLMEvaluator()\nresults = medical_eval.evaluate_medical_accuracy(...)\n# Captures accuracy, safety, disclaimers\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# BAD: Deploy without testing for vulnerabilities\ndeploy(model)  # Hope it's safe!\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# GOOD: Adversarial testing before deployment\ntester = AdversarialTester(model)\njailbreak_results = tester.test_jailbreak_resistance()\n\nif jailbreak_results[\"jailbreak_succeeded\"].mean() > 0.1:\n    pr"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# BAD: Evaluate once before deployment\neval_results = evaluate(test_set)\ndeploy(model)  # Never check again\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# GOOD: Monitor in production\npipeline = ContinuousEvaluationPipeline()\n# Runs hourly/daily to detect degradation\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "http://localhost:6006\""
        }
      ],
      "tools_mentioned": [
        "consul"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "mobile/react-native-native-modules.md",
      "category": "mobile",
      "skill_name": "react-native-native-modules",
      "frontmatter": {
        "name": "mobile-react-native-native-modules",
        "description": "Accessing iOS-specific APIs not available in React Native"
      },
      "metrics": {
        "line_count": 693,
        "code_line_count": 93,
        "code_examples": 10,
        "external_refs": 1,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "swift",
          "line_count": 36,
          "complexity": "complex",
          "code": "// ios/MyModule.swift\nimport Foundation\nimport React\n\n@objc(MyModule)\nclass MyModule: NSObject {\n\n  // MARK: - React Native Export\n\n  @objc\n  static func requiresMainQueueSetup() -> Bool {\n    return "
        },
        {
          "language": "typescript",
          "line_count": 13,
          "complexity": "complex",
          "code": "// src/modules/MyModule.ts\nimport { NativeModules } from 'react-native';\n\ninterface MyModuleInterface {\n  greet(name: string): Promise<string>;\n  calculateSum(a: number, b: number, callback: (error: a"
        },
        {
          "language": "swift",
          "line_count": 56,
          "complexity": "complex",
          "code": "// ios/SensorModule.swift\nimport Foundation\nimport CoreMotion\nimport React\n\n@objc(SensorModule)\nclass SensorModule: RCTEventEmitter {\n\n  private var motionManager: CMMotionManager?\n  private var isObs"
        },
        {
          "language": "typescript",
          "line_count": 28,
          "complexity": "complex",
          "code": "// src/modules/SensorModule.ts\nimport { NativeEventEmitter, NativeModules } from 'react-native';\n\nconst { SensorModule } = NativeModules;\nconst sensorEmitter = new NativeEventEmitter(SensorModule);\n\ne"
        },
        {
          "language": "swift",
          "line_count": 69,
          "complexity": "complex",
          "code": "// ios/CircularProgressView.swift\nimport UIKit\n\nclass CircularProgressView: UIView {\n\n  private var progressLayer = CAShapeLayer()\n  private var trackLayer = CAShapeLayer()\n\n  @objc var progress: CGFl"
        },
        {
          "language": "swift",
          "line_count": 15,
          "complexity": "complex",
          "code": "// ios/CircularProgressViewManager.swift\nimport React\n\n@objc(CircularProgressViewManager)\nclass CircularProgressViewManager: RCTViewManager {\n\n  override static func requiresMainQueueSetup() -> Bool {"
        },
        {
          "language": "typescript",
          "line_count": 18,
          "complexity": "complex",
          "code": "// src/components/CircularProgress.tsx\nimport React from 'react';\nimport { requireNativeComponent, ViewProps } from 'react-native';\n\ninterface CircularProgressProps extends ViewProps {\n  progress: num"
        },
        {
          "language": "swift",
          "line_count": 54,
          "complexity": "complex",
          "code": "// ios/NetworkModule.swift\nimport Foundation\nimport React\n\n@objc(NetworkModule)\nclass NetworkModule: NSObject {\n\n  @objc\n  static func requiresMainQueueSetup() -> Bool {\n    return false\n  }\n\n  @objc\n"
        },
        {
          "language": "typescript",
          "line_count": 34,
          "complexity": "complex",
          "code": "// src/modules/NetworkModule.ts\nimport { NativeModules } from 'react-native';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\nclass NetworkModuleWrapper {\n  async fetchUser(userId:"
        },
        {
          "language": "swift",
          "line_count": 53,
          "complexity": "complex",
          "code": "// ios/ModernAsyncModule.swift\nimport Foundation\nimport React\n\n@objc(ModernAsyncModule)\nclass ModernAsyncModule: NSObject {\n\n  @objc\n  static func requiresMainQueueSetup() -> Bool {\n    return false\n "
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/users/\\(userId"
        }
      ],
      "tools_mentioned": [
        "ssl"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "mobile/swift-concurrency.md",
      "category": "mobile",
      "skill_name": "swift-concurrency",
      "frontmatter": {
        "name": "swift-concurrency",
        "description": "Working with async/await in Swift"
      },
      "metrics": {
        "line_count": 710,
        "code_line_count": 208,
        "code_examples": 24,
        "external_refs": 1,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "swift",
          "line_count": 17,
          "complexity": "simple",
          "code": "// Simple async function\nfunc fetchUser(id: UUID) async throws -> User {\n    let url = URL(string: \"https://api.example.com/users/\\(id)\")!\n    let (data, _) = try await URLSession.shared.data(from: ur"
        },
        {
          "language": "swift",
          "line_count": 14,
          "complexity": "simple",
          "code": "func loadDashboardData() async throws -> DashboardData {\n    // All three requests start simultaneously\n    async let user = fetchUser(id: currentUserId)\n    async let posts = fetchPosts(userId: curre"
        },
        {
          "language": "swift",
          "line_count": 16,
          "complexity": "simple",
          "code": "// Sequential - takes 6 seconds total\nfunc sequential() async throws {\n    let user1 = try await fetchUser(id: id1)      // 2 seconds\n    let user2 = try await fetchUser(id: id2)      // 2 seconds\n   "
        },
        {
          "language": "swift",
          "line_count": 23,
          "complexity": "medium",
          "code": "actor UserCache {\n    private var cache: [UUID: User] = [:]\n\n    func getUser(id: UUID) -> User? {\n        cache[id]\n    }\n\n    func setUser(_ user: User) {\n        cache[user.id] = user\n    }\n\n    fu"
        },
        {
          "language": "swift",
          "line_count": 22,
          "complexity": "medium",
          "code": "actor DatabaseManager {\n    private var connection: DatabaseConnection?\n\n    // Synchronous - can access actor state directly\n    private func isConnected() -> Bool {\n        connection != nil\n    }\n\n"
        },
        {
          "language": "swift",
          "line_count": 22,
          "complexity": "medium",
          "code": "actor AnalyticsService {\n    private var events: [Event] = []\n\n    func track(_ event: Event) {\n        events.append(event)\n    }\n\n    // No await needed to call this\n    nonisolated func generateEve"
        },
        {
          "language": "swift",
          "line_count": 25,
          "complexity": "complex",
          "code": "@MainActor\nfinal class UserProfileViewModel: ObservableObject {\n    @Published var user: User?\n    @Published var isLoading = false\n\n    // All methods run on main actor by default\n    func loadUser(i"
        },
        {
          "language": "swift",
          "line_count": 25,
          "complexity": "complex",
          "code": "@MainActor\nfinal class ImageProcessor {\n    var processedImage: UIImage?\n\n    func processImage(_ image: UIImage) async {\n        // Start on MainActor\n        processedImage = nil\n\n        // Switch "
        },
        {
          "language": "swift",
          "line_count": 17,
          "complexity": "simple",
          "code": "// Fire-and-forget task\nTask {\n    await performBackgroundWork()\n}\n\n// Task with priority\nTask(priority: .background) {\n    await syncData()\n}\n\n// Task with value\nlet task = Task { () -> String in\n   "
        },
        {
          "language": "swift",
          "line_count": 25,
          "complexity": "medium",
          "code": "func processLargeDataset(_ items: [Item]) async throws {\n    for item in items {\n        // Check if task was cancelled\n        try Task.checkCancellation()\n\n        await process(item)\n    }\n}\n\n// Al"
        },
        {
          "language": "swift",
          "line_count": 37,
          "complexity": "medium",
          "code": "func fetchAllUsers(ids: [UUID]) async throws -> [User] {\n    try await withThrowingTaskGroup(of: User.self) { group in\n        // Add a task for each user ID\n        for id in ids {\n            group."
        },
        {
          "language": "swift",
          "line_count": 20,
          "complexity": "simple",
          "code": "func fetchFromFastestMirror(mirrors: [URL]) async throws -> Data {\n    try await withThrowingTaskGroup(of: Data.self) { group in\n        for mirror in mirrors {\n            group.addTask {\n           "
        },
        {
          "language": "swift",
          "line_count": 35,
          "complexity": "complex",
          "code": "// Value types are implicitly Sendable\nstruct User: Sendable {\n    let id: UUID\n    let name: String\n}\n\n// Reference types need explicit conformance\nfinal class NetworkClient: Sendable {\n    let baseU"
        },
        {
          "language": "swift",
          "line_count": 31,
          "complexity": "complex",
          "code": "// \u274c BAD - Data race possible\nclass BadCounter {\n    var count = 0\n\n    func increment() {\n        count += 1  // Not thread-safe!\n    }\n}\n\n// \u2705 GOOD - Actor ensures safety\nactor GoodCounter {\n    var"
        },
        {
          "language": "swift",
          "line_count": 25,
          "complexity": "complex",
          "code": "@globalActor\nactor DatabaseActor {\n    static let shared = DatabaseActor()\n}\n\n@DatabaseActor\nfunc executeQuery(_ sql: String) async throws -> [Row] {\n    // All calls to this function are serialized\n "
        },
        {
          "language": "swift",
          "line_count": 37,
          "complexity": "medium",
          "code": "actor NetworkService {\n    private let session: URLSession\n    private var cache: [URL: CachedResponse] = [:]\n\n    init(session: URLSession = .shared) {\n        self.session = session\n    }\n\n    func "
        },
        {
          "language": "swift",
          "line_count": 43,
          "complexity": "medium",
          "code": "func processNotifications() async {\n    let stream = NotificationCenter.default.notifications(\n        named: .dataUpdated\n    )\n\n    for await notification in stream {\n        await handleUpdate(noti"
        },
        {
          "language": "swift",
          "line_count": 22,
          "complexity": "medium",
          "code": "func monitorAllSources() async {\n    await withTaskGroup(of: Void.self) { group in\n        group.addTask {\n            for await event in source1.events {\n                await handle(event)\n         "
        },
        {
          "language": "swift",
          "line_count": 22,
          "complexity": "complex",
          "code": "import Testing\n\n@Test\nfunc testUserFetch() async throws {\n    let service = UserService()\n    let user = try await service.fetchUser(id: testUserId)\n\n    #expect(user.name == \"Test User\")\n}\n\n@Test\nfun"
        },
        {
          "language": "swift",
          "line_count": 14,
          "complexity": "simple",
          "code": "@Test\nfunc testCacheActor() async {\n    let cache = UserCache()\n\n    await cache.setUser(testUser)\n    let retrieved = await cache.getUser(id: testUser.id)\n\n    #expect(retrieved?.id == testUser.id)\n\n"
        },
        {
          "language": "swift",
          "line_count": 10,
          "complexity": "simple",
          "code": "// \u274c BAD - Blocking async context\nfunc bad() async {\n    Thread.sleep(forTimeInterval: 2)  // Blocks thread!\n}\n\n// \u2705 GOOD\nfunc good() async throws {\n    try await Task.sleep(for: .seconds(2))\n}\n"
        },
        {
          "language": "swift",
          "line_count": 13,
          "complexity": "simple",
          "code": "// \u274c BAD\nfunc updateUI() async {\n    DispatchQueue.main.async {\n        self.label.text = \"Updated\"\n    }\n}\n\n// \u2705 GOOD\n@MainActor\nfunc updateUI() {\n    label.text = \"Updated\"\n}\n"
        },
        {
          "language": "swift",
          "line_count": 10,
          "complexity": "simple",
          "code": "// \u274c BAD - Loses task hierarchy\nTask.detached {\n    await someWork()\n}\n\n// \u2705 GOOD - Inherits priority and cancellation\nTask {\n    await someWork()\n}\n"
        },
        {
          "language": "swift",
          "line_count": 15,
          "complexity": "simple",
          "code": "// \u274c BAD - Keeps running after cancellation\nfunc processItems(_ items: [Item]) async {\n    for item in items {\n        await process(item)  // Never checks cancellation\n    }\n}\n\n// \u2705 GOOD\nfunc process"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/users/\\(id"
        }
      ],
      "tools_mentioned": [
        "ssl"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "24 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "14 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cloud/gcp/gcp-networking.md",
      "category": "cloud",
      "skill_name": "gcp-networking",
      "frontmatter": {
        "name": "cloud-gcp-networking",
        "description": "Google Cloud networking including VPC, firewall, DNS, CDN, and load balancing"
      },
      "metrics": {
        "line_count": 585,
        "code_line_count": 109,
        "code_examples": 17,
        "external_refs": 1,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Create custom VPC network\ngcloud compute networks create production-vpc \\\n  --subnet-mode=custom \\\n  --bgp-routing-mode=regional\n\n# Create subnets in different regions\ngcloud compute networks subnet"
        },
        {
          "language": "bash",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Allow SSH from specific IP range\ngcloud compute firewall-rules create allow-ssh \\\n  --network=production-vpc \\\n  --allow=tcp:22 \\\n  --source-ranges=203.0.113.0/24 \\\n  --description=\"Allow SSH from o"
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "from google.cloud import compute_v1\n\ndef create_https_load_balancer(project_id):\n    # Create backend service\n    backend_client = compute_v1.BackendServicesClient()\n    backend_service = compute_v1.B"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Enable Cloud CDN on backend service\ngcloud compute backend-services update web-backend \\\n  --enable-cdn \\\n  --cache-mode=CACHE_ALL_STATIC \\\n  --default-ttl=3600 \\\n  --max-ttl=86400 \\\n  --client-ttl="
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# \u274c Bad: Each project creates separate VPC (management overhead)\n# Project A creates VPC, Project B creates VPC, etc.\n# Duplicate firewall rules, multiple VPN tunnels\n\n# \u2705 Good: Use Shared VPC\n# Enabl"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Enable Private Google Access on subnet\ngcloud compute networks subnets update us-central-subnet \\\n  --region=us-central1 \\\n  --enable-private-ip-google-access\n\n# Create instance without external IP\n"
        },
        {
          "language": "bash",
          "line_count": 26,
          "complexity": "medium",
          "code": "# Create Cloud Armor security policy\ngcloud compute security-policies create web-security-policy \\\n  --description=\"Protect web application\"\n\n# Block traffic from specific countries\ngcloud compute sec"
        },
        {
          "language": "bash",
          "line_count": 29,
          "complexity": "medium",
          "code": "# Create managed DNS zone\ngcloud dns managed-zones create production-zone \\\n  --dns-name=example.com. \\\n  --description=\"Production DNS zone\"\n\n# Enable DNSSEC\ngcloud dns managed-zones update productio"
        },
        {
          "language": "bash",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Create backend services for different apps\ngcloud compute backend-services create api-backend --global\ngcloud compute backend-services create web-backend --global\ngcloud compute backend-services cre"
        },
        {
          "language": "bash",
          "line_count": 33,
          "complexity": "medium",
          "code": "# Create VPN gateway\ngcloud compute target-vpn-gateways create on-prem-vpn-gateway \\\n  --network=production-vpc \\\n  --region=us-central1\n\n# Reserve static IP for VPN gateway\ngcloud compute addresses c"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Create health check\ngcloud compute health-checks create http web-health-check \\\n  --port=80 \\\n  --request-path=/health \\\n  --check-interval=10s \\\n  --timeout=5s \\\n  --unhealthy-threshold=3 \\\n  --hea"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "# Flask health check endpoint\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/health')\ndef health_check():\n    # Check database connectivity, dependencies, etc.\n    try:\n        "
        },
        {
          "language": "bash",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Create firewall rule targeting web servers\ngcloud compute firewall-rules create allow-web-traffic \\\n  --network=production-vpc \\\n  --allow=tcp:80,tcp:443 \\\n  --source-ranges=0.0.0.0/0 \\\n  --target-t"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# VPC\ngcloud compute networks create VPC --subnet-mode=custom\ngcloud compute networks subnets create SUBNET --network=VPC --range=CIDR\n\n# Firewall\ngcloud compute firewall-rules create RULE --network=V"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# \u274c NEVER: Create overly permissive firewall rules\ngcloud compute firewall-rules create allow-all \\\n  --network=production-vpc \\\n  --allow=all \\\n  --source-ranges=0.0.0.0/0\n# Exposes all services to i"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c Don't: Use auto-mode VPC in production\ngcloud compute networks create production-vpc --subnet-mode=auto\n# Cannot control IP ranges, subnet created in every region\n\n# \u2705 Correct: Use custom-mode VPC"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u274c Don't: Forget to enable Private Google Access\n# Instances without external IPs cannot access Cloud Storage\ngcloud compute instances create app-server \\\n  --zone=us-central1-a \\\n  --subnet=us-centr"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com/private/video.mp4"
        }
      ],
      "tools_mentioned": [
        "ssl"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "collaboration/github/github-repository-management.md",
      "category": "collaboration",
      "skill_name": "github-repository-management",
      "frontmatter": {
        "name": "collaboration-github-repository-management",
        "description": "Repository creation, configuration, branch protection, tags, releases, and GitHub CLI operations"
      },
      "metrics": {
        "line_count": 539,
        "code_line_count": 174,
        "code_examples": 22,
        "external_refs": 2,
        "tools_mentioned": 0,
        "config_snippets": 3
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Repository hierarchy\nrepository/\n\u251c\u2500\u2500 .github/\n\u2502   \u251c\u2500\u2500 workflows/          # GitHub Actions\n\u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE/     # Issue templates\n\u2502   \u251c\u2500\u2500 PULL_REQUEST_TEMPLATE.md\n\u2502   \u2514\u2500\u2500 dependabot.yml\n\u251c\u2500\u2500 s"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Authentication flow\ngh auth login\ngh auth status\n\n# Repository operations\ngh repo create \u2192 gh repo view \u2192 gh repo edit\n  \u2193\nBranch protection \u2192 PR workflow \u2192 Release\n  \u2193\nCleanup and archival\n"
        },
        {
          "language": "bash",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Create new repository (interactive)\ngh repo create my-project\n\n# Create with flags\ngh repo create my-project \\\n  --public \\\n  --description \"Project description\" \\\n  --gitignore Node \\\n  --license M"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# View repository details\ngh repo view owner/repo\n\n# Edit repository settings\ngh repo edit owner/repo \\\n  --description \"New description\" \\\n  --homepage \"https://example.com\" \\\n  --default-branch main"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Enable branch protection (requires API)\ngh api repos/owner/repo/branches/main/protection \\\n  --method PUT \\\n  --field required_status_checks='{\"strict\":true,\"contexts\":[\"ci/build\",\"ci/test\"]}' \\\n  -"
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Common protection for main branch\nBranch pattern: main\n\u2705 Require pull request reviews (2 approvals)\n\u2705 Dismiss stale reviews\n\u2705 Require review from Code Owners\n\u2705 Require status checks (ci/build, ci/te"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Create annotated tag (recommended)\ngit tag -a v1.0.0 -m \"Release version 1.0.0\"\ngit push origin v1.0.0\n\n# Create lightweight tag\ngit tag v1.0.0\ngit push origin v1.0.0\n\n# List tags\ngit tag -l\n\n# Dele"
        },
        {
          "language": "bash",
          "line_count": 29,
          "complexity": "medium",
          "code": "# Create release from tag\ngh release create v1.0.0 \\\n  --title \"Version 1.0.0\" \\\n  --notes \"Release notes here\"\n\n# Create release with assets\ngh release create v1.0.0 \\\n  --title \"Version 1.0.0\" \\\n  -"
        },
        {
          "language": "markdown",
          "line_count": 30,
          "complexity": "medium",
          "code": "---\nname: Bug Report\nabout: Report a bug to help us improve\ntitle: '[BUG] '\nlabels: bug\nassignees: ''\n---\n\n## Bug Description\nA clear description of the bug.\n\n## Steps to Reproduce\n1. Go to '...'\n2. C"
        },
        {
          "language": "markdown",
          "line_count": 25,
          "complexity": "medium",
          "code": "## Summary\nBrief description of changes.\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n- [ ] Unit tests pass\n- [ ] Integration tests p"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Set repository secret\ngh secret set API_KEY < api_key.txt\n\n# Set secret with value\necho \"secret-value\" | gh secret set SECRET_NAME\n\n# List secrets\ngh secret list\n\n# Delete secret\ngh secret delete SE"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Create webhook via API\ngh api repos/owner/repo/hooks \\\n  --method POST \\\n  --field name=web \\\n  --field config[url]=https://example.com/webhook \\\n  --field config[content_type]=json \\\n  --field even"
        },
        {
          "language": "bash",
          "line_count": 25,
          "complexity": "medium",
          "code": "# Authentication\ngh auth login                    # Authenticate with GitHub\ngh auth status                   # Check authentication status\ngh auth logout                   # Log out\n\n# Repository ope"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG: Allow direct pushes to main\n# Anyone can push without review\ngit push origin main\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# CORRECT: Require PRs and reviews\n# Settings \u2192 Branches \u2192 Add rule for main\n# \u2705 Require pull request reviews (2 approvals)\n# \u2705 Require status checks\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# WRONG: Secrets in workflow file\nenv:\n  API_KEY: \"sk-abc123xyz\"\n  DATABASE_PASSWORD: \"password123\"\n"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "# CORRECT: Use GitHub Secrets\nenv:\n  API_KEY: ${{ secrets.API_KEY }}\n  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}\n\n# Set via CLI\ngh secret set API_KEY < api_key.txt\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG: Push tags without documentation\ngit tag v1.0.0 && git push origin v1.0.0\n# No release notes, no changelog\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# CORRECT: Create proper releases\ngh release create v1.0.0 \\\n  --title \"Version 1.0.0\" \\\n  --notes-file CHANGELOG.md \\\n  dist/*.tar.gz\n\n# Include:\n# - Version number (semantic versioning)\n# - Release "
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# CORRECT: Create templates\nmkdir -p .github/ISSUE_TEMPLATE\n\n# Add bug report template\n# Add feature request template\n# Add pull request template\n\n# Commit templates\ngit add .github/\ngit commit -m \"Ad"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: Using outdated default branch name\n# main branch is called 'master'\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# CORRECT: Use 'main' as default branch\n# Rename existing repository\ngit branch -m master main\ngit push -u origin main\n\n# Update default branch on GitHub\ngh repo edit owner/repo --default-branch main\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com\""
        },
        {
          "type": "example",
          "url": "https://example.com/webhook"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "22 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "formal/smt-theory-applications.md",
      "category": "formal",
      "skill_name": "smt-theory-applications",
      "frontmatter": {
        "name": "formal-smt-theory-applications",
        "description": "Skill for formal smt theory applications"
      },
      "metrics": {
        "line_count": 817,
        "code_line_count": 163,
        "code_examples": 24,
        "external_refs": 2,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "from z3 import *\n\ndef verify_loop_safety(max_iters=10):\n    \"\"\"Verify loop: for i in 0..n: x += i; assert x >= 0\"\"\"\n    x = [Int(f'x{i}') for i in range(max_iters + 1)]\n    i = [Int(f'i{i}') for i in "
        },
        {
          "language": "python",
          "line_count": 93,
          "complexity": "complex",
          "code": "from z3 import *\n\nclass SymbolicExecutor:\n    def __init__(self):\n        self.solver = Solver()\n        self.path_constraint = []\n        self.symbolic_vars = {}\n\n    def make_symbolic(self, name, so"
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "from z3 import *\n\ndef generate_tests_for_function(func, num_tests=5):\n    \"\"\"Generate diverse test inputs for function\"\"\"\n    # Example: func(x, y) with branches on x > 0, y == 0, etc.\n\n    x = Int('x"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "from z3 import *\n\ndef check_equivalence(func1, func2, input_vars):\n    \"\"\"Check if two functions are equivalent\"\"\"\n    # Example: func1(x) = 2*x, func2(x) = x + x\n\n    x = Int('x')\n\n    # Encode both "
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "from z3 import *\n\ndef verify_array_initialization():\n    \"\"\"Verify: for i in 0..n: A[i] = 0 initializes array\"\"\"\n    A_init = Array('A_init', IntSort(), IntSort())\n    A_final = Array('A_final', IntSo"
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "from z3 import *\n\ndef schedule_tasks(tasks, resources, horizon=10):\n    \"\"\"Schedule tasks on resources with constraints\"\"\"\n    # tasks = [(duration, resource_type), ...]\n    # resources = {resource_ty"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "from z3 import *\n\ndef verify_bitwise_trick():\n    \"\"\"Verify: x & (x - 1) clears lowest set bit\"\"\"\n    x = BitVec('x', 32)\n\n    # Property: result has one fewer bit set than x (if x != 0)\n    result = "
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "from z3 import *\n\ndef infer_loop_invariant():\n    \"\"\"Infer invariant for: x = 0; while (x < n) x += 2\"\"\"\n    x_pre = Int('x_pre')\n    x_post = Int('x_post')\n    n = Int('n')\n\n    # Candidate invariant"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Linear arithmetic (fast)\nx, y = Ints('x y')\ns.add(x + 2*y <= 10)\n\n# Nonlinear arithmetic (slower, may timeout)\ns.add(x * y == 10)\n\n# Bitvectors (for low-level code)\nx = BitVec('x', 32)\ns.add(x & 0xF"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Bounded model checking\nfor t in range(k):\n    state[t+1] = transition(state[t])\ns.add(Or([bad_state(state[t]) for t in range(k)]))\n\n# Symbolic execution\nif cond:\n    path1_executor.add(cond)\nelse:\n "
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "opt = Optimize()\nopt.add(constraints)\n\n# Minimize/maximize\nh = opt.minimize(expr)  # or maximize(expr)\n\nif opt.check() == sat:\n    print(f\"Optimal value: {opt.model()[expr]}\")\n    print(f\"Bounds: [{op"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "# 1. Use appropriate theory\n# QF_LIA (linear int) faster than QF_NIA (nonlinear)\n\n# 2. Bound variables when possible\ns.add(And(x >= 0, x <= 100))\n\n# 3. Use tactics for hard problems\ntactic = Then('sim"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# BAD: Universal quantifier (may not terminate)\nx = Int('x')\ns = Solver()\ns.add(ForAll([x], x + 1 > x))  # True but hard to prove\ns.check()  # May timeout\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# GOOD: Bounded or quantifier-free\nfor i in range(100):  # Finite unrolling\n    x_i = Int(f'x{i}')\n    s.add(x_i + 1 > x_i)\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# BAD: Bitvector overflow for large numbers\nx = BitVec('x', 32)\ns.add(x * x > 1000000000)  # May overflow\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# GOOD: Use integers for unbounded arithmetic\nx = Int('x')\ns.add(x * x > 1000000000)\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# BAD: Unroll 1000 iterations (huge formula)\nfor i in range(1000):\n    state[i+1] = transition(state[i])\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# GOOD: Binary search for minimal k\nfor k in [1, 2, 4, 8, 16, ...]:\n    if check_bounded(k) == sat:\n        break  # Found counterexample\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# BAD: May crash if UNSAT or UNKNOWN\nresult = s.check()\nmodel = s.model()  # Error if result != sat\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# GOOD: Check before accessing model\nif s.check() == sat:\n    model = s.model()\nelif result == unsat:\n    print(\"Proven UNSAT\")\nelse:\n    print(\"UNKNOWN (timeout or incomplete)\")\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# BAD: May run forever on undecidable formula\ns.check()\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# GOOD: Timeout after 5 seconds\ns.set('timeout', 5000)\nresult = s.check()\nif result == unknown:\n    print(\"Timeout or incomplete\")\n"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "def check_sql_injection_vulnerability():\n    \"\"\"Detect SQL injection in query builder\"\"\"\n    from z3 import *\n\n    # Symbolic user input\n    user_input = String('user_input')\n\n    # Query template: SE"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "def verify_dead_code_elimination():\n    \"\"\"Verify dead code elimination preserves semantics\"\"\"\n    from z3 import *\n\n    x = Int('x')\n    y = Int('y')\n\n    # Original code:\n    # if (x > 0) { y = x + "
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://microsoft.github.io/z3guide/"
        },
        {
          "type": "external",
          "url": "http://smtlib.cs.uiowa.edu/"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "24 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "12 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "elegant-design/foundation/typography.md",
      "category": "elegant-design",
      "skill_name": "typography",
      "frontmatter": {},
      "metrics": {
        "line_count": 315,
        "code_line_count": 64,
        "code_examples": 10,
        "external_refs": 2,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "css",
          "line_count": 2,
          "complexity": "simple",
          "code": "font-family: 'Geist', -apple-system, BlinkMacSystemFont, sans-serif;\n"
        },
        {
          "language": "css",
          "line_count": 4,
          "complexity": "simple",
          "code": "font-family: 'JetBrains Mono', 'Fira Code', Consolas, monospace;\nfont-size: 14px; /* minimum */\nfont-variant-ligatures: common-ligatures; /* enable ligatures */\n"
        },
        {
          "language": "css",
          "line_count": 3,
          "complexity": "simple",
          "code": "/* If custom fonts fail to load */\n-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif\n"
        },
        {
          "language": "css",
          "line_count": 14,
          "complexity": "simple",
          "code": "@font-face {\n  font-family: 'Geist';\n  src: url('/fonts/geist.woff2') format('woff2');\n  font-display: swap; /* Show fallback immediately, swap when loaded */\n  font-weight: 100 900; /* Variable font "
        },
        {
          "language": "css",
          "line_count": 11,
          "complexity": "simple",
          "code": ":root {\n  --font-size-xs: 0.64rem;   /* 10.24px */\n  --font-size-sm: 0.8rem;    /* 12.8px */\n  --font-size-base: 1rem;    /* 16px */\n  --font-size-lg: 1.25rem;   /* 20px */\n  --font-size-xl: 1.563rem;"
        },
        {
          "language": "css",
          "line_count": 12,
          "complexity": "simple",
          "code": "body {\n  font-size: var(--font-size-base);\n  line-height: 1.6;\n}\n\nh1 { font-size: var(--font-size-4xl); }\nh2 { font-size: var(--font-size-3xl); }\nh3 { font-size: var(--font-size-2xl); }\nh4 { font-size"
        },
        {
          "language": "css",
          "line_count": 12,
          "complexity": "simple",
          "code": "body {\n  line-height: 1.6;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  line-height: 1.2;\n}\n\ncode, pre {\n  line-height: 1.6;\n}\n"
        },
        {
          "language": "css",
          "line_count": 8,
          "complexity": "simple",
          "code": "/* Semantic weight variables */\n:root {\n  --font-weight-normal: 400;\n  --font-weight-medium: 500;\n  --font-weight-semibold: 600;\n  --font-weight-bold: 700;\n}\n"
        },
        {
          "language": "css",
          "line_count": 58,
          "complexity": "complex",
          "code": "/* CSS Variables */\n:root {\n  /* Font families */\n  --font-sans: 'Geist', -apple-system, BlinkMacSystemFont, sans-serif;\n  --font-mono: 'JetBrains Mono', 'Fira Code', Consolas, monospace;\n  \n  /* Font"
        },
        {
          "language": "typescript",
          "line_count": 24,
          "complexity": "complex",
          "code": "// app/layout.tsx or _app.tsx\nimport { Geist } from 'next/font/google';\nimport localFont from 'next/font/local';\n\nconst geist = Geist({\n  subsets: ['latin'],\n  variable: '--font-sans',\n  display: 'swa"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://vercel.com/font"
        },
        {
          "type": "external",
          "url": "https://jetbrains.com/mono"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "2 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ir/ir-search-fundamentals.md",
      "category": "ir",
      "skill_name": "ir-search-fundamentals",
      "frontmatter": {
        "name": "ir-search-fundamentals",
        "description": "Core information retrieval concepts including TF-IDF, BM25, inverted indexes, and Elasticsearch"
      },
      "metrics": {
        "line_count": 641,
        "code_line_count": 122,
        "code_examples": 14,
        "external_refs": 2,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "from sklearn.feature_extraction.text import TfidfVectorizer\nimport numpy as np\n\n# Build TF-IDF matrix\ndocuments = [\n    \"machine learning algorithms for classification\",\n    \"deep learning neural netw"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "from elasticsearch import Elasticsearch\n\n# BM25 is default in Elasticsearch\nes = Elasticsearch(['http://localhost:9200'])\n\n# Index with BM25 similarity (default)\nindex_settings = {\n    \"settings\": {\n "
        },
        {
          "language": "python",
          "line_count": 55,
          "complexity": "complex",
          "code": "from collections import defaultdict\n\nclass InvertedIndex:\n    def __init__(self):\n        self.index = defaultdict(list)\n\n    def add_document(self, doc_id, text):\n        \"\"\"Add document to index wit"
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "from elasticsearch import Elasticsearch\n\n# Define analyzer with preprocessing\nanalyzer_config = {\n    \"settings\": {\n        \"analysis\": {\n            \"analyzer\": {\n                \"custom_english\": {\n"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "medium",
          "code": "# \u274c Bad: Search single field, missing relevant results\nquery = {\n    \"query\": {\n        \"match\": {\n            \"content\": \"elasticsearch tutorial\"\n        }\n    }\n}\n\n# \u2705 Good: Search multiple fields w"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "# \u2705 Structured boolean query with filters\nquery = {\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\"match\": {\"content\": \"machine learning\"}}\n            ],\n            \"should"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "# Match exact phrase\nphrase_query = {\n    \"query\": {\n        \"match_phrase\": {\n            \"content\": \"machine learning\"\n        }\n    }\n}\n\n# Match terms within N positions (slop)\nproximity_query = {\n"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "medium",
          "code": "# \u2705 Combine search with aggregations\nquery = {\n    \"query\": {\n        \"match\": {\"content\": \"laptop\"}\n    },\n    \"aggs\": {\n        \"by_brand\": {\n            \"terms\": {\n                \"field\": \"brand.k"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "query = {\n    \"query\": {\n        \"multi_match\": {\n            \"query\": \"machine learning\",\n            \"fields\": [\"title\", \"content\"]\n        }\n    },\n    \"highlight\": {\n        \"fields\": {\n          "
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "medium",
          "code": "# Short documents (tweets, titles): reduce k1\nshort_doc_similarity = {\n    \"type\": \"BM25\",\n    \"k1\": 0.8,  # Lower saturation (default 1.2)\n    \"b\": 0.5    # Less length normalization\n}\n\n# Long docume"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "medium",
          "code": "# \u274c NEVER: Leading wildcard queries (full index scan)\nbad_query = {\n    \"query\": {\n        \"wildcard\": {\n            \"content\": \"*ing\"  # Scans entire index\n        }\n    }\n}\n\n# \u2705 CORRECT: Use n-grams"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "# \u274c Don't: Fetch all results without pagination\nbad_search = es.search(index=\"articles\", body={\"query\": {\"match_all\": {}}})\n\n# \u2705 Correct: Use from/size or search_after for pagination\ngood_search = es."
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "# \u274c Don't: Use analyzed fields for exact matching\nbad_filter = {\n    \"query\": {\n        \"match\": {\n            \"category\": \"Machine Learning\"  # Analyzed, might match partial\n        }\n    }\n}\n\n# \u2705 Co"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "medium",
          "code": "# \u274c Don't: Score-heavy queries in filters\nbad_query = {\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\"match\": {\"status\": \"published\"}},  # Should be filter\n                {"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "http://localhost:9200']"
        },
        {
          "type": "example",
          "url": "http://localhost:9200']"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "12 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/probability-statistics.md",
      "category": "math",
      "skill_name": "probability-statistics",
      "frontmatter": {
        "name": "math-probability-statistics",
        "description": "Statistical hypothesis testing (t-test, chi-square, ANOVA)"
      },
      "metrics": {
        "line_count": 635,
        "code_line_count": 148,
        "code_examples": 20,
        "external_refs": 2,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\n# Normal (Gaussian) distribution\nmu, sigma = 0, 1\nnormal = stats.norm(loc=mu, scale=sigma)\n\n# PDF (probability density funct"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "medium",
          "code": "# Binomial: n trials, probability p\nn, p = 10, 0.3\nbinomial = stats.binom(n=n, p=p)\n\n# PMF (probability mass function)\nk = np.arange(0, n+1)\npmf = binomial.pmf(k)\n\n# Probability of exactly 3 successes"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Multivariate normal\nmean = [0, 0]\ncov = [[1, 0.5], [0.5, 2]]  # Covariance matrix\nmvn = stats.multivariate_normal(mean=mean, cov=cov)\n\n# Sample\nsamples = mvn.rvs(size=1000, random_state=42)\n\n# PDF a"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "from scipy.stats import ttest_1samp, ttest_ind, ttest_rel\n\n# One-sample t-test: test if mean equals hypothesized value\ndata = np.random.randn(100) + 0.5\nt_stat, p_value = ttest_1samp(data, 0)  # H0: \u03bc"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "from scipy.stats import chi2_contingency, chisquare\n\n# Chi-square goodness-of-fit test\n# H0: observed frequencies match expected distribution\nobserved = np.array([50, 45, 55])\nexpected = np.array([50,"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "from scipy.stats import f_oneway, kruskal\n\n# One-way ANOVA: compare means of 3+ groups\ngroup1 = np.random.randn(30) + 0\ngroup2 = np.random.randn(30) + 0.5\ngroup3 = np.random.randn(30) + 1.0\n\nf_stat, p"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "from scipy.stats import mannwhitneyu, wilcoxon, kstest\n\n# Mann-Whitney U test (independent samples, non-parametric)\nu_stat, p_value = mannwhitneyu(group1, group2, alternative='two-sided')\n\n# Wilcoxon "
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "from scipy import stats\n\ndef confidence_interval_mean(data, confidence=0.95):\n    \"\"\"\n    Compute confidence interval for mean.\n    \"\"\"\n    n = len(data)\n    mean = np.mean(data)\n    sem = stats.sem(d"
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "from scipy.stats import bootstrap\n\ndef median_statistic(data, axis):\n    \"\"\"Statistic function for bootstrap\"\"\"\n    return np.median(data, axis=axis)\n\ndata = np.random.lognormal(size=100)\n\n# Bootstrap"
        },
        {
          "language": "python",
          "line_count": 69,
          "complexity": "complex",
          "code": "from statsmodels.stats.proportion import proportions_ztest\n\ndef ab_test(conversions_a, visitors_a, conversions_b, visitors_b, alpha=0.05):\n    \"\"\"\n    A/B test for conversion rates.\n    \"\"\"\n    # Conv"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "medium",
          "code": "# Example: Estimate success probability from binomial data\n# Prior: Beta(alpha, beta)\n# Likelihood: Binomial(n, p)\n# Posterior: Beta(alpha + successes, beta + failures)\n\ndef bayesian_binomial(successe"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "medium",
          "code": "def bayesian_ab_test(conversions_a, visitors_a, conversions_b, visitors_b,\n                     prior_alpha=1, prior_beta=1):\n    \"\"\"\n    Bayesian A/B test: probability that B is better than A.\n    \"\""
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "# Example: Bayesian linear regression\n# Requires: pip install pymc arviz\n\ntry:\n    import pymc as pm\n    import arviz as az\n\n    # Generate synthetic data\n    np.random.seed(42)\n    n = 100\n    X = np"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "from scipy.stats import linregress\nimport statsmodels.api as sm\n\n# Simple linear regression\nx = np.random.randn(100)\ny = 2 * x + 1 + np.random.randn(100) * 0.5\n\n# SciPy\nslope, intercept, r_value, p_va"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Binary outcome\nX = np.random.randn(200, 2)\nz = 1 + 2*X[:, 0] - X[:, 1]\nprob = 1 / (1 + np.exp(-z))\ny_binary = (np.random.rand(200) < prob).astype(int)\n\nX_const = sm.add_constant(X)\nlogit_model = sm."
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "def select_statistical_test(data_type, n_groups, paired, normal):\n    \"\"\"Guide for selecting appropriate test\"\"\"\n    if data_type == 'continuous':\n        if n_groups == 1:\n            return 'one-sam"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "from statsmodels.stats.multitest import multipletests\n\n# Multiple comparisons: correct for family-wise error rate\np_values = np.array([0.01, 0.04, 0.03, 0.08, 0.005])\n\n# Bonferroni correction\nreject_b"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: p=0.06 means \"no effect\"\n# RIGHT: p=0.06 means insufficient evidence against H0 at \u03b1=0.05\n\n# WRONG: p=0.001 means \"large effect\"\n# RIGHT: Statistical significance \u2260 practical significance\n# A"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "# WRONG: Using t-test without checking normality\nttest_ind(group1, group2)\n\n# RIGHT: Check assumptions first\nfrom scipy.stats import shapiro\nstat, p = shapiro(group1)\nif p < 0.05:\n    print(\"Data not "
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Testing with n=5 per group\nsmall_group1 = np.random.randn(5)\nsmall_group2 = np.random.randn(5) + 0.5\nttest_ind(small_group1, small_group2)  # Low power!\n\n# RIGHT: Calculate required sample si"
        }
      ],
      "external_refs": [
        {
          "type": "documentation",
          "url": "https://docs.scipy.org/doc/scipy/reference/stats.html"
        },
        {
          "type": "external",
          "url": "https://www.statsmodels.org/"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "20 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "15 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/optimization-algorithms.md",
      "category": "math",
      "skill_name": "optimization-algorithms",
      "frontmatter": {
        "name": "math-optimization-algorithms",
        "description": "Machine learning model training (gradient descent, Adam, SGD)"
      },
      "metrics": {
        "line_count": 766,
        "code_line_count": 161,
        "code_examples": 24,
        "external_refs": 2,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "import numpy as np\nfrom numpy.linalg import norm\n\ndef gradient_descent(f, grad_f, x0, lr=0.01, max_iter=1000, tol=1e-6):\n    \"\"\"\n    Minimize f(x) using gradient descent.\n\n    Args:\n        f: Objecti"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "medium",
          "code": "def momentum_gd(f, grad_f, x0, lr=0.01, momentum=0.9, max_iter=1000, tol=1e-6):\n    \"\"\"Gradient descent with momentum (Polyak, 1964)\"\"\"\n    x = x0.copy()\n    v = np.zeros_like(x)  # Velocity\n\n    for "
        },
        {
          "language": "python",
          "line_count": 76,
          "complexity": "complex",
          "code": "def adam(f, grad_f, x0, lr=0.001, beta1=0.9, beta2=0.999,\n         eps=1e-8, max_iter=1000, tol=1e-6):\n    \"\"\"\n    Adam: Adaptive Moment Estimation (Kingma & Ba, 2015)\n    Most popular optimizer for d"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "medium",
          "code": "def newton_method(f, grad_f, hess_f, x0, max_iter=100, tol=1e-6):\n    \"\"\"\n    Newton's method: uses second-order information (Hessian).\n    Quadratic convergence near minimum.\n    \"\"\"\n    x = x0.copy("
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "def bfgs(f, grad_f, x0, max_iter=100, tol=1e-6):\n    \"\"\"\n    BFGS: Broyden-Fletcher-Goldfarb-Shanno algorithm.\n    Approximates Hessian inverse using gradient information only.\n    \"\"\"\n    x = x0.copy"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "from scipy.optimize import minimize\n\n# L-BFGS: More efficient for high-dimensional problems\n# Only stores a few vectors instead of full Hessian approximation\n\ndef high_dim_function(x):\n    # Example: "
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "from scipy.optimize import linprog\n\n# Minimize c^T x subject to:\n# A_ub @ x <= b_ub (inequality constraints)\n# A_eq @ x == b_eq (equality constraints)\n# bounds on x\n\n# Example: Diet problem\n# Minimize"
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "from scipy.optimize import minimize\n\n# Minimize 0.5 x^T H x + f^T x subject to constraints\n\n# Example: Portfolio optimization\n# Minimize variance: 0.5 x^T Sigma x\n# Subject to: sum(x) = 1 (fully inves"
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "from scipy.optimize import minimize, NonlinearConstraint\n\n# Example: Minimize Rosenbrock with circle constraint\n# min f(x) s.t. x[0]^2 + x[1]^2 <= 1\n\ndef constraint_fun(x):\n    return 1 - (x[0]**2 + x"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "from scipy.optimize import least_squares\n\n# Nonlinear least squares: min sum_i r_i(x)^2\n# where r(x) is residual vector\n\n# Example: Curve fitting to exponential decay\nt = np.linspace(0, 5, 50)\ny_true "
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "import cvxpy as cp\n\n# Example: L1-regularized regression (Lasso)\n# min ||Ax - b||_2^2 + lambda ||x||_1\n\nn, m = 100, 50\nnp.random.seed(0)\nA = np.random.randn(n, m)\nx_true = np.random.randn(m)\nx_true[m/"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "medium",
          "code": "def select_optimizer(problem_type, dim, has_gradient, has_hessian, constrained):\n    \"\"\"\n    Guide for selecting optimization algorithm.\n    \"\"\"\n    if constrained:\n        if problem_type == 'linear'"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "from scipy.optimize import differential_evolution\n\n# Global optimization for hyperparameter search\ndef objective(params):\n    lr, momentum = params\n    # Train model with these hyperparameters\n    # R"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "def multi_start_optimization(f, grad_f, bounds, n_starts=10):\n    \"\"\"\n    Run optimization from multiple random starting points.\n    Helps escape local minima.\n    \"\"\"\n    best_x = None\n    best_f = n"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "class OptimizationLogger:\n    def __init__(self):\n        self.history = {'x': [], 'f': [], 'grad_norm': []}\n\n    def __call__(self, xk):\n        \"\"\"Callback for scipy.optimize.minimize\"\"\"\n        sel"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Unconstrained:\n# - 'BFGS': General-purpose, needs gradient\n# - 'L-BFGS-B': High-dimensional, supports bounds\n# - 'Newton-CG': Needs Hessian or Hessian-vector product\n# - 'trust-ncg': Trust region, n"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Rule of thumb for gradient descent:\n# lr = 1 / L where L is Lipschitz constant of gradient\n# For quadratic f(x) = 0.5 x^T A x: L = largest eigenvalue of A\n\ndef estimate_lipschitz_lr(grad_f, x0, n_sa"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: Fixed learning rate without tuning\nx_opt = gradient_descent(f, grad_f, x0, lr=0.01)  # May diverge or be too slow\n\n# RIGHT: Use line search or adaptive method\nresult = minimize(f, x0, method="
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: Projecting after unconstrained optimization\nx_opt = minimize(f, x0, method='BFGS').x\nx_opt = np.clip(x_opt, 0, 1)  # Approximate projection\n\n# RIGHT: Use constrained optimizer\nresult = minimi"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: Starting from zero or random\nx0 = np.zeros(n)  # May be saddle point\n\n# RIGHT: Use domain knowledge or multiple starts\nx0 = compute_reasonable_initial_guess()\n# Or use multi-start strategy\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: Assuming optimization succeeded\nresult = minimize(f, x0, method='BFGS')\nx_opt = result.x  # May not have converged!\n\n# RIGHT: Check result status\nif not result.success:\n    print(f\"Optimizati"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "# Check gradient computation\nfrom scipy.optimize import check_grad\nerr = check_grad(f, grad_f, x0)\nif err > 1e-5:\n    print(\"Gradient implementation may be incorrect!\")\n\n# Try different method\nresult "
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Reduce learning rate or add line search\n# Check if problem is convex\n# Verify gradient correctness\n# Add regularization\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "complex",
          "code": "# Use global optimization\nfrom scipy.optimize import basinhopping\n\nminimizer_kwargs = {\"method\": \"BFGS\", \"jac\": grad_f}\nresult = basinhopping(f, x0, minimizer_kwargs=minimizer_kwargs, niter=100)\n"
        }
      ],
      "external_refs": [
        {
          "type": "documentation",
          "url": "https://docs.scipy.org/doc/scipy/reference/optimize.html"
        },
        {
          "type": "external",
          "url": "https://www.cvxpy.org/"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "24 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "16 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/linear-algebra-computation.md",
      "category": "math",
      "skill_name": "linear-algebra-computation",
      "frontmatter": {
        "name": "math-linear-algebra-computation",
        "description": "Solving systems of linear equations (Ax = b)"
      },
      "metrics": {
        "line_count": 624,
        "code_line_count": 171,
        "code_examples": 23,
        "external_refs": 2,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "import numpy as np\n\n# Basic matrix multiplication\nA = np.random.rand(1000, 500)\nB = np.random.rand(500, 300)\n\n# Standard: A @ B or np.dot(A, B)\nC = A @ B  # Preferred Python 3.5+\n\n# Matrix-vector: use"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "from numpy.linalg import norm\n\nA = np.random.rand(100, 100)\n\n# Frobenius norm (default)\nfro_norm = norm(A)  # sqrt(sum of squared elements)\n\n# 2-norm (spectral norm, largest singular value)\nspectral_n"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "from scipy.linalg import solve, lu_factor, lu_solve, cho_factor, cho_solve\n\n# General system: prefer solve() over inv()\nA = np.random.rand(100, 100)\nb = np.random.rand(100)\n\n# NEVER do this (slow and "
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "from numpy.linalg import lstsq\nfrom scipy.linalg import qr\n\n# Overdetermined system (more equations than unknowns)\nA = np.random.rand(200, 100)  # 200 equations, 100 unknowns\nb = np.random.rand(200)\n\n"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "from numpy.linalg import svd\nfrom scipy.sparse.linalg import svds\n\n# Full SVD: A = U @ S @ V^T\nA = np.random.rand(100, 50)\nU, s, Vt = svd(A, full_matrices=False)\n\n# U: 100x50 (left singular vectors)\n#"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "from numpy.linalg import eig, eigh\nfrom scipy.linalg import eig as scipy_eig\n\n# General matrix (possibly complex eigenvalues)\nA = np.random.rand(100, 100)\neigenvalues, eigenvectors = eig(A)\n\n# A @ v ="
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "from numpy.linalg import qr\n\n# A = Q @ R (Q orthogonal, R upper triangular)\nA = np.random.rand(100, 50)\n\n# Full QR (Q is 100x100)\nQ_full, R_full = qr(A, mode='complete')\n\n# Economic QR (Q is 100x50, p"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "from numpy.linalg import cholesky\nfrom scipy.linalg import cholesky as scipy_cholesky\n\n# A = L @ L^T (A must be symmetric positive definite)\nA_spd = np.random.rand(100, 50)\nA_spd = A_spd @ A_spd.T + n"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "from sklearn.decomposition import PCA\n\n# Data matrix: n samples x p features\nX = np.random.rand(1000, 100)\n\n# Center the data\nX_centered = X - X.mean(axis=0)\n\n# Method 1: SVD-based PCA (preferred for "
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "from sklearn.utils.extmath import randomized_svd\n\n# For very large matrices, randomized SVD is much faster\nA_large = np.random.rand(10000, 5000)\nk = 50\n\n# Randomized SVD\nU_rand, s_rand, Vt_rand = rand"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "from scipy.sparse import csr_matrix, csc_matrix, lil_matrix\nfrom scipy.sparse.linalg import spsolve, gmres, cg\n\n# Create sparse matrix (row-based for fast row operations)\nrow = np.array([0, 0, 1, 2, 2"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# WRONG: Explicitly computing inverse\nA = np.random.rand(100, 100)\nb = np.random.rand(100)\nx = np.linalg.inv(A) @ b  # Slow and unstable!\n\n# RIGHT: Use solve\nx = np.linalg.solve(A, b)  # Fast and stab"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "def solve_with_conditioning_check(A, b, threshold=1e12):\n    cond = np.linalg.cond(A)\n    if cond > threshold:\n        print(f\"Warning: Matrix is ill-conditioned (cond={cond:.2e})\")\n        print(\"Con"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Avoid creating intermediate large matrices\nn = 10000\n\n# WRONG: Creates intermediate n x n matrix\nA = np.random.rand(n, n)\nB = np.random.rand(n, n)\nresult = (A @ B) @ A.T  # Two n x n intermediates!\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Computing variance: two-pass algorithm\nX = np.random.rand(1000, 100)\n\n# WRONG: Naive variance (numerically unstable)\nmean = X.mean(axis=0)\nvariance_naive = ((X - mean) ** 2).mean(axis=0)\n\n# RIGHT: U"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Solving Ax = b:\n# - General: np.linalg.solve(A, b)\n# - SPD: scipy.linalg.cho_solve(cho_factor(A), b)\n# - Sparse: scipy.sparse.linalg.spsolve(A, b)\n# - Overdetermined: np.linalg.lstsq(A, b)\n\n# Matrix"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# NEVER do this\nx = np.linalg.inv(A) @ b\n\n# ALWAYS do this\nx = np.linalg.solve(A, b)\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# WRONG: Blindly solving without checking\nx = np.linalg.solve(A, b)\n\n# RIGHT: Check condition number first\ncond = np.linalg.cond(A)\nif cond > 1e12:\n    # Add regularization\n    A_reg = A + 1e-6 * np.e"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Loop over rows/columns\nresult = np.zeros(n)\nfor i in range(n):\n    result[i] = A[i, :] @ x\n\n# RIGHT: Vectorize\nresult = A @ x\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Converting sparse to dense unnecessarily\nA_sparse = csr_matrix(...)\nA_dense = A_sparse.toarray()  # Memory explosion!\nx = np.linalg.solve(A_dense, b)\n\n# RIGHT: Use sparse solvers\nx = spsolve("
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Cause: Matrix is not invertible (det = 0 or near 0)\n# Solution 1: Check rank\nrank = np.linalg.matrix_rank(A)\nif rank < A.shape[0]:\n    print(\"Matrix is rank-deficient\")\n\n# Solution 2: Add regulariza"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Check if matrix is sparse\nsparsity = 1 - np.count_nonzero(A) / A.size\nif sparsity > 0.9:\n    print(\"Use sparse matrix format!\")\n    A_sparse = csr_matrix(A)\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Check condition number\ncond = np.linalg.cond(A)\nif cond > 1 / np.finfo(float).eps:\n    print(\"Matrix is numerically singular!\")\n    # Use more stable algorithm or regularization\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://numpy.org/doc/stable/reference/routines.linalg.html"
        },
        {
          "type": "documentation",
          "url": "https://docs.scipy.org/doc/scipy/reference/linalg.html"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "23 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "build-systems/cmake-patterns.md",
      "category": "build-systems",
      "skill_name": "cmake-patterns",
      "frontmatter": {
        "name": "build-systems-cmake-patterns",
        "description": "Modern CMake target-based approach, find_package, FetchContent, generator expressions, cross-platform configuration, and installation rules for C/C++ projects."
      },
      "metrics": {
        "line_count": 680,
        "code_line_count": 236,
        "code_examples": 29,
        "external_refs": 2,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "cmake",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Modern CMake (3.20+) is TARGET-BASED\n# Targets have properties (compile flags, includes, links)\n# Properties propagate through INTERFACE/PUBLIC/PRIVATE\n\n# WRONG (Old-style, CMake 2.x)\ninclude_direct"
        },
        {
          "language": "cmake",
          "line_count": 21,
          "complexity": "medium",
          "code": "cmake_minimum_required(VERSION 3.20)\nproject(MyProject VERSION 1.0.0 LANGUAGES CXX)\n\n# Set C++ standard\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# "
        },
        {
          "language": "cmake",
          "line_count": 18,
          "complexity": "simple",
          "code": "# EXECUTABLE\nadd_executable(myapp main.cpp utils.cpp)\n\n# STATIC LIBRARY (.a or .lib)\nadd_library(mylib STATIC lib.cpp)\n\n# SHARED LIBRARY (.so, .dylib, or .dll)\nadd_library(mylib SHARED lib.cpp)\n\n# INT"
        },
        {
          "language": "cmake",
          "line_count": 18,
          "complexity": "simple",
          "code": "add_library(mylib src/lib.cpp)\n\n# PRIVATE: Only used by this target\ntarget_compile_definitions(mylib PRIVATE INTERNAL_DEBUG)\n\n# INTERFACE: Not used by this target, but propagated to consumers\ntarget_i"
        },
        {
          "language": "cmake",
          "line_count": 26,
          "complexity": "medium",
          "code": "# Conditional compilation based on build type\ntarget_compile_options(mylib PRIVATE\n    $<$<CONFIG:Debug>:-g -O0>\n    $<$<CONFIG:Release>:-O3>\n)\n\n# Platform-specific flags\ntarget_compile_definitions(my"
        },
        {
          "language": "cmake",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Find installed packages\nfind_package(Threads REQUIRED)\nfind_package(Boost 1.70 REQUIRED COMPONENTS system filesystem)\nfind_package(OpenCV 4.5 REQUIRED)\n\n# Link found packages\ntarget_link_libraries(m"
        },
        {
          "language": "cmake",
          "line_count": 22,
          "complexity": "medium",
          "code": "include(FetchContent)\n\n# Fetch from Git\nFetchContent_Declare(\n    json\n    GIT_REPOSITORY https://github.com/nlohmann/json.git\n    GIT_TAG v3.11.2\n)\n\nFetchContent_Declare(\n    googletest\n    GIT_REPOS"
        },
        {
          "language": "cmake",
          "line_count": 28,
          "complexity": "medium",
          "code": "# cmake/FindMyDep.cmake\nfind_path(MYDEP_INCLUDE_DIR mydep.h\n    PATHS /usr/include /usr/local/include\n)\n\nfind_library(MYDEP_LIBRARY\n    NAMES mydep\n    PATHS /usr/lib /usr/local/lib\n)\n\ninclude(FindPac"
        },
        {
          "language": "cmake",
          "line_count": 14,
          "complexity": "simple",
          "code": "if(WIN32)\n    # Windows-specific\n    target_compile_definitions(myapp PRIVATE PLATFORM_WINDOWS)\n    target_link_libraries(myapp PRIVATE ws2_32)\nelseif(APPLE)\n    # macOS-specific\n    target_compile_de"
        },
        {
          "language": "cmake",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Set compiler\nset(CMAKE_C_COMPILER gcc)\nset(CMAKE_CXX_COMPILER g++)\n\n# Or use environment: CC=clang CXX=clang++ cmake ..\n\n# Compiler-specific options\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    targ"
        },
        {
          "language": "cmake",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Set default build type\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\nendif()\n\n# Available: Debug, Release, RelWithDebInfo, MinSizeRel\n\n# Custom build typ"
        },
        {
          "language": "cmake",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Toolchain file: toolchain-arm.cmake\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nset(CMAKE_C_COMPILER arm-linux-gnueabihf-gcc)\nset(CMAKE_CXX_COMPILER arm-linux-gnueabihf-g++)\n\nset(C"
        },
        {
          "language": "cmake",
          "line_count": 32,
          "complexity": "medium",
          "code": "# Install executable\ninstall(TARGETS myapp\n    RUNTIME DESTINATION bin\n)\n\n# Install library\ninstall(TARGETS mylib\n    EXPORT MyLibTargets\n    LIBRARY DESTINATION lib\n    ARCHIVE DESTINATION lib\n    RU"
        },
        {
          "language": "cmake",
          "line_count": 28,
          "complexity": "medium",
          "code": "# cmake/MyLibConfig.cmake.in\n@PACKAGE_INIT@\n\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/MyLibTargets.cmake\")\n\ncheck_required_components(MyLib)\n\n# CMakeLists.txt\ninclude(CMakePackageConfigHelpers)\n\nconfigure_p"
        },
        {
          "language": "cmake",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Package generation\nset(CPACK_GENERATOR \"TGZ;DEB;RPM\")\nset(CPACK_PACKAGE_NAME \"myproject\")\nset(CPACK_PACKAGE_VERSION \"${PROJECT_VERSION}\")\nset(CPACK_PACKAGE_CONTACT \"author@example.com\")\nset(CPACK_DE"
        },
        {
          "language": "cmake",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Enable testing\nenable_testing()\n\n# Add test executable\nadd_executable(test_mylib test_mylib.cpp)\ntarget_link_libraries(test_mylib PRIVATE mylib gtest_main)\n\n# Register tests\nadd_test(NAME test_mylib"
        },
        {
          "language": "cmake",
          "line_count": 11,
          "complexity": "simple",
          "code": "include(GoogleTest)\n\nadd_executable(tests test_main.cpp test_utils.cpp)\ntarget_link_libraries(tests PRIVATE mylib gtest_main)\n\n# Auto-discover tests\ngtest_discover_tests(tests)\n\n# Or manual\nadd_test(N"
        },
        {
          "language": "cmake",
          "line_count": 23,
          "complexity": "medium",
          "code": "# User-configurable options\noption(BUILD_SHARED_LIBS \"Build shared libraries\" ON)\noption(ENABLE_TESTS \"Build tests\" OFF)\noption(USE_OPENMP \"Enable OpenMP support\" OFF)\n\n# Cache variables\nset(MAX_THREA"
        },
        {
          "language": "cmake",
          "line_count": 12,
          "complexity": "simple",
          "code": "# config.h.in\n#define PROJECT_VERSION \"@PROJECT_VERSION@\"\n#define MAX_THREADS @MAX_THREADS@\n#cmakedefine USE_OPENMP\n\n# CMakeLists.txt\nconfigure_file(\n    \"${CMAKE_SOURCE_DIR}/config.h.in\"\n    \"${CMAKE"
        },
        {
          "language": "cmake",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Generate file at build time\nadd_custom_command(\n    OUTPUT generated.cpp\n    COMMAND python ${CMAKE_SOURCE_DIR}/generate.py > generated.cpp\n    DEPENDS generate.py\n    COMMENT \"Generating source fil"
        },
        {
          "language": "cmake",
          "line_count": 10,
          "complexity": "simple",
          "code": "target_precompile_headers(mylib PRIVATE\n    <vector>\n    <string>\n    <iostream>\n    \"common.h\"\n)\n\n# Reuse PCH across targets\ntarget_precompile_headers(myapp REUSE_FROM mylib)\n"
        },
        {
          "language": "cmake",
          "line_count": 10,
          "complexity": "simple",
          "code": "# WRONG: Affects all targets\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\nlink_libraries(pthread)\nadd_definitions(-DUSE_FEATURE)\n\n# CORRECT: Target-specific\ntarget_include_directories(mylib PUBL"
        },
        {
          "language": "cmake",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Pollutes source directory\ncd project && cmake .\n\n# CORRECT: Out-of-source build\nmkdir build && cd build && cmake ..\n"
        },
        {
          "language": "cmake",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG\ntarget_include_directories(mylib PUBLIC /usr/local/include)\n\n# CORRECT\nfind_package(MyDep REQUIRED)\ntarget_link_libraries(mylib PUBLIC MyDep::MyDep)\n"
        },
        {
          "language": "cmake",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: CMake 2.x style\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -O2\")\n\n# CORRECT: CMake 3.x style\ntarget_compile_options(mylib PRIVATE -Wall)\ntarget_compile_options(mylib PRIVATE $<$<CONFIG:Rel"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Configure\ncmake -S . -B build                    # Source in ., build in build/\ncmake -B build -DCMAKE_BUILD_TYPE=Release\ncmake -B build -DENABLE_TESTS=ON\n\n# Build\ncmake --build build               "
        },
        {
          "language": "cmake",
          "line_count": 11,
          "complexity": "simple",
          "code": "CMAKE_SOURCE_DIR           # Top-level source directory\nCMAKE_BINARY_DIR           # Top-level build directory\nCMAKE_CURRENT_SOURCE_DIR   # Current CMakeLists.txt directory\nCMAKE_CURRENT_BINARY_DIR   "
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "# generate_config.py - Generate CMake config from JSON\nimport json\nimport sys\n\nwith open('config.json') as f:\n    config = json.load(f)\n\ncmake_code = f\"\"\"\nset(APP_VERSION \"{config['version']}\")\nset(AP"
        },
        {
          "language": "cmake",
          "line_count": 12,
          "complexity": "simple",
          "code": "# CMakeLists.txt - Use generated config\nexecute_process(\n    COMMAND python ${CMAKE_SOURCE_DIR}/generate_config.py\n    OUTPUT_VARIABLE GENERATED_CONFIG\n)\n\n# Include generated config\nfile(WRITE ${CMAKE"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/nlohmann/json.git"
        },
        {
          "type": "github",
          "url": "https://github.com/google/googletest.git"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "29 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/huggingface/huggingface-hub.md",
      "category": "ml",
      "skill_name": "huggingface-hub",
      "frontmatter": {
        "name": "ml-huggingface-hub",
        "description": "Managing models, datasets, and Spaces on HuggingFace Hub"
      },
      "metrics": {
        "line_count": 519,
        "code_line_count": 133,
        "code_examples": 15,
        "external_refs": 2,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "from huggingface_hub import login, logout\n\n# Login with token (prompts for input)\nlogin()\n\n# Login programmatically\nlogin(token=\"hf_...\")\n\n# Logout\nlogout()\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "export HF_TOKEN=\"hf_...\"\nexport HUGGINGFACE_TOKEN=\"hf_...\"  # Alternative\n"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Install hub library\npip install huggingface_hub\n\n# Login from CLI\nhuggingface-cli login\n# Paste token from https://huggingface.co/settings/tokens\n\n# Verify login\nhuggingface-cli whoami\n"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "from huggingface_hub import HfApi, create_repo\nfrom transformers import AutoModel, AutoTokenizer\n\n# Initialize API\napi = HfApi()\n\n# Create repository\nrepo_id = \"username/model-name\"\ncreate_repo(repo_i"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "from huggingface_hub import hf_hub_download, snapshot_download\n\n# Download single file\nmodel_path = hf_hub_download(\n    repo_id=\"bert-base-uncased\",\n    filename=\"pytorch_model.bin\",\n    cache_dir=\"."
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "from huggingface_hub import HfApi\n\napi = HfApi()\n\n# Search models\nmodels = api.list_models(\n    filter=\"text-classification\",\n    sort=\"downloads\",\n    direction=-1,\n    limit=10\n)\n\nfor model in model"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "from huggingface_hub import HfApi, create_repo\nfrom datasets import Dataset\n\n# Create dataset repository\nrepo_id = \"username/dataset-name\"\ncreate_repo(repo_id, repo_type=\"dataset\", exist_ok=True)\n\n# C"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "from huggingface_hub import create_repo, upload_file\n\n# Create Space repository\nspace_id = \"username/space-name\"\ncreate_repo(\n    space_id,\n    repo_type=\"space\",\n    space_sdk=\"gradio\",  # or \"stream"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "from huggingface_hub import HfApi\n\napi = HfApi()\n\n# Create a new branch\napi.create_branch(\n    repo_id=\"username/model-name\",\n    branch=\"experiment-1\",\n    repo_type=\"model\"\n)\n\n# Upload to specific b"
        },
        {
          "language": "markdown",
          "line_count": 61,
          "complexity": "complex",
          "code": "---\nlanguage: en\nlicense: mit\ntags:\n- text-classification\n- sentiment-analysis\ndatasets:\n- imdb\nmetrics:\n- accuracy\n- f1\nmodel-index:\n- name: sentiment-classifier\n  results:\n  - task:\n      type: text"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Login\nhuggingface-cli login\n\n# Check login status\nhuggingface-cli whoami\n\n# Upload model\nhuggingface-cli upload username/model-name ./model_dir\n\n# Download model\nhuggingface-cli download username/mo"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c NEVER: Hardcode tokens in code\nmodel.push_to_hub(\"user/repo\", token=\"hf_xxxx\")\n\n# \u2705 CORRECT: Use environment variables or login\nlogin()\nmodel.push_to_hub(\"user/repo\")\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c Don't: Upload without model card\ncreate_repo(\"user/model\")\nmodel.push_to_hub(\"user/model\")  # No documentation\n\n# \u2705 Correct: Create model card first\ncreate_repo(\"user/model\")\nwith open(\"README.md\""
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c Don't: Ignore versioning\nmodel.push_to_hub(\"user/model\")  # Overwrites previous version\n\n# \u2705 Correct: Use branches or tags\napi.create_branch(\"user/model\", branch=\"v1.1\")\nmodel.push_to_hub(\"user/mo"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u274c Don't: Upload entire directories without .gitignore\napi.upload_folder(\"./checkpoints\", repo_id=\"user/model\")\n# Uploads unnecessary files, cache, etc.\n\n# \u2705 Correct: Use .gitignore or upload selecti"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://huggingface.co/settings/tokens"
        },
        {
          "type": "external",
          "url": "https://huggingface.co/username/sentiment-classifier}"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "mobile/ios-testing.md",
      "category": "mobile",
      "skill_name": "ios-testing",
      "frontmatter": {
        "name": "ios-testing",
        "description": "Writing unit tests for iOS/macOS apps"
      },
      "metrics": {
        "line_count": 745,
        "code_line_count": 202,
        "code_examples": 22,
        "external_refs": 2,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "swift",
          "line_count": 20,
          "complexity": "complex",
          "code": "import Testing\n\n@Test\nfunc addition() {\n    let result = 2 + 2\n    #expect(result == 4)\n}\n\n@Test(\"Multiplication works correctly\")\nfunc multiplication() {\n    #expect(3 * 4 == 12)\n}\n\n// Test with cust"
        },
        {
          "language": "swift",
          "line_count": 27,
          "complexity": "medium",
          "code": "@Test\nfunc expectations() {\n    // Boolean expectation\n    #expect(true)\n    #expect(!false)\n\n    // Equality\n    #expect(42 == 42)\n    #expect(\"hello\" == \"hello\")\n\n    // Optional unwrapping\n    let "
        },
        {
          "language": "swift",
          "line_count": 22,
          "complexity": "medium",
          "code": "@Test(arguments: [1, 2, 3, 4, 5])\nfunc testSquare(number: Int) {\n    let result = number * number\n    #expect(result == number * number)\n}\n\n@Test(arguments: [\n    (\"hello\", \"HELLO\"),\n    (\"world\", \"WO"
        },
        {
          "language": "swift",
          "line_count": 22,
          "complexity": "medium",
          "code": "@Test\nfunc testAsyncFetch() async throws {\n    let service = UserService()\n    let user = try await service.fetchUser(id: testUserId)\n\n    #expect(user.name == \"Test User\")\n    #expect(user.email.cont"
        },
        {
          "language": "swift",
          "line_count": 31,
          "complexity": "medium",
          "code": "@Test\nfunc testActorState() async {\n    let cache = UserCache()\n\n    await cache.setUser(testUser)\n    let retrieved = await cache.getUser(id: testUser.id)\n\n    #expect(retrieved?.id == testUser.id)\n "
        },
        {
          "language": "swift",
          "line_count": 17,
          "complexity": "simple",
          "code": "@Test(.timeLimit(.seconds(5)))\nfunc testWithTimeout() async throws {\n    let result = try await longRunningOperation()\n    #expect(result != nil)\n}\n\n@Test\nfunc testOperationCompletes() async throws {\n"
        },
        {
          "language": "swift",
          "line_count": 30,
          "complexity": "medium",
          "code": "@Test\nfunc testViewModelLoading() async {\n    let mockService = MockUserService()\n    mockService.userToReturn = User(id: UUID(), name: \"Test\")\n\n    let viewModel = UserViewModel(service: mockService)"
        },
        {
          "language": "swift",
          "line_count": 49,
          "complexity": "complex",
          "code": "@Observable\nfinal class TaskViewModel {\n    enum State {\n        case idle\n        case loading\n        case loaded([Task])\n        case error(Error)\n    }\n\n    var state: State = .idle\n\n    func load"
        },
        {
          "language": "swift",
          "line_count": 9,
          "complexity": "simple",
          "code": "@Test\nfunc testUserProfileView() {\n    let user = User(id: UUID(), name: \"Test User\", email: \"test@example.com\")\n    let view = UserProfileView(user: user)\n\n    // With snapshot testing library:\n    /"
        },
        {
          "language": "swift",
          "line_count": 34,
          "complexity": "medium",
          "code": "struct TaskListView: View {\n    let tasks: [Task]\n\n    // Extract filtering logic\n    func filteredTasks(searchText: String) -> [Task] {\n        guard !searchText.isEmpty else { return tasks }\n\n      "
        },
        {
          "language": "swift",
          "line_count": 51,
          "complexity": "complex",
          "code": "protocol NetworkServiceProtocol {\n    func fetch<T: Decodable>(url: URL, as type: T.Type) async throws -> T\n}\n\nfinal class MockNetworkService: NetworkServiceProtocol {\n    var dataToReturn: Data?\n    "
        },
        {
          "language": "swift",
          "line_count": 36,
          "complexity": "medium",
          "code": "struct MockData {\n    static let validUser = \"\"\"\n    {\n        \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n        \"name\": \"Test User\",\n        \"email\": \"test@example.com\",\n        \"createdAt\": \"202"
        },
        {
          "language": "swift",
          "line_count": 61,
          "complexity": "complex",
          "code": "@Test\nfunc testModelPersistence() async throws {\n    let config = ModelConfiguration(isStoredInMemoryOnly: true)\n    let container = try ModelContainer(\n        for: Task.self,\n        configurations:"
        },
        {
          "language": "swift",
          "line_count": 31,
          "complexity": "medium",
          "code": "@Suite(\"User Management Tests\")\nstruct UserTests {\n    @Test(\"Create user\")\n    func createUser() async throws {\n        // Test implementation\n    }\n\n    @Test(\"Update user\")\n    func updateUser() as"
        },
        {
          "language": "swift",
          "line_count": 18,
          "complexity": "simple",
          "code": "extension Tag {\n    @Tag static var unit: Self\n    @Tag static var integration: Self\n    @Tag static var ui: Self\n    @Tag static var network: Self\n    @Tag static var slow: Self\n}\n\n@Test(.tags(.unit,"
        },
        {
          "language": "swift",
          "line_count": 25,
          "complexity": "medium",
          "code": "@Suite(\"Database Tests\")\nstruct DatabaseTests {\n    var container: ModelContainer\n\n    init() throws {\n        let config = ModelConfiguration(isStoredInMemoryOnly: true)\n        container = try Model"
        },
        {
          "language": "swift",
          "line_count": 14,
          "complexity": "simple",
          "code": "@Test\nfunc testUserCreation() async throws {\n    // Arrange\n    let mockService = MockUserService()\n    let viewModel = UserViewModel(service: mockService)\n\n    // Act\n    await viewModel.createUser(n"
        },
        {
          "language": "swift",
          "line_count": 17,
          "complexity": "simple",
          "code": "@Suite\nstruct IsolatedTests {\n    @Test\n    func test1() async throws {\n        // Create own test data\n        let data = TestData()\n        // Test with data\n    }\n\n    @Test\n    func test2() async "
        },
        {
          "language": "swift",
          "line_count": 11,
          "complexity": "simple",
          "code": "// \u274c BAD\n@Test func test1() { }\n@Test func testUser() { }\n\n// \u2705 GOOD\n@Test(\"User is created with valid email\")\nfunc userCreationWithValidEmail() { }\n\n@Test(\"Login fails with invalid credentials\")\nfunc"
        },
        {
          "language": "swift",
          "line_count": 13,
          "complexity": "simple",
          "code": "// \u274c BAD - Testing private implementation\n@Test\nfunc testInternalCache() {\n    // Don't test internal caching mechanism\n}\n\n// \u2705 GOOD - Test public behavior\n@Test\nfunc testDataFetchingReturnsCorrectDat"
        },
        {
          "language": "swift",
          "line_count": 26,
          "complexity": "medium",
          "code": "// \u274c BAD - Test depends on order\nvar sharedState: User?\n\n@Test\nfunc test1() {\n    sharedState = User(name: \"Test\")\n}\n\n@Test\nfunc test2() {\n    #expect(sharedState?.name == \"Test\")  // Fragile!\n}\n\n// \u2705"
        },
        {
          "language": "swift",
          "line_count": 16,
          "complexity": "simple",
          "code": "// \u274c BAD - Not awaiting async work\n@Test\nfunc badAsyncTest() {\n    Task {\n        let user = try await fetchUser()\n        #expect(user != nil)  // May not execute!\n    }\n}\n\n// \u2705 GOOD\n@Test\nfunc goodA"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/user\""
        },
        {
          "type": "example",
          "url": "https://api.example.com/user\""
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "22 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "14 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 58.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ir/ir-recommendation-systems.md",
      "category": "ir",
      "skill_name": "ir-recommendation-systems",
      "frontmatter": {
        "name": "ir-recommendation-systems",
        "description": "Collaborative filtering, content-based filtering, hybrid recommenders, matrix factorization, and cold start solutions"
      },
      "metrics": {
        "line_count": 650,
        "code_line_count": 87,
        "code_examples": 15,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 74,
          "complexity": "complex",
          "code": "import numpy as np\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# User-Item matrix (rows=users, cols=items, values=ratings)\nratings = np.array([\n    [5, 3, 0, 1],  # User 0\n    [4, 0, 0, 1]"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "from scipy.sparse.linalg import svds\n\ndef matrix_factorization_svd(ratings, k=2):\n    \"\"\"SVD-based matrix factorization\"\"\"\n    # Handle missing values: replace 0s with row mean\n    ratings_mean = np.m"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Item descriptions\nitems = [\n    \"smartphone with 5G camera\",\n    \"laptop with SSD "
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "medium",
          "code": "def hybrid_recommender(user_id, ratings, item_features, alpha=0.5):\n    \"\"\"Weighted hybrid of CF and content-based\"\"\"\n    # Collaborative filtering score\n    cf_scores = item_based_cf(ratings, user_id"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "# Implicit feedback: 1 = interacted, 0 = not interacted\nimplicit_ratings = np.array([\n    [1, 1, 0, 0],  # User 0 clicked items 0, 1\n    [1, 0, 0, 1],  # User 1 clicked items 0, 3\n    [0, 1, 0, 1],\n  "
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "medium",
          "code": "def cold_start_item(new_item_features, item_features, ratings, top_k=5):\n    \"\"\"Recommend new item to users based on content similarity\"\"\"\n    # Find most similar existing items\n    similarities = cos"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "medium",
          "code": "def diversified_recommendations(user_id, candidate_items, item_features, scores, diversity_weight=0.3):\n    \"\"\"MMR-style diversification\"\"\"\n    selected = []\n    remaining = list(candidate_items)\n\n   "
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "def session_based_recommendations(session_items, item_similarity_matrix, top_k=5):\n    \"\"\"Recommend items based on current session\"\"\"\n    # Aggregate item similarities for session\n    session_scores ="
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "import numpy as np\nfrom datetime import datetime, timedelta\n\ndef time_weighted_user_profile(user_interactions, item_features, decay_days=30):\n    \"\"\"Build user profile with recency weighting\"\"\"\n    us"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "medium",
          "code": "def contextual_recommendations(user_id, context, ratings, context_features):\n    \"\"\"Adjust recommendations based on context\"\"\"\n    # Base recommendations\n    base_scores = item_based_cf(ratings, user_"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "medium",
          "code": "def evaluate_recommender(test_data, predict_fn, k=10):\n    \"\"\"Evaluate with Precision@k, Recall@k, nDCG@k\"\"\"\n    precisions = []\n    recalls = []\n    ndcgs = []\n\n    for user_id, ground_truth_items in"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# \u274c NEVER: Recommend items user already consumed\ndef bad_recommender(user_id, scores):\n    return np.argsort(scores)[::-1][:10]\n    # Might include items user already rated/bought\n\n# \u2705 CORRECT: Filter"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# \u274c Don't: Ignore popularity bias\n# Popular items dominate, long tail gets no exposure\nrecommendations = top_rated_items[:10]\n\n# \u2705 Correct: Balance popularity with personalization\ndef debiased_recomme"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "# \u274c Don't: Use only explicit ratings\n# Most users don't rate, lose 95%+ of signals\nratings_matrix = explicit_ratings_only\n\n# \u2705 Correct: Use implicit feedback\nimplicit_signals = {\n    'click': 1,\n    '"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# \u274c Don't: Train on all data, no holdout\nmodel.fit(all_interactions)\n# Can't evaluate quality, might overfit\n\n# \u2705 Correct: Temporal split for evaluation\n# Train on history, test on recent interactions"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "networking/mosh-resilient-ssh.md",
      "category": "networking",
      "skill_name": "mosh-resilient-ssh",
      "frontmatter": {
        "name": "mosh-resilient-ssh",
        "description": "Connecting over unreliable networks (mobile, WiFi)"
      },
      "metrics": {
        "line_count": 190,
        "code_line_count": 106,
        "code_examples": 13,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# macOS\nbrew install mosh\n\n# Ubuntu/Debian\nsudo apt install mosh\n\n# Server must also have mosh installed\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Instead of SSH\nssh user@server\n\n# Use Mosh\nmosh user@server\n\n# With specific port\nmosh --ssh=\"ssh -p 2222\" user@server\n\n# With different mosh port range\nmosh -p 60001 user@server\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Start mosh session\nmosh user@server\n\n# Network disconnects (sleep laptop, switch WiFi)\n# Session continues when network returns\n\n# Compare to SSH:\n# ssh user@server\n# [network disconnect]\n# -> Conne"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Mosh predicts typing locally\n# No lag when typing even on high-latency links\n\n# Underlined text = predicted (not yet confirmed by server)\n# Normal text = confirmed by server\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Start mosh on WiFi\nmosh user@server\n\n# Switch to cellular\n# Session continues seamlessly\n\n# SSH would require reconnect\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Open UDP ports (mosh uses 60000-61000 by default)\nsudo ufw allow 60000:61000/udp\n\n# Or specific range\nsudo ufw allow 60001/udp\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Server: restrict port range\nexport MOSH_SERVER_PORT_RANGE=60001-60010\n\n# Client: use restricted range\nmosh -p 60001 user@server\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Use mosh over Tailscale\nmosh user@100.64.0.5\n\n# Benefits:\n# - Encrypted by Tailscale\n# - No need to open ports publicly\n# - Resilient connection\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# ~/.ssh/config\nHost myserver\n    HostName server.example.com\n    User myuser\n    Port 2222\n\n# Now use\nmosh myserver\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Ultimate resilient setup\nmosh user@server -- tmux attach\n\n# Benefits:\n# - Mosh handles network disruption\n# - Tmux persists session on server\n# - Can disconnect mosh and reconnect to same tmux\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c Can't use scp/rsync over mosh\n# Mosh is terminal-only\n\n# \u2705 Use SSH for file transfers\nscp file.txt user@server:\n\n# Or rsync\nrsync -avz --progress file.txt user@server:\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Mosh needs UDP ports open\n# Some restrictive networks block UDP\n\n# Fallback to SSH if UDP blocked\n"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# SSH:\n# - Works everywhere (TCP port 22)\n# - File transfers (scp/sftp)\n# - Port forwarding\n# - Breaks on network change\n\n# Mosh:\n# - Survives disconnects\n# - IP roaming\n# - Low-latency typing\n# - Req"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "ssl"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "debugging/python-debugging.md",
      "category": "debugging",
      "skill_name": "python-debugging",
      "frontmatter": {
        "name": "debugging-python-debugging",
        "description": "Comprehensive guide to Python debugging tools and techniques. Covers pdb (built-in debugger), ipdb (IPython integration), VSCode debugger, PyCharm debugger, pytest debugging, remote debugging with debugpy, and performance profiling with cProfile."
      },
      "metrics": {
        "line_count": 810,
        "code_line_count": 337,
        "code_examples": 40,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "# Method 1: Insert breakpoint in code\nimport pdb; pdb.set_trace()\n\n# Method 2: Python 3.7+ built-in breakpoint()\nbreakpoint()\n\n# Method 3: Run script with pdb\npython -m pdb script.py\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "def calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        breakpoint()  # Execution pauses here\n        total += num\n    return total\n\nresult = calculate_sum([1, 2, 3, 4, 5])\n"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Step into function\n(Pdb) s\n(Pdb) step\n\n# Step over (don't enter functions)\n(Pdb) n\n(Pdb) next\n\n# Continue until return\n(Pdb) r\n(Pdb) return\n\n# Continue execution\n(Pdb) c\n(Pdb) continue\n\n# Quit debug"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "# Print expression\n(Pdb) p variable_name\n(Pdb) p len(my_list)\n\n# Pretty-print\n(Pdb) pp my_dict\n\n# List source code\n(Pdb) l\n(Pdb) list\n\n# List specific lines\n(Pdb) l 10, 20\n\n# Long list (11 lines)\n(Pdb"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Set breakpoint at line\n(Pdb) b 42\n(Pdb) break script.py:42\n\n# Set breakpoint at function\n(Pdb) b function_name\n\n# Conditional breakpoint\n(Pdb) b script.py:42, count > 10\n\n# List breakpoints\n(Pdb) bl"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Execute Python code\n(Pdb) !variable = 42\n(Pdb) !print(f\"Debug: {count}\")\n\n# Run until line\n(Pdb) unt 50\n(Pdb) until 50\n\n# Jump to line (dangerous!)\n(Pdb) j 50\n(Pdb) jump 50\n\n# Display expression eve"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "import pdb\n\ndef buggy_function():\n    x = 1\n    y = 0\n    z = x / y  # ZeroDivisionError\n\ntry:\n    buggy_function()\nexcept:\n    pdb.post_mortem()  # Drops into debugger at exception\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Run with automatic post-mortem\npython -m pdb -c continue script.py\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Install via uv (recommended)\nuv add --dev ipdb\n\n# Or pip\npip install ipdb\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "complex",
          "code": "import ipdb; ipdb.set_trace()\n\n# Or use breakpoint with PYTHONBREAKPOINT\nexport PYTHONBREAKPOINT=ipdb.set_trace\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "(ipdb) ?variable_name  # Show docstring\n(ipdb) ??function_name  # Show source code\n(ipdb) %timeit expression  # Benchmark expression\n(ipdb) %debug  # Enhanced debugging\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "(ipdb) my_var.<TAB>  # Shows methods/attributes\n(ipdb) my_dict['ke<TAB>  # Completes dictionary keys\n"
        },
        {
          "language": "json",
          "line_count": 29,
          "complexity": "medium",
          "code": "{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: Current File\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\","
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Break when count > 10\ncount > 10\n\n# Break when username is \"admin\"\nusername == \"admin\"\n\n# Break when list is empty\nlen(my_list) == 0\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "complex",
          "code": "# On remote machine (install pydevd-pycharm)\nimport pydevd_pycharm\npydevd_pycharm.settrace('localhost', port=12345, stdoutToServer=True, stderrToServer=True)\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Stop at first failure\npytest tests/ --pdb\n\n# Stop at all failures\npytest tests/ --pdb --maxfail=5\n\n# Use ipdb instead of pdb\npytest tests/ --pdb --pdbcls=IPython.terminal.debugger:Pdb\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "def test_calculation():\n    result = calculate(5, 0)\n    assert result == 5  # Fails, drops into pdb\n\n# Terminal shows:\n# >>>>>>>>>>>>>>>>>>>> PDB set_trace >>>>>>>>>>>>>>>>>>>\n# (Pdb) p result\n# (Pdb"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "import pytest\n\n@pytest.fixture\ndef sample_data():\n    return [1, 2, 3, 4, 5]\n\ndef test_with_fixture(sample_data):\n    breakpoint()  # Can inspect sample_data here\n    assert sum(sample_data) == 15\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Show setup/teardown output\npytest tests/ --pdb --capture=no\n\n# Or -s shorthand\npytest tests/ --pdb -s\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "uv add --dev debugpy\n"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "# remote_app.py\nimport debugpy\n\n# Wait for debugger to attach\ndebugpy.listen((\"0.0.0.0\", 5678))\nprint(\"Waiting for debugger attach...\")\ndebugpy.wait_for_client()\nprint(\"Debugger attached!\")\n\n# Your co"
        },
        {
          "language": "json",
          "line_count": 21,
          "complexity": "medium",
          "code": "{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: Attach\",\n            \"type\": \"python\",\n            \"request\": \"attach\",\n            \"connect\": {\n              "
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Forward remote port to local\nssh -L 5678:localhost:5678 user@remote-server.com\n\n# In another terminal:\n# Start VSCode debug with \"Python: Attach\"\n"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "# On remote machine\nimport pdb\nimport sys\n\nclass RemotePdb(pdb.Pdb):\n    def __init__(self, port=4444):\n        import socket\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    "
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Profile entire script\npython -m cProfile -s cumulative script.py\n\n# Save profile data\npython -m cProfile -o output.prof script.py\n"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "import cProfile\nimport pstats\n\ndef profile_function():\n    profiler = cProfile.Profile()\n    profiler.enable()\n\n    # Code to profile\n    result = expensive_calculation()\n\n    profiler.disable()\n    s"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "import pstats\n\n# Load profile\nstats = pstats.Stats('output.prof')\n\n# Sort and print\nstats.sort_stats('cumulative').print_stats(20)\nstats.sort_stats('time').print_stats(20)\n\n# Filter by function name\ns"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "uv add --dev line-profiler\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Add @profile decorator\n@profile\ndef slow_function():\n    total = 0\n    for i in range(1000000):\n        total += i\n    return total\n\n# Run with kernprof\n# kernprof -l -v script.py\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "uv add --dev memory-profiler\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "from memory_profiler import profile\n\n@profile\ndef memory_intensive():\n    big_list = [0] * (10 ** 7)\n    return sum(big_list)\n\n# Run: python -m memory_profiler script.py\n"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "# \u274c Bad: Too many breakpoints\nfor i in range(1000000):\n    breakpoint()  # Stops 1M times!\n    process(i)\n\n# \u2705 Good: Conditional breakpoint\nfor i in range(1000000):\n    if i == 999999:  # Last iterati"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Start with breakpoint in middle\ndef long_function():\n    step1()\n    step2()\n    step3()\n    breakpoint()  # Middle\n    step4()\n    step5()\n    step6()\n\n# If bug before breakpoint, move up\n# If bug "
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Explain code to debugger\ndef calculate(a, b):\n    breakpoint()\n    # \"So a is 5, b is 0, and I'm dividing...\"\n    # \"Oh! Division by zero!\"\n    return a / b\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "# Check import paths\nimport sys\nprint(sys.path)\n\n# Debug module import\nimport importlib\nspec = importlib.util.find_spec('mymodule')\nprint(spec)  # None = not found\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "import asyncio\n\nasync def debug_async():\n    await asyncio.sleep(1)\n    breakpoint()  # Works in async functions\n    result = await fetch_data()\n    return result\n\n# VSCode/PyCharm handle async debugg"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "from functools import wraps\n\ndef my_decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        breakpoint()  # Debug decorator logic\n        result = func(*args, **kwargs)\n        ret"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c Hard to debug\nresult = [process(x) for x in data if x > 10]\n\n# \u2705 Easier to debug\nresult = []\nfor x in data:\n    if x > 10:\n        breakpoint()  # Can inspect x\n        processed = process(x)\n    "
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Set default breakpoint implementation\nexport PYTHONBREAKPOINT=ipdb.set_trace\n\n# Disable all breakpoint() calls\nexport PYTHONBREAKPOINT=0\n\n# Enable asyncio debug mode\nexport PYTHONASYNCIODEBUG=1\n\n# S"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Simple debugging\ndef my_function(x):\n    breakpoint()  # Pause here\n    return x * 2\n\n# VSCode debugging\n# 1. Set breakpoint (click gutter)\n# 2. Press F5\n# 3. Use F10 (step over), F11 (step into)\n\n#"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "pytest"
      ],
      "config_snippets": [
        "json",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "40 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "19 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "build-systems/cross-platform-builds.md",
      "category": "build-systems",
      "skill_name": "cross-platform-builds",
      "frontmatter": {
        "name": "build-systems-cross-platform-builds",
        "description": "Platform detection, conditional compilation, preprocessor macros, CMake cross-compilation, Zig cross-compilation, toolchain configuration, and multi-platform testing strategies."
      },
      "metrics": {
        "line_count": 768,
        "code_line_count": 258,
        "code_examples": 34,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 3
      },
      "code_examples": [
        {
          "language": "c",
          "line_count": 43,
          "complexity": "medium",
          "code": "// C/C++ preprocessor macros for platform detection\n\n// Operating System\n#ifdef _WIN32\n    // Windows (32-bit or 64-bit)\n    #ifdef _WIN64\n        // Windows 64-bit\n    #endif\n#elif __APPLE__\n    #inc"
        },
        {
          "language": "cmake",
          "line_count": 25,
          "complexity": "medium",
          "code": "# Operating system\nif(WIN32)\n    message(STATUS \"Building for Windows\")\nelseif(APPLE)\n    message(STATUS \"Building for macOS\")\nelseif(UNIX)\n    message(STATUS \"Building for Unix/Linux\")\nendif()\n\n# Arc"
        },
        {
          "language": "rust",
          "line_count": 26,
          "complexity": "medium",
          "code": "// Rust conditional compilation\n#[cfg(target_os = \"windows\")]\nfn platform_specific() {\n    println!(\"Windows\");\n}\n\n#[cfg(target_os = \"macos\")]\nfn platform_specific() {\n    println!(\"macOS\");\n}\n\n#[cfg("
        },
        {
          "language": "c",
          "line_count": 14,
          "complexity": "simple",
          "code": "// header.h - Cross-platform exports\n#ifdef _WIN32\n    #ifdef BUILD_DLL\n        #define API_EXPORT __declspec(dllexport)\n    #else\n        #define API_EXPORT __declspec(dllimport)\n    #endif\n#else\n   "
        },
        {
          "language": "c",
          "line_count": 19,
          "complexity": "simple",
          "code": "// Platform-specific includes\n#ifdef _WIN32\n    #include <windows.h>\n    #include <winsock2.h>\n#else\n    #include <unistd.h>\n    #include <sys/socket.h>\n    #include <netinet/in.h>\n#endif\n\n// Platform"
        },
        {
          "language": "cmake",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Platform-specific sources\nif(WIN32)\n    set(PLATFORM_SOURCES src/platform_win.cpp)\nelseif(APPLE)\n    set(PLATFORM_SOURCES src/platform_mac.cpp)\nelse()\n    set(PLATFORM_SOURCES src/platform_linux.cpp"
        },
        {
          "language": "toml",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Cargo.toml\n[dependencies]\n# Common dependencies\nserde = \"1.0\"\n\n# Platform-specific dependencies\n[target.'cfg(windows)'.dependencies]\nwinapi = { version = \"0.3\", features = [\"winuser\", \"winsock2\"] }\n"
        },
        {
          "language": "cmake",
          "line_count": 22,
          "complexity": "medium",
          "code": "# toolchain-arm-linux.cmake\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\n# Cross-compiler paths\nset(CMAKE_C_COMPILER arm-linux-gnueabihf-gcc)\nset(CMAKE_CXX_COMPILER arm-linux-gnueabih"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Use toolchain file\ncmake -DCMAKE_TOOLCHAIN_FILE=toolchain-arm-linux.cmake ..\ncmake --build .\n"
        },
        {
          "language": "cmake",
          "line_count": 16,
          "complexity": "simple",
          "code": "# toolchain-mingw-w64.cmake\nset(CMAKE_SYSTEM_NAME Windows)\nset(CMAKE_SYSTEM_PROCESSOR x86_64)\n\nset(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)\nset(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)\nset(CMAKE_RC_"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Build Windows executable on Linux\ncmake -DCMAKE_TOOLCHAIN_FILE=toolchain-mingw-w64.cmake ..\ncmake --build .\n# Output: myapp.exe (Windows executable)\n"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Zig provides cross-compilation out of the box (no toolchain setup)\n\n# List targets\nzig targets\n\n# Cross-compile C/C++ for Windows on Linux\nzig cc main.c -target x86_64-windows-gnu -o main.exe\n\n# Cro"
        },
        {
          "language": "zig",
          "line_count": 18,
          "complexity": "simple",
          "code": "// build.zig\nconst std = @import(\"std\");\n\npub fn build(b: *std.Build) void {\n    // Target can be overridden: zig build -Dtarget=x86_64-windows\n    const target = b.standardTargetOptions(.{});\n    con"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Cross-compile with Zig\nzig build -Dtarget=x86_64-windows     # Windows\nzig build -Dtarget=aarch64-linux      # ARM64 Linux\nzig build -Dtarget=x86_64-macos       # macOS\nzig build -Dtarget=wasm32-fre"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Install cross (wrapper around Cargo)\ncargo install cross\n\n# Cross-compile for different targets\ncross build --target x86_64-pc-windows-gnu\ncross build --target aarch64-unknown-linux-gnu\ncross build "
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Add target\nrustup target add x86_64-pc-windows-gnu\nrustup target add aarch64-unknown-linux-gnu\n\n# Build for target\ncargo build --target x86_64-pc-windows-gnu\ncargo build --target aarch64-unknown-lin"
        },
        {
          "language": "toml",
          "line_count": 7,
          "complexity": "simple",
          "code": "# .cargo/config.toml\n[target.x86_64-pc-windows-gnu]\nlinker = \"x86_64-w64-mingw32-gcc\"\n\n[target.aarch64-unknown-linux-gnu]\nlinker = \"aarch64-linux-gnu-gcc\"\n"
        },
        {
          "language": "c",
          "line_count": 13,
          "complexity": "simple",
          "code": "// C - Platform-specific path separators\n#ifdef _WIN32\n    #define PATH_SEPARATOR '\\\\'\n    #define PATH_SEPARATOR_STR \"\\\\\"\n#else\n    #define PATH_SEPARATOR '/'\n    #define PATH_SEPARATOR_STR \"/\"\n#endi"
        },
        {
          "language": "rust",
          "line_count": 7,
          "complexity": "simple",
          "code": "// Rust - Use std::path (automatically handles platform differences)\nuse std::path::{Path, PathBuf};\n\nlet path = Path::new(\"data\").join(\"config.txt\");\n// Windows: data\\config.txt\n// Unix: data/config."
        },
        {
          "language": "c",
          "line_count": 14,
          "complexity": "simple",
          "code": "// C - Cross-platform socket initialization\n#ifdef _WIN32\n    WSADATA wsa_data;\n    WSAStartup(MAKEWORD(2, 2), &wsa_data);\n    SOCKET sock = socket(AF_INET, SOCK_STREAM, 0);\n    // Use sock...\n    clo"
        },
        {
          "language": "c",
          "line_count": 11,
          "complexity": "simple",
          "code": "// C - Cross-platform dynamic library loading\n#ifdef _WIN32\n    HMODULE handle = LoadLibraryA(\"mylib.dll\");\n    void* symbol = GetProcAddress(handle, \"my_function\");\n    FreeLibrary(handle);\n#else\n   "
        },
        {
          "language": "rust",
          "line_count": 7,
          "complexity": "simple",
          "code": "// Rust - Use libloading crate (cross-platform)\nuse libloading::{Library, Symbol};\n\nlet lib = Library::new(\"mylib.so\")?;\nlet func: Symbol<fn() -> i32> = lib.get(b\"my_function\")?;\nlet result = func();\n"
        },
        {
          "language": "cmake",
          "line_count": 9,
          "complexity": "simple",
          "code": "# CMake - Platform-specific optimizations\nif(WIN32)\n    target_compile_options(mylib PRIVATE /O2 /GL)\n    target_link_options(mylib PRIVATE /LTCG)\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" OR CMAKE_"
        },
        {
          "language": "c",
          "line_count": 30,
          "complexity": "medium",
          "code": "// C - Platform-specific SIMD\n#include <stdint.h>\n\nvoid add_vectors(float* a, float* b, float* c, size_t n) {\n#if defined(__SSE__) && (defined(__x86_64__) || defined(_M_X64))\n    // x86_64 SSE\n    #in"
        },
        {
          "language": "yaml",
          "line_count": 32,
          "complexity": "medium",
          "code": "# .github/workflows/cross-platform.yml\nname: Cross-Platform Build\n\non: [push, pull_request]\n\njobs:\n  build:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n      "
        },
        {
          "language": "dockerfile",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Dockerfile.cross - Multi-platform build\nFROM --platform=$BUILDPLATFORM debian:bookworm AS builder\n\nARG TARGETPLATFORM\nARG BUILDPLATFORM\n\nRUN apt-get update && apt-get install -y \\\n    gcc-aarch64-li"
        },
        {
          "language": "c",
          "line_count": 12,
          "complexity": "simple",
          "code": "// WRONG: Assumes Unix-like system\nvoid read_config() {\n    FILE* f = fopen(\"/etc/myapp/config.txt\", \"r\");  // Fails on Windows\n}\n\n// CORRECT: Use platform-appropriate paths\n#ifdef _WIN32\n    const ch"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Only test on developer machine (macOS)\n# Ship to production (Linux) without testing\n\n# CORRECT: Use CI matrix to test all platforms\n# See CI/CD matrix example above\n"
        },
        {
          "language": "c",
          "line_count": 11,
          "complexity": "simple",
          "code": "// WRONG: Mix Windows and POSIX APIs\n#include <windows.h>\n#include <pthread.h>  // Won't compile on Windows\n\n// CORRECT: Use conditional compilation\n#ifdef _WIN32\n    #include <windows.h>\n#else\n    #i"
        },
        {
          "language": "c",
          "line_count": 13,
          "complexity": "simple",
          "code": "// WRONG: Assume little-endian (x86)\nuint32_t value = *(uint32_t*)buffer;\n\n// CORRECT: Handle endianness explicitly\n#include <stdint.h>\n\nuint32_t read_le32(const uint8_t* buf) {\n    return (uint32_t)b"
        },
        {
          "language": "c",
          "line_count": 23,
          "complexity": "medium",
          "code": "// OS Detection\n_WIN32          // Windows (32 or 64-bit)\n_WIN64          // Windows 64-bit\n__APPLE__       // macOS, iOS\n__linux__       // Linux\n__unix__        // Unix-like\n__FreeBSD__     // FreeB"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# ARM Linux\ncmake -DCMAKE_TOOLCHAIN_FILE=toolchain-arm.cmake ..\n\n# Windows on Linux (MinGW)\ncmake -DCMAKE_TOOLCHAIN_FILE=toolchain-mingw.cmake ..\n\n# Android\ncmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/b"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Common targets\nx86_64-linux-gnu          # Linux x86_64\naarch64-linux-gnu         # Linux ARM64\nx86_64-windows-gnu        # Windows x86_64\nx86_64-macos              # macOS x86_64\naarch64-macos     "
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "# detect_platform.py - Platform detection and configuration\nimport platform\nimport sys\n\ndef detect_platform():\n    \"\"\"Detect platform and generate build configuration.\"\"\"\n    os_type = platform.system"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "docker"
      ],
      "config_snippets": [
        "toml",
        "toml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml, toml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "34 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "build-systems/make-fundamentals.md",
      "category": "build-systems",
      "skill_name": "make-fundamentals",
      "frontmatter": {
        "name": "build-systems-make-fundamentals",
        "description": "Makefile syntax, targets, dependencies, pattern rules, and best practices for building C/C++ and multi-language projects with Make."
      },
      "metrics": {
        "line_count": 595,
        "code_line_count": 268,
        "code_examples": 25,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "makefile",
          "line_count": 34,
          "complexity": "medium",
          "code": "# Comments start with #\n\n# Target: Dependencies\n# <TAB> Commands\n\ntarget: dependencies\n\tcommands\n\n# Variables\nCC = gcc\nCFLAGS = -Wall -Wextra -O2\nSOURCES = main.c utils.c\nOBJECTS = $(SOURCES:.c=.o)\n\n#"
        },
        {
          "language": "makefile",
          "line_count": 12,
          "complexity": "simple",
          "code": "# $@ - The target name\n# $< - First dependency\n# $^ - All dependencies\n# $? - Dependencies newer than target\n# $* - Stem of pattern rule\n\n%.o: %.c %.h\n\t@echo \"Target: $@\"      # e.g., \"main.o\"\n\t@echo "
        },
        {
          "language": "makefile",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Simple assignment (evaluated immediately)\nVAR := value\n\n# Recursive assignment (evaluated when used)\nVAR = value\n\n# Conditional assignment (only if not set)\nVAR ?= default_value\n\n# Append to variabl"
        },
        {
          "language": "makefile",
          "line_count": 17,
          "complexity": "simple",
          "code": "# General pattern: %.target: %.source\n%.o: %.c\n\t$(CC) $(CFLAGS) -c $< -o $@\n\n# Multiple patterns\n%_test: %_test.c\n\t$(CC) $(CFLAGS) $< -o $@ -lcheck\n\n# Static pattern rules\n$(OBJECTS): %.o: %.c\n\t$(CC) "
        },
        {
          "language": "makefile",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Built-in rule for C compilation\n# %.o: %.c\n#\t$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@\n\n# Override implicit variables\nCC = clang\nCFLAGS = -Wall -Wextra -std=c11\n\n# Disable implicit rules\n.SUFFIXES:\n\n#"
        },
        {
          "language": "makefile",
          "line_count": 41,
          "complexity": "medium",
          "code": "# Project structure:\n# src/\n# include/\n# build/\n# tests/\n\nCC := gcc\nCFLAGS := -Wall -Wextra -std=c11 -I./include\nSRCDIR := src\nBUILDDIR := build\nTESTDIR := tests\n\nSOURCES := $(wildcard $(SRCDIR)/*.c)\n"
        },
        {
          "language": "makefile",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Debug vs Release builds\nDEBUG ?= 0\n\nifeq ($(DEBUG), 1)\n    CFLAGS += -g -O0 -DDEBUG\nelse\n    CFLAGS += -O2 -DNDEBUG\nendif\n\n# Platform-specific\nUNAME := $(shell uname)\n\nifeq ($(UNAME), Darwin)\n    LI"
        },
        {
          "language": "makefile",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Top-level Makefile\nSUBDIRS := src tests docs\n\n.PHONY: all $(SUBDIRS) clean\n\nall: $(SUBDIRS)\n\n$(SUBDIRS):\n\t$(MAKE) -C $@\n\n# Ensure tests depend on src\ntests: src\n\nclean:\n\tfor dir in $(SUBDIRS); do \\\n"
        },
        {
          "language": "makefile",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Enable parallel builds with make -j\n\n# Serialize certain targets\n.NOTPARALLEL: install\n\n# Or use order-only prerequisites\nprogram: | $(BUILDDIR)\n\t# Build program only after builddir exists\n\n$(BUILDD"
        },
        {
          "language": "makefile",
          "line_count": 30,
          "complexity": "medium",
          "code": "# Built-in functions\n\n# String substitution\nSOURCES := main.c utils.c\nOBJECTS := $(SOURCES:.c=.o)\n# Or: $(patsubst %.c,%.o,$(SOURCES))\n\n# Wildcard\nSOURCES := $(wildcard src/*.c)\n\n# Directory/basename\n"
        },
        {
          "language": "makefile",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Define function with $(call)\ndefine compile_template\n$(1)_objs := $$($(1)_srcs:.c=.o)\n$(1): $$($(1)_objs)\n\t$$(CC) $$($(1)_objs) -o $(1)\nendef\n\n# Use function\napp1_srcs := main.c utils.c\n$(eval $(cal"
        },
        {
          "language": "makefile",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Include configuration\ninclude config.mk\n\n# Include dependencies (silent failure with -)\n-include $(DEPS)\n\n# Conditional include\nifeq ($(USE_SSL), 1)\ninclude ssl.mk\nendif\n\n# Example config.mk\n# CC = "
        },
        {
          "language": "makefile",
          "line_count": 36,
          "complexity": "medium",
          "code": ".PHONY: all clean install uninstall test help\n\n# Default target\nall: program\n\n# Clean build artifacts\nclean:\n\trm -f $(OBJECTS) $(TARGET)\n\trm -rf $(BUILDDIR)\n\n# Install to system\ninstall: $(TARGET)\n\tin"
        },
        {
          "language": "makefile",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Automatic dependency generation with -MMD -MP\n\nCC := gcc\nCFLAGS := -Wall -std=c11\nDEPFLAGS = -MMD -MP\n\nSOURCES := $(wildcard *.c)\nOBJECTS := $(SOURCES:.c=.o)\nDEPS := $(OBJECTS:.o=.d)\n\nprogram: $(OBJ"
        },
        {
          "language": "makefile",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Explicit dependencies\nmain.o: main.c main.h utils.h config.h\nutils.o: utils.c utils.h config.h\nconfig.o: config.c config.h\n\n# Or generate with makedepend\ndepend:\n\tmakedepend -Y -- $(CFLAGS) -- $(SOU"
        },
        {
          "language": "makefile",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Silent mode (@)\nclean:\n\t@echo \"Cleaning...\"\n\t@rm -f $(OBJECTS)\n\n# Verbose mode (V=1)\nV ?= 0\nifeq ($(V), 1)\n    Q =\nelse\n    Q = @\nendif\n\n%.o: %.c\n\t$(Q)echo \"CC $<\"\n\t$(Q)$(CC) $(CFLAGS) -c $< -o $@\n\n"
        },
        {
          "language": "makefile",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Cross-compile for ARM\nCROSS_COMPILE ?= arm-linux-gnueabihf-\n\nCC := $(CROSS_COMPILE)gcc\nAR := $(CROSS_COMPILE)ar\nSTRIP := $(CROSS_COMPILE)strip\n\n# Platform-specific flags\nARCH ?= x86_64\nifeq ($(ARCH)"
        },
        {
          "language": "makefile",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Using spaces instead of tabs\ntarget:\n    echo \"This will fail\"  # Spaces, not tab\n\n# CORRECT: Use tab character\ntarget:\n\techo \"This works\"  # Tab character\n"
        },
        {
          "language": "makefile",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: Infinite recursion\nCFLAGS = $(CFLAGS) -Wall\n\n# CORRECT: Use different variable or :=\nCFLAGS := $(CFLAGS) -Wall\n# Or\nBASE_CFLAGS = -Wall\nCFLAGS = $(BASE_CFLAGS) -g\n"
        },
        {
          "language": "makefile",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: If file named \"clean\" exists, won't run\nclean:\n\trm -f *.o\n\n# CORRECT: Declare as phony\n.PHONY: clean\nclean:\n\trm -f *.o\n"
        },
        {
          "language": "makefile",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: Hardcoded paths\ninstall:\n\tcp program /usr/local/bin/\n\n# CORRECT: Use variables\nPREFIX ?= /usr/local\ninstall:\n\tcp program $(PREFIX)/bin/\n"
        },
        {
          "language": "makefile",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: No header dependencies\nprogram: main.o utils.o\n\tgcc $^ -o $@\n\n# CORRECT: Include dependencies or use -MMD\n%.o: %.c\n\t$(CC) $(CFLAGS) -MMD -c $< -o $@\n-include *.d\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "make                # Build default target\nmake target         # Build specific target\nmake -j4            # Parallel build (4 jobs)\nmake -n             # Dry run (show commands)\nmake -B             #"
        },
        {
          "language": "makefile",
          "line_count": 8,
          "complexity": "simple",
          "code": "CC      # C compiler (gcc)\nCXX     # C++ compiler (g++)\nCFLAGS  # C compiler flags\nLDFLAGS # Linker flags\nLDLIBS  # Libraries to link\nAR      # Archive tool (ar)\nINSTALL # Install command\n"
        },
        {
          "language": "makefile",
          "line_count": 5,
          "complexity": "simple",
          "code": "%.o: %.c          # C object files\n%.so: %.o         # Shared libraries\n%_test: %_test.c  # Test executables\n$(BUILD)/%.o: $(SRC)/%.c  # With directories\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "ssl"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "25 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cicd/ci-optimization.md",
      "category": "cicd",
      "skill_name": "ci-optimization",
      "frontmatter": {
        "name": "cicd-ci-optimization",
        "description": "CI pipelines are taking too long (>10 minutes for feedback)"
      },
      "metrics": {
        "line_count": 739,
        "code_line_count": 242,
        "code_examples": 29,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 26
      },
      "code_examples": [
        {
          "language": "yaml",
          "line_count": 53,
          "complexity": "complex",
          "code": "jobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Node.js - automatic caching\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '"
        },
        {
          "language": "yaml",
          "line_count": 24,
          "complexity": "medium",
          "code": "jobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Docker buildx with cache\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3"
        },
        {
          "language": "dockerfile",
          "line_count": 27,
          "complexity": "medium",
          "code": "# Use specific versions for reproducibility\nFROM node:20-alpine AS deps\nWORKDIR /app\n\n# Copy only dependency files first (best caching)\nCOPY package.json package-lock.json ./\nRUN npm ci --only=product"
        },
        {
          "language": "yaml",
          "line_count": 33,
          "complexity": "medium",
          "code": "jobs:\n  # Fast feedback jobs run in parallel\n  lint:\n    runs-on: ubuntu-latest\n    steps: [...]\n\n  type-check:\n    runs-on: ubuntu-latest\n    steps: [...]\n\n  unit-tests:\n    runs-on: ubuntu-latest\n  "
        },
        {
          "language": "yaml",
          "line_count": 47,
          "complexity": "medium",
          "code": "jobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Full history for change detection\n\n      # Detect changed files\n      "
        },
        {
          "language": "yaml",
          "line_count": 45,
          "complexity": "medium",
          "code": "jobs:\n  changes:\n    runs-on: ubuntu-latest\n    outputs:\n      backend: ${{ steps.filter.outputs.backend }}\n      frontend: ${{ steps.filter.outputs.frontend }}\n      docs: ${{ steps.filter.outputs.do"
        },
        {
          "language": "yaml",
          "line_count": 31,
          "complexity": "medium",
          "code": "jobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Cache test fixtures\n      - name: Cache test fixtures\n        uses: actions/cache@v4\n        with:\n     "
        },
        {
          "language": "yaml",
          "line_count": 31,
          "complexity": "medium",
          "code": "jobs:\n  build:\n    runs-on: ubuntu-latest-8-cores  # Use larger runner for compute-heavy tasks\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Optimize compilation with ccache\n      - name: Set"
        },
        {
          "language": "yaml",
          "line_count": 40,
          "complexity": "medium",
          "code": "jobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        # Test critical combinations first\n        include:\n          # Tier 1: Most common (fail fast)\n          - os: ubuntu-l"
        },
        {
          "language": "yaml",
          "line_count": 38,
          "complexity": "medium",
          "code": "jobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n      - run: npm run build\n\n      # Upload only necessary artifacts\n      - uses: actions/upload-artifact@v4\n   "
        },
        {
          "language": "yaml",
          "line_count": 19,
          "complexity": "simple",
          "code": "jobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Turborepo remote caching\n      - name: Setup Turborepo cache\n        run: |\n          echo \"TURBO_TOKEN"
        },
        {
          "language": "yaml",
          "line_count": 22,
          "complexity": "medium",
          "code": "# .github/workflows/reusable-test.yml\nname: Reusable Test\n\non:\n  workflow_call:\n    inputs:\n      node-version:\n        type: string\n        default: '20'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n   "
        },
        {
          "language": "yaml",
          "line_count": 12,
          "complexity": "simple",
          "code": "# .github/workflows/ci.yml\njobs:\n  test-node-20:\n    uses: ./.github/workflows/reusable-test.yml\n    with:\n      node-version: '20'\n\n  test-node-22:\n    uses: ./.github/workflows/reusable-test.yml\n   "
        },
        {
          "language": "yaml",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Dependencies\nkey: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}\n\n# Build artifacts\nkey: ${{ runner.os }}-build-${{ github.sha }}\n\n# Test fixtures\nkey: fixtures-${{ hashFiles('script"
        },
        {
          "language": "yaml",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Standard (2-core)\nruns-on: ubuntu-latest\n\n# Larger runners (8-core, 16-core)\nruns-on: ubuntu-latest-8-cores\n\n# GPU runners\nruns-on: [self-hosted, gpu]\n\n# ARM runners\nruns-on: [self-hosted, ARM64]\n"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "Lint:            < 30s\nUnit Tests:      < 2m\nBuild:           < 3m\nIntegration:     < 5m\nTotal Feedback:  < 10m\n"
        },
        {
          "language": "yaml",
          "line_count": 9,
          "complexity": "simple",
          "code": "[ ] Dependencies cached\n[ ] Docker layers optimized\n[ ] Tests parallelized\n[ ] Artifacts minimized\n[ ] Conditional execution enabled\n[ ] Incremental builds configured\n[ ] Fast tests run first\n[ ] Appr"
        },
        {
          "language": "yaml",
          "line_count": 3,
          "complexity": "simple",
          "code": "# WRONG: Install every time\n- run: npm install\n"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "# CORRECT: Cache dependencies\n- uses: actions/setup-node@v4\n  with:\n    cache: 'npm'\n- run: npm ci\n"
        },
        {
          "language": "yaml",
          "line_count": 8,
          "complexity": "simple",
          "code": "# WRONG: Sequential jobs\njobs:\n  test-unit:\n    steps: [...]\n  test-integration:\n    needs: test-unit\n    steps: [...]\n"
        },
        {
          "language": "yaml",
          "line_count": 7,
          "complexity": "simple",
          "code": "# CORRECT: Parallel independent jobs\njobs:\n  test-unit:\n    steps: [...]\n  test-integration:\n    steps: [...]\n"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# WRONG: Clean build\n- run: rm -rf dist node_modules\n- run: npm install\n- run: npm run build\n"
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "# CORRECT: Incremental build\n- uses: actions/cache@v4\n  with:\n    path: |\n      node_modules\n      .turbo\n    key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}\n- run: npm ci\n- run: "
        },
        {
          "language": "dockerfile",
          "line_count": 4,
          "complexity": "simple",
          "code": "# WRONG: Copy everything, then install\nCOPY . .\nRUN npm install\n"
        },
        {
          "language": "dockerfile",
          "line_count": 5,
          "complexity": "simple",
          "code": "# CORRECT: Copy deps first, then code\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\n"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Test everything\non: [push]\njobs:\n  test:\n    steps: [run all tests]\n"
        },
        {
          "language": "yaml",
          "line_count": 10,
          "complexity": "simple",
          "code": "# CORRECT: Conditional execution\njobs:\n  changes:\n    outputs:\n      code: ${{ steps.filter.outputs.code }}\n  test:\n    needs: changes\n    if: needs.changes.outputs.code == 'true'\n    steps: [run test"
        },
        {
          "language": "yaml",
          "line_count": 5,
          "complexity": "simple",
          "code": "# WRONG: Run all matrix jobs even if one fails\nstrategy:\n  matrix:\n    version: [18, 20, 22]\n"
        },
        {
          "language": "yaml",
          "line_count": 6,
          "complexity": "simple",
          "code": "# CORRECT: Fail fast for quick feedback\nstrategy:\n  fail-fast: true\n  matrix:\n    version: [18, 20, 22]\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "docker"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "29 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "realtime/pubsub-patterns.md",
      "category": "realtime",
      "skill_name": "pubsub-patterns",
      "frontmatter": {
        "name": "realtime-pubsub-patterns",
        "description": "Use pub/sub patterns when you need:"
      },
      "metrics": {
        "line_count": 695,
        "code_line_count": 95,
        "code_examples": 14,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 111,
          "complexity": "complex",
          "code": "import Redis from 'ioredis';\n\n// Publisher\nclass Publisher {\n  private redis: Redis;\n\n  constructor() {\n    this.redis = new Redis({\n      host: 'localhost',\n      port: 6379,\n    });\n  }\n\n  async pub"
        },
        {
          "language": "typescript",
          "line_count": 70,
          "complexity": "complex",
          "code": "// Pattern subscriber using Redis PSUBSCRIBE\nclass PatternSubscriber {\n  private redis: Redis;\n  private handlers: Map<string, Set<(channel: string, message: any) => void>> = new Map();\n\n  constructor"
        },
        {
          "language": "typescript",
          "line_count": 150,
          "complexity": "complex",
          "code": "import { WebSocketServer, WebSocket } from 'ws';\nimport Redis from 'ioredis';\n\ninterface Client {\n  ws: WebSocket;\n  id: string;\n  subscriptions: Set<string>;\n}\n\nclass PubSubWebSocketBridge {\n  privat"
        },
        {
          "language": "typescript",
          "line_count": 134,
          "complexity": "complex",
          "code": "// Request-Reply using pub/sub with correlation IDs\nclass RequestReplyClient {\n  private redis: Redis;\n  private subscriber: Redis;\n  private clientId: string;\n  private replyChannel: string;\n  privat"
        },
        {
          "language": "typescript",
          "line_count": 15,
          "complexity": "simple",
          "code": "// Publish\nawait redis.publish(channel, message); // Returns number of subscribers\n\n// Subscribe\nawait redis.subscribe(channel1, channel2, ...);\nredis.on('message', (channel, message) => { /* Handle *"
        },
        {
          "language": "typescript",
          "line_count": 14,
          "complexity": "simple",
          "code": "// Include metadata\nconst message = {\n  timestamp: Date.now(),\n  type: 'notification',\n  source: 'user-service',\n  data: { /* payload */ },\n};\n\n// Use correlation IDs for tracking\nconst message = {\n  "
        },
        {
          "language": "typescript",
          "line_count": 4,
          "complexity": "simple",
          "code": "// Wrong: Pub/sub doesn't guarantee delivery\nawait redis.publish('orders', JSON.stringify(order));\n// If no subscribers connected, message is lost\n"
        },
        {
          "language": "typescript",
          "line_count": 3,
          "complexity": "simple",
          "code": "// Use message queue (Redis Streams, RabbitMQ) for guaranteed delivery\nawait redis.xadd('orders', '*', 'order', JSON.stringify(order));\n"
        },
        {
          "language": "typescript",
          "line_count": 3,
          "complexity": "simple",
          "code": "// Wrong: Publishing large data\nawait redis.publish('channel', JSON.stringify(largeObject)); // Multiple MB\n"
        },
        {
          "language": "typescript",
          "line_count": 4,
          "complexity": "simple",
          "code": "// Store data separately, publish reference\nconst id = await redis.set('data:123', JSON.stringify(largeObject));\nawait redis.publish('channel', JSON.stringify({ type: 'data_ready', id }));\n"
        },
        {
          "language": "typescript",
          "line_count": 6,
          "complexity": "simple",
          "code": "// Wrong: Unhandled errors crash subscriber\nredis.on('message', (channel, message) => {\n  const data = JSON.parse(message); // Can throw\n  processData(data); // Can throw\n});\n"
        },
        {
          "language": "typescript",
          "line_count": 9,
          "complexity": "simple",
          "code": "redis.on('message', (channel, message) => {\n  try {\n    const data = JSON.parse(message);\n    processData(data);\n  } catch (error) {\n    console.error('Error processing message:', error);\n  }\n});\n"
        },
        {
          "language": "typescript",
          "line_count": 5,
          "complexity": "simple",
          "code": "// Wrong: Blocking subscriber\nredis.on('message', (channel, message) => {\n  expensiveOperation(message); // Blocks event loop\n});\n"
        },
        {
          "language": "typescript",
          "line_count": 6,
          "complexity": "simple",
          "code": "redis.on('message', async (channel, message) => {\n  setImmediate(async () => {\n    await expensiveOperation(message);\n  });\n});\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "realtime/server-sent-events.md",
      "category": "realtime",
      "skill_name": "server-sent-events",
      "frontmatter": {
        "name": "realtime-server-sent-events",
        "description": "Use Server-Sent Events when you need:"
      },
      "metrics": {
        "line_count": 637,
        "code_line_count": 66,
        "code_examples": 13,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 121,
          "complexity": "complex",
          "code": "// TypeScript/JavaScript client\nclass SSEClient {\n  private eventSource: EventSource | null = null;\n  private url: string;\n  private listeners: Map<string, Set<(data: any) => void>> = new Map();\n  pri"
        },
        {
          "language": "typescript",
          "line_count": 155,
          "complexity": "complex",
          "code": "import express from 'express';\nimport { Request, Response } from 'express';\n\ninterface SSEConnection {\n  id: string;\n  res: Response;\n  lastEventId: number;\n}\n\nclass SSEServer {\n  private connections:"
        },
        {
          "language": "typescript",
          "line_count": 36,
          "complexity": "complex",
          "code": "// Client: Send auth token via query parameter or custom header\nclass AuthenticatedSSEClient extends SSEClient {\n  constructor(url: string, token: string) {\n    // Option 1: Token in query parameter\n "
        },
        {
          "language": "typescript",
          "line_count": 90,
          "complexity": "complex",
          "code": "// Polyfill using long polling for browsers without EventSource\nclass EventSourcePolyfill {\n  private url: string;\n  private listeners: Map<string, (event: MessageEvent) => void> = new Map();\n  privat"
        },
        {
          "language": "typescript",
          "line_count": 17,
          "complexity": "simple",
          "code": "// Create connection\nconst eventSource = new EventSource('/api/events');\n\n// Listen to events\neventSource.onmessage = (event) => { /* Default message */ };\neventSource.addEventListener('custom', (even"
        },
        {
          "language": "typescript",
          "line_count": 6,
          "complexity": "simple",
          "code": "// Wrong: Missing cache headers\napp.get('/events', (req, res) => {\n  res.setHeader('Content-Type', 'text/event-stream');\n  // Missing Cache-Control header\n});\n"
        },
        {
          "language": "typescript",
          "line_count": 3,
          "complexity": "simple",
          "code": "res.setHeader('Cache-Control', 'no-cache');\nres.setHeader('X-Accel-Buffering', 'no'); // Nginx\n"
        },
        {
          "language": "typescript",
          "line_count": 5,
          "complexity": "simple",
          "code": "// Wrong: No last-event-id handling\napp.get('/events', (req, res) => {\n  // Start sending all events from beginning\n});\n"
        },
        {
          "language": "typescript",
          "line_count": 3,
          "complexity": "simple",
          "code": "const lastEventId = parseInt(req.headers['last-event-id'] as string || '0');\nsendMissedEvents(res, lastEventId);\n"
        },
        {
          "language": "typescript",
          "line_count": 4,
          "complexity": "simple",
          "code": "// Wrong: Large data without flushing\nres.write(`data: ${largeObject}\\n\\n`);\n// May be buffered by Node.js or proxy\n"
        },
        {
          "language": "typescript",
          "line_count": 3,
          "complexity": "simple",
          "code": "res.write(`data: ${data}\\n\\n`);\nres.flush?.(); // Flush immediately if available\n"
        },
        {
          "language": "typescript",
          "line_count": 5,
          "complexity": "simple",
          "code": "// Wrong: No keepalive mechanism\napp.get('/events', (req, res) => {\n  // Connection may timeout after idle period\n});\n"
        },
        {
          "language": "typescript",
          "line_count": 4,
          "complexity": "simple",
          "code": "setInterval(() => {\n  res.write(': keepalive\\n\\n');\n}, 30000);\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "nginx"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "anti-slop/SKILL.md",
      "category": "anti-slop",
      "skill_name": "SKILL",
      "frontmatter": {
        "name": "anti-slop",
        "description": "Comprehensive toolkit for detecting and eliminating \"AI slop\" - generic, low-quality AI-generated patterns in natural language, code, and design. Use when reviewing or improving content quality, preventing generic AI patterns, cleaning up existing content, or enforcing quality standards in writing, code, or design work."
      },
      "metrics": {
        "line_count": 419,
        "code_line_count": 52,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "python scripts/detect_slop.py <file> [--verbose]\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Preview changes\npython scripts/clean_slop.py <file>\n\n# Apply changes (creates backup)\npython scripts/clean_slop.py <file> --save\n\n# Aggressive mode (may slightly change meaning)\npython scripts/clean"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Bad\n# Create a user\nuser = User()\n\n# Better - let code speak\nuser = User()\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "python scripts/detect_slop.py <file> [--verbose]\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Preview changes\npython scripts/clean_slop.py <file>\n\n# Save changes (creates backup)\npython scripts/clean_slop.py <file> --save\n\n# Save to different file\npython scripts/clean_slop.py <file> --output"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Check files before committing\npython scripts/detect_slop.py src/documentation.md --verbose\n\n# Clean up automatically\npython scripts/clean_slop.py src/documentation.md --save\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# User asks: \"Can you review this article for AI slop?\"\n1. Read references/text-patterns.md for patterns to watch\n2. Run: python scripts/detect_slop.py article.txt --verbose\n3. Review findings and app"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# User asks: \"Help me clean up generic AI patterns in my code\"\n1. Read references/code-patterns.md\n2. Review code files manually for patterns\n3. Create list of generic names to rename\n4. Refactor foll"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# User asks: \"Does this design look too generic?\"\n1. Read references/design-patterns.md\n2. Check against high-confidence slop indicators\n3. Identify specific issues (gradients, layouts, copy)\n4. Provi"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# User asks: \"Help me create quality standards for our team\"\n1. Review all three reference files\n2. Identify patterns most relevant to user's domain\n3. Create project-specific guidelines\n4. Set up det"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "consul"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": true
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/llm-benchmarks-evaluation.md",
      "category": "ml",
      "skill_name": "llm-benchmarks-evaluation",
      "frontmatter": {
        "name": "ml-llm-benchmarks-evaluation",
        "description": "Comprehensive guide to evaluating LLMs using standard benchmarks including MMLU, HellaSwag, BBH, HumanEval, TruthfulQA, and GSM8K, with practical implementation using LightEval and lm-evaluation-harness"
      },
      "metrics": {
        "line_count": 725,
        "code_line_count": 91,
        "code_examples": 14,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 30,
          "complexity": "medium",
          "code": "# Installation\npip install lm-eval\n\n# Basic evaluation (HuggingFace model)\nlm_eval --model hf \\\n    --model_args pretrained=meta-llama/Llama-2-7b-hf \\\n    --tasks mmlu,hellaswag,truthfulqa_mc2 \\\n    -"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "from lm_eval import evaluator, tasks\nfrom lm_eval.models.huggingface import HFLM\n\n# Initialize model\nmodel = HFLM(pretrained=\"meta-llama/Llama-2-7b-hf\", device=\"cuda:0\")\n\n# Run evaluation\nresults = ev"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "from lighteval.tasks.lighteval_task import LightevalTaskConfig\nfrom lighteval.models.model_loader import load_model\nfrom lighteval.main_lighteval import main_evaluate\n\n# Define evaluation config\ntasks"
        },
        {
          "language": "python",
          "line_count": 79,
          "complexity": "complex",
          "code": "# lm-evaluation-harness custom task\nfrom lm_eval.api.task import Task\nfrom lm_eval.api.instance import Instance\n\nclass CustomMedicalQA(Task):\n    VERSION = 0\n    DATASET_PATH = \"custom/medical_qa\"\n   "
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "from human_eval.data import write_jsonl, read_problems\nfrom human_eval.evaluation import evaluate_functional_correctness\n\n# Generate completions\ndef generate_one_completion(prompt, model, tokenizer):\n"
        },
        {
          "language": "python",
          "line_count": 65,
          "complexity": "complex",
          "code": "from datasets import load_dataset\n\n# Load GSM8K\ndataset = load_dataset(\"gsm8k\", \"main\")\n\ndef extract_answer(text):\n    \"\"\"Extract numerical answer from GSM8K format.\"\"\"\n    # GSM8K answers are in form"
        },
        {
          "language": "python",
          "line_count": 146,
          "complexity": "complex",
          "code": "from lm_eval import evaluator\nfrom lm_eval.models.huggingface import HFLM\nimport json\nfrom datetime import datetime\n\nclass BenchmarkRunner:\n    \"\"\"Run comprehensive LLM benchmark suite.\"\"\"\n\n    def __"
        },
        {
          "language": "python",
          "line_count": 83,
          "complexity": "complex",
          "code": "from lm_eval.api.metrics import perplexity\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\nimport numpy as np\n\nclass ContaminationDetector:\n    \"\"\"Detect potential benchmark contamination"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# BAD: Training specifically to improve MMLU score\ntrain_on_mmlu_like_data()  # Creates overfit model\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# GOOD: Balanced evaluation strategy\nbenchmark_scores = evaluate_benchmarks(model)\ndomain_scores = evaluate_domain_tasks(model)\nhuman_eval_scores = get_human_ratings(model)\n\noverall_score = weighted_a"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# BAD: Assuming higher MMLU = better model for all use cases\nif model_a_mmlu > model_b_mmlu:\n    deploy(model_a)  # May not be better for your specific task\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# GOOD: Test on actual use case\nbenchmark_scores = evaluate_benchmarks([model_a, model_b])\ndomain_scores = evaluate_on_real_data([model_a, model_b])\n\n# Choose based on domain performance\nbest_model = "
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# BAD: Inconsistent few-shot settings\nmodel_a_results = evaluate(model_a, num_fewshot=5)\nmodel_b_results = evaluate(model_b, num_fewshot=0)  # Not comparable!\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# GOOD: Consistent settings\nEVAL_CONFIG = {\n    \"num_fewshot\": 5,\n    \"batch_size\": 8,\n    \"temperature\": 0.0,\n    \"tasks\": [\"mmlu\", \"hellaswag\", \"truthfulqa_mc2\"],\n}\n\nmodel_a_results = evaluate(model"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "prometheus"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/llm-as-judge.md",
      "category": "ml",
      "skill_name": "llm-as-judge",
      "frontmatter": {
        "name": "ml-llm-as-judge",
        "description": "Comprehensive guide to LLM-as-judge evaluation patterns including Prometheus 2 models, G-Eval framework, pairwise/pointwise/reference-guided methods, bias mitigation, and uncertainty quantification"
      },
      "metrics": {
        "line_count": 1090,
        "code_line_count": 79,
        "code_examples": 12,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 123,
          "complexity": "complex",
          "code": "from transformers import AutoModelForCausalLM, AutoTokenizer\nimport torch\n\nclass PrometheusEvaluator:\n    \"\"\"Prometheus 2 evaluator for pointwise assessment.\"\"\"\n\n    def __init__(self, model_name=\"pro"
        },
        {
          "language": "python",
          "line_count": 142,
          "complexity": "complex",
          "code": "from openai import OpenAI\nimport json\n\nclass GEvalEvaluator:\n    \"\"\"G-Eval framework using GPT-4 with chain-of-thought.\"\"\"\n\n    def __init__(self, model=\"gpt-4-turbo-preview\"):\n        self.client = O"
        },
        {
          "language": "python",
          "line_count": 120,
          "complexity": "complex",
          "code": "from openai import OpenAI\nimport json\n\nclass PairwiseJudge:\n    \"\"\"Pairwise comparison with position bias mitigation.\"\"\"\n\n    def __init__(self, model=\"gpt-4-turbo-preview\"):\n        self.client = Ope"
        },
        {
          "language": "python",
          "line_count": 137,
          "complexity": "complex",
          "code": "from typing import List, Dict\nfrom openai import OpenAI\nimport json\n\nclass MultiDimensionalJudge:\n    \"\"\"Evaluate response across multiple dimensions.\"\"\"\n\n    def __init__(self, model=\"gpt-4-turbo-pre"
        },
        {
          "language": "python",
          "line_count": 157,
          "complexity": "complex",
          "code": "import pandas as pd\nfrom sklearn.metrics import cohen_kappa_score\nfrom typing import List, Dict\nimport json\n\nclass JudgeValidator:\n    \"\"\"Validate LLM judge against human annotations.\"\"\"\n\n    def __in"
        },
        {
          "language": "python",
          "line_count": 197,
          "complexity": "complex",
          "code": "from typing import List, Dict, Optional\nfrom dataclasses import dataclass\nimport json\nfrom datetime import datetime\n\n@dataclass\nclass JudgmentResult:\n    \"\"\"Result from LLM judge.\"\"\"\n    score: float\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# BAD: LLM judge for exact match tasks\njudgment = judge.evaluate(\n    task=\"What is 2+2?\",\n    response=\"4\",\n)  # Expensive and unnecessary\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# GOOD: Exact match for objective tasks\ndef evaluate_math(response, expected):\n    return {\"score\": 1.0 if response.strip() == expected.strip() else 0.0}\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# BAD: Position bias not addressed\nwinner = judge.compare(response_a, response_b)  # May favor first position\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# GOOD: Mitigate position bias\nresult_ab = judge.compare(response_a, response_b)\nresult_ba = judge.compare(response_b, response_a)\n\nif result_ab[\"winner\"] == result_ba[\"winner\"]:\n    winner = result_a"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# BAD: No validation\nscores = [judge.evaluate(case) for case in test_cases]\n# Are these scores reliable? Unknown!\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# GOOD: Validate against human experts\nvalidator = JudgeValidator(judge)\nvalidation = validator.validate_against_humans(test_cases, human_scores)\n\nif validation[\"pearson_correlation\"] < 0.7:\n    print"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "prometheus"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "12 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "workflow/beads-multi-session-patterns.md",
      "category": "workflow",
      "skill_name": "beads-multi-session-patterns",
      "frontmatter": {
        "name": "beads-multi-session-patterns",
        "description": "bd create \"Implement user authentication\" -t epic -p 0 --json"
      },
      "metrics": {
        "line_count": 338,
        "code_line_count": 108,
        "code_examples": 18,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Create parent epic\nbd create \"Implement user authentication\" -t epic -p 0 --json\n# Returns: bd-100\n\n# Create ordered subtasks\nbd create \"Design auth schema\" -t task -p 0 --json          # bd-101\nbd "
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Link all to epic\nfor id in 101 102 103 104 105; do\n  bd dep add bd-$id bd-100 --type parent-child\ndone\n\n# Chain sequential dependencies\nbd dep add bd-102 bd-101 --type blocks  # JWT needs schema\nbd "
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "complex",
          "code": "# Session 1\nbd ready --json  # Shows: bd-101 (design schema)\nbd update bd-101 --status in_progress --json\n# ... work on schema ...\nbd close bd-101 --reason \"Schema designed and documented\" --json\nbd e"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# At session start: Load full tree\nbd dep tree bd-100\n/context \"Auth epic bd-100: 5 subtasks, currently on bd-102 (JWT implementation), completed: bd-101 (schema), remaining: 3 tasks\"\n\n# Between sessi"
        },
        {
          "language": "bash",
          "line_count": 25,
          "complexity": "medium",
          "code": "# Start with single task\nbd create \"Refactor user service\" -t task -p 1 --json  # bd-200\nbd update bd-200 --status in_progress --json\n\n# Discover issues during work\nbd create \"Fix user validation bug\""
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# After discovering 3+ issues\n/context \"Discovery chain from bd-200: [list with priorities and brief descriptions], plan to address in priority order\"\n\n# When completing parent with discoveries still "
        },
        {
          "language": "bash",
          "line_count": 25,
          "complexity": "medium",
          "code": "# Stream 1: Frontend work\nbd create \"Frontend Epic\" -t epic -p 1 --json                  # bd-300\nbd create \"User profile UI\" -t task -p 1 --json                # bd-301\nbd create \"Settings UI\" -t tas"
        },
        {
          "language": "bash",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Session 1: Infrastructure focus\nbd ready --json  # Shows: bd-321 (deploy staging)\nbd update bd-321 --status in_progress --json\n# ... deploy ...\nbd close bd-321 --reason \"Staging deployed\" --json\n/co"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Track progress across epics\n/context \"Epic status: Frontend 1/2 (bd-301 in progress), Backend 1/2 (bd-311 done, bd-312 ready), Infrastructure 1/2 (bd-321 done, bd-322 ready)\"\n\n# When switching strea"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Branch A creates: bd-400, bd-401, bd-402\n# Branch B creates: bd-400, bd-401, bd-403 (collision on IDs!)\n# Both branches merged to main\n"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "complex",
          "code": "# After merge conflict in .beads/issues.jsonl\ngit merge feature-branch\n# Conflict in .beads/issues.jsonl\n\n# Preview collision\nbd import -i .beads/issues.jsonl --dry-run\n\n# Auto-resolve with remapping\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Agent 1 claims backend work\nbd ready --json\nbd update bd-500 --status in_progress --assignee agent-1 --json\n\n# Agent 2 claims frontend work\nbd ready --assignee agent-2 --json\nbd update bd-501 --stat"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "complex",
          "code": "# Agent 1 workflow\n# ... work ...\nbd close bd-500 --reason \"API complete\" --json\nbd export -o .beads/issues.jsonl\ngit add .beads/issues.jsonl\ngit commit -m \"Agent 1: Complete bd-500\"\ngit push\n\n# Agent"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Each agent maintains separate context\n# Agent 1:\n/context \"Agent 1 perspective: working on backend epic bd-500, completed API endpoints, next: bd-502 (database migration)\"\n\n# Agent 2:\n/context \"Agen"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Week 1: Create epic and high-level tasks\nbd create \"Build payment system\" -t epic -p 0 --json  # bd-600\n\n# Week 2: Break down first task\nbd create \"Design payment schema\" -t task -p 0 --json  # bd-6"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Quarterly milestones\nbd create \"Q1 2025: Core Features\" -t epic -p 0 --json\nbd create \"Q2 2025: Performance\" -t epic -p 1 --json\nbd create \"Q3 2025: Scale & Deploy\" -t epic -p 2 --json\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# End of session\nbd export -o .beads/issues.jsonl\n/context \"Session end: completed [bd-X, bd-Y], in progress [bd-Z at 70%], next session: finish bd-Z, start bd-W\"\ngit add .beads/issues.jsonl\ngit commi"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Check for cycles\nbd dep cycles\n\n# Review blocked issues\nbd list --status blocked --json | jq '.[] | {id, title, blocked_by}'\n\n# Clean up stale dependencies\nbd dep remove bd-OLD bd-STALE --type block"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "jwt"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "workflow/beads-dependency-management.md",
      "category": "workflow",
      "skill_name": "beads-dependency-management",
      "frontmatter": {
        "name": "beads-dependency-management",
        "description": "bd dep add bd-15 bd-10 --type blocks"
      },
      "metrics": {
        "line_count": 354,
        "code_line_count": 93,
        "code_examples": 17,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# bd-15 cannot start until bd-10 is complete\nbd dep add bd-15 bd-10 --type blocks\n\n# bd-15 won't appear in `bd ready` until bd-10 is closed\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# bd-20 and bd-18 are contextually related\nbd dep add bd-20 bd-18 --type related\n\n# Both can be worked on independently\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# bd-25 is a subtask of epic bd-22\nbd dep add bd-25 bd-22 --type parent-child\n\n# Parent: bd-22 (epic)\n# Child: bd-25 (subtask)\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# bd-30 was discovered while working on bd-28\nbd dep add bd-30 bd-28 --type discovered-from\n\n# Preserves discovery context\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# General syntax\nbd dep add <target-issue> <source-issue> --type <type>\n\n# Examples\nbd dep add bd-5 bd-3 --type blocks\nbd dep add bd-10 bd-8 --type related\nbd dep add bd-15 bd-12 --type parent-child\nb"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "bd dep remove bd-5 bd-3 --type blocks\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Show all dependencies for an issue\nbd dep tree bd-42\n\n# Show specific dependency type\nbd dep tree bd-42 --type blocks\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Detect circular dependencies\nbd dep cycles\n\n# Beads prevents invalid cycles when adding dependencies\n"
        },
        {
          "language": "bash",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Create epic\nbd create \"Implement user authentication\" -t epic -p 0 --json\n# Returns: bd-100\n\n# Create subtasks\nbd create \"Design auth schema\" -t task -p 0 --json          # bd-101\nbd create \"Impleme"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Working on refactoring\nbd update bd-50 --status in_progress --json\n\n# Discover issues during work\nbd create \"Fix user validation bug\" -t bug -p 0 --json      # bd-51\nbd dep add bd-51 bd-50 --type di"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Foundation\nbd create \"Build base API client\" -t task -p 0 --json       # bd-200\n\n# Dependent features\nbd create \"User profile feature\" -t feature -p 1 --json     # bd-201\nbd create \"Settings feature"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Create related issues\nbd create \"Frontend: User profile UI\" -t task -p 1 --json   # bd-300\nbd create \"Backend: User profile API\" -t task -p 1 --json   # bd-301\nbd create \"Docs: User profile guide\" -"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# List issues that are blocked\nbd list --status blocked --json\n\n# Show what's blocking an issue\nbd dep tree bd-50 | grep \"blocks\"\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Ready work = no blocking dependencies\nbd ready --json --limit 10\n\n# Ready work for specific priority\nbd ready --priority 0 --json\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Find all issues discovered from bd-X\nbd dep tree bd-50 --type discovered-from\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Show all subtasks of epic\nbd dep tree bd-100 --type parent-child\n\n# Filter by status\nbd list --json | jq '.[] | select(.parent == \"bd-100\")'\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# INVALID - creates cycle\nbd dep add bd-10 bd-5 --type blocks\nbd dep add bd-5 bd-10 --type blocks  # Error: would create cycle\n\n# VALID - use related instead\nbd dep add bd-10 bd-5 --type related\nbd de"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "jwt"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cloud/aws/aws-storage.md",
      "category": "cloud",
      "skill_name": "aws-storage",
      "frontmatter": {
        "name": "cloud-aws-storage",
        "description": "AWS storage services - S3, EBS, EFS, Glacier, lifecycle policies, encryption, and data transfer"
      },
      "metrics": {
        "line_count": 611,
        "code_line_count": 77,
        "code_examples": 11,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 69,
          "complexity": "complex",
          "code": "import boto3\n\ns3 = boto3.client('s3')\n\ndef create_bucket(bucket_name, region='us-east-1'):\n    \"\"\"Create S3 bucket with versioning and encryption\"\"\"\n\n    # Create bucket\n    if region == 'us-east-1':\n"
        },
        {
          "language": "python",
          "line_count": 70,
          "complexity": "complex",
          "code": "import boto3\n\nec2 = boto3.client('ec2')\n\ndef create_and_attach_volume(instance_id, size_gb=100, volume_type='gp3'):\n    \"\"\"Create EBS volume and attach to instance\"\"\"\n\n    # Get instance AZ\n    respon"
        },
        {
          "language": "python",
          "line_count": 55,
          "complexity": "complex",
          "code": "import boto3\n\nefs = boto3.client('efs')\n\ndef create_efs_file_system():\n    \"\"\"Create EFS file system with mount targets\"\"\"\n\n    # Create file system\n    response = efs.create_file_system(\n        Perf"
        },
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "def configure_lifecycle_policy(bucket_name):\n    \"\"\"Configure S3 lifecycle transitions and expiration\"\"\"\n\n    s3.put_bucket_lifecycle_configuration(\n        Bucket=bucket_name,\n        LifecycleConfig"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "medium",
          "code": "def configure_s3_notifications(bucket_name, lambda_arn):\n    \"\"\"Configure S3 to trigger Lambda on object creation\"\"\"\n\n    # Grant S3 permission to invoke Lambda\n    lambda_client = boto3.client('lambd"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "from botocore.exceptions import ClientError\n\ndef generate_presigned_url(bucket, key, expiration=3600):\n    \"\"\"Generate presigned URL for temporary access\"\"\"\n\n    try:\n        url = s3.generate_presign"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Enable Transfer Acceleration\naws s3api put-bucket-accelerate-configuration \\\n  --bucket my-bucket \\\n  --accelerate-configuration Status=Enabled\n"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "def upload_with_acceleration(bucket, key, file_path):\n    \"\"\"Upload using S3 Transfer Acceleration endpoint\"\"\"\n\n    # Create client with accelerate endpoint\n    s3_accelerate = boto3.client(\n        '"
        },
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "from datetime import datetime, timedelta\n\ndef backup_ebs_volumes(tag_key='Backup', tag_value='true'):\n    \"\"\"Create snapshots of tagged volumes\"\"\"\n\n    # Find volumes with backup tag\n    response = ec"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "# \u274c NEVER: Create public bucket without justification\ns3.create_bucket(Bucket='my-bucket')\ns3.put_bucket_acl(Bucket='my-bucket', ACL='public-read')\n# All objects publicly accessible!\n\n# \u2705 CORRECT: Blo"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u274c Don't use S3 Standard for all data\ns3.upload_file('archive.zip', 'my-bucket', 'data/archive.zip')\n# Paying $0.023/GB for rarely accessed data\n\n# \u2705 Correct: Use appropriate storage class\ns3.upload_"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "tls"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cloud/aws/aws-iam-security.md",
      "category": "cloud",
      "skill_name": "aws-iam-security",
      "frontmatter": {
        "name": "cloud-aws-iam-security",
        "description": "AWS IAM policies, roles, Cognito authentication, Secrets Manager, KMS encryption, and security best practices"
      },
      "metrics": {
        "line_count": 755,
        "code_line_count": 97,
        "code_examples": 11,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 104,
          "complexity": "complex",
          "code": "import boto3\nimport json\n\niam = boto3.client('iam')\n\ndef create_lambda_execution_role():\n    \"\"\"Create IAM role for Lambda with least privilege\"\"\"\n\n    # Trust policy - who can assume this role\n    tr"
        },
        {
          "language": "python",
          "line_count": 93,
          "complexity": "complex",
          "code": "import boto3\n\ncognito = boto3.client('cognito-idp')\n\ndef create_user_pool():\n    \"\"\"Create Cognito User Pool for authentication\"\"\"\n\n    response = cognito.create_user_pool(\n        PoolName='myapp-use"
        },
        {
          "language": "python",
          "line_count": 60,
          "complexity": "complex",
          "code": "import boto3\nimport json\n\nsecrets = boto3.client('secretsmanager')\n\ndef create_database_secret(db_username, db_password, db_host, db_name):\n    \"\"\"Store database credentials in Secrets Manager\"\"\"\n\n   "
        },
        {
          "language": "python",
          "line_count": 94,
          "complexity": "complex",
          "code": "import boto3\nimport base64\n\nkms = boto3.client('kms')\n\ndef create_kms_key():\n    \"\"\"Create customer-managed KMS key\"\"\"\n\n    response = kms.create_key(\n        Description='Application data encryption "
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "import boto3\n\nsts = boto3.client('sts')\n\ndef assume_role(role_arn, session_name):\n    \"\"\"Assume role in another account\"\"\"\n\n    response = sts.assume_role(\n        RoleArn=role_arn,\n        RoleSessio"
        },
        {
          "language": "python",
          "line_count": 45,
          "complexity": "medium",
          "code": "# No credentials needed - use IAM instance profile\n\ndef create_ec2_instance_profile():\n    \"\"\"Create instance profile for EC2\"\"\"\n\n    # Create role\n    trust_policy = {\n        \"Version\": \"2012-10-17\""
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "medium",
          "code": "def enforce_mfa_policy():\n    \"\"\"Create policy requiring MFA for sensitive actions\"\"\"\n\n    mfa_policy = {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Sid\": \""
        },
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "def create_developer_role_with_boundary():\n    \"\"\"Create developer role with permission boundary\"\"\"\n\n    # Permission boundary - maximum allowed permissions\n    boundary_policy = {\n        \"Version\": "
        },
        {
          "language": "json",
          "line_count": 16,
          "complexity": "simple",
          "code": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"DescriptiveStatementId\",\n      \"Effect\": \"Allow\",  // or \"Deny\"\n      \"Principal\": {\"AWS\": \"arn:aws:iam::123456789012:user/Alice\"},\n  "
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "# \u274c NEVER: Hardcode credentials\nAWS_ACCESS_KEY_ID = \"AKIAIOSFODNN7EXAMPLE\"\nAWS_SECRET_ACCESS_KEY = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n\ns3 = boto3.client(\n    's3',\n    aws_access_key_id=AWS_AC"
        },
        {
          "language": "json",
          "line_count": 17,
          "complexity": "simple",
          "code": "// \u274c Don't grant overly broad permissions\n{\n  \"Effect\": \"Allow\",\n  \"Action\": \"*\",\n  \"Resource\": \"*\"\n}\n\n// \u2705 Correct: Specific actions and resources\n{\n  \"Effect\": \"Allow\",\n  \"Action\": [\n    \"s3:GetObje"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "oauth"
      ],
      "config_snippets": [
        "json",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ebpf/ebpf-tracing-observability.md",
      "category": "ebpf",
      "skill_name": "ebpf-tracing-observability",
      "frontmatter": {
        "name": "ebpf-tracing-observability",
        "description": "Using eBPF for tracing with bpftrace, kprobes, uprobes, tracepoints, and performance analysis"
      },
      "metrics": {
        "line_count": 591,
        "code_line_count": 155,
        "code_examples": 20,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Trace all syscalls by process\nbpftrace -e 'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'\n\n# Show file opens\nbpftrace -e 'tracepoint:syscalls:sys_enter_openat { printf(\"%s: %s\\n\", comm, s"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# bpftrace: Trace function entry\nbpftrace -e 'kprobe:do_sys_open { printf(\"Process %s opening file\\n\", comm); }'\n\n# Trace function with arguments\nbpftrace -e 'kprobe:do_sys_open {\n    printf(\"%s calle"
        },
        {
          "language": "c",
          "line_count": 26,
          "complexity": "medium",
          "code": "#include <vmlinux.h>\n#include <bpf/bpf_helpers.h>\n#include <bpf/bpf_tracing.h>\n\nSEC(\"kprobe/do_sys_open\")\nint BPF_KPROBE(trace_open_entry, int dfd, const char __user *filename) {\n    char fname[256];\n"
        },
        {
          "language": "bash",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Trace malloc calls\nbpftrace -e 'uprobe:/lib/x86_64-linux-gnu/libc.so.6:malloc {\n    printf(\"%s malloc(%d)\\n\", comm, arg0);\n}'\n\n# Trace application function\nbpftrace -e 'uprobe:/usr/bin/python3.9:PyE"
        },
        {
          "language": "c",
          "line_count": 17,
          "complexity": "simple",
          "code": "SEC(\"uprobe/lib/x86_64-linux-gnu/libc.so.6:malloc\")\nint BPF_KPROBE(trace_malloc, size_t size) {\n    u32 pid = bpf_get_current_pid_tgid() >> 32;\n    char comm[16];\n    bpf_get_current_comm(&comm, sizeo"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# List available tracepoints\nbpftrace -l 'tracepoint:*' | grep syscalls\n\n# Trace syscall entry\nbpftrace -e 'tracepoint:syscalls:sys_enter_write {\n    printf(\"write(%d, ..., %d)\\n\", args->fd, args->cou"
        },
        {
          "language": "c",
          "line_count": 27,
          "complexity": "medium",
          "code": "#include <vmlinux.h>\n#include <bpf/bpf_helpers.h>\n\nSEC(\"tracepoint/syscalls/sys_enter_openat\")\nint trace_openat(struct trace_event_raw_sys_enter *ctx) {\n    char filename[256];\n    char comm[16];\n\n   "
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Histogram of read() latency\nbpftrace -e '\ntracepoint:syscalls:sys_enter_read {\n    @start[tid] = nsecs;\n}\n\ntracepoint:syscalls:sys_exit_read /@start[tid]/ {\n    @latency_us = hist((nsecs - @start[ti"
        },
        {
          "language": "c",
          "line_count": 34,
          "complexity": "medium",
          "code": "struct {\n    __uint(type, BPF_MAP_TYPE_HASH);\n    __uint(max_entries, 10240);\n    __type(key, u32);\n    __type(value, u64);\n} start_times SEC(\".maps\");\n\nstruct {\n    __uint(type, BPF_MAP_TYPE_HISTOGRA"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Count kernel function calls\nbpftrace -e 'kprobe:vfs_* { @[probe] = count(); }'\n\n# Count by process\nbpftrace -e 'kprobe:tcp_sendmsg { @sends[comm] = count(); }'\n\n# Top 10 callers\nbpftrace -e 'kprobe:"
        },
        {
          "language": "c",
          "line_count": 24,
          "complexity": "medium",
          "code": "struct {\n    __uint(type, BPF_MAP_TYPE_PERCPU_HASH);\n    __uint(max_entries, 10240);\n    __type(key, char[16]);\n    __type(value, u64);\n} call_counts SEC(\".maps\");\n\nSEC(\"kprobe/tcp_sendmsg\")\nint count"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# User stack traces\nbpftrace -e 'profile:hz:99 /comm == \"myapp\"/ {\n    @[ustack] = count();\n}'\n\n# Kernel stack traces\nbpftrace -e 'kprobe:tcp_sendmsg {\n    @[kstack] = count();\n}'\n\n# Combined user + k"
        },
        {
          "language": "c",
          "line_count": 29,
          "complexity": "medium",
          "code": "struct {\n    __uint(type, BPF_MAP_TYPE_STACK_TRACE);\n    __uint(max_entries, 1024);\n    __uint(key_size, sizeof(u32));\n    __uint(value_size, PERF_MAX_STACK_DEPTH * sizeof(u64));\n} stack_traces SEC(\"."
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Inspect syscall arguments\nbpftrace -e 'tracepoint:syscalls:sys_enter_write {\n    printf(\"write(fd=%d, count=%d) by %s\\n\",\n           args->fd, args->count, comm);\n}'\n\n# String arguments\nbpftrace -e "
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Single PID\nbpftrace -e 'tracepoint:syscalls:sys_enter_read /pid == 1234/ {\n    printf(\"Read by PID 1234\\n\");\n}'\n\n# Process name\nbpftrace -e 'kprobe:vfs_read /comm == \"nginx\"/ {\n    @reads = count();"
        },
        {
          "language": "c",
          "line_count": 21,
          "complexity": "medium",
          "code": "struct {\n    __uint(type, BPF_MAP_TYPE_HASH);\n    __uint(max_entries, 1024);\n    __type(key, u32);\n    __type(value, u8);\n} filter_pids SEC(\".maps\");\n\nSEC(\"kprobe/do_sys_open\")\nint trace_open_filtered"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Sample 1% of events\nbpftrace -e 'kprobe:vfs_read /(rand() % 100) < 1/ {\n    @sampled = count();\n}'\n\n# Sample every 100th event\nbpftrace -e '\nkprobe:tcp_sendmsg {\n    @count++;\n    if (@count % 100 ="
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "bpftrace -e '\nkprobe:tcp_sendmsg {\n    @start[tid] = nsecs;\n    printf(\"-> tcp_sendmsg (%s)\\n\", comm);\n}\n\nkprobe:ip_queue_xmit /@start[tid]/ {\n    printf(\"  -> ip_queue_xmit (+%d us)\\n\",\n           (n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c NEVER: Trace everything without filtering\nbpftrace -e 'kprobe:* { printf(\"Called: %s\\n\", probe); }'\n# Massive overhead, system slowdown\n\n# \u2705 CORRECT: Filter to specific probes\nbpftrace -e 'kprobe:"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c Don't: Forget to clean up maps\nbpftrace -e '\nkprobe:do_sys_open { @start[tid] = nsecs; }\nkretprobe:do_sys_open { /* No delete! */ }'\n\n# \u2705 Correct: Always clean up\nbpftrace -e '\nkprobe:do_sys_open "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "nginx"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "20 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ebpf/ebpf-security-monitoring.md",
      "category": "ebpf",
      "skill_name": "ebpf-security-monitoring",
      "frontmatter": {
        "name": "ebpf-security-monitoring",
        "description": "Security monitoring with eBPF including syscall tracking, file/network monitoring, Falco, Tetragon, and threat detection"
      },
      "metrics": {
        "line_count": 691,
        "code_line_count": 160,
        "code_examples": 17,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 3
      },
      "code_examples": [
        {
          "language": "c",
          "line_count": 50,
          "complexity": "medium",
          "code": "#include <vmlinux.h>\n#include <bpf/bpf_helpers.h>\n#include <bpf/bpf_tracing.h>\n\nstruct syscall_event {\n    u32 pid;\n    u32 uid;\n    char comm[16];\n    int syscall_id;\n    u64 timestamp;\n};\n\nstruct {\n"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "# Userspace: Define dangerous syscalls\nimport os\n\ndangerous = {\n    'ptrace': 101,\n    'setuid': 105,\n    'setgid': 106,\n    'execve': 59,\n    'kill': 62,\n    'mount': 165,\n    'umount': 166,\n}\n\n# Pop"
        },
        {
          "language": "c",
          "line_count": 38,
          "complexity": "medium",
          "code": "struct exec_event {\n    u32 pid;\n    u32 ppid;\n    u32 uid;\n    char comm[16];\n    char filename[256];\n    u64 timestamp;\n};\n\nstruct {\n    __uint(type, BPF_MAP_TYPE_RINGBUF);\n    __uint(max_entries, 2"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "suspicious_patterns = [\n    '/tmp/',              # Execution from /tmp\n    '/dev/shm/',          # Execution from shared memory\n    'nc ',                # Netcat (reverse shell)\n    'bash -i',      "
        },
        {
          "language": "c",
          "line_count": 48,
          "complexity": "medium",
          "code": "struct file_event {\n    u32 pid;\n    char comm[16];\n    char filename[256];\n    u32 flags;\n    u64 timestamp;\n};\n\nstruct {\n    __uint(type, BPF_MAP_TYPE_RINGBUF);\n    __uint(max_entries, 256 * 1024);\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Monitor sensitive files\nsensitive_files = [\n    '/etc/shadow',\n    '/etc/passwd',\n    '/root/.ssh/id_rsa',\n    '/home/*/.ssh/id_rsa',\n    '/var/log/auth.log',\n]\n\nfor path in sensitive_files:\n    sen"
        },
        {
          "language": "c",
          "line_count": 45,
          "complexity": "medium",
          "code": "struct connect_event {\n    u32 pid;\n    u32 uid;\n    char comm[16];\n    u32 dst_ip;\n    u16 dst_port;\n    u64 timestamp;\n};\n\nstruct {\n    __uint(type, BPF_MAP_TYPE_RINGBUF);\n    __uint(max_entries, 25"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "import ipaddress\n\n# Suspicious ports\nsuspicious_ports = [4444, 5555, 6666, 7777, 8888, 9999]  # Common backdoor ports\nblacklisted_ips = ['192.0.2.1', '198.51.100.1']  # Example C2 servers\n\ndef analyze"
        },
        {
          "language": "c",
          "line_count": 33,
          "complexity": "medium",
          "code": "SEC(\"tracepoint/syscalls/sys_enter_setuid\")\nint detect_setuid(struct trace_event_raw_sys_enter *ctx) {\n    u32 current_uid = bpf_get_current_uid_gid() >> 32;\n    u32 target_uid = ctx->args[0];\n\n    //"
        },
        {
          "language": "yaml",
          "line_count": 33,
          "complexity": "medium",
          "code": "# Falco rule example\n- rule: Suspicious Process Execution\n  desc: Detect execution from /tmp or /dev/shm\n  condition: >\n    spawned_process and\n    (proc.exe startswith /tmp or proc.exe startswith /de"
        },
        {
          "language": "yaml",
          "line_count": 23,
          "complexity": "medium",
          "code": "# Tetragon TracingPolicy\napiVersion: cilium.io/v1alpha1\nkind: TracingPolicy\nmetadata:\n  name: monitor-sensitive-files\nspec:\n  kprobes:\n  - call: \"security_file_open\"\n    syscall: false\n    args:\n    -"
        },
        {
          "language": "yaml",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Detect privilege escalation\napiVersion: cilium.io/v1alpha1\nkind: TracingPolicy\nmetadata:\n  name: detect-privilege-escalation\nspec:\n  tracepoints:\n  - subsystem: \"syscalls\"\n    event: \"sys_enter_setu"
        },
        {
          "language": "c",
          "line_count": 42,
          "complexity": "medium",
          "code": "SEC(\"kprobe/commit_creds\")\nint detect_cred_override(struct pt_regs *ctx) {\n    struct cred *new_creds = (struct cred *)PT_REGS_PARM1(ctx);\n    u32 new_uid;\n\n    bpf_probe_read_kernel(&new_uid, sizeof("
        },
        {
          "language": "python",
          "line_count": 50,
          "complexity": "complex",
          "code": "# Behavioral analysis patterns\nclass MalwareDetector:\n    def __init__(self):\n        self.process_activity = {}\n\n    def analyze_behavior(self, pid, event_type, details):\n        if pid not in self.p"
        },
        {
          "language": "c",
          "line_count": 48,
          "complexity": "medium",
          "code": "struct audit_event {\n    u64 timestamp;\n    u32 pid;\n    u32 uid;\n    u32 gid;\n    char comm[16];\n    u8 event_type;\n    char details[256];\n};\n\nstruct {\n    __uint(type, BPF_MAP_TYPE_RINGBUF);\n    __u"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Run Falco\nfalco -c /etc/falco/falco.yaml\n\n# Test rule\nfalco -M 45 -o json_output=true\n\n# Custom rules\nfalco -r /etc/falco/custom_rules.yaml\n"
        },
        {
          "language": "c",
          "line_count": 20,
          "complexity": "simple",
          "code": "// \u274c NEVER: Monitor without filtering\nSEC(\"tracepoint/raw_syscalls/sys_enter\")\nint trace_all_syscalls(void *ctx) {\n    // Logs EVERY syscall - massive overhead!\n    bpf_printk(\"Syscall\\n\");\n    return"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "kubernetes"
      ],
      "config_snippets": [
        "yaml",
        "yaml",
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ebpf/ebpf-networking.md",
      "category": "ebpf",
      "skill_name": "ebpf-networking",
      "frontmatter": {
        "name": "ebpf-networking",
        "description": "Fast packet processing with XDP, TC filtering, socket programs, load balancing, and Cilium networking"
      },
      "metrics": {
        "line_count": 702,
        "code_line_count": 122,
        "code_examples": 14,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "c",
          "line_count": 39,
          "complexity": "medium",
          "code": "#include <linux/bpf.h>\n#include <linux/if_ether.h>\n#include <linux/ip.h>\n#include <linux/icmp.h>\n#include <bpf/bpf_helpers.h>\n\nSEC(\"xdp\")\nint xdp_firewall(struct xdp_md *ctx) {\n    void *data_end = (v"
        },
        {
          "language": "c",
          "line_count": 48,
          "complexity": "medium",
          "code": "#include <linux/bpf.h>\n#include <linux/pkt_cls.h>\n#include <linux/if_ether.h>\n#include <linux/ip.h>\n#include <linux/tcp.h>\n#include <bpf/bpf_helpers.h>\n\nSEC(\"tc\")\nint tc_modify_port(struct __sk_buff *"
        },
        {
          "language": "c",
          "line_count": 35,
          "complexity": "medium",
          "code": "// Socket filter: Drop packets for specific socket\nSEC(\"socket\")\nint socket_filter(struct __sk_buff *skb) {\n    // Access socket info\n    __u32 protocol = load_byte(skb, offsetof(struct iphdr, protoco"
        },
        {
          "language": "c",
          "line_count": 31,
          "complexity": "medium",
          "code": "struct {\n    __uint(type, BPF_MAP_TYPE_DEVMAP);\n    __uint(max_entries, 256);\n    __type(key, __u32);\n    __type(value, __u32);\n} tx_port SEC(\".maps\");\n\nSEC(\"xdp\")\nint xdp_redirect(struct xdp_md *ctx)"
        },
        {
          "language": "c",
          "line_count": 48,
          "complexity": "medium",
          "code": "struct {\n    __uint(type, BPF_MAP_TYPE_LRU_HASH);\n    __uint(max_entries, 1000000);\n    __type(key, __u32);    // Source IP\n    __type(value, __u64);  // Packet count\n} rate_limit SEC(\".maps\");\n\nSEC(\""
        },
        {
          "language": "c",
          "line_count": 74,
          "complexity": "complex",
          "code": "struct backend {\n    __u32 ip;\n    __u16 port;\n};\n\nstruct {\n    __uint(type, BPF_MAP_TYPE_ARRAY);\n    __uint(max_entries, 4);\n    __type(key, __u32);\n    __type(value, struct backend);\n} backends SEC("
        },
        {
          "language": "c",
          "line_count": 54,
          "complexity": "complex",
          "code": "struct {\n    __uint(type, BPF_MAP_TYPE_PERF_EVENT_ARRAY);\n} events SEC(\".maps\");\n\nstruct packet_sample {\n    __u32 src_ip;\n    __u32 dst_ip;\n    __u16 src_port;\n    __u16 dst_port;\n    __u8 protocol;\n"
        },
        {
          "language": "yaml",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Cilium NetworkPolicy\napiVersion: cilium.io/v2\nkind: CiliumNetworkPolicy\nmetadata:\n  name: allow-frontend\nspec:\n  endpointSelector:\n    matchLabels:\n      app: backend\n  ingress:\n  - fromEndpoints:\n "
        },
        {
          "language": "c",
          "line_count": 29,
          "complexity": "medium",
          "code": "// Simplified Cilium-style policy enforcement\nstruct {\n    __uint(type, BPF_MAP_TYPE_HASH);\n    __uint(max_entries, 10000);\n    __type(key, __u32);    // Identity\n    __type(value, __u8);   // Allowed"
        },
        {
          "language": "c",
          "line_count": 77,
          "complexity": "complex",
          "code": "struct conn_key {\n    __u32 src_ip;\n    __u32 dst_ip;\n    __u16 src_port;\n    __u16 dst_port;\n    __u8 protocol;\n};\n\nstruct conn_state {\n    __u64 packets;\n    __u64 bytes;\n    __u64 last_seen;\n    __"
        },
        {
          "language": "c",
          "line_count": 19,
          "complexity": "simple",
          "code": "SEC(\"xdp\")\nint xdp_rewrite_mac(struct xdp_md *ctx) {\n    void *data_end = (void *)(long)ctx->data_end;\n    void *data = (void *)(long)ctx->data;\n\n    struct ethhdr *eth = data;\n    if ((void *)(eth + "
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# XDP\nip link set dev eth0 xdp obj program.o sec xdp\n\n# TC ingress\ntc qdisc add dev eth0 clsact\ntc filter add dev eth0 ingress bpf da obj program.o sec tc\n\n# Cilium\ncilium install\nkubectl apply -f pol"
        },
        {
          "language": "c",
          "line_count": 22,
          "complexity": "medium",
          "code": "// \u274c NEVER: Access packet data without bounds check\nSEC(\"xdp\")\nint bad_xdp(struct xdp_md *ctx) {\n    struct ethhdr *eth = (void *)(long)ctx->data;\n    __u16 proto = eth->h_proto; // REJECTED - no boun"
        },
        {
          "language": "c",
          "line_count": 13,
          "complexity": "simple",
          "code": "// \u274c Don't: Modify checksums without recalculation\ntcp->dest = htons(8080);\n// Checksum now invalid! Packet will be dropped\n\n// \u2705 Correct: Recalculate checksums\n__u16 old_port = tcp->dest;\n__u16 new_p"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "kubernetes"
      ],
      "config_snippets": [
        "yaml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (yaml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "modal/modal-scheduling.md",
      "category": "modal",
      "skill_name": "modal-scheduling",
      "frontmatter": {
        "name": "modal-scheduling",
        "description": "Running periodic tasks on Modal"
      },
      "metrics": {
        "line_count": 513,
        "code_line_count": 143,
        "code_examples": 18,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "import modal\n\napp = modal.App(\"scheduled-app\")\n\n# Every 5 minutes\n@app.function(schedule=modal.Period(minutes=5))\ndef every_five_minutes():\n    print(\"Running every 5 minutes\")\n    return process_data"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Every 1 hour 30 minutes\n@app.function(schedule=modal.Period(hours=1, minutes=30))\ndef every_ninety_minutes():\n    return sync_data()\n\n# Every week (7 days)\n@app.function(schedule=modal.Period(days=7"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "# Every day at 2:30 AM UTC\n@app.function(schedule=modal.Cron(\"30 2 * * *\"))\ndef daily_at_230am():\n    return generate_daily_report()\n\n# Every Monday at 9:00 AM UTC\n@app.function(schedule=modal.Cron(\"0"
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "image = modal.Image.debian_slim().uv_pip_install(\n    \"pandas\",\n    \"sqlalchemy\",\n    \"psycopg2-binary\"\n)\n\n@app.function(\n    schedule=modal.Cron(\"0 1 * * *\"),  # 1 AM daily\n    image=image,\n    timeo"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "medium",
          "code": "@app.function(\n    schedule=modal.Period(hours=6),\n    timeout=7200  # 2 hours\n)\ndef process_pending_jobs():\n    jobs = get_pending_jobs()\n\n    print(f\"Processing {len(jobs)} jobs\")\n\n    # Process in "
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "medium",
          "code": "@app.function(schedule=modal.Period(minutes=5))\ndef health_check():\n    services = [\"api\", \"database\", \"cache\"]\n    results = {}\n\n    for service in services:\n        try:\n            status = check_s"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "@app.function(schedule=modal.Cron(\"*/5 * * * *\"))  # Every 5 min\ndef collect_metrics():\n    metrics = {\n        \"timestamp\": datetime.now().isoformat(),\n        \"cpu_usage\": get_cpu_usage(),\n        \""
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "from datetime import datetime, timedelta\n\n@app.function(schedule=modal.Cron(\"0 2 * * *\"))  # 2 AM daily\ndef cleanup_old_data():\n    cutoff_date = datetime.now() - timedelta(days=90)\n\n    # Delete old "
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "@app.function(schedule=modal.Cron(\"0 6 * * *\"))  # 6 AM daily\ndef warm_caches():\n    # Pre-compute popular queries\n    popular_items = get_popular_items()\n\n    for item in popular_items:\n        cache"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "@app.function(\n    schedule=modal.Cron(\"0 0 * * *\"),  # Midnight daily\n    timeout=3600\n)\ndef backup_database():\n    import subprocess\n    from datetime import datetime\n\n    timestamp = datetime.now()"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "@app.function(\n    schedule=modal.Period(hours=1),\n    retries=3  # Retry up to 3 times\n)\ndef resilient_task():\n    try:\n        result = perform_task()\n        return {\"status\": \"success\", \"result\": "
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "@app.function(schedule=modal.Cron(\"0 * * * *\"))  # Hourly\ndef monitored_task():\n    try:\n        result = critical_operation()\n        return {\"status\": \"success\"}\n    except Exception as e:\n        #"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "@app.function(schedule=modal.Cron(\"0 */4 * * *\"))  # Every 4 hours\ndef conditional_sync():\n    # Check if sync is needed\n    if not should_sync():\n        print(\"Sync not needed, skipping\")\n        re"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "@app.function(schedule=modal.Cron(\"0 1 * * *\"))  # 1 AM\ndef step1_extract():\n    data = extract_data()\n    save_to_temp(data)\n    # Trigger next step\n    step2_transform.spawn()\n    return {\"status\": "
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "@app.function(schedule=modal.Cron(\"0 2 * * *\"))\ndef scheduled_task():\n    return process_data()\n\n# Can still call directly for testing\n@app.local_entrypoint()\ndef test():\n    result = scheduled_task.r"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# \u274c BAD - Expensive GPU task every minute\n@app.function(\n    schedule=modal.Period(minutes=1),\n    gpu=\"a100\"\n)\ndef expensive_every_minute():\n    return train_model()  # Costs $8/hour constantly!\n\n# \u2705"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# \u274c BAD - Could run forever\n@app.function(schedule=modal.Cron(\"0 0 * * *\"))\ndef no_timeout():\n    while True:\n        process()\n\n# \u2705 GOOD - Bounded execution\n@app.function(\n    schedule=modal.Cron(\"0 "
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "# \u274c BAD - Swallows errors\n@app.function(schedule=modal.Period(hours=1))\ndef silent_failures():\n    try:\n        critical_task()\n    except:\n        pass  # No one knows it failed!\n\n# \u2705 GOOD - Log and "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "datadog"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "caching/caching-fundamentals.md",
      "category": "caching",
      "skill_name": "caching-fundamentals",
      "frontmatter": {
        "name": "caching-caching-fundamentals",
        "description": "Core caching concepts, patterns, eviction policies, and cache design principles for optimizing application performance"
      },
      "metrics": {
        "line_count": 797,
        "code_line_count": 109,
        "code_examples": 14,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 60,
          "complexity": "complex",
          "code": "from enum import Enum\nfrom typing import Optional, Dict, Any\n\nclass CacheType(Enum):\n    \"\"\"Different cache deployment types\"\"\"\n    LOCAL = \"local\"           # In-process memory\n    DISTRIBUTED = \"dis"
        },
        {
          "language": "python",
          "line_count": 69,
          "complexity": "complex",
          "code": "from functools import wraps\nfrom typing import Callable, Any\nimport time\n\nclass CacheAside:\n    \"\"\"Cache-Aside (Lazy Loading) pattern\"\"\"\n\n    def __init__(self):\n        self.cache: Dict[str, tuple[An"
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "class WriteThroughCache:\n    \"\"\"Write-Through caching pattern\"\"\"\n\n    def __init__(self, database):\n        self.cache: Dict[str, Any] = {}\n        self.db = database\n\n    def get(self, key: str) -> O"
        },
        {
          "language": "python",
          "line_count": 60,
          "complexity": "complex",
          "code": "import asyncio\nfrom collections import deque\nfrom dataclasses import dataclass\nfrom typing import Deque\n\n@dataclass\nclass WriteOperation:\n    \"\"\"Pending write operation\"\"\"\n    key: str\n    value: Any\n"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "class ReadThroughCache:\n    \"\"\"Read-Through caching pattern\"\"\"\n\n    def __init__(self, loader_func: Callable[[str], Any]):\n        self.cache: Dict[str, Any] = {}\n        self.loader = loader_func  # "
        },
        {
          "language": "python",
          "line_count": 48,
          "complexity": "complex",
          "code": "from collections import OrderedDict\n\nclass LRUCache:\n    \"\"\"LRU Cache with O(1) get and set\"\"\"\n\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.cache = OrderedDict"
        },
        {
          "language": "python",
          "line_count": 53,
          "complexity": "complex",
          "code": "from collections import defaultdict\nimport heapq\n\nclass LFUCache:\n    \"\"\"LFU Cache with frequency tracking\"\"\"\n\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.cach"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "import time\n\nclass TTLCache:\n    \"\"\"TTL-based cache with automatic expiration\"\"\"\n\n    def __init__(self, default_ttl: float = 300):\n        self.cache: Dict[str, tuple[Any, float]] = {}\n        self.d"
        },
        {
          "language": "python",
          "line_count": 60,
          "complexity": "complex",
          "code": "class CacheKeyDesign:\n    \"\"\"Cache key naming best practices\"\"\"\n\n    @staticmethod\n    def hierarchical_key(namespace: str, entity: str, id: str) -> str:\n        \"\"\"\n        Hierarchical naming for or"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "class GoodCacheCandidates:\n    \"\"\"Data that benefits from caching\"\"\"\n\n    EXAMPLES = {\n        \"Expensive computations\": {\n            \"example\": \"ML model inference, complex calculations\",\n          "
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "class PoorCacheCandidates:\n    \"\"\"Data that should NOT be cached\"\"\"\n\n    EXAMPLES = [\n        \"Highly personalized data (unless user-keyed)\",\n        \"Rapidly changing data (stock prices, live scores)"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: Cache lives forever\ncache = {}\ncache[key] = value  # Never expires\n\n# CORRECT: Set TTL\ncache.set(key, value, ttl=300)\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: Cache error responses\nresult = api_call()\ncache.set(key, result)  # What if result is error?\n\n# CORRECT: Only cache successful responses\nresult = api_call()\nif result.success:\n    cache.set(k"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "# WRONG: All requests miss simultaneously\n# (e.g., cache expires at exact time)\n\n# CORRECT: Probabilistic early expiration\nimport random\n\ndef get_with_early_expiration(key, ttl):\n    value, expiry = c"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "12 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "caching/redis-caching-patterns.md",
      "category": "caching",
      "skill_name": "redis-caching-patterns",
      "frontmatter": {
        "name": "caching-redis-caching-patterns",
        "description": "Application-level caching with Redis - patterns, distributed caching, cache stampede prevention, and integration strategies for high-performance applications."
      },
      "metrics": {
        "line_count": 676,
        "code_line_count": 138,
        "code_examples": 19,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "# redis-py (Python standard library for Redis)\nimport redis\nfrom redis.connection import ConnectionPool\n\n# Single connection (development)\nr = redis.Redis(host='localhost', port=6379, db=0, decode_res"
        },
        {
          "language": "python",
          "line_count": 56,
          "complexity": "complex",
          "code": "import redis\nimport json\nfrom typing import Optional, Any\nfrom dataclasses import dataclass, asdict\n\n@dataclass\nclass User:\n    id: int\n    username: str\n    email: str\n\nclass CacheAsidePattern:\n    d"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "class WriteThroughCache:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n        self.ttl = 3600\n\n    def save_product(self, product_id: int, product_data: dict) -"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "import asyncio\nfrom collections import deque\n\nclass WriteBehindCache:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n        self.write_queue = deque()\n        se"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "class CacheKeyDesign:\n    \"\"\"Best practices for Redis key naming\"\"\"\n\n    # Hierarchical keys with colons\n    USER_KEY = \"user:{user_id}\"                    # user:123\n    USER_PROFILE = \"user:{user_id"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Use environment-specific prefixes\nENV = \"prod\"  # or \"dev\", \"staging\"\n\ndef namespaced_key(key: str) -> str:\n    return f\"{ENV}:{key}\"\n\n# prod:user:123 vs dev:user:123\n"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "class SlidingExpirationCache:\n    def __init__(self, redis_client: redis.Redis, ttl: int = 1800):\n        self.cache = redis_client\n        self.ttl = ttl  # 30 minutes\n\n    def get_with_sliding_expir"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "import random\nimport time\n\nclass ProbabilisticExpiration:\n    def __init__(self, redis_client: redis.Redis, ttl: int = 3600):\n        self.cache = redis_client\n        self.ttl = ttl\n        self.beta"
        },
        {
          "language": "python",
          "line_count": 45,
          "complexity": "complex",
          "code": "import time\nimport uuid\n\nclass CacheStampedePrevention:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n\n    def get_with_lock(self, key: str, refresh_fn, ttl: int"
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "import hashlib\nfrom datetime import datetime, timedelta\n\nclass RedisSessionStore:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n        self.session_ttl = 86400 "
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "class FixedWindowRateLimiter:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n\n    def is_allowed(self, user_id: int, limit: int = 100, window: int = 60) -> bool:\n"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "import time\n\nclass SlidingWindowRateLimiter:\n    def __init__(self, redis_client: redis.Redis):\n        self.cache = redis_client\n\n    def is_allowed(self, user_id: int, limit: int = 100, window: int "
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "from rediscluster import RedisCluster\n\nclass DistributedCache:\n    def __init__(self):\n        # Connect to Redis Cluster\n        startup_nodes = [\n            {\"host\": \"127.0.0.1\", \"port\": \"7000\"},\n "
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "from fastapi import FastAPI, Depends\nimport redis.asyncio as aioredis\n\napp = FastAPI()\n\n# Dependency injection for Redis\nasync def get_redis():\n    redis = await aioredis.from_url(\"redis://localhost:6"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "from flask import Flask\nimport redis\n\napp = Flask(__name__)\n\n# Initialize Redis connection pool\nredis_pool = redis.ConnectionPool(host='localhost', port=6379, db=0, decode_responses=True)\n\ndef get_red"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: Creating new connection for each request\ndef bad_cache_usage():\n    r = redis.Redis(host='localhost', port=6379)  # New connection each time\n    return r.get(\"key\")\n\n# CORRECT: Use connection"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: No protection against stampede\ndef bad_cache_refresh(key):\n    cached = cache.get(key)\n    if not cached:\n        # Many threads will hit database simultaneously\n        return expensive_db_q"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: Treating Redis as durable storage without persistence\ndef bad_critical_data():\n    cache.set(\"critical_order\", order_data)  # No persistence configured!\n    # Data lost on Redis restart\n\n# CO"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Keys without expiration fill up memory\ncache.set(\"user:123\", data)  # No TTL - lives forever\n\n# CORRECT: Always set appropriate TTL\ncache.setex(\"user:123\", 3600, data)  # 1 hour TTL\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "19 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "14 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "data/batch-processing.md",
      "category": "data",
      "skill_name": "batch-processing",
      "frontmatter": {
        "name": "data-batch-processing",
        "description": "Orchestrating complex data pipelines with dependencies"
      },
      "metrics": {
        "line_count": 658,
        "code_line_count": 73,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 106,
          "complexity": "complex",
          "code": "from airflow import DAG\nfrom airflow.operators.python import PythonOperator\nfrom airflow.operators.bash import BashOperator\nfrom datetime import datetime, timedelta\n\n# Default arguments for all tasks\n"
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "from airflow import DAG\nfrom airflow.operators.python import PythonOperator\nfrom datetime import datetime\n\ndef process_partition(partition_id: str, **context):\n    \"\"\"Process a single partition\"\"\"\n   "
        },
        {
          "language": "python",
          "line_count": 63,
          "complexity": "complex",
          "code": "from airflow import DAG\nfrom airflow.operators.python import PythonOperator\nfrom airflow.utils.task_group import TaskGroup\nfrom datetime import datetime\n\nwith DAG(\n    'grouped_pipeline',\n    start_da"
        },
        {
          "language": "python",
          "line_count": 60,
          "complexity": "complex",
          "code": "from airflow import DAG\nfrom airflow.sensors.filesystem import FileSensor\nfrom airflow.sensors.external_task import ExternalTaskSensor\nfrom airflow.sensors.python import PythonSensor\nfrom airflow.oper"
        },
        {
          "language": "python",
          "line_count": 89,
          "complexity": "complex",
          "code": "from airflow import DAG\nfrom airflow.operators.python import PythonOperator, BranchPythonOperator\nfrom airflow.operators.empty import EmptyOperator\nfrom datetime import datetime\n\ndef decide_branch(**c"
        },
        {
          "language": "python",
          "line_count": 59,
          "complexity": "complex",
          "code": "from airflow import DAG\nfrom airflow.operators.python import PythonOperator\nfrom airflow.exceptions import AirflowException\nfrom datetime import datetime, timedelta\nimport logging\n\nlogger = logging.ge"
        },
        {
          "language": "bash",
          "line_count": 30,
          "complexity": "medium",
          "code": "# List DAGs\nairflow dags list\n\n# Trigger DAG\nairflow dags trigger my_dag\n\n# Trigger with config\nairflow dags trigger my_dag --conf '{\"key\": \"value\"}'\n\n# Test task\nairflow tasks test my_dag my_task 202"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Presets\n'@once'      # Run once\n'@hourly'    # 0 * * * *\n'@daily'     # 0 0 * * *\n'@weekly'    # 0 0 * * 0\n'@monthly'   # 0 0 1 * *\n'@yearly'    # 0 0 1 1 *\n\n# Cron expressions\n'0 */4 * * *'     # E"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "'all_success'               # All parents succeeded (default)\n'all_failed'                # All parents failed\n'all_done'                  # All parents completed\n'one_success'               # At leas"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Push value\nti.xcom_push(key='my_key', value=my_value)\n\n# Pull value\nvalue = ti.xcom_pull(task_ids='upstream_task', key='my_key')\n\n# Pull from multiple tasks\nvalues = ti.xcom_pull(task_ids=['task1', "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "apache"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "typed-holes-refactor/SKILL.md",
      "category": "typed-holes-refactor",
      "skill_name": "SKILL",
      "frontmatter": {
        "name": "typed-holes-refactor",
        "description": "Refactor codebases using Design by Typed Holes methodology - iterative, test-driven refactoring with formal hole resolution, constraint propagation, and continuous validation. Use when refactoring existing code, optimizing architecture, or consolidating technical debt through systematic hole-driven development."
      },
      "metrics": {
        "line_count": 764,
        "code_line_count": 114,
        "code_examples": 23,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "git checkout -b refactor/typed-holes-v1\n# CRITICAL: Never work in main, never touch .beads/ in main\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "python scripts/discover_holes.py\n# Creates REFACTOR_IR.md with hole catalog\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# tests/characterization/test_current_behavior.py\ndef test_api_contracts():\n    \"\"\"All public APIs must behave identically post-refactor\"\"\"\n    for endpoint in discover_public_apis():\n        old_resu"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "python scripts/next_hole.py\n# Shows holes whose dependencies are resolved\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# tests/refactor/test_h{N}_resolution.py\ndef test_h{N}_resolved():\n    \"\"\"Define what 'resolved correctly' means\"\"\"\n    # This should FAIL initially\n    assert desired_state_achieved()\n\ndef test_h{N}_"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "python scripts/validate_resolution.py H{N}\n# Checks: tests pass, constraints satisfied, main untouched\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "python scripts/propagate.py H{N}\n# Updates dependent holes based on resolution\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "git add .\ngit commit -m \"Resolve H{N}: {description}\n\n- Tests: tests/refactor/test_h{N}_*.py pass\n- Constraints: {constraints satisfied}\n- Propagates to: {dependent holes}\"\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "python scripts/generate_report.py > REFACTOR_REPORT.md\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "\"?R1_target_architecture\": \"What should the ideal structure be?\"\n\"?R2_module_boundaries\": \"How should modules be organized?\"\n\"?R3_abstraction_layers\": \"What layers/interfaces are needed?\"\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "\"?R4_consolidation_targets\": \"What code should merge?\"\n\"?R5_extraction_targets\": \"What code should split out?\"\n\"?R6_elimination_targets\": \"What code should be removed?\"\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "\"?R7_test_strategy\": \"How to validate equivalence?\"\n\"?R8_migration_path\": \"How to safely transition?\"\n\"?R9_rollback_mechanism\": \"How to undo if needed?\"\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Install beads (once)\ngo install github.com/steveyegge/beads/cmd/bd@latest\n\n# After running discover_holes.py\npython scripts/holes_to_beads.py\n\n# Check what's ready\nbd ready --json\n"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Start work on a hole\nbd update bd-5 --status in_progress --json\n\n# Implement resolution\n# ... write tests, implement code ...\n\n# Validate resolution\npython scripts/validate_resolution.py H3\n\n# Close"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# After updating REFACTOR_IR.md manually\npython scripts/holes_to_beads.py  # Sync changes to beads\n\n# After resolving holes\npython scripts/holes_to_beads.py  # Update bead statuses\n"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "complex",
          "code": "# Session start\nbd import -i .beads/issues.jsonl\nbd ready --json  # Shows ready holes\npython scripts/check_completeness.py  # Shows overall progress\n\n# Session end\nbd export -o .beads/issues.jsonl\ngit"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# 1. Setup\ngit checkout -b refactor/typed-holes-v1\npython scripts/discover_holes.py\n\n# 2. Write baseline tests\n# Create tests/characterization/test_*.py\n\n# 3. Resolve first hole\npython scripts/next_ho"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "     # Update baseline with reason\n     save_baseline(\"v2_api\", new_behavior,\n                   reason=\"Switched to async implementation\")\n     "
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "   python scripts/visualize_graph.py --analyze\n   # Look for unresolved dependencies\n   "
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "   # Original: R4_consolidate_all (Epic, 10+ days)\n   # Split into:\n   R4a_consolidate_parsers (Medium, 2 days)\n   R4b_consolidate_validators (Small, 1 day)\n   R4c_consolidate_handlers (Medium, 2 days"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "   python scripts/visualize_graph.py\n   # Look for cycles: R4 \u2192 R5 \u2192 R6 \u2192 R4\n   "
        },
        {
          "language": "markdown",
          "line_count": 4,
          "complexity": "simple",
          "code": "   C1 requires: Keep synchronous operations\n   C5 requires: Switch to async operations\n   \u2192 Contradiction: Can't be both sync and async\n   "
        },
        {
          "language": "markdown",
          "line_count": 7,
          "complexity": "simple",
          "code": "   ## Constraint Resolution: C1 vs C5\n\n   **Decision**: Relax C1 to allow async migration\n   **Rationale**: Performance critical for user experience\n   **Migration**: 3-month deprecation period for sy"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "jwt"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": true
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "23 code examples could be extracted to standalone files",
          "priority": "medium"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "typed-holes-refactor/references/EXAMPLES.md",
      "category": "typed-holes-refactor",
      "skill_name": "EXAMPLES",
      "frontmatter": {
        "name": "typed-holes-examples",
        "description": "Complete worked examples of typed holes refactoring including simple file reorganization and complex API consolidation scenarios with full test suites and constraint validation."
      },
      "metrics": {
        "line_count": 957,
        "code_line_count": 216,
        "code_examples": 37,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "git checkout -b refactor/typed-holes-v1\npython scripts/discover_holes.py\n"
        },
        {
          "language": "markdown",
          "line_count": 32,
          "complexity": "medium",
          "code": "## Hole Catalog\n\n#### H0_architecture\n\n**Question**: What is the current module organization?\n\n**Dependencies**: None\n\n**Status**: pending\n\n**Resolution**: TBD\n\n#### R1_target_architecture\n\n**Question"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "complex",
          "code": "# tests/characterization/test_current_imports.py\ndef test_all_imports_work():\n    \"\"\"Capture current import structure\"\"\"\n    from src import parser, validator, config\n    from src import api_client, d"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Proposed structure\nsrc/\n  core/        # Business logic\n  clients/     # API clients\n  utils/       # Utilities\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "complex",
          "code": "# tests/refactor/test_r1_architecture.py\ndef test_no_circular_dependencies():\n    \"\"\"Ensure clean dependency flow\"\"\"\n    # utils can't import from core or clients\n    # core can't import from clients\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "mkdir -p src/core src/clients src/utils\ngit mv src/parser.py src/core/\ngit mv src/validator.py src/core/\n# ... move remaining files\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "# tests/refactor/test_r4_moves.py\ndef test_imports_still_work():\n    \"\"\"All old import paths still work via __init__.py\"\"\"\n    from src import parser  # Re-exported\n    from src.core import parser  # "
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "python scripts/generate_report.py > REFACTOR_REPORT.md\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "git checkout -b refactor/typed-holes-parser-consolidation\npython scripts/discover_holes.py\n"
        },
        {
          "language": "markdown",
          "line_count": 134,
          "complexity": "complex",
          "code": "# Refactor Intermediate Representation\n\n## Executive Summary\n\n**Goal**: Consolidate 3 API parsers into single unified implementation\n\n**Total Holes**: 8\n**Pending**: 8\n**Resolved**: 0\n\n## Hole Catalog"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "python scripts/holes_to_beads.py\n"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "# scripts/analyze_parsers.py\nimport ast\n\ndef compare_parsers():\n    v1_funcs = extract_functions(\"parse_v1.py\")\n    v2_funcs = extract_functions(\"parse_v2.py\")\n    v3_funcs = extract_functions(\"parse_"
        },
        {
          "language": "markdown",
          "line_count": 10,
          "complexity": "simple",
          "code": "**Differences**:\n- Format handling: v1=XML, v2/v3=JSON\n- Validation: Only v3 has schema validation\n- Core logic: 75% identical (header, body, error handling)\n\n**Commonalities**:\n- Same API contract: `"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "bd update bd-1 --status done --reason \"Analysis complete\"\ngit add REFACTOR_IR.md\ngit commit -m \"Resolve H0_parser_differences: Document parser variations\"\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Run coverage\npytest tests/ --cov=src/parsers --cov-report=term\n\n# Results:\n# parse_v1.py: 45%\n# parse_v2.py: 62%\n# parse_v3.py: 71%\n"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "# tests/characterization/test_parser_v1_baseline.py\nimport json\n\ndef test_v1_valid_xml():\n    \"\"\"Capture v1 behavior on valid XML\"\"\"\n    xml = '<data><item>test</item></data>'\n    result = parse_v1(xm"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "# src/parsers/unified.py\nfrom typing import Protocol, Union\nfrom dataclasses import dataclass\n\n@dataclass\nclass ParseResult:\n    success: bool\n    data: dict\n    error: Optional[str] = None\n    format"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "# tests/refactor/test_r1_interface.py\ndef test_unified_interface_defined():\n    \"\"\"Interface is well-formed\"\"\"\n    from src.parsers.unified import Parser, ParseResult\n    assert hasattr(Parser, 'parse"
        },
        {
          "language": "markdown",
          "line_count": 4,
          "complexity": "simple",
          "code": "Unified interface: Parser protocol with parse() and validate()\nCommon result: ParseResult dataclass\nType-safe: mypy compliant\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "bd update bd-3 --status done\npython scripts/propagate.py R1\n"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# src/parsers/unified.py\nfrom enum import Enum\n\nclass Format(Enum):\n    XML = \"xml\"\n    JSON = \"json\"\n\nclass UnifiedParser:\n    def __init__(self, format: Format):\n        self.format = format\n       "
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "# tests/refactor/test_r2_formats.py\ndef test_xml_format_supported():\n    parser = UnifiedParser(Format.XML)\n    result = parser.parse('<data><item>test</item></data>')\n    assert result.success\n\ndef t"
        },
        {
          "language": "python",
          "line_count": 50,
          "complexity": "complex",
          "code": "# src/parsers/unified.py\nclass UnifiedParser:\n    def parse(self, raw_data: Union[str, bytes]) -> ParseResult:\n        \"\"\"Unified parsing logic\"\"\"\n        try:\n            # Step 1: Parse format-speci"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "# tests/refactor/test_r4_equivalence.py\nimport pytest\n\n@pytest.mark.parametrize(\"xml_input,expected\", [\n    ('<data><item>test</item></data>', {\"item\": \"test\"}),\n    ('<data></data>', {}),\n])\ndef test"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "pytest tests/characterization/ -v\n# All baseline tests pass - behavior preserved \u2713\n"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "# src/parsers/unified.py\nfrom jsonschema import validate, ValidationError\n\nclass UnifiedParser:\n    def __init__(self, format: Format, schema: Optional[dict] = None):\n        self.format = format\n    "
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "# tests/refactor/test_r5_validation.py\ndef test_validation_with_schema():\n    \"\"\"Validation works like v3\"\"\"\n    schema = {\n        \"type\": \"object\",\n        \"properties\": {\"item\": {\"type\": \"string\"}}"
        },
        {
          "language": "markdown",
          "line_count": 6,
          "complexity": "simple",
          "code": "1. Characterization tests: Capture all v1/v2/v3 behavior (DONE)\n2. Equivalence tests: New parser = old parsers for all cases\n3. Unit tests: Each method tested independently\n4. Integration tests: Full "
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "# tests/refactor/test_r7_comprehensive.py\nfrom hypothesis import given, strategies as st\n\n@given(st.text())\ndef test_parser_never_crashes(random_input):\n    \"\"\"Parser handles any input gracefully\"\"\"\n "
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "pytest tests/ --cov=src/parsers --cov-report=html\n# unified.py: 91% coverage \u2713\n"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "# src/parsers/__init__.py\n\"\"\"\nBackward compatibility wrappers\n\"\"\"\nfrom .unified import UnifiedParser, Format, ParseResult\n\ndef parse_v1(xml_data: str) -> ParseResult:\n    \"\"\"Deprecated: Use UnifiedPar"
        },
        {
          "language": "markdown",
          "line_count": 6,
          "complexity": "simple",
          "code": "# MIGRATION.md\n\n## Migrating from old parsers to UnifiedParser\n\n### Before:\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "complex",
          "code": "from src.parsers import UnifiedParser, Format\n\nparser = UnifiedParser(Format.JSON)\nresult = parser.parse(json_data)\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "python scripts/check_completeness.py\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "python scripts/generate_report.py > REFACTOR_REPORT.md\n"
        },
        {
          "language": "markdown",
          "line_count": 81,
          "complexity": "complex",
          "code": "# Refactor Report: API Parser Consolidation\n\n## Executive Summary\n\nSuccessfully consolidated 3 duplicate API parsers into single unified implementation.\n\n**Duration**: 3 days\n**Holes Resolved**: 8/8 ("
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "git push -u origin refactor/typed-holes-parser-consolidation\ngh pr create \\\n  --title \"Consolidate API parsers using typed holes methodology\" \\\n  --body \"$(cat REFACTOR_REPORT.md)\"\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "pytest"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "37 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "18 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 57.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "debugging/lldb-macos-debugging.md",
      "category": "debugging",
      "skill_name": "lldb-macos-debugging",
      "frontmatter": {
        "name": "debugging-lldb-macos-debugging",
        "description": "Comprehensive guide to LLDB debugger for macOS/iOS development. Covers LLDB vs GDB differences, Swift/Objective-C debugging, Xcode integration, command-line usage, breakpoint expressions, watchpoints, Python scripting, and performance improvements (50x faster step-over in 2025)."
      },
      "metrics": {
        "line_count": 858,
        "code_line_count": 355,
        "code_examples": 42,
        "external_refs": 1,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Check LLDB version\nlldb --version\n# lldb-1600.0.0  (2025 version)\n\n# Check Xcode Command Line Tools\nxcode-select -p\n\n# Install if missing\nxcode-select --install\n"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Launch LLDB with binary\nlldb ./my_program\n\n# Launch with arguments\nlldb -- ./my_program arg1 arg2\n\n# Attach to running process\nlldb -p <pid>\nlldb -n ProcessName\n\n# Load and run immediately\nlldb -o \""
        },
        {
          "language": "lldb",
          "line_count": 9,
          "complexity": "simple",
          "code": "(lldb) run          # Alias for process launch\n(lldb) r            # Short form\n(lldb) step         # Alias for thread step-in\n(lldb) s            # Short form\n(lldb) next         # Alias for thread s"
        },
        {
          "language": "lldb",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Swift function\n(lldb) breakpoint set -n MyClass.myMethod\n(lldb) br s -n MyClass.myMethod\n(lldb) b MyClass.myMethod\n\n# Objective-C method\n(lldb) breakpoint set -n \"-[MyClass myMethod:]\"\n(lldb) b -[My"
        },
        {
          "language": "lldb",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Break at file:line\n(lldb) breakpoint set -f ViewController.swift -l 42\n(lldb) br s -f ViewController.swift -l 42\n(lldb) b ViewController.swift:42\n\n# Break in current file\n(lldb) breakpoint set -l 10"
        },
        {
          "language": "lldb",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Break if condition true\n(lldb) breakpoint set -n process_data -c 'count > 100'\n(lldb) br s -n myMethod -c 'userName == \"admin\"'\n\n# Modify existing breakpoint\n(lldb) breakpoint modify -c 'index >= 5'"
        },
        {
          "language": "lldb",
          "line_count": 18,
          "complexity": "simple",
          "code": "# List all breakpoints\n(lldb) breakpoint list\n(lldb) br l\n\n# Disable/enable breakpoint\n(lldb) breakpoint disable 1\n(lldb) breakpoint enable 1\n\n# Delete breakpoint\n(lldb) breakpoint delete 1\n(lldb) br "
        },
        {
          "language": "lldb",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Watch variable\n(lldb) watchpoint set variable myVariable\n(lldb) watch set var myVariable\n\n# Watch memory address\n(lldb) watchpoint set expression -- 0x7ffeefbff5b0\n(lldb) watch set expr -- 0x7ffeefb"
        },
        {
          "language": "lldb",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Launch program\n(lldb) process launch\n(lldb) run\n(lldb) r\n\n# Launch with arguments\n(lldb) process launch -- arg1 arg2\n(lldb) run arg1 arg2\n\n# Set arguments before launch\n(lldb) settings set target.ru"
        },
        {
          "language": "lldb",
          "line_count": 27,
          "complexity": "medium",
          "code": "# Step into (enter functions)\n(lldb) thread step-in\n(lldb) step\n(lldb) s\n\n# Step over (don't enter functions)\n(lldb) thread step-over\n(lldb) next\n(lldb) n\n\n# Step out (finish current function)\n(lldb) "
        },
        {
          "language": "lldb",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Fast step-over in Swift (2025 LLDB)\n(lldb) thread step-over  # 50x faster than older LLDB\n\n# Enable performance optimizations\n(lldb) settings set target.skip-prologue true\n(lldb) settings set target"
        },
        {
          "language": "lldb",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Full backtrace\n(lldb) thread backtrace\n(lldb) bt\n\n# Backtrace with arguments\n(lldb) bt all\n\n# Backtrace all threads\n(lldb) thread backtrace all\n\n# Limited backtrace\n(lldb) thread backtrace -c 10\n"
        },
        {
          "language": "lldb",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Show current frame\n(lldb) frame info\n\n# Select frame\n(lldb) frame select 2\n(lldb) f 2\n\n# Move up/down\n(lldb) up\n(lldb) down\n\n# Show frame variables\n(lldb) frame variable\n(lldb) fr v\n\n# Show specific"
        },
        {
          "language": "lldb",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Evaluate expression\n(lldb) expression count + 1\n(lldb) expr count + 1\n(lldb) p count + 1\n\n# Assign variable\n(lldb) expr count = 42\n\n# Call function\n(lldb) expr -l swift -- print(\"Debug message\")\n(ll"
        },
        {
          "language": "lldb",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Print description (CustomStringConvertible)\n(lldb) po myObject\n\n# Print detailed info\n(lldb) frame variable -D myObject\n(lldb) fr v -D myObject\n\n# Print type\n(lldb) type lookup MyClass\n"
        },
        {
          "language": "lldb",
          "line_count": 6,
          "complexity": "complex",
          "code": "# Import Swift module\n(lldb) expr import MyFramework\n\n# Swift REPL (exit with :quit)\n(lldb) repl\n"
        },
        {
          "language": "lldb",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Print description\n(lldb) po myObject\n(lldb) expr -O -- myObject\n\n# Call method\n(lldb) po [myArray count]\n(lldb) po [myString uppercaseString]\n\n# Print ivar\n(lldb) po myObject->_privateIvar\n"
        },
        {
          "language": "lldb",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Read memory\n(lldb) memory read 0x7ffeefbff5b0\n(lldb) x 0x7ffeefbff5b0\n\n# Read with format\n(lldb) memory read -f x -c 10 0x7ffeefbff5b0  # 10 hex values\n(lldb) x/10xw 0x7ffeefbff5b0  # GDB syntax als"
        },
        {
          "language": "lldb",
          "line_count": 18,
          "complexity": "simple",
          "code": "# In Xcode console, all LLDB commands work\n\n# Print variable\n(lldb) po self.userName\n\n# Modify variable\n(lldb) expr self.count = 10\n\n# Continue\n(lldb) continue\n\n# Force unwrap Swift optional\n(lldb) po"
        },
        {
          "language": "lldb",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Print view hierarchy (UIKit)\n(lldb) po UIApplication.shared.keyWindow?.rootViewController?.view.recursiveDescription()\n\n# Print responder chain\n(lldb) po [UIResponder.firstResponder]\n\n# Modify view\n"
        },
        {
          "language": "lldb",
          "line_count": 2,
          "complexity": "complex",
          "code": "(lldb) command script import ~/lldb_scripts/my_script.py\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "import lldb\n\ndef hello_command(debugger, command, result, internal_dict):\n    \"\"\"Print hello message.\"\"\"\n    print(f\"Hello, {command}!\")\n\ndef __lldb_init_module(debugger, internal_dict):\n    debugger."
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "import lldb\n\ndef swift_array_summary(valobj, internal_dict):\n    \"\"\"Custom summary for Swift Array.\"\"\"\n    count = valobj.GetChildAtIndex(0).GetValueAsUnsigned()\n    return f\"Array with {count} elemen"
        },
        {
          "language": "lldb",
          "line_count": 17,
          "complexity": "complex",
          "code": "# Settings\nsettings set target.skip-prologue false\nsettings set target.process.extra-startup-command QSetLogging:bitmask=LOG_ALL;\n\n# Aliases\ncommand alias bfl breakpoint set -f %1 -l %2\ncommand alias "
        },
        {
          "language": "lldb",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Create alias\n(lldb) command alias bfl breakpoint set -f %1 -l %2\n\n# Use alias\n(lldb) bfl ViewController.swift 42\n\n# Create regex command\n(lldb) command regex jump 's/(.+)/thread jump --by %1/'\n\n# Us"
        },
        {
          "language": "lldb",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Connect device via USB\n# Start debugserver on device (requires jailbreak or Xcode)\n\n# On Mac:\n(lldb) platform select remote-ios\n(lldb) platform connect connect://localhost:6666\n(lldb) file /path/to/"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Remote Mac\n/Applications/Xcode.app/Contents/SharedFrameworks/LLDB.framework/Resources/debugserver localhost:2345 ./my_program\n"
        },
        {
          "language": "lldb",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Local Mac\n(lldb) platform select remote-macosx\n(lldb) platform connect connect://192.168.1.100:2345\n(lldb) continue\n"
        },
        {
          "language": "lldb",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Break on Swift error throw\n(lldb) breakpoint set -E swift\n(lldb) br s -E swift\n\n# Break on specific error type\n(lldb) breakpoint set -E swift -O \"MyError\"\n"
        },
        {
          "language": "lldb",
          "line_count": 10,
          "complexity": "complex",
          "code": "# Inspect type metadata\n(lldb) type lookup MyStruct\n\n# Dump type layout\n(lldb) type lookup --show-layout MyClass\n\n# Print protocol conformances\n(lldb) expr -l swift -- import Foundation\n(lldb) expr -l"
        },
        {
          "language": "lldb",
          "line_count": 9,
          "complexity": "complex",
          "code": "# Launch Swift REPL\n(lldb) repl\n\n# In REPL:\n1> import Foundation\n2> let url = URL(string: \"https://example.com\")\n3> print(url)\n4> :quit\n"
        },
        {
          "language": "lldb",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Instance method\n(lldb) breakpoint set -n \"-[MyClass myMethod:]\"\n(lldb) b -[MyClass myMethod:]\n\n# Class method\n(lldb) breakpoint set -n \"+[MyClass classMethod]\"\n(lldb) b +[MyClass classMethod]\n\n# All"
        },
        {
          "language": "lldb",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Trace all messages to object\n(lldb) expr (void)instrumentObjcMessageSends(YES)\n\n# Check /tmp/msgSends-<pid> for log\n"
        },
        {
          "language": "lldb",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Enable fast step-over (2025 feature)\n(lldb) settings set target.skip-prologue true\n\n# Reduce output verbosity\n(lldb) settings set thread.format \"thread #${thread.index}: tid = ${thread.id}\\n\"\n\n# Dis"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Profile LLDB command execution\ntime lldb -b -o \"run\" -o \"bt\" -o \"quit\" ./my_program\n\n# Enable LLDB logging\n(lldb) log enable lldb all\n(lldb) log enable gdb-remote packets\n"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# macOS: core dumps disabled by default\nulimit -c unlimited\n\n# Set core file location\nsudo sysctl -w kern.corefile=/tmp/core.%P\n\n# Check settings\nulimit -c\nsysctl kern.corefile\n"
        },
        {
          "language": "lldb",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Load core dump\nlldb -c /tmp/core.12345 ./my_program\n\n# Or within LLDB:\n(lldb) target create ./my_program\n(lldb) target core /tmp/core.12345\n\n# Analyze\n(lldb) bt\n(lldb) frame info\n(lldb) thread backt"
        },
        {
          "language": "lldb",
          "line_count": 15,
          "complexity": "simple",
          "code": "# List threads\n(lldb) thread list\n\n# Select thread\n(lldb) thread select 2\n\n# Backtrace all threads\n(lldb) thread backtrace all\n\n# Apply command to all threads\n(lldb) thread apply all bt\n\n# Step only c"
        },
        {
          "language": "lldb",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Run until crash\n(lldb) run\n\n# Examine crash\n(lldb) thread backtrace\n(lldb) frame variable\n(lldb) po self\n\n# Check for force-unwrap crash\n(lldb) fr v myOptional  # Check if nil\n"
        },
        {
          "language": "lldb",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Print view hierarchy\n(lldb) po UIApplication.shared.keyWindow?.rootViewController?.view.recursiveDescription()\n\n# Modify view background\n(lldb) expr myView.backgroundColor = .red\n\n# Continue to see "
        },
        {
          "language": "lldb",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Print retain count (Objective-C)\n(lldb) po [myObject retainCount]\n\n# Print all instances of class\n(lldb) expr -l objc -- (void)[NSClassFromString(@\"MyClass\") instancesRespondToSelector:@selector(des"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "lldb ./my_program\n(lldb) breakpoint set -n main\n(lldb) run\n(lldb) thread step-over\n(lldb) po myVariable\n(lldb) thread backtrace\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com\""
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "42 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 56.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/numerical-methods.md",
      "category": "math",
      "skill_name": "numerical-methods",
      "frontmatter": {
        "name": "math-numerical-methods",
        "description": "Solving ordinary differential equations (ODEs)"
      },
      "metrics": {
        "line_count": 672,
        "code_line_count": 157,
        "code_examples": 22,
        "external_refs": 1,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "import numpy as np\nfrom scipy.integrate import solve_ivp, odeint\nimport matplotlib.pyplot as plt\n\n# Example: Exponential decay dy/dt = -k*y, y(0) = y0\ndef exponential_decay(t, y, k=0.5):\n    \"\"\"\n    O"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "# Explicit methods (non-stiff):\n# - 'RK45': Explicit Runge-Kutta (4,5) - default, good general purpose\n# - 'RK23': Explicit Runge-Kutta (2,3) - faster, less accurate\n# - 'DOP853': Explicit Runge-Kutta"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "def projectile(t, y, g=9.81):\n    \"\"\"Projectile motion: y = [x, vx, z, vz]\"\"\"\n    return [y[1], 0, y[3], -g]\n\ndef hit_ground(t, y):\n    \"\"\"Event: projectile hits ground (z=0)\"\"\"\n    return y[2]  # z-c"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# odeint uses different signature: f(y, t, *args)\ndef exponential_decay_odeint(y, t, k=0.5):\n    return -k * y\n\nt = np.linspace(0, 10, 100)\ny = odeint(exponential_decay_odeint, y0, t)\n"
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "from scipy.integrate import quad, fixed_quad, simpson, trapezoid\n\n# Example: Integrate f(x) = x^2 from 0 to 1\ndef f(x):\n    return x**2\n\n# Adaptive quadrature (most accurate)\nresult, error = quad(f, 0"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "from scipy.integrate import dblquad, tplquad, nquad\n\n# Double integral: \u222b\u222b x*y dx dy over [0,1] x [0,1]\ndef integrand_2d(y, x):\n    return x * y\n\nresult, error = dblquad(integrand_2d, 0, 1, 0, 1)\nprin"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "from scipy.special import erf\nfrom scipy.integrate import cumulative_trapezoid\n\n# Cumulative integral (indefinite integral at points)\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\ncumulative = cumula"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "from scipy.optimize import root_scalar, brentq, newton\n\n# Example: Find x where f(x) = x^3 - 2x - 5 = 0\ndef f(x):\n    return x**3 - 2*x - 5\n\ndef df(x):\n    return 3*x**2 - 2\n\n# Brent's method (bracket"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "from scipy.optimize import root, fsolve\n\n# System of nonlinear equations\ndef equations(z):\n    x, y = z\n    return [\n        x**2 + y**2 - 4,   # Circle: x^2 + y^2 = 4\n        x - y - 1          # Lin"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "from scipy.interpolate import interp1d, CubicSpline, PchipInterpolator\n\n# Data points\nx = np.array([0, 1, 2, 3, 4, 5])\ny = np.array([0, 1, 4, 9, 16, 25])  # y = x^2\n\n# Linear interpolation\nf_linear = "
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "from scipy.interpolate import RegularGridInterpolator, griddata\n\n# 2D interpolation on regular grid\nx = np.linspace(0, 5, 6)\ny = np.linspace(0, 5, 6)\nX, Y = np.meshgrid(x, y, indexing='ij')\nZ = X**2 +"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "from scipy.misc import derivative\n\n# Forward difference: f'(x) \u2248 (f(x+h) - f(x)) / h\ndef forward_diff(f, x, h=1e-5):\n    return (f(x + h) - f(x)) / h\n\n# Central difference: f'(x) \u2248 (f(x+h) - f(x-h)) /"
        },
        {
          "language": "python",
          "line_count": 48,
          "complexity": "complex",
          "code": "from scipy.optimize import approx_fprime\n\ndef vector_function(x):\n    \"\"\"f: R^n -> R^m\"\"\"\n    return np.array([\n        x[0]**2 + x[1],\n        x[0] * x[1],\n        x[1]**2\n    ])\n\ndef jacobian_finite"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "from scipy.integrate import solve_bvp\n\n# Example: y'' = -y, y(0) = 0, y(pi) = 0\n# Convert to first-order system: y1 = y, y2 = y'\n# y1' = y2, y2' = -y1\n\ndef bvp_ode(x, y):\n    \"\"\"System: [y1', y2'] as "
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "def richardson_extrapolation(f, x, h, order=2):\n    \"\"\"\n    Improve finite difference accuracy using Richardson extrapolation.\n    \"\"\"\n    D1 = (f(x + h) - f(x - h)) / (2 * h)\n    D2 = (f(x + h/2) - f"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "def adaptive_integration(f, a, b, tol=1e-6):\n    \"\"\"\n    Adaptive Simpson's rule: subdivide where error is large.\n    \"\"\"\n    def simpson_rule(f, a, b):\n        h = (b - a) / 2\n        return h/3 * (f"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "def check_stiffness(f, t_span, y0, threshold=100):\n    \"\"\"\n    Estimate stiffness ratio of ODE system.\n    \"\"\"\n    from scipy.linalg import eigvals\n\n    # Jacobian at initial point\n    def jacobian_fd"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Non-stiff: RK45 (default), DOP853 (high accuracy)\n# Stiff: Radau, BDF\n# Auto-switching: LSODA\n# rtol, atol: relative and absolute tolerances (default: 1e-3, 1e-6)\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Smooth functions: quad (adaptive)\n# Tabulated data: simpson (accurate), trapezoid (simple)\n# High dimensions: Monte Carlo\n# Infinite limits: quad with \u00b1np.inf\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "complex",
          "code": "# WRONG: Using fixed large step in finite differences\nh = 0.1\ndf = (f(x + h) - f(x)) / h  # Large error!\n\n# RIGHT: Use small h or adaptive methods\nfrom scipy.misc import derivative\ndf = derivative(f, "
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Using explicit method for stiff ODE\nsolution = solve_ivp(stiff_ode, t_span, y0, method='RK45')  # Will be slow!\n\n# RIGHT: Use implicit method\nsolution = solve_ivp(stiff_ode, t_span, y0, metho"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "complex",
          "code": "# WRONG: Cubic spline for non-smooth data\nf = interp1d(x, y, kind='cubic')  # May oscillate!\n\n# RIGHT: Use PCHIP for monotonic data\nfrom scipy.interpolate import PchipInterpolator\nf = PchipInterpolato"
        }
      ],
      "external_refs": [
        {
          "type": "documentation",
          "url": "https://docs.scipy.org/doc/scipy/reference/"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "22 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "17 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 56.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/stable-diffusion-deployment.md",
      "category": "ml",
      "skill_name": "stable-diffusion-deployment",
      "frontmatter": {
        "name": "ml-stable-diffusion-deployment",
        "description": "Deploying Stable Diffusion models to production environments"
      },
      "metrics": {
        "line_count": 604,
        "code_line_count": 72,
        "code_examples": 9,
        "external_refs": 1,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "@app.post(\"/generate\")\ndef generate(prompt: str):\n    image = pipe(prompt)  # Blocks for 3-10 seconds\n    return image\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "@app.post(\"/generate\")\nasync def generate(prompt: str):\n    image = await async_pipe(prompt)\n    return image\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "@app.post(\"/generate\")\ndef generate(prompt: str):\n    job_id = queue.enqueue(prompt)\n    return {\"job_id\": job_id, \"status\": \"pending\"}\n\n@app.get(\"/status/{job_id}\")\ndef status(job_id: str):\n    retur"
        },
        {
          "language": "python",
          "line_count": 85,
          "complexity": "complex",
          "code": "import modal\nfrom pathlib import Path\n\n# Define image with diffusers and optimizations\nimage = (\n    modal.Image.debian_slim(python_version=\"3.11\")\n    .pip_install(\n        \"diffusers==0.30.0\",\n     "
        },
        {
          "language": "python",
          "line_count": 108,
          "complexity": "complex",
          "code": "import modal\n\nimage = (\n    modal.Image.debian_slim(python_version=\"3.11\")\n    .pip_install(\n        \"diffusers==0.30.0\",\n        \"transformers==4.44.0\",\n        \"accelerate==0.33.0\",\n        \"safeten"
        },
        {
          "language": "python",
          "line_count": 53,
          "complexity": "complex",
          "code": "import modal\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel, Field\nfrom fastapi.responses import Response\n\nweb_app = FastAPI()\napp = modal.App(\"sd-api\")\n\n# [Same image and m"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Deploy\nmodal deploy stable_diffusion.py\n\n# Test\ncurl -X POST https://your-app.modal.run/generate \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"prompt\": \"A magical forest\", \"seed\": 42}' \\\n  --out"
        },
        {
          "language": "python",
          "line_count": 67,
          "complexity": "complex",
          "code": "import modal\n\napp = modal.App(\"sd-batch\")\n\n@app.cls(gpu=\"L40S\", image=image)\nclass BatchGenerator:\n    @modal.enter()\n    def load_model(self):\n        from diffusers import StableDiffusionPipeline\n  "
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "@app.cls(\n    gpu=\"T4\",  # Only 16GB VRAM\n    image=image,\n)\nclass MemoryEfficientSDXL:\n    @modal.enter()\n    def load_model(self):\n        from diffusers import StableDiffusionXLPipeline\n        imp"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://your-app.modal.run/generate"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 56.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/llm-dataset-preparation.md",
      "category": "ml",
      "skill_name": "llm-dataset-preparation",
      "frontmatter": {
        "name": "ml-llm-dataset-preparation",
        "description": "Preparing training data for LLM fine-tuning"
      },
      "metrics": {
        "line_count": 597,
        "code_line_count": 94,
        "code_examples": 15,
        "external_refs": 1,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 45,
          "complexity": "medium",
          "code": "# Single example structure\nalpaca_example = {\n    \"instruction\": \"What is the capital of France?\",\n    \"input\": \"\",  # Optional context\n    \"output\": \"The capital of France is Paris.\"\n}\n\n# With contex"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "medium",
          "code": "# Multi-turn conversation structure\nsharegpt_example = {\n    \"conversations\": [\n        {\"from\": \"system\", \"value\": \"You are a helpful assistant.\"},\n        {\"from\": \"human\", \"value\": \"What is Python?"
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "medium",
          "code": "# Modern chat format\nchatml_example = {\n    \"messages\": [\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"What is the capital of France?\"},\n"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "from datasets import Dataset\nimport json\n\n# Create dataset from list of examples\nexamples = [\n    {\n        \"instruction\": \"Explain what machine learning is.\",\n        \"output\": \"Machine learning is a"
        },
        {
          "language": "python",
          "line_count": 50,
          "complexity": "complex",
          "code": "from datasets import load_dataset\nimport re\n\ndef clean_text(text):\n    \"\"\"Clean and normalize text.\"\"\"\n    # Remove excessive whitespace\n    text = re.sub(r'\\s+', ' ', text)\n\n    # Remove special char"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "from datasets import load_dataset, DatasetDict\n\n# Load dataset\ndataset = load_dataset(\"json\", data_files=\"data.jsonl\", split=\"train\")\n\n# Simple split\ndataset_dict = dataset.train_test_split(test_size="
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "from datasets import load_dataset\n\ndef deduplicate_dataset(dataset, key=\"text\"):\n    \"\"\"Remove duplicate examples.\"\"\"\n    seen = set()\n    unique_indices = []\n\n    for i, example in enumerate(dataset)"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_to_qa(url):\n    \"\"\"Convert FAQ page to Q&A dataset.\"\"\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parse"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "import random\n\ndef augment_instruction(instruction):\n    \"\"\"Create variations of instructions.\"\"\"\n    templates = [\n        \"{}\",\n        \"Can you {}?\",\n        \"Please {}\",\n        \"I need help with:"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "medium",
          "code": "def validate_dataset(dataset):\n    \"\"\"Comprehensive dataset validation.\"\"\"\n    issues = []\n\n    for i, example in enumerate(dataset):\n        # Check required fields\n        if \"text\" not in example a"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# 1. Remove duplicates\ndataset = deduplicate_dataset(dataset)\n\n# 2. Filter by length\ndataset = dataset.filter(lambda x: 10 < len(x[\"text\"]) < 2048)\n\n# 3. Clean text\ndataset = dataset.map(lambda x: {\"t"
        },
        {
          "language": "python",
          "line_count": 2,
          "complexity": "simple",
          "code": "dataset = dataset.train_test_split(test_size=0.1)\n"
        },
        {
          "language": "python",
          "line_count": 2,
          "complexity": "simple",
          "code": "validate_dataset(dataset)\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Check model card for correct format!\n# Llama 3: <|begin_of_text|>...<|end_of_text|>\n# ChatML: <|im_start|>...<|im_end|>\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "print(f\"Examples: {len(dataset)}\")\nprint(f\"Avg length: {sum(len(x['text']) for x in dataset) / len(dataset)}\")\nprint(f\"Max length: {max(len(x['text']) for x in dataset)}\")\n"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://example.com/faq\""
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 56.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/huggingface/huggingface-autotrain.md",
      "category": "ml",
      "skill_name": "huggingface-autotrain",
      "frontmatter": {
        "name": "ml-huggingface-autotrain",
        "description": "Need quick fine-tuning without writing training code"
      },
      "metrics": {
        "line_count": 511,
        "code_line_count": 118,
        "code_examples": 17,
        "external_refs": 1,
        "tools_mentioned": 0,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Install AutoTrain\npip install autotrain-advanced\n\n# Verify installation\nautotrain --version\n\n# Login to Hugging Face\nhuggingface-cli login\n# Paste your token from https://huggingface.co/settings/tok"
        },
        {
          "language": "bash",
          "line_count": 36,
          "complexity": "medium",
          "code": "# Basic LLM fine-tuning\nautotrain llm \\\n  --train \\\n  --model meta-llama/Llama-3.2-3B \\\n  --data-path /path/to/dataset \\\n  --text-column text \\\n  --lr 2e-4 \\\n  --batch-size 2 \\\n  --epochs 3 \\\n  --trai"
        },
        {
          "language": "csv",
          "line_count": 4,
          "complexity": "simple",
          "code": "text\n\"Below is an instruction...\\n\\n### Instruction:\\nWhat is Python?\\n\\n### Response:\\nPython is a programming language.\"\n\"Below is an instruction...\\n\\n### Instruction:\\nExplain AI\\n\\n### Response:\\"
        },
        {
          "language": "json",
          "line_count": 9,
          "complexity": "simple",
          "code": "[\n  {\n    \"text\": \"Below is an instruction...\\n\\n### Instruction:\\nWhat is Python?\\n\\n### Response:\\nPython is a programming language.\"\n  },\n  {\n    \"text\": \"Below is an instruction...\\n\\n### Instruct"
        },
        {
          "language": "json",
          "line_count": 17,
          "complexity": "simple",
          "code": "[\n  {\n    \"messages\": [\n      {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n      {\"role\": \"user\", \"content\": \"What is Python?\"},\n      {\"role\": \"assistant\", \"content\": \"Python is a p"
        },
        {
          "language": "csv",
          "line_count": 5,
          "complexity": "simple",
          "code": "text,label\n\"This product is amazing!\",positive\n\"Terrible experience\",negative\n\"It's okay\",neutral\n"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "autotrain text-classification \\\n  --train \\\n  --model distilbert-base-uncased \\\n  --data-path data.csv \\\n  --text-column text \\\n  --target-column label \\\n  --lr 2e-5 \\\n  --batch-size 16 \\\n  --epochs 5"
        },
        {
          "language": "bash",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Use dataset from Hugging Face Hub\nautotrain llm \\\n  --train \\\n  --model meta-llama/Llama-3.2-3B \\\n  --data-path username/dataset-name \\\n  --text-column text \\\n  --lr 2e-4 \\\n  --batch-size 2 \\\n  --ep"
        },
        {
          "language": "python",
          "line_count": 71,
          "complexity": "complex",
          "code": "import modal\n\napp = modal.App(\"autotrain-finetune\")\n\nimage = (\n    modal.Image.debian_slim()\n    .pip_install(\"autotrain-advanced\", \"huggingface_hub\")\n)\n\nvolume = modal.Volume.from_name(\"autotrain-vol"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "from autotrain.trainers.clm.params import LLMTrainingParams\nfrom autotrain.trainers.clm import train as llm_train\n\n# Configure training parameters\nparams = LLMTrainingParams(\n    model=\"meta-llama/Lla"
        },
        {
          "language": "bash",
          "line_count": 26,
          "complexity": "medium",
          "code": "# Try multiple learning rates\nfor lr in 1e-4 2e-4 5e-4; do\n  autotrain llm \\\n    --train \\\n    --model meta-llama/Llama-3.2-3B \\\n    --data-path data.jsonl \\\n    --text-column text \\\n    --lr $lr \\\n  "
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# View TensorBoard logs\ntensorboard --logdir outputs/llama-finetuned\n\n# Stream logs during training\ntail -f outputs/llama-finetuned/training.log\n\n# Check Weights & Biases (if enabled)\n# Training metri"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# List available tasks\nautotrain --help\n\n# LLM fine-tuning\nautotrain llm --train --model MODEL --data-path DATA\n\n# Text classification\nautotrain text-classification --train --model MODEL --data-path D"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Check CSV\nhead data.csv\nwc -l data.csv\n\n# Validate JSON\npython -m json.tool data.json > /dev/null && echo \"Valid JSON\"\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "autotrain llm \\\n  --train \\\n  --model MODEL \\\n  --data-path data \\\n  --train-split train \\\n  --valid-split validation  # Important!\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "autotrain llm --train --log tensorboard ...\n# In another terminal:\ntensorboard --logdir outputs/\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "autotrain llm --train --push-to-hub --username USER ...\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://huggingface.co/settings/tokens"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [
        "json",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 56.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "mobile/react-native-navigation.md",
      "category": "mobile",
      "skill_name": "react-native-navigation",
      "frontmatter": {
        "name": "mobile-react-native-navigation",
        "description": "Implementing multi-screen navigation in React Native apps"
      },
      "metrics": {
        "line_count": 575,
        "code_line_count": 63,
        "code_examples": 9,
        "external_refs": 1,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 30,
          "complexity": "complex",
          "code": "// types/navigation.ts\nimport { NavigationProp, RouteProp } from '@react-navigation/native';\n\n// Define root stack param list\nexport type RootStackParamList = {\n  Home: undefined;\n  Profile: { userId:"
        },
        {
          "language": "typescript",
          "line_count": 46,
          "complexity": "complex",
          "code": "// App.tsx\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { RootStackParamList } from './types/navi"
        },
        {
          "language": "typescript",
          "line_count": 42,
          "complexity": "complex",
          "code": "import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Ionicons } from '@expo/vector-icons';\n\nconst Tab = createBottomTabNavigator<TabParamList>();\n\nfunction TabNavigator()"
        },
        {
          "language": "typescript",
          "line_count": 29,
          "complexity": "complex",
          "code": "import { useNavigation, useRoute } from '@react-navigation/native';\nimport { RootStackNavigation, ProfileRouteProp } from '../types/navigation';\n\nfunction ProfileScreen() {\n  const navigation = useNav"
        },
        {
          "language": "typescript",
          "line_count": 46,
          "complexity": "complex",
          "code": "import { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [\n    'myapp://', // Custom URL s"
        },
        {
          "language": "typescript",
          "line_count": 55,
          "complexity": "complex",
          "code": "import { createNativeStackNavigator } from '@react-native-stack-navigator';\n\ntype AuthStackParamList = {\n  Login: undefined;\n  SignUp: undefined;\n  ForgotPassword: undefined;\n};\n\ntype AppStackParamLis"
        },
        {
          "language": "typescript",
          "line_count": 35,
          "complexity": "medium",
          "code": "function RootNavigator() {\n  return (\n    <Stack.Navigator>\n      {/* Main app screens */}\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Profile\" component={Profi"
        },
        {
          "language": "typescript",
          "line_count": 34,
          "complexity": "medium",
          "code": "function PostScreen() {\n  const navigation = useNavigation();\n\n  React.useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: () => (\n        <Button\n          title=\"Share\"\n          "
        },
        {
          "language": "typescript",
          "line_count": 23,
          "complexity": "medium",
          "code": "{\n  // Header\n  headerShown: true,\n  headerTitle: 'Title',\n  headerLargeTitle: true,\n  headerTransparent: false,\n  headerBlurEffect: 'regular',\n  headerBackTitle: 'Back',\n\n  // Presentation\n  presenta"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://myapp.com'"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 56.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "mobile/swiftui-architecture.md",
      "category": "mobile",
      "skill_name": "swiftui-architecture",
      "frontmatter": {
        "name": "swiftui-architecture",
        "description": "Building iOS/macOS apps with SwiftUI"
      },
      "metrics": {
        "line_count": 576,
        "code_line_count": 115,
        "code_examples": 14,
        "external_refs": 1,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "swift",
          "line_count": 63,
          "complexity": "complex",
          "code": "// MODEL: Pure data and business logic\nstruct User: Codable, Identifiable {\n    let id: UUID\n    var name: String\n    var email: String\n}\n\n// VIEW MODEL: Observable state container\n@Observable\nfinal c"
        },
        {
          "language": "swift",
          "line_count": 33,
          "complexity": "complex",
          "code": "@Observable\nfinal class DashboardViewModel {\n    var items: [Item] = []\n    var searchQuery = \"\"\n    var selectedFilter: FilterType = .all\n\n    // Computed properties automatically trigger view update"
        },
        {
          "language": "swift",
          "line_count": 24,
          "complexity": "medium",
          "code": "struct ToggleView: View {\n    @State private var isExpanded = false\n    @State private var selectedTab = 0\n\n    var body: some View {\n        VStack {\n            Picker(\"Tab\", selection: $selectedTab"
        },
        {
          "language": "swift",
          "line_count": 26,
          "complexity": "medium",
          "code": "struct SettingsForm: View {\n    @Binding var settings: AppSettings\n\n    var body: some View {\n        Form {\n            Toggle(\"Enable Notifications\", isOn: $settings.notificationsEnabled)\n          "
        },
        {
          "language": "swift",
          "line_count": 32,
          "complexity": "medium",
          "code": "// Define environment key\nprivate struct UserServiceKey: EnvironmentKey {\n    static let defaultValue: UserService = .shared\n}\n\nextension EnvironmentValues {\n    var userService: UserService {\n       "
        },
        {
          "language": "swift",
          "line_count": 47,
          "complexity": "medium",
          "code": "struct ProductListView: View {\n    @State private var viewModel = ProductListViewModel()\n\n    var body: some View {\n        List {\n            SearchBarSection(query: $viewModel.searchQuery)\n\n        "
        },
        {
          "language": "swift",
          "line_count": 31,
          "complexity": "medium",
          "code": "struct Card<Content: View>: View {\n    let title: String\n    @ViewBuilder let content: () -> Content\n\n    var body: some View {\n        VStack(alignment: .leading, spacing: 12) {\n            Text(titl"
        },
        {
          "language": "swift",
          "line_count": 38,
          "complexity": "complex",
          "code": "@Observable\nfinal class OrderViewModel {\n    var orders: [Order] = []\n\n    private let orderService: OrderService\n    private let analyticsService: AnalyticsService\n\n    init(\n        orderService: Or"
        },
        {
          "language": "swift",
          "line_count": 33,
          "complexity": "complex",
          "code": "protocol AuthServiceProtocol {\n    func login(email: String, password: String) async throws -> User\n    func logout() async throws\n    var currentUser: User? { get }\n}\n\n@Observable\nfinal class AuthVie"
        },
        {
          "language": "swift",
          "line_count": 59,
          "complexity": "complex",
          "code": "@Observable\nfinal class ContentViewModel {\n    enum LoadingState {\n        case idle\n        case loading\n        case loaded([Item])\n        case error(Error)\n    }\n\n    var state: LoadingState = .id"
        },
        {
          "language": "swift",
          "line_count": 35,
          "complexity": "complex",
          "code": "// Production service\nactor ProductService: ProductServiceProtocol {\n    func fetchProducts() async throws -> [Product] {\n        // Network call\n    }\n}\n\n// Test mock\nfinal class MockProductService: "
        },
        {
          "language": "swift",
          "line_count": 27,
          "complexity": "medium",
          "code": "// \u274c BAD\nstruct UserView: View {\n    @State private var user: User?\n\n    var body: some View {\n        Text(user?.name ?? \"\")\n            .task {\n                // Business logic in view!\n           "
        },
        {
          "language": "swift",
          "line_count": 6,
          "complexity": "simple",
          "code": "// \u274c BAD - @Observable doesn't need @StateObject\n@StateObject private var viewModel = MyViewModel()\n\n// \u2705 GOOD\n@State private var viewModel = MyViewModel()\n"
        },
        {
          "language": "swift",
          "line_count": 13,
          "complexity": "complex",
          "code": "// \u274c BAD - Creates retain cycles\n@Observable\nfinal class BadViewModel {\n    weak var view: SomeView?\n}\n\n// \u2705 GOOD - Use callbacks or published state\n@Observable\nfinal class GoodViewModel {\n    var onC"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/user\""
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 56.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "mobile/react-native-performance.md",
      "category": "mobile",
      "skill_name": "react-native-performance",
      "frontmatter": {
        "name": "mobile-react-native-performance",
        "description": "App animations are dropping frames (not 60fps)"
      },
      "metrics": {
        "line_count": 640,
        "code_line_count": 85,
        "code_examples": 11,
        "external_refs": 1,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 64,
          "complexity": "complex",
          "code": "import React, { useCallback } from 'react';\nimport { FlatList, View, Text, StyleSheet } from 'react-native';\n\ninterface Item {\n  id: string;\n  title: string;\n  description: string;\n}\n\n// Memoized item"
        },
        {
          "language": "typescript",
          "line_count": 47,
          "complexity": "complex",
          "code": "import React, { useMemo, useCallback, useState } from 'react';\nimport { View, Text, Pressable } from 'react-native';\n\n// Expensive computation\nfunction expensiveCalculation(items: number[]): number {\n"
        },
        {
          "language": "typescript",
          "line_count": 46,
          "complexity": "complex",
          "code": "import Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withSpring,\n  withTiming,\n} from 'react-native-reanimated';\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\n\nfunctio"
        },
        {
          "language": "typescript",
          "line_count": 54,
          "complexity": "complex",
          "code": "import React from 'react';\nimport { Image, Platform } from 'react-native';\nimport FastImage from 'react-native-fast-image';\n\n// Use FastImage for better performance\nfunction OptimizedImage({ uri }: { "
        },
        {
          "language": "javascript",
          "line_count": 27,
          "complexity": "medium",
          "code": "// metro.config.js\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\n// Enable tree shaking\nconfig.transformer.minifierConfig = {\n  keep_classnam"
        },
        {
          "language": "typescript",
          "line_count": 15,
          "complexity": "complex",
          "code": "// Dynamic imports for code splitting\nimport React, { lazy, Suspense } from 'react';\n\n// Lazy load heavy screens\nconst ProfileScreen = lazy(() => import('./screens/ProfileScreen'));\nconst SettingsScre"
        },
        {
          "language": "typescript",
          "line_count": 48,
          "complexity": "complex",
          "code": "import React, { useEffect, useRef } from 'react';\nimport { NativeEventEmitter, NativeModules, AppState } from 'react-native';\n\nfunction MemorySafeComponent() {\n  const isMounted = useRef(true);\n\n  use"
        },
        {
          "language": "typescript",
          "line_count": 29,
          "complexity": "complex",
          "code": "// Using Performance API\nimport { Performance } from 'react-native-performance';\n\nconst perf = new Performance();\n\n// Measure component render time\nfunction MeasuredComponent() {\n  useEffect(() => {\n "
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# iOS profiling with Xcode Instruments\n# 1. Run app in release mode\nnpm run ios --configuration Release\n\n# 2. Open Xcode \u2192 Product \u2192 Profile\n# 3. Choose Instruments template:\n#    - Time Profiler (CPU"
        },
        {
          "language": "typescript",
          "line_count": 36,
          "complexity": "medium",
          "code": "// \u274c Bad: Too many bridge calls\nfunction BadComponent({ items }: { items: string[] }) {\n  return (\n    <View>\n      {items.map((item) => (\n        <NativeModule.processItem key={item} item={item} />\n "
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# iOS release build\nnpm run ios --configuration Release\n\n# Bundle analyzer\nnpx react-native-bundle-visualizer\n\n# Performance monitor (dev)\n# Shake device \u2192 Show Performance Monitor\n\n# Xcode Instrument"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/data'"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 56.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "workflow/beads-workflow.md",
      "category": "workflow",
      "skill_name": "beads-workflow",
      "frontmatter": {
        "name": "beads-workflow",
        "description": "go install github.com/steveyegge/beads/cmd/bd@latest"
      },
      "metrics": {
        "line_count": 285,
        "code_line_count": 111,
        "code_examples": 17,
        "external_refs": 1,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "complex",
          "code": "# 1. Update bd CLI (MANDATORY at session start)\ngo install github.com/steveyegge/beads/cmd/bd@latest\n\n# 2. Verify installation\nbd version\n\n# 3. Import existing state (if .beads/issues.jsonl exists)\nbd"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Create .beads/ directory and SQLite database\nbd init --prefix projectname\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Create with all options\nbd create \"Issue title\" -t bug -p 1 --json\n\n# Issue types: bug, task, epic, feature\n# Priority: 0 (highest) to 3 (lowest)\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# List unblocked issues\nbd ready --json --limit 5\n\n# Filter by assignee\nbd ready --assignee agent-1 --json\n\n# Filter by priority\nbd ready --priority 0 --json\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Claim work\nbd update bd-42 --status in_progress --json\n\n# Status values: open, in_progress, blocked, closed\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Close with reason\nbd close bd-42 --reason \"Implemented and tested\" --json\n\n# The reason documents what was done\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# List all issues\nbd list --json\n\n# Show specific issue\nbd show bd-42 --json\n\n# List by status\nbd list --status open --json\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "complex",
          "code": "# Export to JSONL for git\nbd export -o .beads/issues.jsonl\n\n# Import from JSONL (after git pull)\nbd import -i .beads/issues.jsonl\n\n# Dry run to preview\nbd import -i .beads/issues.jsonl --dry-run\n\n# Re"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "#!/bin/bash\n# .git/hooks/pre-commit\nbd export -o .beads/issues.jsonl\ngit add .beads/issues.jsonl\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "complex",
          "code": "#!/bin/bash\n# .git/hooks/post-merge\nbd import -i .beads/issues.jsonl\n"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# 1. Close completed issues\nbd close bd-X --reason \"...\" --json\n\n# 2. Export state\nbd export -o .beads/issues.jsonl\n\n# 3. Commit to git\ngit add .beads/issues.jsonl\ngit commit -m \"Update issue tracker\""
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# GOOD\nbd ready --json --limit 5\nbd create \"Task\" --json\nbd update bd-5 --status in_progress --json\n\n# AVOID (human-readable output)\nbd ready\nbd list\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "bd show bd-42 --json\nbd update myapp-15 --status in_progress --json\n"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Find what's ready\nbd ready --json --limit 5\n\n# Claim an issue\nbd update bd-10 --status in_progress --json\n\n# (Do the work...)\n\n# Close when done\nbd close bd-10 --reason \"Completed implementation\" --"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# While working on bd-10, discover new issue\nbd create \"Fix edge case in validation\" -t bug -p 1 --json\n# Returns: bd-11\n\n# Link discovery (see beads-dependency-management.md)\nbd dep add bd-11 bd-10 -"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "complex",
          "code": "# Agent 1 claims work\nbd ready --json --limit 5\nbd update bd-50 --status in_progress --assignee agent-1 --json\n\n# Agent 2 finds their work\nbd ready --assignee agent-2 --json\n\n# Both export before comm"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "complex",
          "code": "bd import -i .beads/issues.jsonl --resolve-collisions\n"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/steveyegge/beads"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 56.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cloud/aws/aws-lambda-functions.md",
      "category": "cloud",
      "skill_name": "aws-lambda-functions",
      "frontmatter": {
        "name": "cloud-aws-lambda-functions",
        "description": "AWS Lambda function development, runtime configuration, triggers, and optimization"
      },
      "metrics": {
        "line_count": 659,
        "code_line_count": 123,
        "code_examples": 15,
        "external_refs": 1,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "import os\nimport boto3\n\n# Initialize outside handler - reused across warm invocations\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table(os.environ['TABLE_NAME'])\n\ndef lambda_handler(event, "
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "# Python runtime best practices\nimport json\nimport os\nfrom datetime import datetime\n\n# Environment variables for configuration\nSTAGE = os.environ.get('STAGE', 'dev')\nDEBUG = os.environ.get('DEBUG', 'f"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "import boto3\nfrom functools import lru_cache\n\n# \u274c Bad: Initialize inside handler\ndef lambda_handler_slow(event, context):\n    dynamodb = boto3.resource('dynamodb')  # New connection every time\n    tab"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Create Lambda layer structure\nmkdir -p layer/python\ncd layer/python\n\n# Install dependencies\npip install requests boto3-stubs -t .\n\n# Create layer zip\ncd ..\nzip -r layer.zip python/\n\n# Publish layer\n"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "# Use layer in Lambda function\n# Layer ARN added in function configuration\n# Code available in /opt/python\n\nimport requests  # From layer\nfrom shared_utils import validate_input  # From layer\n\ndef lam"
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "import json\n\ndef lambda_handler(event, context):\n    \"\"\"Handle API Gateway proxy integration\"\"\"\n\n    # Parse request\n    http_method = event['httpMethod']\n    path = event['path']\n    query_params = e"
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "import urllib.parse\nimport boto3\n\ns3 = boto3.client('s3')\n\ndef lambda_handler(event, context):\n    \"\"\"Process S3 upload events\"\"\"\n\n    for record in event['Records']:\n        bucket = record['s3']['bu"
        },
        {
          "language": "python",
          "line_count": 45,
          "complexity": "complex",
          "code": "def lambda_handler(event, context):\n    \"\"\"Process DynamoDB stream events\"\"\"\n\n    for record in event['Records']:\n        event_name = record['eventName']  # INSERT, MODIFY, REMOVE\n        event_id = "
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "import boto3\n\nsqs = boto3.client('sqs')\n\ndef lambda_handler(event, context):\n    \"\"\"Process SQS messages with batch failure handling\"\"\"\n\n    successful = []\n    failed = []\n\n    for record in event['R"
        },
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "import time\n\ndef lambda_handler(event, context):\n    \"\"\"Process items with timeout awareness\"\"\"\n\n    items = event['items']\n    processed = []\n\n    # Reserve 30 seconds for cleanup/checkpoint\n    dead"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Enable provisioned concurrency via AWS CLI\naws lambda put-provisioned-concurrency-config \\\n  --function-name critical-api-function \\\n  --provisioned-concurrent-executions 10 \\\n  --qualifier v1\n\n# Us"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "def lambda_handler(event, context):\n    \"\"\"\n    Function with provisioned concurrency\n    - Always warm (no cold starts)\n    - Consistent latency\n    - Higher cost (charged for provisioned capacity)\n "
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "# \u274c NEVER: Hardcode credentials\nAWS_ACCESS_KEY = \"AKIAIOSFODNN7EXAMPLE\"\nAWS_SECRET_KEY = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n\n# \u2705 CORRECT: Use IAM execution role (automatic credentials)\n# No cr"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u274c Don't ignore timeout limits\ndef lambda_handler(event, context):\n    # May timeout after 15 minutes max\n    process_all_items(event['items'])  # No progress tracking\n\n# \u2705 Correct: Monitor remaining"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# \u274c Don't use /tmp for permanent storage\ndef lambda_handler(event, context):\n    with open('/tmp/cache.json', 'w') as f:\n        json.dump(data, f)\n    # File may disappear on next invocation\n\n# \u2705 Cor"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com/data'"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 56.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/llm-model-routing.md",
      "category": "ml",
      "skill_name": "llm-model-routing",
      "frontmatter": {
        "name": "ml-llm-model-routing",
        "description": "Intelligent LLM routing with RouteLLM, semantic routing, and cost optimization"
      },
      "metrics": {
        "line_count": 563,
        "code_line_count": 59,
        "code_examples": 7,
        "external_refs": 2,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "from routellm.controller import Controller\n\n# Initialize router with model pair\nrouter = Controller(\n    routers=[\"bert\"],  # or [\"sw_ranking\", \"causal_llm\", \"mf\"]\n    strong_model=\"gpt-4-1106-preview"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Threshold controls quality/cost tradeoff\n# Higher threshold = more weak model usage = lower cost\n# Lower threshold = more strong model usage = higher quality\n\nthresholds = [0.3, 0.5, 0.7, 0.9]\n\nfor "
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "import pandas as pd\nfrom routellm.routers import ROUTER_CLS\n\n# Load router for evaluation\nrouter_cls = ROUTER_CLS[\"bert\"]\nrouter = router_cls(\n    strong_model_name=\"gpt-4-1106-preview\",\n    weak_mode"
        },
        {
          "language": "python",
          "line_count": 67,
          "complexity": "complex",
          "code": "from semantic_router import Route, RouteLayer\nfrom semantic_router.encoders import OpenAIEncoder\n\n# Define routes with examples\ncode_route = Route(\n    name=\"code\",\n    utterances=[\n        \"How do I "
        },
        {
          "language": "python",
          "line_count": 68,
          "complexity": "complex",
          "code": "import re\nfrom typing import Literal\n\nModelType = Literal[\"strong\", \"weak\", \"specialized\"]\n\nclass RuleBasedRouter:\n    def __init__(\n        self,\n        strong_model: str = \"gpt-4o\",\n        weak_mo"
        },
        {
          "language": "python",
          "line_count": 62,
          "complexity": "complex",
          "code": "from typing import Optional\nimport openai\n\nclass HybridRouter:\n    def __init__(self):\n        self.semantic_router = route_layer  # From earlier example\n        self.rule_router = RuleBasedRouter()\n\n"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "import phoenix as px\nfrom phoenix.trace import using_project\nfrom opentelemetry import trace\n\n# Start Phoenix\npx.launch_app()\n\n# Instrument routing\ntracer = trace.get_tracer(__name__)\n\n@using_project("
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "http://localhost:8000/v1\""
        },
        {
          "type": "example",
          "url": "http://localhost:6006"
        }
      ],
      "tools_mentioned": [
        "envoy"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "7 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 56.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "data/stream-processing.md",
      "category": "data",
      "skill_name": "stream-processing",
      "frontmatter": {
        "name": "data-stream-processing",
        "description": "Processing real-time event streams (clicks, IoT, logs)"
      },
      "metrics": {
        "line_count": 610,
        "code_line_count": 66,
        "code_examples": 8,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 66,
          "complexity": "complex",
          "code": "from kafka import KafkaProducer\nfrom kafka.errors import KafkaError\nimport json\nfrom typing import Dict, Any\nfrom datetime import datetime\n\nclass EventProducer:\n    def __init__(self, bootstrap_server"
        },
        {
          "language": "python",
          "line_count": 100,
          "complexity": "complex",
          "code": "from kafka import KafkaConsumer, TopicPartition, OffsetAndMetadata\nfrom typing import Callable\nimport json\n\nclass EventConsumer:\n    def __init__(\n        self,\n        bootstrap_servers: list[str],\n "
        },
        {
          "language": "java",
          "line_count": 64,
          "complexity": "complex",
          "code": "// Java - Kafka Streams API\nimport org.apache.kafka.streams.KafkaStreams;\nimport org.apache.kafka.streams.StreamsBuilder;\nimport org.apache.kafka.streams.kstream.*;\nimport java.time.Duration;\n\npublic "
        },
        {
          "language": "python",
          "line_count": 74,
          "complexity": "complex",
          "code": "# Python - Faust framework (Kafka Streams alternative)\nimport faust\nfrom datetime import timedelta\n\napp = faust.App(\n    'stream-joins',\n    broker='kafka://localhost:9092',\n    store='rocksdb://'\n)\n\n"
        },
        {
          "language": "python",
          "line_count": 88,
          "complexity": "complex",
          "code": "from kafka import KafkaProducer, KafkaConsumer\nfrom kafka.coordinator.assignors.range import RangePartitionAssignor\nimport json\n\nclass ExactlyOnceProcessor:\n    def __init__(\n        self,\n        boo"
        },
        {
          "language": "bash",
          "line_count": 30,
          "complexity": "medium",
          "code": "# Create topic\nkafka-topics --create --topic my-topic \\\n  --partitions 3 --replication-factor 2 \\\n  --bootstrap-server localhost:9092\n\n# List topics\nkafka-topics --list --bootstrap-server localhost:90"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Tumbling (Faust)\ntable.tumbling(timedelta(minutes=5))\n\n# Hopping/Sliding (Faust)\ntable.hopping(size=timedelta(minutes=10), step=timedelta(minutes=2))\n\n# Kafka Streams (Java)\nTimeWindows.ofSizeWithNo"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "# By key (ensures same key -> same partition)\nproducer.send(topic, key='user123', value=event)\n\n# Round-robin (no key)\nproducer.send(topic, value=event)\n\n# Custom partitioner\nfrom kafka.partitioner im"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "apache"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 56.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "typed-holes-refactor/references/VALIDATION_PATTERNS.md",
      "category": "typed-holes-refactor",
      "skill_name": "VALIDATION_PATTERNS",
      "frontmatter": {
        "name": "validation-patterns",
        "description": "Reference guide for test patterns to validate hole resolutions including characterization tests, property tests, and integration tests. Use as reference when validating refactoring steps."
      },
      "metrics": {
        "line_count": 461,
        "code_line_count": 70,
        "code_examples": 8,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "# tests/characterization/test_api_contracts.py\nimport pytest\nimport json\nfrom pathlib import Path\n\nclass TestAPIContracts:\n    @pytest.fixture(scope=\"session\")\n    def baseline_dir(self):\n        retu"
        },
        {
          "language": "python",
          "line_count": 56,
          "complexity": "complex",
          "code": "# tests/characterization/test_performance.py\nimport pytest\nimport time\nimport statistics\n\nclass TestPerformanceBaselines:\n    ITERATIONS = 100\n    TOLERANCE = 1.2  # Allow 20% slowdown\n    \n    @pytes"
        },
        {
          "language": "python",
          "line_count": 65,
          "complexity": "complex",
          "code": "# tests/refactor/test_r1_architecture.py\nimport ast\nimport importlib\nfrom pathlib import Path\n\nclass TestArchitectureResolution:\n    \"\"\"Validate R1: target_architecture is resolved correctly\"\"\"\n    \n "
        },
        {
          "language": "python",
          "line_count": 69,
          "complexity": "complex",
          "code": "# tests/refactor/test_r4_consolidation.py\nimport pytest\n\nclass TestConsolidationResolution:\n    \"\"\"Validate R4: consolidation_targets resolved correctly\"\"\"\n    \n    @pytest.fixture\n    def old_functio"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "# tests/refactor/test_r5_performance.py\nimport pytest\nimport time\n\nclass TestPerformanceImprovement:\n    \"\"\"Validate performance holes resolved correctly\"\"\"\n    \n    ITERATIONS = 100\n    \n    def meas"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "# tests/integration/test_workflows.py\nimport pytest\n\nclass TestWorkflowEquivalence:\n    \"\"\"Ensure end-to-end workflows produce identical results\"\"\"\n    \n    @pytest.fixture\n    def scenarios(self):\n  "
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "# tests/refactor/test_invariants.py\nfrom hypothesis import given, strategies as st\n\nclass TestInvariants:\n    \"\"\"Test properties that must always hold\"\"\"\n    \n    @given(st.text(min_size=1, max_size=1"
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "# tests/migration/test_feature_flags.py\nimport pytest\n\nclass TestFeatureFlags:\n    \"\"\"Validate feature flag rollout mechanism\"\"\"\n    \n    def test_flag_off_uses_old_code(self):\n        \"\"\"When flag di"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "pytest"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 56.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "collaboration/codetour-guided-walkthroughs.md",
      "category": "collaboration",
      "skill_name": "codetour-guided-walkthroughs",
      "frontmatter": {
        "name": "codetour-guided-walkthroughs",
        "description": "Creating and following CodeTour walkthroughs for codebase understanding"
      },
      "metrics": {
        "line_count": 515,
        "code_line_count": 130,
        "code_examples": 20,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 12
      },
      "code_examples": [
        {
          "language": "json",
          "line_count": 9,
          "complexity": "simple",
          "code": "{\n  \"title\": \"Tour name\",\n  \"steps\": [\n    {\n      \"description\": \"Step explanation (required)\"\n    }\n  ]\n}\n"
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "simple",
          "code": "{\n  \"file\": \"src/server.ts\",\n  \"line\": 42,\n  \"description\": \"# Main Server Entry\\n\\nThis is where the HTTP server starts...\"\n}\n"
        },
        {
          "language": "json",
          "line_count": 5,
          "complexity": "simple",
          "code": "{\n  \"directory\": \"src/api/\",\n  \"description\": \"API handlers are organized by resource type\"\n}\n"
        },
        {
          "language": "json",
          "line_count": 4,
          "complexity": "simple",
          "code": "{\n  \"description\": \"# Welcome to the API\\n\\nThis tour covers authentication flow\"\n}\n"
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "complex",
          "code": "{\n  \"file\": \"src/auth.ts\",\n  \"pattern\": \"export class AuthService\",\n  \"description\": \"The AuthService handles all authentication logic\"\n}\n"
        },
        {
          "language": "json",
          "line_count": 9,
          "complexity": "simple",
          "code": "{\n  \"file\": \"src/database.ts\",\n  \"selection\": {\n    \"start\": {\"line\": 10, \"character\": 0},\n    \"end\": {\"line\": 20, \"character\": 0}\n  },\n  \"description\": \"Connection pool configuration\"\n}\n"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "import json\nfrom pathlib import Path\n\ndef create_onboarding_tour(output_path: str = \".tours/getting-started.tour\"):\n    \"\"\"Create a basic onboarding tour for new developers.\"\"\"\n\n    tour = {\n        \""
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "def create_architecture_tour(component: str, files: list[dict]):\n    \"\"\"Create a tour explaining a specific architectural component.\"\"\"\n\n    tour = {\n        \"title\": f\"{component} Architecture\",\n    "
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "import json\nfrom pathlib import Path\nfrom typing import Iterator\n\ndef read_tour(tour_path: str) -> dict:\n    \"\"\"Load a tour file from disk.\"\"\"\n    with open(tour_path) as f:\n        return json.load(f"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "medium",
          "code": "def create_feature_tour(feature_name: str, workflow_steps: list[str]):\n    \"\"\"Create a tour showing how a feature works end-to-end.\"\"\"\n\n    tour = {\n        \"title\": f\"{feature_name} - Complete Workfl"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "def create_bug_tour(bug_id: str, reproduction_steps: list[dict]):\n    \"\"\"Document bug reproduction path for investigation.\"\"\"\n\n    tour = {\n        \"title\": f\"Bug #{bug_id} - Investigation Guide\",\n   "
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "medium",
          "code": "def create_refactoring_tour(refactor_name: str, before_after: list[tuple]):\n    \"\"\"Document a refactoring with before/after comparisons.\"\"\"\n\n    tour = {\n        \"title\": f\"Refactoring: {refactor_name"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "from pathlib import Path\nfrom typing import List\n\ndef discover_tours(repo_path: str = \".\") -> List[Path]:\n    \"\"\"Find all CodeTour files in a repository.\"\"\"\n\n    search_paths = [\n        \".tours/**/*."
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "medium",
          "code": "def validate_tour(tour: dict) -> list[str]:\n    \"\"\"Validate tour structure and return errors.\"\"\"\n\n    errors = []\n\n    # Required fields\n    if \"title\" not in tour:\n        errors.append(\"Missing requ"
        },
        {
          "language": "json",
          "line_count": 9,
          "complexity": "simple",
          "code": "{\n  \"title\": \"string (required)\",\n  \"description\": \"string (optional)\",\n  \"ref\": \"git reference (optional)\",\n  \"isPrimary\": \"boolean (optional)\",\n  \"steps\": [\"array (required)\"],\n  \"nextTour\": \"string"
        },
        {
          "language": "json",
          "line_count": 13,
          "complexity": "simple",
          "code": "{\n  \"description\": \"string (required)\",\n  \"file\": \"string (optional)\",\n  \"directory\": \"string (optional)\",\n  \"line\": \"number (optional)\",\n  \"pattern\": \"regex string (optional)\",\n  \"selection\": {\n    \""
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "simple",
          "code": "{\n  \"file\": \"src/api.ts\",\n  \"line\": 147,  // This line number will change frequently\n  \"description\": \"Authentication middleware\"\n}\n"
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "simple",
          "code": "{\n  \"file\": \"src/api.ts\",\n  \"pattern\": \"export const authMiddleware\",\n  \"description\": \"Authentication middleware\"\n}\n"
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "simple",
          "code": "{\n  \"file\": \"src/utils.ts\",\n  \"line\": 50,\n  \"description\": \"Helper function\"  // Too vague\n}\n"
        },
        {
          "language": "json",
          "line_count": 6,
          "complexity": "simple",
          "code": "{\n  \"file\": \"src/utils.ts\",\n  \"pattern\": \"export function parseConfig\",\n  \"description\": \"# Configuration Parser\\n\\nParses YAML config files and validates against schema. Returns typed config object o"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [
        "json",
        "json",
        "json",
        "json",
        "json",
        "json",
        "json",
        "json",
        "json",
        "json",
        "json",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "20 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "formal/csp-modeling.md",
      "category": "formal",
      "skill_name": "csp-modeling",
      "frontmatter": {
        "name": "formal-csp-modeling",
        "description": "Modeling scheduling problems (meetings, courses, jobs)"
      },
      "metrics": {
        "line_count": 431,
        "code_line_count": 61,
        "code_examples": 12,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Binary constraint: allowed pairs\nconstraint = {(1, 2), (1, 3), (2, 3), (2, 4)}\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Mathematical constraint\ndef constraint(x1, x2):\n    return x1 + x2 <= 10\n"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "from constraint import Problem, AllDifferentConstraint\n\ndef solve_n_queens(n):\n    \"\"\"Place n queens on n\u00d7n board with no attacks.\"\"\"\n    problem = Problem()\n\n    # Variables: One per queen (row), dom"
        },
        {
          "language": "python",
          "line_count": 47,
          "complexity": "complex",
          "code": "from constraint import Problem, AllDifferentConstraint\n\ndef solve_sudoku(grid):\n    \"\"\"Solve 9\u00d79 Sudoku puzzle.\"\"\"\n    problem = Problem()\n\n    # Variables: Each cell (row, col)\n    cells = [(r, c) fo"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "from constraint import Problem, AllDifferentConstraint\n\ndef color_graph(graph, num_colors):\n    \"\"\"Assign colors to graph nodes (no adjacent same color).\"\"\"\n    problem = Problem()\n\n    # Variables: G"
        },
        {
          "language": "python",
          "line_count": 58,
          "complexity": "complex",
          "code": "from ortools.sat.python import cp_model\n\ndef schedule_jobs(jobs, machines):\n    \"\"\"Schedule jobs on machines minimizing makespan.\"\"\"\n    model = cp_model.CpModel()\n\n    # Variables: start_time and mac"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "from constraint import Problem, ExactSumConstraint\n\ndef allocate_resources(tasks, resources, capacity):\n    \"\"\"Assign tasks to resources respecting capacity limits.\"\"\"\n    problem = Problem()\n\n    # V"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Problem has no solution\nproblem.addConstraint(lambda x: x > 10)\nproblem.addConstraint(lambda x: x < 5)\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Inefficient: AllDifferent as pairwise inequality\nfor i in range(n):\n    for j in range(i + 1, n):\n        problem.addConstraint(lambda xi, xj: xi != xj, (i, j))\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad: Boolean variables for multi-valued decisions\n# is_blue, is_red, is_green (3 variables per item)\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# N-Queens: All solutions are rotations/reflections\n# Returns 92 solutions for 8-Queens (only 12 unique)\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Scheduling: Only NoOverlap constraint\n# Missing: Task precedence, resource limits\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "12 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "formal/constraint-propagation.md",
      "category": "formal",
      "skill_name": "constraint-propagation",
      "frontmatter": {
        "name": "formal-constraint-propagation",
        "description": "Pruning search space before backtracking search"
      },
      "metrics": {
        "line_count": 522,
        "code_line_count": 59,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 79,
          "complexity": "complex",
          "code": "from collections import deque\n\ndef ac3(variables, domains, constraints):\n    \"\"\"\n    AC-3 algorithm for enforcing arc consistency.\n\n    Args:\n        variables: List of variable names\n        domains:"
        },
        {
          "language": "python",
          "line_count": 60,
          "complexity": "complex",
          "code": "def forward_check(var, value, domains, constraints, assignment):\n    \"\"\"\n    Apply forward checking after assigning var = value.\n    Prunes domains of unassigned variables.\n\n    Returns:\n        Updat"
        },
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "def mac(assignment, domains, variables, constraints):\n    \"\"\"\n    Backtracking with Maintaining Arc Consistency.\n    Runs AC-3 after each assignment.\n    \"\"\"\n    if len(assignment) == len(variables):\n"
        },
        {
          "language": "python",
          "line_count": 48,
          "complexity": "medium",
          "code": "def bounds_consistency_add(x_domain, y_domain, z_domain, constraint):\n    \"\"\"\n    Enforce bounds consistency for X + Y = Z.\n    Updates domains to be bounds-consistent.\n\n    Args:\n        x_domain, y_"
        },
        {
          "language": "python",
          "line_count": 48,
          "complexity": "medium",
          "code": "def backjump(assignment, domains, variables, constraints):\n    \"\"\"\n    Backtracking with conflict-directed backjumping.\n    Jumps back to source of conflict instead of immediate predecessor.\n    \"\"\"\n "
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Inefficient: Start search with full domains\ndef solve_csp(variables, domains, constraints):\n    return backtrack({}, domains, variables, constraints)\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Slow: Full arc consistency on huge domains\ndomains = {'X': set(range(1, 1000000))}  # 1 million values\nac3(variables, domains, constraints)  # Very slow\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Bug: Only one direction\nconstraints = {\n    ('X', 'Y'): lambda x, y: x < y\n    # Missing: ('Y', 'X')\n}\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bug: Modifying set while iterating\nfor value in domains[var]:  # Set iteration\n    domains[var].remove(value)  # Modifies set\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Slow: Path consistency at every node\ndef backtrack_pc(assignment, domains, ...):\n    path_consistency(domains)  # Overkill\n    # ... rest of search\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "formal/backtracking-search.md",
      "category": "formal",
      "skill_name": "backtracking-search",
      "frontmatter": {
        "name": "formal-backtracking-search",
        "description": "Implementing CSP solvers with systematic search"
      },
      "metrics": {
        "line_count": 474,
        "code_line_count": 55,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "def backtracking_search(variables, domains, constraints):\n    \"\"\"\n    Find solution to CSP using backtracking.\n\n    Returns:\n        Assignment (dict) if solution found, None otherwise\n    \"\"\"\n    ret"
        },
        {
          "language": "python",
          "line_count": 56,
          "complexity": "complex",
          "code": "def select_unassigned_variable_mrv(variables, assignment, domains):\n    \"\"\"\n    Select variable with MRV heuristic.\n    Choose variable with fewest remaining legal values.\n    \"\"\"\n    unassigned = [v "
        },
        {
          "language": "python",
          "line_count": 50,
          "complexity": "medium",
          "code": "def order_domain_values_lcv(var, assignment, domains, constraints):\n    \"\"\"\n    Order values using LCV heuristic.\n    Try value that rules out fewest choices for other variables first.\n    \"\"\"\n    def"
        },
        {
          "language": "python",
          "line_count": 59,
          "complexity": "complex",
          "code": "def backtrack_fc(assignment, domains, variables, constraints):\n    \"\"\"Backtracking with forward checking (domain pruning).\"\"\"\n    if len(assignment) == len(variables):\n        return assignment\n\n    v"
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "medium",
          "code": "def find_all_solutions(variables, domains, constraints):\n    \"\"\"Find all solutions to CSP.\"\"\"\n    solutions = []\n\n    def backtrack_all(assignment):\n        if len(assignment) == len(variables):\n     "
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Inefficient: Always tries variables in same order\nfor var in variables:\n    if var not in assignment:\n        return var\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Slow: Checks all constraints at assignment time only\nif is_consistent(var, value, assignment, constraints):\n    assignment[var] = value\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Wasteful: LCV overhead without benefit\ndef backtrack_all(assignment):\n    # ... finding all solutions\n    values = order_domain_values_lcv(var, ...)  # Wasted work\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bug: Modifying domain affects all branches\ndomains[var].remove(value)  # Side effect!\nbacktrack(assignment, domains, ...)\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Risk: Stack overflow on large problems\ndef backtrack(assignment, ...):\n    return backtrack(assignment, ...)  # 1000+ levels\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "elegant-design/foundation/layout-patterns.md",
      "category": "elegant-design",
      "skill_name": "layout-patterns",
      "frontmatter": {},
      "metrics": {
        "line_count": 292,
        "code_line_count": 128,
        "code_examples": 14,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "css",
          "line_count": 18,
          "complexity": "simple",
          "code": ".container {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  gap: var(--space-4);\n}\n\n.col-6 {\n  grid-column: span 6; /* Half width */\n}\n\n.col-4 {\n  grid-column: span 4; /* Third width */\n"
        },
        {
          "language": "css",
          "line_count": 7,
          "complexity": "simple",
          "code": ".grid-layout {\n  display: grid;\n  grid-template-columns: 250px 1fr 300px; /* sidebar, main, aside */\n  grid-template-rows: auto 1fr auto; /* header, content, footer */\n  gap: var(--space-4);\n}\n"
        },
        {
          "language": "css",
          "line_count": 7,
          "complexity": "simple",
          "code": ".flex-layout {\n  display: flex;\n  flex-direction: row;\n  gap: var(--space-4);\n  align-items: center;\n}\n"
        },
        {
          "language": "css",
          "line_count": 14,
          "complexity": "simple",
          "code": ":root {\n  --container-sm: 640px;\n  --container-md: 768px;\n  --container-lg: 1024px;\n  --container-xl: 1280px;\n  --container-2xl: 1536px;\n}\n\n.container {\n  max-width: var(--container-xl);\n  margin: 0 a"
        },
        {
          "language": "css",
          "line_count": 28,
          "complexity": "medium",
          "code": "/* Mobile base styles (< 640px) */\n.element {\n  padding: var(--space-4);\n  flex-direction: column;\n}\n\n/* Tablet (\u2265 640px) */\n@media (min-width: 640px) {\n  .element {\n    padding: var(--space-6);\n  }\n}"
        },
        {
          "language": "css",
          "line_count": 12,
          "complexity": "simple",
          "code": ".responsive-layout {\n  display: flex;\n  flex-direction: column;\n  gap: var(--space-4);\n}\n\n@media (min-width: 768px) {\n  .responsive-layout {\n    flex-direction: row;\n  }\n}\n"
        },
        {
          "language": "css",
          "line_count": 18,
          "complexity": "simple",
          "code": ".responsive-grid {\n  display: grid;\n  grid-template-columns: 1fr; /* mobile: 1 column */\n  gap: var(--space-4);\n}\n\n@media (min-width: 768px) {\n  .responsive-grid {\n    grid-template-columns: repeat(2,"
        },
        {
          "language": "css",
          "line_count": 6,
          "complexity": "simple",
          "code": ".vercel-hero {\n  padding: var(--space-24) var(--space-4);\n  text-align: center;\n  background: linear-gradient(to bottom, var(--color-background), var(--color-muted));\n}\n"
        },
        {
          "language": "css",
          "line_count": 8,
          "complexity": "simple",
          "code": ".hex-card {\n  background: var(--color-background);\n  border: 1px solid var(--color-border);\n  border-radius: 8px;\n  padding: var(--space-6);\n  box-shadow: var(--shadow-sm);\n}\n"
        },
        {
          "language": "css",
          "line_count": 12,
          "complexity": "simple",
          "code": ".baseten-layout {\n  display: grid;\n  grid-template-columns: 250px 1fr 250px;\n  gap: var(--space-8);\n}\n\n@media (max-width: 1024px) {\n  .baseten-layout {\n    grid-template-columns: 1fr; /* stack on mobi"
        },
        {
          "language": "css",
          "line_count": 14,
          "complexity": "simple",
          "code": ".touch-target {\n  min-width: 44px;\n  min-height: 44px;\n  padding: var(--space-3);\n  /* Ensure actual interactive area, not just visible area */\n}\n\n/* Increase spacing between touch targets on mobile *"
        },
        {
          "language": "css",
          "line_count": 17,
          "complexity": "simple",
          "code": ".dashboard {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main aside\"\n    \"footer footer footer\";\n  grid-template-columns: 250px 1fr 300px;\n  grid-template-rows: aut"
        },
        {
          "language": "css",
          "line_count": 13,
          "complexity": "simple",
          "code": ".docs-layout {\n  display: grid;\n  grid-template-columns: 250px minmax(0, 800px) 250px;\n  gap: var(--space-8);\n  max-width: var(--container-2xl);\n  margin: 0 auto;\n  padding: var(--space-4);\n}\n\n.docs-n"
        },
        {
          "language": "css",
          "line_count": 8,
          "complexity": "simple",
          "code": ".card-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: var(--space-4);\n}\n\n/* Cards automatically wrap and maintain consistent width */\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "elegant-design/implementation/components-and-accessibility.md",
      "category": "elegant-design",
      "skill_name": "components-and-accessibility",
      "frontmatter": {},
      "metrics": {
        "line_count": 289,
        "code_line_count": 102,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 32,
          "complexity": "medium",
          "code": "interface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'ghost' | 'destructive';\n  size?: 'sm' | 'md' | 'lg';\n  loading?: boolean;\n  disabled?: boolean;\n  children: React.ReactNode;\n  onClick?: "
        },
        {
          "language": "typescript",
          "line_count": 18,
          "complexity": "simple",
          "code": "// Good: Composable\n<Card>\n  <CardHeader>\n    <CardTitle>Title</CardTitle>\n  </CardHeader>\n  <CardContent>\n    Content here\n  </CardContent>\n</Card>\n\n// Avoid: Props hell\n<Card \n  title=\"Title\"\n  cont"
        },
        {
          "language": "tsx",
          "line_count": 10,
          "complexity": "simple",
          "code": "// Good\n<button onClick={handleClick}>Click me</button>\n<nav>...</nav>\n<main>...</main>\n<article>...</article>\n\n// Bad\n<div onClick={handleClick}>Click me</div>\n<div className=\"nav\">...</div>\n"
        },
        {
          "language": "tsx",
          "line_count": 21,
          "complexity": "medium",
          "code": "// Icon-only button\n<button aria-label=\"Close dialog\">\n  <X size={16} />\n</button>\n\n// Form field with description\n<div>\n  <label htmlFor=\"email\">Email</label>\n  <input \n    id=\"email\"\n    type=\"email"
        },
        {
          "language": "tsx",
          "line_count": 23,
          "complexity": "medium",
          "code": "function Dialog({ open, onClose }: DialogProps) {\n  useEffect(() => {\n    if (!open) return;\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') onClose();\n    };\n\n    docu"
        },
        {
          "language": "tsx",
          "line_count": 23,
          "complexity": "medium",
          "code": "function Modal({ open }: { open: boolean }) {\n  const modalRef = useRef<HTMLDivElement>(null);\n  const previousFocus = useRef<HTMLElement | null>(null);\n\n  useEffect(() => {\n    if (open) {\n      // S"
        },
        {
          "language": "css",
          "line_count": 12,
          "complexity": "simple",
          "code": "/* Good contrast */\n.good-text {\n  background: #ffffff;\n  color: #222222; /* 16.1:1 */\n}\n\n/* Poor contrast - fails WCAG */\n.poor-text {\n  background: #ffffff;\n  color: #999999; /* 2.8:1 */\n}\n"
        },
        {
          "language": "tsx",
          "line_count": 14,
          "complexity": "simple",
          "code": "// Skip navigation\n<a href=\"#main-content\" className=\"skip-link\">\n  Skip to main content\n</a>\n\n// Alternative text for images\n<img src=\"...\" alt=\"Descriptive text\" />\n\n// Hidden labels for icon button"
        },
        {
          "language": "css",
          "line_count": 13,
          "complexity": "simple",
          "code": "/* Screen reader only content */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  bord"
        },
        {
          "language": "tsx",
          "line_count": 31,
          "complexity": "medium",
          "code": "function FormField({ \n  label, \n  error, \n  required,\n  ...inputProps \n}: FormFieldProps) {\n  const id = useId();\n  const errorId = `${id}-error`;\n\n  return (\n    <div className=\"form-field\">\n      <l"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "elegant-design/interactive/streaming-and-loading.md",
      "category": "elegant-design",
      "skill_name": "streaming-and-loading",
      "frontmatter": {},
      "metrics": {
        "line_count": 362,
        "code_line_count": 80,
        "code_examples": 11,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 41,
          "complexity": "medium",
          "code": "function StreamingText({ stream }: { stream: ReadableStream<Uint8Array> }) {\n  const [content, setContent] = useState('');\n  const [isComplete, setIsComplete] = useState(false);\n\n  useEffect(() => {\n "
        },
        {
          "language": "css",
          "line_count": 10,
          "complexity": "simple",
          "code": ".cursor-blink {\n  animation: blink 1s ease-in-out infinite;\n  font-family: 'JetBrains Mono', monospace;\n}\n\n@keyframes blink {\n  0%, 49% { opacity: 1; }\n  50%, 100% { opacity: 0; }\n}\n"
        },
        {
          "language": "css",
          "line_count": 29,
          "complexity": "medium",
          "code": ".skeleton {\n  background: linear-gradient(\n    90deg,\n    #f0f0f0 25%,\n    #e0e0e0 50%,\n    #f0f0f0 75%\n  );\n  background-size: 200% 100%;\n  animation: shimmer 1.5s ease-in-out infinite;\n  border-radi"
        },
        {
          "language": "tsx",
          "line_count": 11,
          "complexity": "simple",
          "code": "function CardSkeleton() {\n  return (\n    <div className=\"card\">\n      <div className=\"skeleton\" style={{ height: '200px', marginBottom: '1rem' }} />\n      <div className=\"skeleton\" style={{ height: '1"
        },
        {
          "language": "typescript",
          "line_count": 22,
          "complexity": "medium",
          "code": "function Page() {\n  const [aboveFold, setAboveFold] = useState(null);\n  const [belowFold, setBelowFold] = useState(null);\n\n  useEffect(() => {\n    // Load critical content immediately\n    fetchAboveFo"
        },
        {
          "language": "typescript",
          "line_count": 38,
          "complexity": "medium",
          "code": "function TodoList() {\n  const [items, setItems] = useState<Todo[]>([]);\n\n  const addItem = async (newItem: Omit<Todo, 'id'>) => {\n    // Create temporary item\n    const tempItem = { ...newItem, id: 't"
        },
        {
          "language": "css",
          "line_count": 37,
          "complexity": "medium",
          "code": "/* Elegant spinner */\n.spinner {\n  width: 24px;\n  height: 24px;\n  border: 2px solid rgba(0, 0, 0, 0.1);\n  border-top-color: var(--color-primary);\n  border-radius: 50%;\n  animation: spin 0.8s cubic-bez"
        },
        {
          "language": "css",
          "line_count": 25,
          "complexity": "medium",
          "code": ".progress-bar {\n  width: 100%;\n  height: 4px;\n  background: rgba(0, 0, 0, 0.1);\n  border-radius: 2px;\n  overflow: hidden;\n}\n\n.progress-fill {\n  height: 100%;\n  background: var(--color-primary);\n  tran"
        },
        {
          "language": "typescript",
          "line_count": 7,
          "complexity": "simple",
          "code": "function useLoadingIndicator(duration: number) {\n  if (duration < 100) return null;\n  if (duration < 1000) return <Spinner />;\n  if (duration < 5000) return <Skeleton />;\n  return <ProgressBar withCan"
        },
        {
          "language": "typescript",
          "line_count": 24,
          "complexity": "medium",
          "code": "function useSSE(url: string) {\n  const [data, setData] = useState<string[]>([]);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const eventSource = new EventSource("
        },
        {
          "language": "typescript",
          "line_count": 29,
          "complexity": "medium",
          "code": "function useWebSocket(url: string) {\n  const [messages, setMessages] = useState<string[]>([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "elegant-design/interactive/terminals-and-code.md",
      "category": "elegant-design",
      "skill_name": "terminals-and-code",
      "frontmatter": {},
      "metrics": {
        "line_count": 382,
        "code_line_count": 71,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "css",
          "line_count": 26,
          "complexity": "medium",
          "code": ".terminal {\n  background: #0d1117; /* GitHub dark background */\n  color: #c9d1d9;\n  font-family: 'JetBrains Mono', monospace;\n  font-size: 14px;\n  line-height: 1.5;\n  padding: 1rem;\n  border-radius: 8"
        },
        {
          "language": "typescript",
          "line_count": 73,
          "complexity": "complex",
          "code": "// ANSI color mapping (standard 16 colors)\nconst ansiColors = {\n  // Normal colors (30-37)\n  30: '#24292f', // black\n  31: '#cf222e', // red\n  32: '#1a7f37', // green\n  33: '#9a6700', // yellow\n  34: "
        },
        {
          "language": "typescript",
          "line_count": 53,
          "complexity": "complex",
          "code": "function Terminal() {\n  const [history, setHistory] = useState<string[]>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  const [input, setInput] = useState('');\n  const [output, setOutp"
        },
        {
          "language": "css",
          "line_count": 5,
          "complexity": "simple",
          "code": ".terminal-clean {\n  background: #0d1117;\n  /* No effects, perfect clarity */\n}\n"
        },
        {
          "language": "css",
          "line_count": 13,
          "complexity": "simple",
          "code": ".terminal-retro {\n  background: #0d1117;\n  text-shadow: 0 0 2px currentColor;\n  background-image: \n    repeating-linear-gradient(\n      0deg,\n      rgba(0, 0, 0, 0.15),\n      rgba(0, 0, 0, 0.15) 1px,\n"
        },
        {
          "language": "typescript",
          "line_count": 12,
          "complexity": "complex",
          "code": "import { codeToHtml } from 'shiki';\n\nasync function highlightCode(code: string, lang: string) {\n  return await codeToHtml(code, {\n    lang,\n    theme: 'github-dark', // or 'github-light', 'dracula', '"
        },
        {
          "language": "css",
          "line_count": 50,
          "complexity": "medium",
          "code": ".code-block {\n  background: #0d1117;\n  border-radius: 8px;\n  overflow: hidden;\n  margin: 1.5rem 0;\n  box-shadow: var(--shadow-lg);\n  font-family: 'JetBrains Mono', monospace;\n}\n\n.code-header {\n  backg"
        },
        {
          "language": "typescript",
          "line_count": 21,
          "complexity": "medium",
          "code": "function CopyButton({ code }: { code: string }) {\n  const [copied, setCopied] = useState(false);\n\n  const copyCode = async () => {\n    await navigator.clipboard.writeText(code);\n    setCopied(true);\n "
        },
        {
          "language": "css",
          "line_count": 6,
          "complexity": "simple",
          "code": ".code-line-highlighted {\n  background: rgba(255, 255, 0, 0.1);\n  border-left: 3px solid #f9c74f;\n  padding-left: calc(1rem - 3px);\n}\n"
        },
        {
          "language": "typescript",
          "line_count": 25,
          "complexity": "medium",
          "code": "// Using tree-sitter or LSP for semantic analysis\nfunction applySemanticHighlighting(tokens: Token[]) {\n  return tokens.map(token => {\n    if (token.type === 'variable.unused') {\n      return {\n      "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ir/ir-ranking-reranking.md",
      "category": "ir",
      "skill_name": "ir-ranking-reranking",
      "frontmatter": {
        "name": "ir-ranking-reranking",
        "description": "Learning to rank, cross-encoder reranking, ranking features, and evaluation metrics (nDCG, MAP, MRR)"
      },
      "metrics": {
        "line_count": 628,
        "code_line_count": 88,
        "code_examples": 14,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "from sklearn.ensemble import GradientBoostingRegressor\nimport numpy as np\n\n# Pointwise LTR (regression)\nclass PointwiseRanker:\n    def __init__(self):\n        self.model = GradientBoostingRegressor(n_"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "from sentence_transformers import CrossEncoder\n\n# Load cross-encoder for reranking\ncross_encoder = CrossEncoder('cross-encoder/ms-marco-MiniLM-L-6-v2')\n\ndef two_stage_retrieval(query, documents, bi_en"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "medium",
          "code": "def extract_features(query, document, metadata):\n    \"\"\"Extract features for ranking\"\"\"\n    features = {}\n\n    # Lexical features\n    features['bm25_score'] = compute_bm25(query, document)\n    feature"
        },
        {
          "language": "python",
          "line_count": 58,
          "complexity": "complex",
          "code": "import numpy as np\n\ndef dcg_at_k(relevance_scores, k):\n    \"\"\"Discounted Cumulative Gain at rank k\"\"\"\n    relevance = np.array(relevance_scores)[:k]\n    gains = 2**relevance - 1\n    discounts = np.log"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "medium",
          "code": "def hybrid_rank(query, documents, weights={'lexical': 0.3, 'semantic': 0.5, 'popularity': 0.2}):\n    \"\"\"Combine multiple ranking signals\"\"\"\n    scores = np.zeros(len(documents))\n\n    # Lexical score ("
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "import lightgbm as lgb\n\n# Prepare data in LightGBM ranking format\n# features: (n_samples, n_features)\n# labels: relevance scores (0-4)\n# qids: query IDs (group by query)\n\ntrain_data = lgb.Dataset(\n   "
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "def personalized_rank(query, documents, user_profile, base_scores):\n    \"\"\"Adjust ranking based on user preferences\"\"\"\n    personalized_scores = base_scores.copy()\n\n    for i, doc in enumerate(documen"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "medium",
          "code": "def diverse_rerank(candidates, scores, diversity_penalty=0.3):\n    \"\"\"Rerank to promote diversity (MMR-style)\"\"\"\n    ranked = []\n    remaining = list(range(len(candidates)))\n    doc_embeddings = model"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "import random\n\ndef ab_test_ranker(query, documents, ranker_a, ranker_b, user_id):\n    \"\"\"Route user to control or test ranker\"\"\"\n    # Assign user to variant (deterministic based on user_id)\n    varia"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "from functools import lru_cache\nimport hashlib\n\nclass CachedRanker:\n    def __init__(self, ranker, cache_size=1000):\n        self.ranker = ranker\n        self.cache = {}\n        self.cache_size = cach"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c NEVER: Use cross-encoder for full corpus search\nfor doc in million_documents:\n    score = cross_encoder.predict([[query, doc['content']]])\n    # This takes hours!\n\n# \u2705 CORRECT: Two-stage retrieval"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c Don't: Combine scores without normalization\ncombined_score = bm25_score + semantic_score + popularity_score\n# Problem: Scales differ (BM25: 0-100, semantic: 0-1, popularity: 0-1M)\n\n# \u2705 Correct: No"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c Don't: Ignore query groups in LTR training\nranker.fit(features, labels)  # Treats as independent samples\n\n# \u2705 Correct: Specify query groups\nranker.fit(features, labels, group=query_groups)\n# Ensur"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c Don't: Use only top-1 accuracy\naccuracy = int(predicted_order[0] == best_doc_id)\n\n# \u2705 Correct: Use ranking metrics\nndcg = ndcg_at_k(predicted_order, ground_truth_scores, k=10)\nmap_score = mean_ave"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "14 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ir/ir-query-understanding.md",
      "category": "ir",
      "skill_name": "ir-query-understanding",
      "frontmatter": {
        "name": "ir-query-understanding",
        "description": "Query expansion, spell correction, semantic search, query classification, entity recognition, and autocomplete"
      },
      "metrics": {
        "line_count": 667,
        "code_line_count": 90,
        "code_examples": 12,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 58,
          "complexity": "complex",
          "code": "from gensim.models import Word2Vec\nimport numpy as np\n\n# Load pre-trained word embeddings\n# For demo, train small model (use pre-trained in production)\nsentences = [\n    [\"machine\", \"learning\", \"algor"
        },
        {
          "language": "python",
          "line_count": 78,
          "complexity": "complex",
          "code": "import re\nfrom collections import Counter\n\ndef edit_distance(s1, s2):\n    \"\"\"Compute Levenshtein distance\"\"\"\n    if len(s1) < len(s2):\n        return edit_distance(s2, s1)\n\n    if len(s2) == 0:\n      "
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Training data: (query, intent)\ntraining_data = [\n    (\"what is machine learning\", \"in"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "import re\n\nclass QueryEntityExtractor:\n    def __init__(self):\n        # Patterns for common entities\n        self.patterns = {\n            'price': r'\\$?\\d+(?:\\.\\d{2})?',\n            'date': r'\\d{4}-"
        },
        {
          "language": "python",
          "line_count": 62,
          "complexity": "complex",
          "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\n        self.frequency = 0\n\nclass Autocomplete:\n    def __init__(self):\n        self.root = TrieNode()\n\n "
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "medium",
          "code": "def contextual_query_rewrite(query, user_context, conversation_history):\n    \"\"\"Rewrite query with context\"\"\"\n    rewritten = query\n\n    # Resolve pronouns using conversation history\n    if any(pronou"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "from langdetect import detect\n\ndef multilingual_query_processing(query):\n    \"\"\"Detect language and process accordingly\"\"\"\n    try:\n        lang = detect(query)\n    except:\n        lang = 'en'\n\n    # "
        },
        {
          "language": "python",
          "line_count": 47,
          "complexity": "complex",
          "code": "import re\n\ndef segment_query(query):\n    \"\"\"Segment query into structured components\"\"\"\n    segments = {\n        'what': None,    # What user is looking for\n        'where': None,   # Location constra"
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "medium",
          "code": "def relaxed_search(query, search_fn, min_results=3):\n    \"\"\"Progressive query relaxation if no results\"\"\"\n    # Try exact query first\n    results = search_fn(query)\n\n    if len(results) >= min_results"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "# \u274c NEVER: Auto-correct without showing original query\ndef bad_search(query):\n    corrected = spell_correct(query)\n    return search(corrected)\n    # User doesn't know query was changed\n\n# \u2705 CORRECT: "
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# \u274c Don't: Expand query too aggressively\nexpanded = original_query + \" \" + \" \".join(all_synonyms)\n# Query drift: \"python programming\" \u2192 \"python programming snake coding development\"\n\n# \u2705 Correct: Sele"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "# \u274c Don't: Ignore query structure\nquery = \"machine learning NOT deep learning\"\nprocessed = \" \".join(query.split())  # Loses NOT operator\n\n# \u2705 Correct: Preserve operators\ndef parse_query(query):\n    # "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "12 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "tui/bubbletea-architecture.md",
      "category": "tui",
      "skill_name": "bubbletea-architecture",
      "frontmatter": {
        "name": "bubbletea-architecture",
        "description": "Building terminal UIs in Go"
      },
      "metrics": {
        "line_count": 441,
        "code_line_count": 97,
        "code_examples": 9,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "go",
          "line_count": 58,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"fmt\"\n    \"os\"\n\n    tea \"github.com/charmbracelet/bubbletea\"\n)\n\n// Model holds application state\ntype model struct {\n    count int\n}\n\n// Init returns initial command\nfunc (m"
        },
        {
          "language": "go",
          "line_count": 44,
          "complexity": "medium",
          "code": "type tickMsg time.Time\ntype fetchedDataMsg struct {\n    data string\n    err  error\n}\n\n// Command that sends tick message every second\nfunc tickEvery() tea.Cmd {\n    return tea.Tick(time.Second, func(t"
        },
        {
          "language": "go",
          "line_count": 59,
          "complexity": "complex",
          "code": "type model struct {\n    // UI state\n    activeTab   int\n    cursor      int\n    viewport    viewport.Model\n\n    // Data state\n    items       []Item\n    loading     bool\n    error       error\n\n    // "
        },
        {
          "language": "go",
          "line_count": 43,
          "complexity": "medium",
          "code": "func (m model) View() string {\n    var s strings.Builder\n\n    // Header\n    s.WriteString(headerStyle.Render(\"My Application\"))\n    s.WriteString(\"\\n\\n\")\n\n    // Tabs\n    s.WriteString(m.renderTabs())"
        },
        {
          "language": "go",
          "line_count": 52,
          "complexity": "complex",
          "code": "type loadingMsg struct{}\ntype loadedMsg struct {\n    items []Item\n}\ntype errorMsg struct {\n    err error\n}\n\nfunc loadItems() tea.Cmd {\n    return func() tea.Msg {\n        items, err := fetchItemsFromA"
        },
        {
          "language": "go",
          "line_count": 60,
          "complexity": "complex",
          "code": "type page int\n\nconst (\n    listPage page = iota\n    detailPage\n    editPage\n)\n\ntype model struct {\n    currentPage page\n    pageStack   []page\n    selectedID  int\n}\n\nfunc (m model) navigateTo(p page) "
        },
        {
          "language": "go",
          "line_count": 18,
          "complexity": "simple",
          "code": "func TestUpdate(t *testing.T) {\n    m := model{count: 5}\n\n    // Test increment\n    m, _ = m.Update(tea.KeyMsg{Type: tea.KeyRunes, Runes: []rune{'k'}})\n\n    if m.(model).count != 6 {\n        t.Errorf("
        },
        {
          "language": "go",
          "line_count": 11,
          "complexity": "simple",
          "code": "// \u274c BAD\nfunc (m model) View() string {\n    m.count++  // Never mutate in View!\n    return fmt.Sprintf(\"Count: %d\", m.count)\n}\n\n// \u2705 GOOD\nfunc (m model) View() string {\n    return fmt.Sprintf(\"Count: "
        },
        {
          "language": "go",
          "line_count": 18,
          "complexity": "simple",
          "code": "// \u274c BAD\nfunc (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {\n    time.Sleep(5 * time.Second)  // Blocks UI!\n    return m, nil\n}\n\n// \u2705 GOOD\nfunc (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd)"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "debugging/gdb-fundamentals.md",
      "category": "debugging",
      "skill_name": "gdb-fundamentals",
      "frontmatter": {
        "name": "debugging-gdb-fundamentals",
        "description": "Comprehensive guide to GNU Debugger (GDB) for debugging C/C++/Rust programs. Covers breakpoints, stack traces, variable inspection, TUI mode, .gdbinit customization, Python scripting, remote debugging, and core file analysis."
      },
      "metrics": {
        "line_count": 805,
        "code_line_count": 393,
        "code_examples": 42,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# C/C++\ngcc -g program.c -o program\ng++ -g -O0 program.cpp -o program  # -O0 disables optimization\n\n# Rust\ncargo build  # Debug build includes symbols\ncargo build --release  # No debug symbols\n\n# Zig\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "file program\n# program: ELF 64-bit LSB executable, x86-64, with debug_info, not stripped\n\nnm program | grep -i debug\nobjdump -h program | grep debug\n"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Start GDB with program\ngdb ./program\n\n# Start with arguments\ngdb --args ./program arg1 arg2\n\n# Attach to running process\ngdb -p <pid>\ngdb attach <pid>\n\n# Load core dump\ngdb ./program core.12345\n\n# Q"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Run commands from file\ngdb -batch -x commands.gdb ./program\n\n# Example commands.gdb:\n# break main\n# run\n# backtrace\n# quit\n"
        },
        {
          "language": "gdb",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Break at function entry\n(gdb) break main\n(gdb) b calculate_sum\n\n# Break at C++ method\n(gdb) break MyClass::method\n\n# Break at Rust function\n(gdb) break my_crate::my_function\n\n# Conditional breakpoin"
        },
        {
          "language": "gdb",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Break at line number\n(gdb) break file.c:42\n(gdb) b 42  # Current file\n\n# Break at all matching functions\n(gdb) rbreak ^calculate.*  # Regex: all functions starting with \"calculate\"\n"
        },
        {
          "language": "gdb",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Break at memory address\n(gdb) break *0x400567\n"
        },
        {
          "language": "gdb",
          "line_count": 18,
          "complexity": "simple",
          "code": "# List all breakpoints\n(gdb) info breakpoints\n(gdb) i b\n\n# Disable/enable breakpoint\n(gdb) disable 1\n(gdb) enable 1\n\n# Delete breakpoint\n(gdb) delete 1\n(gdb) d 1\n\n# Delete all breakpoints\n(gdb) delete"
        },
        {
          "language": "gdb",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Watch variable (break when value changes)\n(gdb) watch my_variable\n\n# Watch memory location\n(gdb) watch *0x7fffffffe000\n\n# Watch expression\n(gdb) watch count > 100\n\n# Read watchpoint (break on read)\n"
        },
        {
          "language": "gdb",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Catch C++ exceptions\n(gdb) catch throw\n(gdb) catch catch\n\n# Catch system calls\n(gdb) catch syscall open\n(gdb) catch syscall write read\n\n# Catch signals\n(gdb) catch signal SIGSEGV\n\n# Catch library lo"
        },
        {
          "language": "gdb",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Start program\n(gdb) run\n(gdb) r\n\n# Run with arguments\n(gdb) run arg1 arg2\n(gdb) set args arg1 arg2\n(gdb) run\n\n# Run with input redirection\n(gdb) run < input.txt\n\n# Run with environment variables\n(gd"
        },
        {
          "language": "gdb",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Step into (enter functions)\n(gdb) step\n(gdb) s\n\n# Step over (don't enter functions)\n(gdb) next\n(gdb) n\n\n# Step one instruction\n(gdb) stepi\n(gdb) si\n\n# Continue until function returns\n(gdb) finish\n\n#"
        },
        {
          "language": "gdb",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Skip function during stepping\n(gdb) skip function std::string::operator=\n\n# List skipped functions\n(gdb) info skip\n\n# Return from function early\n(gdb) return\n(gdb) return 42  # Return with value\n"
        },
        {
          "language": "gdb",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Full backtrace\n(gdb) backtrace\n(gdb) bt\n\n# Backtrace with local variables\n(gdb) bt full\n\n# Limited backtrace\n(gdb) bt 10  # Show 10 frames\n\n# Backtrace all threads\n(gdb) thread apply all bt\n"
        },
        {
          "language": "gdb",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Show current frame\n(gdb) frame\n(gdb) f\n\n# Select frame by number\n(gdb) frame 2\n(gdb) f 2\n\n# Move up/down stack\n(gdb) up\n(gdb) down\n(gdb) up 3\n\n# Show frame info\n(gdb) info frame\n(gdb) info locals\n(g"
        },
        {
          "language": "gdb",
          "line_count": 19,
          "complexity": "simple",
          "code": "# Print variable\n(gdb) print my_variable\n(gdb) p my_variable\n\n# Print with format\n(gdb) p/x my_variable  # Hexadecimal\n(gdb) p/d my_variable  # Decimal\n(gdb) p/t my_variable  # Binary\n(gdb) p/c my_var"
        },
        {
          "language": "gdb",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Display variable every stop\n(gdb) display count\n(gdb) display expr\n\n# List displays\n(gdb) info display\n\n# Delete display\n(gdb) delete display 1\n"
        },
        {
          "language": "gdb",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Examine memory\n(gdb) x/10xw 0x7fffffffe000  # 10 words in hex\n(gdb) x/10i $pc              # 10 instructions at PC\n(gdb) x/s 0x400678           # String at address\n\n# Format: x/[count][format][size]"
        },
        {
          "language": "gdb",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Show type\n(gdb) ptype my_variable\n(gdb) whatis my_variable\n\n# Show type with size\n(gdb) p sizeof(my_struct)\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Start GDB in TUI mode\ngdb -tui ./program\n\n# Or within GDB:\n(gdb) tui enable\n(gdb) Ctrl-x Ctrl-a  # Toggle TUI mode\n"
        },
        {
          "language": "gdb",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Source + command\n(gdb) layout src\n\n# Assembly + command\n(gdb) layout asm\n\n# Source + assembly\n(gdb) layout split\n\n# Registers + source\n(gdb) layout regs\n\n# Cycle layouts\n(gdb) Ctrl-x 2\n"
        },
        {
          "language": "gdb",
          "line_count": 28,
          "complexity": "medium",
          "code": "# Pretty printing\nset print pretty on\nset print array on\nset print array-indexes on\n\n# History\nset history save on\nset history size 10000\nset history filename ~/.gdb_history\n\n# Disable pagination\nset "
        },
        {
          "language": "gdb",
          "line_count": 2,
          "complexity": "simple",
          "code": "(gdb) source script.py\n"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "import gdb\n\nclass HelloCommand(gdb.Command):\n    \"\"\"Print hello message.\"\"\"\n\n    def __init__(self):\n        super(HelloCommand, self).__init__(\"hello\", gdb.COMMAND_USER)\n\n    def invoke(self, arg, fr"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "import gdb\n\nclass MyStructPrinter:\n    def __init__(self, val):\n        self.val = val\n\n    def to_string(self):\n        return f\"MyStruct(x={self.val['x']}, y={self.val['y']})\"\n\ndef my_struct_printer"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Remote machine\ngdbserver :2345 ./program\ngdbserver :2345 --attach <pid>\n"
        },
        {
          "language": "gdb",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Local machine\n(gdb) target remote 192.168.1.100:2345\n(gdb) continue\n"
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Local machine\nssh -L 2345:localhost:2345 user@remote\ngdb ./program\n(gdb) target remote localhost:2345\n"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Check current limit\nulimit -c\n\n# Enable unlimited core dumps\nulimit -c unlimited\n\n# Set core pattern (Linux)\nsudo sysctl -w kernel.core_pattern=/tmp/core.%e.%p\n"
        },
        {
          "language": "gdb",
          "line_count": 10,
          "complexity": "simple",
          "code": "gdb ./program core.12345\n\n# Or within GDB:\n(gdb) core-file core.12345\n\n# Analyze crash\n(gdb) bt full\n(gdb) info registers\n(gdb) x/10i $pc\n"
        },
        {
          "language": "gdb",
          "line_count": 16,
          "complexity": "simple",
          "code": "# List threads\n(gdb) info threads\n\n# Switch to thread\n(gdb) thread 2\n\n# Apply command to all threads\n(gdb) thread apply all bt\n\n# Thread-specific breakpoint\n(gdb) break main thread 2\n\n# Lock scheduler"
        },
        {
          "language": "gdb",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Compile with minimal optimization\ngcc -g -O1 program.c -o program  # -O1 safer than -O2/-O3\n\n# Use -Og (optimize for debugging)\ngcc -g -Og program.c -o program\n\n# Disable specific optimizations\ngcc "
        },
        {
          "language": "gdb",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Variable optimized out\n(gdb) p my_var\n$1 = <optimized out>\n\n# Try different frame\n(gdb) up\n(gdb) p my_var\n\n# Use disassembly to find value in register\n(gdb) disassemble\n(gdb) info registers\n"
        },
        {
          "language": "gdb",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Run until crash\ngdb ./program\n(gdb) run\n\n# Examine crash\n(gdb) bt full\n(gdb) info registers\n(gdb) x/10i $pc\n(gdb) frame 0\n(gdb) list\n(gdb) info locals\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "valgrind --leak-check=full --show-leak-kinds=all ./program\n"
        },
        {
          "language": "gdb",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Break on thread creation\n(gdb) catch syscall clone\n\n# Enable scheduler debugging\n(gdb) set scheduler-locking step\n\n# Record execution for reverse debugging\n(gdb) record\n(gdb) reverse-continue\n(gdb) "
        },
        {
          "language": "gdb",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Break at Rust function\n(gdb) break my_crate::my_module::my_function\n\n# Pretty-print Rust types\n(gdb) set language rust\n(gdb) p my_vec\n\n# Load Rust pretty printers\n(gdb) source /path/to/rust-gdb\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "rust-gdb ./target/debug/my_program\n"
        },
        {
          "language": "gdb",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Break at method\n(gdb) break MyClass::myMethod\n\n# Print STL containers\n(gdb) p my_vector\n(gdb) p my_map\n\n# Catch exceptions\n(gdb) catch throw\n(gdb) catch catch\n\n# Demangle symbols\n(gdb) set print asm"
        },
        {
          "language": "gdb",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Disable pagination for scripts\nset pagination off\n\n# Disable confirmation prompts\nset confirm off\n\n# Reduce output\nset print elements 10  # Limit array elements\n\n# Use hardware breakpoints (limited,"
        },
        {
          "language": "gdb",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Enable logging\n(gdb) set logging on\n(gdb) set logging file gdb.log\n\n# Log overwrite vs append\n(gdb) set logging overwrite on\n"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "gcc -g -O0 program.c -o program\ngdb -tui ./program\n(gdb) break main\n(gdb) run\n(gdb) step\n(gdb) print my_variable\n(gdb) backtrace\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "42 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "wasm/wasm-browser-integration.md",
      "category": "wasm",
      "skill_name": "wasm-browser-integration",
      "frontmatter": {
        "name": "wasm-browser-integration",
        "description": "Loading WebAssembly modules in browsers with JavaScript interop, DOM access, WebGL, and performance optimization"
      },
      "metrics": {
        "line_count": 658,
        "code_line_count": 121,
        "code_examples": 15,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "javascript",
          "line_count": 33,
          "complexity": "medium",
          "code": "// \u274c Slower: Fetch then instantiate\nasync function loadWasmSlow(url) {\n    const response = await fetch(url);\n    const bytes = await response.arrayBuffer();\n    const { instance } = await WebAssembly"
        },
        {
          "language": "javascript",
          "line_count": 38,
          "complexity": "medium",
          "code": "// Access wasm linear memory\nconst memory = instance.exports.memory;\nconst buffer = memory.buffer;\n\n// Create typed views\nconst uint8View = new Uint8Array(buffer);\nconst int32View = new Int32Array(buf"
        },
        {
          "language": "rust",
          "line_count": 46,
          "complexity": "medium",
          "code": "use wasm_bindgen::prelude::*;\nuse web_sys::{Document, Element, HtmlElement, window};\n\n#[wasm_bindgen(start)]\npub fn main() {\n    let document = window()\n        .unwrap()\n        .document()\n        ."
        },
        {
          "language": "rust",
          "line_count": 107,
          "complexity": "complex",
          "code": "use wasm_bindgen::prelude::*;\nuse web_sys::{WebGlRenderingContext, WebGlProgram, WebGlShader};\n\n#[wasm_bindgen]\npub struct Renderer {\n    context: WebGlRenderingContext,\n    program: WebGlProgram,\n}\n\n"
        },
        {
          "language": "javascript",
          "line_count": 35,
          "complexity": "complex",
          "code": "async function initApp() {\n    if (typeof WebAssembly !== 'object') {\n        console.warn('WebAssembly not supported, using JavaScript fallback');\n        return new JavaScriptImplementation();\n    }"
        },
        {
          "language": "javascript",
          "line_count": 21,
          "complexity": "medium",
          "code": "const WASM_CACHE_NAME = 'wasm-cache-v1';\n\nasync function loadWasmCached(url) {\n    // Try to get from cache\n    const cache = await caches.open(WASM_CACHE_NAME);\n    const cachedResponse = await cache"
        },
        {
          "language": "javascript",
          "line_count": 40,
          "complexity": "medium",
          "code": "// main.js\nconst worker = new Worker('wasm-worker.js');\n\nworker.postMessage({\n    type: 'init',\n    wasmUrl: 'compute.wasm'\n});\n\nworker.postMessage({\n    type: 'compute',\n    data: largeDataset\n});\n\nw"
        },
        {
          "language": "rust",
          "line_count": 29,
          "complexity": "medium",
          "code": "use wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\npub struct ImageProcessor {\n    buffer: Vec<u8>,\n}\n\n#[wasm_bindgen]\nimpl ImageProcessor {\n    #[wasm_bindgen(constructor)]\n    pub fn new(size: usize) ->"
        },
        {
          "language": "javascript",
          "line_count": 20,
          "complexity": "simple",
          "code": "// JavaScript side\nconst processor = new ImageProcessor(1000000);\nconst ptr = processor.get_buffer_ptr();\n\n// Get view of wasm memory\nconst memory = new Uint8Array(\n    processor.__wbg_get_buffer_memo"
        },
        {
          "language": "rust",
          "line_count": 24,
          "complexity": "medium",
          "code": "use wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\npub struct Game {\n    last_timestamp: f64,\n}\n\n#[wasm_bindgen]\nimpl Game {\n    #[wasm_bindgen(constructor)]\n    pub fn new() -> Game {\n        Game { last"
        },
        {
          "language": "javascript",
          "line_count": 12,
          "complexity": "simple",
          "code": "const game = new Game();\n\nfunction gameLoop(timestamp) {\n    const shouldContinue = game.update(timestamp);\n\n    if (shouldContinue) {\n        requestAnimationFrame(gameLoop);\n    }\n}\n\nrequestAnimatio"
        },
        {
          "language": "javascript",
          "line_count": 31,
          "complexity": "complex",
          "code": "class WasmErrorBoundary {\n    constructor(wasmInstance) {\n        this.wasm = wasmInstance;\n        this.fallbackActive = false;\n    }\n\n    async execute(method, ...args) {\n        if (this.fallbackAc"
        },
        {
          "language": "javascript",
          "line_count": 12,
          "complexity": "simple",
          "code": "// Read primitives\nconst i32 = new Int32Array(memory.buffer)[offset / 4];\nconst f64 = new Float64Array(memory.buffer)[offset / 8];\n\n// Read string\nconst bytes = new Uint8Array(memory.buffer, offset, l"
        },
        {
          "language": "javascript",
          "line_count": 11,
          "complexity": "simple",
          "code": "// \u274c NEVER: Ignore memory growth\nconst view = new Uint8Array(instance.exports.memory.buffer);\ninstance.exports.grow_memory(); // Invalidates view!\nview[100] = 42; // May crash or write to wrong locati"
        },
        {
          "language": "javascript",
          "line_count": 31,
          "complexity": "medium",
          "code": "// \u274c Don't: Excessive copying\nfunction processImageBad(imageData) {\n    const ptr = instance.exports.allocate(imageData.length);\n    const memory = new Uint8Array(instance.exports.memory.buffer);\n\n   "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "wasm/wasm-fundamentals.md",
      "category": "wasm",
      "skill_name": "wasm-fundamentals",
      "frontmatter": {
        "name": "wasm-fundamentals",
        "description": "WebAssembly basics including binary format, modules, linear memory, WASI, and core tooling"
      },
      "metrics": {
        "line_count": 422,
        "code_line_count": 123,
        "code_examples": 16,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "wat",
          "line_count": 19,
          "complexity": "complex",
          "code": ";; WAT (WebAssembly Text Format) module\n(module\n  ;; Import host function\n  (import \"env\" \"log\" (func $log (param i32)))\n\n  ;; Linear memory (1 page = 64KB)\n  (memory (export \"memory\") 1)\n\n  ;; Export"
        },
        {
          "language": "rust",
          "line_count": 17,
          "complexity": "simple",
          "code": "// Rust code compiling to wasm\n#[no_mangle]\npub extern \"C\" fn allocate(size: usize) -> *mut u8 {\n    let mut buffer = Vec::with_capacity(size);\n    let ptr = buffer.as_mut_ptr();\n    std::mem::forget("
        },
        {
          "language": "rust",
          "line_count": 10,
          "complexity": "simple",
          "code": "// Using WASI filesystem\nuse std::fs::File;\nuse std::io::Write;\n\nfn main() {\n    // WASI runtime provides sandboxed filesystem\n    let mut file = File::create(\"output.txt\").unwrap();\n    file.write_al"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# View binary format with hexdump\nhexdump -C module.wasm | head -n 5\n# 00000000  00 61 73 6d 01 00 00 00  01 07 01 60 02 7f 7f 01  |.asm.......`....|\n\n# Convert wasm to readable WAT\nwasm2wat module.wa"
        },
        {
          "language": "wat",
          "line_count": 7,
          "complexity": "simple",
          "code": ";; Minimal valid wasm module\n(module\n  (func (export \"answer\") (result i32)\n    i32.const 42\n  )\n)\n"
        },
        {
          "language": "bash",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Compile and run\nwat2wasm minimal.wat\n# Produces minimal.wasm (~20 bytes)\n"
        },
        {
          "language": "rust",
          "line_count": 12,
          "complexity": "simple",
          "code": "// wasm module\nuse std::slice;\n\n#[no_mangle]\npub extern \"C\" fn process_string(ptr: *const u8, len: usize) -> usize {\n    let input = unsafe { slice::from_raw_parts(ptr, len) };\n    let text = std::str"
        },
        {
          "language": "javascript",
          "line_count": 14,
          "complexity": "simple",
          "code": "// JavaScript host\nconst encoder = new TextEncoder();\nconst str = \"Hello, WebAssembly!\";\nconst bytes = encoder.encode(str);\n\n// Write to wasm memory\nconst ptr = instance.exports.allocate(bytes.length)"
        },
        {
          "language": "rust",
          "line_count": 17,
          "complexity": "simple",
          "code": "use std::env;\nuse std::fs;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    if args.len() < 2 {\n        eprintln!(\"Usage: {} <filename>\", args[0]);\n        std::process::exit(1);\n "
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Compile with WASI target\nrustup target add wasm32-wasi\ncargo build --target wasm32-wasi --release\n\n# Run with wasmtime (WASI runtime)\nwasmtime target/wasm32-wasi/release/tool.wasm -- input.txt\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Show module structure\nwasm-objdump -x module.wasm\n\n# Show function disassembly\nwasm-objdump -d module.wasm\n\n# Validate module\nwasm-validate module.wasm\n\n# Optimize module\nwasm-opt -O3 module.wasm -o"
        },
        {
          "language": "wat",
          "line_count": 14,
          "complexity": "simple",
          "code": "(module\n  ;; Multiple memories\n  (memory $data (export \"data\") 1 10)\n  (memory $scratch (export \"scratch\") 1 1)\n\n  (func (export \"use_memories\")\n    ;; Write to data memory\n    (i32.store (memory $dat"
        },
        {
          "language": "rust",
          "line_count": 13,
          "complexity": "simple",
          "code": "// Return error codes via i32\n#[no_mangle]\npub extern \"C\" fn divide(a: i32, b: i32, result: *mut i32) -> i32 {\n    if b == 0 {\n        return -1; // Error code\n    }\n\n    unsafe {\n        *result = a "
        },
        {
          "language": "rust",
          "line_count": 21,
          "complexity": "medium",
          "code": "// \u274c NEVER: Access uninitialized memory\n#[no_mangle]\npub extern \"C\" fn unsafe_read(ptr: *const u8, len: usize) -> u8 {\n    unsafe {\n        *ptr // May be uninitialized or out of bounds\n    }\n}\n\n// \u2705 "
        },
        {
          "language": "wat",
          "line_count": 20,
          "complexity": "simple",
          "code": ";; \u274c Don't: Grow memory without checking result\n(func $grow_unchecked\n  i32.const 10\n  memory.grow\n  drop  ;; Ignoring result (-1 on failure)\n)\n\n;; \u2705 Correct: Check growth success\n(func $grow_checked "
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c Don't: Ship unoptimized debug builds\ncargo build --target wasm32-unknown-unknown\n# Produces large binary with debug info\n\n# \u2705 Correct: Use release mode + optimization\ncargo build --target wasm32-u"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "2 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "product/prd-requirements-gathering.md",
      "category": "product",
      "skill_name": "prd-requirements-gathering",
      "frontmatter": {
        "name": "product-prd-requirements-gathering",
        "description": "Research methods, stakeholder interviews, prioritization frameworks, and requirements synthesis for PRDs"
      },
      "metrics": {
        "line_count": 467,
        "code_line_count": 57,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "markdown",
          "line_count": 27,
          "complexity": "medium",
          "code": "## User Interview Script Template\n\n### Opening (5 min)\n\"Thanks for joining! We're trying to understand how people currently [accomplish goal].\nNo right answers - just want to learn about your experien"
        },
        {
          "language": "markdown",
          "line_count": 26,
          "complexity": "medium",
          "code": "## Stakeholder Interview Guide\n\n### Engineering Lead\n- \"What are our biggest technical constraints for [area]?\"\n- \"What would make this project risky from an eng perspective?\"\n- \"What dependencies or "
        },
        {
          "language": "markdown",
          "line_count": 19,
          "complexity": "simple",
          "code": "## Competitive Feature Matrix\n\n| Feature | Us | Competitor A | Competitor B | Competitor C | Market Gap? |\n|---------|-------|--------------|--------------|--------------|-------------|\n| Real-time co"
        },
        {
          "language": "markdown",
          "line_count": 31,
          "complexity": "medium",
          "code": "## RICE Scoring Template\n\n| Feature | Reach (users/qtr) | Impact (0.25-3) | Confidence (%) | Effort (PM) | RICE Score |\n|---------|-------------------|-----------------|----------------|-------------|"
        },
        {
          "language": "markdown",
          "line_count": 31,
          "complexity": "medium",
          "code": "## MoSCoW Prioritization\n\n### Must Have (Launch Blockers)\n- User authentication (can't ship without it)\n- Data encryption at rest (compliance requirement)\n- Basic reporting dashboard (core value prop)"
        },
        {
          "language": "markdown",
          "line_count": 38,
          "complexity": "medium",
          "code": "## Affinity Mapping Process\n\n### Step 1: Extract Quotes\nRead transcripts and pull verbatim user quotes:\n- \"I spend 2 hours a day copying data between systems\" - User 3\n- \"The export feature crashes on"
        },
        {
          "language": "markdown",
          "line_count": 20,
          "complexity": "simple",
          "code": "## Validation Metrics Template\n\n### Problem: Users spend 2+ hours/day on manual data exports\n**Hypothesis**: API access will reduce manual export time by 80%\n\n**Leading Indicators** (measure during be"
        },
        {
          "language": "markdown",
          "line_count": 24,
          "complexity": "medium",
          "code": "## Research Quality Checklist\n\n### Sample Bias\n- [ ] Interviewed users across segments (new, power, churned)\n- [ ] Included non-users or lost deals (understand why they left)\n- [ ] Avoided only interv"
        },
        {
          "language": "markdown",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c NEVER:\n\"We're thinking of building a real-time chat feature. Would you use that?\"\n[User, wanting to be helpful: \"Sure, that sounds nice!\"]\n\n# \u2705 CORRECT:\n\"When you need quick answers, how do you cu"
        },
        {
          "language": "markdown",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u274c Don't:\n\"We could add a dark mode. Would you use it?\"\n[User: \"Yeah, sure!\" \u2192 Doesn't mean they actually would]\n\n# \u2705 Correct:\n\"How often do you work at night or in low-light environments?\"\n\"Have you"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/topology-point-set.md",
      "category": "math",
      "skill_name": "topology-point-set",
      "frontmatter": {
        "name": "topology-point-set",
        "description": "Point-set topology, metric spaces, open/closed sets, continuity, compactness, separation axioms"
      },
      "metrics": {
        "line_count": 416,
        "code_line_count": 60,
        "code_examples": 9,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "# Conceptual Python representation\nclass TopologicalSpace:\n    def __init__(self, points, open_sets):\n        self.X = set(points)\n        self.tau = set(frozenset(s) for s in open_sets)\n\n        # Ve"
        },
        {
          "language": "python",
          "line_count": 50,
          "complexity": "complex",
          "code": "import numpy as np\n\nclass MetricSpace:\n    def __init__(self, points, metric):\n        \"\"\"\n        points: collection of points\n        metric: function (x, y) -> distance\n        \"\"\"\n        self.X ="
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "class ContinuousMap:\n    def __init__(self, domain, codomain, func):\n        self.X = domain  # TopologicalSpace\n        self.Y = codomain  # TopologicalSpace\n        self.f = func\n\n    def preimage(s"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "def is_compact_finite(space, subset):\n    \"\"\"\n    Check compactness for finite spaces (finite open covers)\n    Compact: every open cover has finite subcover\n    \"\"\"\n    # Generate all possible open co"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "medium",
          "code": "def is_connected(space):\n    \"\"\"\n    Space is connected if only clopen (closed and open) sets are \u2205 and X\n    Equivalently: no separation into two disjoint non-empty open sets\n    \"\"\"\n    X = space.X\n"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "def is_hausdorff(space):\n    \"\"\"T2: Distinct points have disjoint neighborhoods\"\"\"\n    for x in space.X:\n        for y in space.X:\n            if x == y:\n                continue\n\n            # Find d"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "def generates_topology(space, base):\n    \"\"\"Check if base generates the topology\"\"\"\n    # Every open set should be union of base elements\n    for open_set in space.tau:\n        if not open_set:  # Emp"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "def product_topology(space1, space2):\n    \"\"\"Construct product topology X \u00d7 Y\"\"\"\n    # Cartesian product of underlying sets\n    product_points = {(x, y) for x in space1.X for y in space2.X}\n\n    # Bas"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Common metrics\neuclidean = lambda p, q: np.sqrt(sum((a-b)**2 for a,b in zip(p,q)))\nmanhattan = lambda p, q: sum(abs(a-b) for a,b in zip(p,q))\ndiscrete = lambda p, q: 0 if p == q else 1\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/category-theory-foundations.md",
      "category": "math",
      "skill_name": "category-theory-foundations",
      "frontmatter": {
        "name": "category-theory-foundations",
        "description": "Category theory foundations including categories, functors, natural transformations, limits, and adjunctions"
      },
      "metrics": {
        "line_count": 538,
        "code_line_count": 98,
        "code_examples": 12,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "from abc import ABC, abstractmethod\nfrom typing import TypeVar, Generic, Callable\n\nA = TypeVar('A')\nB = TypeVar('B')\nC = TypeVar('C')\n\nclass Category(ABC):\n    \"\"\"Abstract base for category\"\"\"\n\n    @a"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "def category_examples():\n    \"\"\"Common mathematical categories\"\"\"\n    return {\n        'Set': 'Sets and functions',\n        'Grp': 'Groups and group homomorphisms',\n        'Ring': 'Rings and ring hom"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "class Functor(ABC):\n    \"\"\"Abstract functor between categories\"\"\"\n\n    def __init__(self, source_category, target_category):\n        self.source = source_category\n        self.target = target_category"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "class ContravariantFunctor(Functor):\n    \"\"\"F: C^op \u2192 D (reverses arrows)\"\"\"\n\n    @abstractmethod\n    def map_morphism(self, f):\n        \"\"\"F(f: A \u2192 B): F(B) \u2192 F(A) (reversed!)\"\"\"\n        pass\n\n# Exam"
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "class NaturalTransformation:\n    \"\"\"Natural transformation \u03b7: F \u21d2 G\"\"\"\n\n    def __init__(self, source_functor, target_functor):\n        self.F = source_functor\n        self.G = target_functor\n        "
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "class Product:\n    \"\"\"Categorical product A \u00d7 B\"\"\"\n\n    def __init__(self, A, B):\n        self.A = A\n        self.B = B\n        self.product = (A, B)  # Conceptual tuple\n\n    def projection1(self):\n  "
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "class Coproduct:\n    \"\"\"Categorical coproduct A + B (disjoint union)\"\"\"\n\n    def __init__(self, A, B):\n        self.A = A\n        self.B = B\n\n    def injection1(self):\n        \"\"\"\u03b9\u2081: A \u2192 A + B\"\"\"\n    "
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "class Adjunction:\n    \"\"\"F \u22a3 G: Adjunction between functors\"\"\"\n\n    def __init__(self, left_adjoint, right_adjoint):\n        self.F = left_adjoint  # F: C \u2192 D\n        self.G = right_adjoint  # G: D \u2192 "
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "class Monad:\n    \"\"\"Monad (M, \u03b7, \u03bc)\"\"\"\n\n    def __init__(self, functor_m):\n        self.M = functor_m\n\n    def unit(self, x):\n        \"\"\"\u03b7: a \u2192 M(a) (return/pure)\"\"\"\n        raise NotImplementedError\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "def yoneda_embedding():\n    \"\"\"\n    Yoneda: C \u2192 Set^(C^op)\n    A \u21a6 hom(-, A)\n    Fully faithful embedding\n    \"\"\"\n    def embed(obj):\n        # Returns functor hom(-, obj)\n        return lambda x: f\"h"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "# Conceptual: H_n functor\nclass HomologyFunctor(Functor):\n    def __init__(self, n):\n        self.degree = n\n\n    def map_object(self, space):\n        \"\"\"H_n(X) = n-th homology group\"\"\"\n        return"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "def curry_howard_lambek():\n    \"\"\"Three-way correspondence\"\"\"\n    return {\n        'Conjunction (A \u2227 B)': 'Product type (A, B) | A \u00d7 B',\n        'Disjunction (A \u2228 B)': 'Sum type Either A B | A + B',\n "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "12 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/abstract-algebra.md",
      "category": "math",
      "skill_name": "abstract-algebra",
      "frontmatter": {
        "name": "abstract-algebra",
        "description": "Abstract algebra including groups, rings, fields, Galois theory, and algebraic structures"
      },
      "metrics": {
        "line_count": 595,
        "code_line_count": 78,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 70,
          "complexity": "complex",
          "code": "from abc import ABC, abstractmethod\nfrom typing import Generic, TypeVar\n\nT = TypeVar('T')\n\nclass Group(ABC, Generic[T]):\n    \"\"\"Abstract base class for groups\"\"\"\n    \n    @abstractmethod\n    def op(se"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "def is_subgroup(G: Group, H: set) -> bool:\n    \"\"\"Check if H is a subgroup of G\"\"\"\n    if not H:\n        return False\n    \n    # Check closure\n    for a in H:\n        for b in H:\n            if G.op(a"
        },
        {
          "language": "python",
          "line_count": 69,
          "complexity": "complex",
          "code": "class Ring(ABC, Generic[T]):\n    \"\"\"Abstract base class for rings\"\"\"\n    \n    @abstractmethod\n    def add(self, a: T, b: T) -> T:\n        pass\n    \n    @abstractmethod\n    def multiply(self, a: T, b: "
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "medium",
          "code": "def gcd_polynomials(p: list, q: list) -> list:\n    \"\"\"Euclidean algorithm for polynomial GCD\"\"\"\n    poly_ring = PolynomialRing()\n    \n    def degree(poly):\n        return len(poly) - 1 if poly != [0] "
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "class FiniteField:\n    \"\"\"Finite field \u2124/p\u2124 for prime p\"\"\"\n    \n    def __init__(self, p: int):\n        if not self._is_prime(p):\n            raise ValueError(f\"{p} is not prime\")\n        self.p = p\n "
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "class GroupHomomorphism:\n    def __init__(self, domain: Group, codomain: Group, mapping: callable):\n        self.domain = domain\n        self.codomain = codomain\n        self.phi = mapping\n    \n    de"
        },
        {
          "language": "python",
          "line_count": 45,
          "complexity": "complex",
          "code": "class FieldExtension:\n    \"\"\"Represent field extension K/F\"\"\"\n    \n    def __init__(self, base_field, extension_field, minimal_polynomial):\n        self.F = base_field\n        self.K = extension_field"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "medium",
          "code": "def quotient_group(G: Group, N: set, elements: set):\n    \"\"\"\n    Construct quotient group G/N\n    Elements are cosets {gN : g \u2208 G}\n    \"\"\"\n    cosets = {}\n    \n    for g in elements:\n        # Compute"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "def chinese_remainder_theorem(moduli: list[int], remainders: list[int]) -> int:\n    \"\"\"\n    Solve system: x \u2261 a_i (mod n_i)\n    Requires moduli to be pairwise coprime\n    \"\"\"\n    from math import gcd\n"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "def sylow_p_subgroups(G: Group, elements: set, p: int) -> list:\n    \"\"\"\n    Find Sylow p-subgroups (maximal p-subgroups)\n    For group G with |G| = p^k \u00b7 m where p \u2224 m\n    \"\"\"\n    n = len(elements)\n  "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/number-theory.md",
      "category": "math",
      "skill_name": "number-theory",
      "frontmatter": {
        "name": "number-theory",
        "description": "Number theory including primes, modular arithmetic, Diophantine equations, and cryptographic applications"
      },
      "metrics": {
        "line_count": 555,
        "code_line_count": 88,
        "code_examples": 11,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "import math\nfrom typing import Tuple\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"Euclidean algorithm for GCD\"\"\"\n    while b:\n        a, b = b, a % b\n    return abs(a)\n\ndef extended_gcd(a: int, b: int) -> "
        },
        {
          "language": "python",
          "line_count": 56,
          "complexity": "complex",
          "code": "def is_prime(n: int) -> bool:\n    \"\"\"Trial division primality test\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    \n    # Check odd"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "def sieve_of_eratosthenes(limit: int) -> list[int]:\n    \"\"\"Generate all primes up to limit\"\"\"\n    if limit < 2:\n        return []\n    \n    is_prime = [True] * (limit + 1)\n    is_prime[0] = is_prime[1]"
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "medium",
          "code": "def mod_inverse(a: int, n: int) -> int:\n    \"\"\"\n    Compute a^(-1) mod n (multiplicative inverse)\n    Exists iff gcd(a, n) = 1\n    \"\"\"\n    gcd_val, x, _ = extended_gcd(a, n)\n    \n    if gcd_val != 1:\n"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "medium",
          "code": "def euler_phi(n: int) -> int:\n    \"\"\"\n    \u03c6(n) = |{k : 1 \u2264 k \u2264 n, gcd(k,n) = 1}|\n    Number of integers coprime to n\n    \"\"\"\n    result = n\n    p = 2\n    \n    # Factor n and apply \u03c6(p^k) = p^(k-1)(p-1"
        },
        {
          "language": "python",
          "line_count": 68,
          "complexity": "complex",
          "code": "def legendre_symbol(a: int, p: int) -> int:\n    \"\"\"\n    Compute (a/p) using Euler's criterion:\n    (a/p) \u2261 a^((p-1)/2) (mod p)\n    \"\"\"\n    if not is_prime(p) or p == 2:\n        raise ValueError(\"p mus"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "medium",
          "code": "def linear_diophantine(a: int, b: int, c: int) -> Tuple[int, int]:\n    \"\"\"\n    Solve ax + by = c\n    Solution exists iff gcd(a, b) | c\n    Returns one particular solution (x0, y0)\n    General solution"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "medium",
          "code": "def solve_pell(D: int, limit: int = 100) -> Tuple[int, int]:\n    \"\"\"\n    Find smallest solution to x\u00b2 - Dy\u00b2 = 1\n    Using continued fraction of \u221aD\n    \"\"\"\n    if int(D**0.5)**2 == D:\n        raise Val"
        },
        {
          "language": "python",
          "line_count": 50,
          "complexity": "medium",
          "code": "def generate_rsa_keys(p: int, q: int, e: int = 65537):\n    \"\"\"\n    Generate RSA key pair\n    p, q: distinct primes\n    e: public exponent (commonly 65537)\n    \"\"\"\n    if not (is_prime(p) and is_prime("
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "def prime_factorization(n: int) -> dict:\n    \"\"\"Return prime factorization as {prime: exponent}\"\"\"\n    factors = {}\n    d = 2\n    \n    while d * d <= n:\n        while n % d == 0:\n            factors[d"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "def fermat_primality_test(n: int, k: int = 5) -> bool:\n    \"\"\"\n    Probabilistic primality test using Fermat's Little Theorem\n    k: number of rounds\n    \"\"\"\n    if n < 2:\n        return False\n    if "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/graph/advanced-graph-algorithms.md",
      "category": "math",
      "skill_name": "advanced-graph-algorithms",
      "frontmatter": {
        "name": "Advanced Graph Algorithms",
        "description": "Specialized graph algorithms including graph decomposition, vertex coloring, matching algorithms, and 2024 research advances"
      },
      "metrics": {
        "line_count": 656,
        "code_line_count": 66,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 95,
          "complexity": "complex",
          "code": "from typing import Dict, Set, Optional, List\n\ndef greedy_coloring(graph: 'AdjacencyList') -> Dict[int, int]:\n    \"\"\"\n    Greedy graph coloring algorithm\n\n    Time: O(V + E)\n    Approximation: Uses at "
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "medium",
          "code": "def edge_coloring_vizing(graph: 'AdjacencyList') -> Dict[tuple[int, int], int]:\n    \"\"\"\n    Edge coloring using Vizing's algorithm\n\n    Vizing's Theorem: \u03c7'(G) \u2208 {\u0394(G), \u0394(G) + 1}\n    where \u03c7'(G) = edg"
        },
        {
          "language": "python",
          "line_count": 117,
          "complexity": "complex",
          "code": "class BlossomMatching:\n    \"\"\"\n    Edmonds' blossom algorithm for maximum matching\n\n    Simplified implementation - full version is complex\n\n    Time: O(V\u00b2 \u00d7 E)\n    \"\"\"\n\n    def __init__(self, graph: "
        },
        {
          "language": "python",
          "line_count": 50,
          "complexity": "medium",
          "code": "def vertex_cover_approximation(graph: 'AdjacencyList') -> Set[int]:\n    \"\"\"\n    2-approximation for minimum vertex cover\n\n    Algorithm: Maximal matching gives 2-approximation\n    (Include both endpoi"
        },
        {
          "language": "python",
          "line_count": 70,
          "complexity": "complex",
          "code": "def find_all_cliques_bron_kerbosch(graph: 'AdjacencyList'\n                                  ) -> List[Set[int]]:\n    \"\"\"\n    Bron-Kerbosch algorithm for finding all maximal cliques\n\n    Time: O(3^(V/3"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "class GraphAttentionNetwork:\n    \"\"\"\n    Graph Attention Network (GAT) integration\n\n    2024 advances: Multi-head attention, edge features, heterogeneous graphs\n    \"\"\"\n\n    def __init__(self, num_fea"
        },
        {
          "language": "python",
          "line_count": 62,
          "complexity": "complex",
          "code": "def quantum_inspired_max_cut(graph: 'WeightedGraph') -> tuple[Set[int], Set[int]]:\n    \"\"\"\n    Quantum-inspired approximation for maximum cut\n\n    Based on 2024 research: Classical simulation of quant"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "class NPHardGraphProblems:\n    \"\"\"Strategies for NP-hard graph problems\"\"\"\n\n    @staticmethod\n    def choose_approach(problem: str, graph_size: int) -> str:\n        \"\"\"Select approach based on problem"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# WRONG: Bron-Kerbosch on large graph\nlarge_graph = AdjacencyList(1000)\n# ... add edges ...\ncliques = find_all_cliques_bron_kerbosch(large_graph)  # May never finish!\n\n# CORRECT: Use heuristics or app"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Expect exact minimum vertex cover\ncover = minimum_vertex_cover_exact(graph)  # NP-hard!\n\n# CORRECT: Use approximation with known bounds\ncover = vertex_cover_approximation(graph)  # 2-approxim"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/graph/network-flow-algorithms.md",
      "category": "math",
      "skill_name": "network-flow-algorithms",
      "frontmatter": {
        "name": "Network Flow Algorithms",
        "description": "Maximum flow, minimum cut, Ford-Fulkerson, Edmonds-Karp, and flow-based algorithms for capacity-constrained network optimization"
      },
      "metrics": {
        "line_count": 650,
        "code_line_count": 53,
        "code_examples": 9,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 103,
          "complexity": "complex",
          "code": "from typing import Dict, List, Tuple, Optional\nfrom collections import defaultdict, deque\nimport math\n\nclass FlowNetwork:\n    \"\"\"Flow network representation\"\"\"\n\n    def __init__(self, num_vertices: in"
        },
        {
          "language": "python",
          "line_count": 85,
          "complexity": "complex",
          "code": "def edmonds_karp(network: FlowNetwork, source: int, sink: int\n                ) -> Tuple[float, Dict[int, Dict[int, float]]]:\n    \"\"\"\n    Edmonds-Karp maximum flow algorithm\n\n    Uses BFS to find shor"
        },
        {
          "language": "python",
          "line_count": 64,
          "complexity": "complex",
          "code": "def find_min_cut(network: FlowNetwork, source: int, sink: int\n                ) -> Tuple[set, set, List[Tuple[int, int]], float]:\n    \"\"\"\n    Find minimum cut after computing maximum flow\n\n    Must ru"
        },
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "def maximum_bipartite_matching(left_vertices: set,\n                               right_vertices: set,\n                               edges: List[Tuple[int, int]]\n                              ) -> Li"
        },
        {
          "language": "python",
          "line_count": 88,
          "complexity": "complex",
          "code": "class PushRelabel:\n    \"\"\"Push-relabel maximum flow algorithm\"\"\"\n\n    def __init__(self, network: FlowNetwork, source: int, sink: int):\n        self.network = network\n        self.source = source\n    "
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "def choose_flow_algorithm(graph_info: dict) -> str:\n    \"\"\"Select optimal max flow algorithm\"\"\"\n    num_vertices = graph_info[\"num_vertices\"]\n    num_edges = graph_info[\"num_edges\"]\n    max_capacity ="
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "medium",
          "code": "def decompose_flow(network: FlowNetwork, source: int, sink: int, flow_dict: dict\n                  ) -> List[Tuple[List[int], float]]:\n    \"\"\"\n    Decompose flow into paths and cycles\n\n    Returns: Li"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: Flow algorithms for directed graphs only\nundirected_graph = ...\nmax_flow = edmonds_karp(undirected_graph, s, t)  # Incorrect!\n\n# CORRECT: Convert undirected to directed (both directions)\nfor "
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# WRONG: Ford-Fulkerson with large/fractional capacities\nnetwork.add_edge(0, 1, 1e9)  # May take 10\u2079 iterations!\n\n# CORRECT: Use Edmonds-Karp for large capacities\nmax_flow = edmonds_karp(network, s, t"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/graph/graph-data-structures.md",
      "category": "math",
      "skill_name": "graph-data-structures",
      "frontmatter": {
        "name": "Graph Data Structures",
        "description": "Efficient graph representations including adjacency matrices, adjacency lists, edge lists, and specialized structures with space-time tradeoffs"
      },
      "metrics": {
        "line_count": 651,
        "code_line_count": 78,
        "code_examples": 11,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 78,
          "complexity": "complex",
          "code": "from typing import Optional\nimport numpy as np\n\nclass AdjacencyMatrix:\n    \"\"\"Graph representation as 2D matrix\"\"\"\n\n    def __init__(self, num_vertices: int, directed: bool = False):\n        self.num_"
        },
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "class MatrixOperations:\n    \"\"\"Advanced operations on adjacency matrices\"\"\"\n\n    @staticmethod\n    def transpose(matrix: np.ndarray) -> np.ndarray:\n        \"\"\"Transpose for directed graph reversal\"\"\"\n"
        },
        {
          "language": "python",
          "line_count": 108,
          "complexity": "complex",
          "code": "from dataclasses import dataclass, field\nfrom collections import defaultdict\nfrom typing import List, Tuple, Dict, Set\n\n@dataclass\nclass WeightedEdge:\n    \"\"\"Edge with destination and weight\"\"\"\n    de"
        },
        {
          "language": "python",
          "line_count": 69,
          "complexity": "complex",
          "code": "@dataclass\nclass Edge:\n    \"\"\"Single edge with source, destination, weight\"\"\"\n    src: int\n    dest: int\n    weight: float = 1.0\n\n    def __lt__(self, other):\n        \"\"\"Compare by weight for sorting\""
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "class CSRGraph:\n    \"\"\"\n    Compressed Sparse Row format for very large sparse graphs\n\n    Space: O(V + E) with excellent cache locality\n    Best for: Large graphs, read-heavy workloads, parallel proc"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "def choose_representation(graph_info: dict) -> str:\n    \"\"\"\n    Choose optimal representation based on graph characteristics\n\n    Factors:\n    - Density: |E| vs |V|\u00b2\n    - Operations: queries vs itera"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "class HybridGraph:\n    \"\"\"Support multiple representations with lazy conversion\"\"\"\n\n    def __init__(self, num_vertices: int, directed: bool = False):\n        self.num_vertices = num_vertices\n        "
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "class GraphIterators:\n    \"\"\"Efficient iteration over graph elements\"\"\"\n\n    @staticmethod\n    def vertices(graph: AdjacencyList):\n        \"\"\"Iterate over vertices\"\"\"\n        for v in range(graph.num_"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# WRONG: Matrix for sparse graph\nsparse_graph = AdjacencyMatrix(10000, directed=False)\nsparse_graph.add_edge(0, 1)\nsparse_graph.add_edge(5, 99)\n# Wastes 10000\u00b2 = 100M entries for 2 edges!\n\n# CORRECT: "
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# WRONG: Repeated edge queries on adjacency list\nfor u in vertices:\n    for v in vertices:\n        if adj_list.has_edge(u, v):  # O(degree(u)) each\n            process(u, v)\n# Total: O(V\u00b2 \u00d7 avg_degree"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# WRONG: Remove edges while iterating\nfor edge in graph.adj[u]:\n    if edge.weight < threshold:\n        graph.remove_edge(u, edge.dest)  # Modifies list!\n\n# CORRECT: Collect then remove\nto_remove = [e"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/graph/graph-theory-fundamentals.md",
      "category": "math",
      "skill_name": "graph-theory-fundamentals",
      "frontmatter": {
        "name": "Graph Theory Fundamentals",
        "description": "Core concepts, terminology, and mathematical foundations of graph theory including graph types, properties, and fundamental theorems"
      },
      "metrics": {
        "line_count": 600,
        "code_line_count": 105,
        "code_examples": 15,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Set, Tuple, Optional\n\n@dataclass\nclass Graph:\n    \"\"\"Abstract graph representation\"\"\"\n    vertices: Set[int]\n    edges: Set[Tuple[int, int]]\n    di"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "class GraphType:\n    \"\"\"Common graph classifications\"\"\"\n\n    @staticmethod\n    def is_undirected(graph: Graph) -> bool:\n        \"\"\"Edges have no direction: {u,v} = {v,u}\"\"\"\n        return not graph.di"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "@dataclass\nclass WeightedGraph(Graph):\n    \"\"\"Graph with weighted edges\"\"\"\n    weights: dict[Tuple[int, int], float] = None\n\n    def __post_init__(self):\n        super().__post_init__()\n        if sel"
        },
        {
          "language": "python",
          "line_count": 58,
          "complexity": "complex",
          "code": "class SpecialGraphs:\n    \"\"\"Factory for common graph types\"\"\"\n\n    @staticmethod\n    def complete_graph(n: int) -> Graph:\n        \"\"\"K\u2099: Every vertex connected to every other\n        |V| = n, |E| = n("
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "class GraphProperties:\n    \"\"\"Compute graph-theoretic properties\"\"\"\n\n    @staticmethod\n    def degree_sequence(graph: Graph) -> list[int]:\n        \"\"\"Sorted list of vertex degrees\"\"\"\n        degrees ="
        },
        {
          "language": "python",
          "line_count": 58,
          "complexity": "complex",
          "code": "class ConnectivityProperties:\n    \"\"\"Graph connectivity analysis\"\"\"\n\n    @staticmethod\n    def is_connected(graph: Graph) -> bool:\n        \"\"\"Path exists between every pair of vertices (undirected)\"\"\""
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "class PlanarityProperties:\n    \"\"\"Planar graph properties\"\"\"\n\n    @staticmethod\n    def eulers_formula(vertices: int, edges: int, faces: int) -> bool:\n        \"\"\"V - E + F = 2 for connected planar gra"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "def handshaking_lemma(graph: Graph) -> dict:\n    \"\"\"\n    Theorem: \u2211deg(v) = 2|E|\n\n    Corollary: Number of odd-degree vertices is even\n    \"\"\"\n    degree_sum = sum(graph.degree(v) for v in graph.verti"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "def eulers_planar_formula(v: int, e: int, f: int) -> dict:\n    \"\"\"\n    Theorem: For connected planar graph, V - E + F = 2\n\n    Applications:\n    - Bounds on edges: E \u2264 3V - 6 (V \u2265 3)\n    - Bounds on f"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "def is_kuratowski_subgraph(graph: Graph) -> bool:\n    \"\"\"\n    Theorem: Graph is planar \u27fa contains no K\u2085 or K\u2083,\u2083 subdivision\n\n    K\u2085 = complete graph on 5 vertices\n    K\u2083,\u2083 = complete bipartite graph w"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "class GraphModeling:\n    \"\"\"Convert real-world problems to graphs\"\"\"\n\n    @staticmethod\n    def social_network(users: list[str],\n                      friendships: list[Tuple[str, str]]) -> Graph:\n   "
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "medium",
          "code": "def analyze_graph_structure(graph: Graph) -> dict:\n    \"\"\"Comprehensive graph analysis\"\"\"\n    props = GraphProperties()\n    conn = ConnectivityProperties()\n\n    analysis = {\n        \"order\": graph.ord"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# WRONG: Treating directed as undirected\ndef degree(graph, v):\n    return sum(1 for u, w in graph.edges if u == v or w == v)\n    # Fails for directed graphs\n\n# CORRECT: Check graph type\ndef degree(gra"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# WRONG: Assume graph is non-empty\ndef analyze(graph):\n    max_deg = max(graph.degree(v) for v in graph.vertices)\n    # Crashes on empty graph\n\n# CORRECT: Handle empty graphs\ndef analyze(graph: Graph)"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# WRONG: Recalculate degrees repeatedly\nfor v in vertices:\n    if graph.degree(v) > threshold:  # O(|E|) each call\n        process(v)\n\n# CORRECT: Cache degrees\ndegrees = {v: graph.degree(v) for v in g"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/graph/graph-traversal-algorithms.md",
      "category": "math",
      "skill_name": "graph-traversal-algorithms",
      "frontmatter": {
        "name": "Graph Traversal Algorithms",
        "description": "Breadth-first search, depth-first search, topological sort, strongly connected components, and traversal-based graph analysis"
      },
      "metrics": {
        "line_count": 739,
        "code_line_count": 76,
        "code_examples": 11,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 81,
          "complexity": "complex",
          "code": "from collections import deque\nfrom typing import List, Set, Dict, Optional\n\ndef bfs(graph: 'AdjacencyList', start: int) -> Dict[int, int]:\n    \"\"\"\n    Breadth-first search from start vertex\n\n    Retur"
        },
        {
          "language": "python",
          "line_count": 71,
          "complexity": "complex",
          "code": "class BFSApplications:\n    \"\"\"Common BFS-based algorithms\"\"\"\n\n    @staticmethod\n    def shortest_path_unweighted(graph: 'AdjacencyList',\n                                 start: int, end: int) -> Optio"
        },
        {
          "language": "python",
          "line_count": 81,
          "complexity": "complex",
          "code": "from typing import Callable\n\ndef dfs_recursive(graph: 'AdjacencyList', start: int,\n                 visited: Optional[Set[int]] = None,\n                 preorder: Optional[List[int]] = None,\n         "
        },
        {
          "language": "python",
          "line_count": 154,
          "complexity": "complex",
          "code": "class DFSApplications:\n    \"\"\"Common DFS-based algorithms\"\"\"\n\n    @staticmethod\n    def has_cycle_undirected(graph: 'AdjacencyList') -> bool:\n        \"\"\"\n        Detect cycle in undirected graph\n\n    "
        },
        {
          "language": "python",
          "line_count": 67,
          "complexity": "complex",
          "code": "def topological_sort_dfs(graph: 'AdjacencyList') -> Optional[List[int]]:\n    \"\"\"\n    Topological sort using DFS postorder\n\n    Returns: Topologically sorted vertices, or None if cycle exists\n    \"\"\"\n "
        },
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "def strongly_connected_components(graph: 'AdjacencyList') -> List[Set[int]]:\n    \"\"\"\n    Find strongly connected components using Kosaraju's algorithm\n\n    Steps:\n    1. DFS on original graph to get f"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "medium",
          "code": "def dfs_with_actions(graph: 'AdjacencyList',\n                     start: int,\n                     pre_action: Callable[[int], None],\n                     post_action: Callable[[int], None]):\n    \"\"\"G"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "def dfs_find(graph: 'AdjacencyList', start: int,\n             predicate: Callable[[int], bool]) -> Optional[int]:\n    \"\"\"DFS that terminates early when predicate is satisfied\"\"\"\n    visited = set()\n\n "
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# WRONG: Only traverses from vertex 0\nvisited = bfs(graph, start=0)\n# Misses disconnected components\n\n# CORRECT: Traverse all components\nall_visited = set()\nfor start in range(graph.num_vertices):\n   "
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# WRONG: Remove edges during DFS\ndef dfs(u):\n    for v in graph.neighbors(u):\n        graph.remove_edge(u, v)  # Modifies during iteration!\n        dfs(v)\n\n# CORRECT: Collect then modify\ndef dfs(u, to"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# WRONG: Topological sort without cycle check\nresult = topological_sort_dfs(graph)\nprocess(result)  # Crashes if result is None\n\n# CORRECT: Check for cycles first\nresult = topological_sort_dfs(graph)\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/graph/minimum-spanning-tree.md",
      "category": "math",
      "skill_name": "minimum-spanning-tree",
      "frontmatter": {
        "name": "Minimum Spanning Tree Algorithms",
        "description": "Kruskal and Prim algorithms for finding minimum spanning trees in weighted undirected graphs with union-find and priority queue optimizations"
      },
      "metrics": {
        "line_count": 619,
        "code_line_count": 66,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 119,
          "complexity": "complex",
          "code": "from typing import List, Set, Tuple\nfrom dataclasses import dataclass\n\n@dataclass\nclass Edge:\n    \"\"\"Weighted edge for MST algorithms\"\"\"\n    u: int\n    v: int\n    weight: float\n\n    def __lt__(self, o"
        },
        {
          "language": "python",
          "line_count": 48,
          "complexity": "medium",
          "code": "def kruskal_with_constraints(num_vertices: int,\n                             edges: List[Edge],\n                             required_edges: Set[Tuple[int, int]] = None,\n                             f"
        },
        {
          "language": "python",
          "line_count": 81,
          "complexity": "complex",
          "code": "import heapq\nfrom typing import Optional\nimport math\n\n@dataclass\nclass MSTResult:\n    \"\"\"Results from Prim's algorithm\"\"\"\n    edges: List[Edge]\n    total_weight: float\n    parents: dict[int, Optional["
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "medium",
          "code": "def prim_dense(graph: 'WeightedGraph') -> MSTResult:\n    \"\"\"\n    Prim's algorithm optimized for dense graphs using simple array\n\n    Time: O(V\u00b2) - better than O(E log V) when E \u2248 V\u00b2\n    \"\"\"\n    visite"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "def choose_mst_algorithm(graph_info: dict) -> str:\n    \"\"\"Select optimal MST algorithm based on graph properties\"\"\"\n    num_vertices = graph_info[\"num_vertices\"]\n    num_edges = graph_info[\"num_edges\""
        },
        {
          "language": "python",
          "line_count": 69,
          "complexity": "complex",
          "code": "class MSTVariants:\n    \"\"\"Common MST-related problems\"\"\"\n\n    @staticmethod\n    def second_best_mst(num_vertices: int, edges: List[Edge]\n                       ) -> Tuple[List[Edge], float]:\n        \""
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "medium",
          "code": "def hierarchical_clustering(num_vertices: int,\n                           edges: List[Edge],\n                           num_clusters: int) -> List[Set[int]]:\n    \"\"\"\n    Perform hierarchical clusterin"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: MST only defined for undirected graphs\ndirected_graph = WeightedGraph(5, directed=True)\nresult = prim(directed_graph)  # Incorrect!\n\n# CORRECT: Use minimum spanning arborescence for directed\n"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# WRONG: Assume graph is connected\nmst_edges, weight = kruskal(num_vertices, edges)\nprint(f\"MST weight: {weight}\")  # May be incomplete!\n\n# CORRECT: Check edge count or catch exception\ntry:\n    mst_ed"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: Kruskal on dense graph with adjacency matrix\ndense_graph = WeightedGraph(1000, directed=False)\n# ... add ~500,000 edges ...\nedges = dense_graph.all_edges()  # Expensive conversion!\nmst = krus"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/graph/shortest-path-algorithms.md",
      "category": "math",
      "skill_name": "shortest-path-algorithms",
      "frontmatter": {
        "name": "Shortest Path Algorithms",
        "description": "Dijkstra, Bellman-Ford, Floyd-Warshall, and A* algorithms for finding shortest paths in weighted graphs with various constraints"
      },
      "metrics": {
        "line_count": 701,
        "code_line_count": 73,
        "code_examples": 11,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 88,
          "complexity": "complex",
          "code": "import heapq\nfrom typing import Dict, List, Tuple, Optional\nfrom dataclasses import dataclass\nimport math\n\n@dataclass\nclass DijkstraResult:\n    \"\"\"Results from Dijkstra's algorithm\"\"\"\n    distances: D"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "medium",
          "code": "def dijkstra_single_target(graph: 'WeightedGraph',\n                          source: int,\n                          target: int) -> Tuple[float, List[int]]:\n    \"\"\"\n    Dijkstra with early termination"
        },
        {
          "language": "python",
          "line_count": 78,
          "complexity": "complex",
          "code": "@dataclass\nclass BellmanFordResult:\n    \"\"\"Results from Bellman-Ford algorithm\"\"\"\n    distances: Dict[int, float]\n    parents: Dict[int, Optional[int]]\n    has_negative_cycle: bool\n\n    def get_path(s"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "from collections import deque\n\ndef spfa(graph: 'WeightedGraph', source: int) -> BellmanFordResult:\n    \"\"\"\n    SPFA: Queue-based optimization of Bellman-Ford\n\n    Average case: O(E), worst case: O(V \u00d7"
        },
        {
          "language": "python",
          "line_count": 73,
          "complexity": "complex",
          "code": "def floyd_warshall(graph: 'WeightedGraph') -> Tuple[List[List[float]],\n                                                     List[List[Optional[int]]]]:\n    \"\"\"\n    Floyd-Warshall all-pairs shortest pa"
        },
        {
          "language": "python",
          "line_count": 113,
          "complexity": "complex",
          "code": "from typing import Callable\n\ndef a_star(graph: 'WeightedGraph',\n          source: int,\n          target: int,\n          heuristic: Callable[[int, int], float]) -> Tuple[float, List[int]]:\n    \"\"\"\n    "
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "medium",
          "code": "def choose_shortest_path_algorithm(graph_info: dict) -> str:\n    \"\"\"\n    Select optimal shortest path algorithm based on graph properties\n    \"\"\"\n    has_negative_weights = graph_info.get(\"has_negativ"
        },
        {
          "language": "python",
          "line_count": 53,
          "complexity": "complex",
          "code": "class ShortestPathSolver:\n    \"\"\"Unified interface for shortest path algorithms\"\"\"\n\n    @staticmethod\n    def solve(graph: 'WeightedGraph',\n             source: int,\n             target: Optional[int]"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# WRONG: Dijkstra fails with negative weights\ngraph.add_edge(0, 1, -5)\nresult = dijkstra(graph, 0)  # Incorrect results!\n\n# CORRECT: Use Bellman-Ford or SPFA\nresult = bellman_ford(graph, 0)\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# WRONG: Assume result is valid\nresult = bellman_ford(graph, 0)\nprint(result.distances[target])  # May be incorrect!\n\n# CORRECT: Check for negative cycle\nresult = bellman_ford(graph, 0)\nif result.has_"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# WRONG: O(V\u00b3) for 10,000 vertices = 10\u00b9\u00b2 operations\nlarge_graph = WeightedGraph(10000)\ndist, next_v = floyd_warshall(large_graph)  # Too slow!\n\n# CORRECT: Run Dijkstra from each vertex\nfor source in "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "plt/typed-holes-interaction.md",
      "category": "plt",
      "skill_name": "typed-holes-interaction",
      "frontmatter": {
        "name": "typed-holes-interaction",
        "description": "IDE integration with typed holes - goal-directed programming, hole refinement, case splitting, proof search, tactics, elaborator reflection (Agda, Idris, Lean models)"
      },
      "metrics": {
        "line_count": 667,
        "code_line_count": 78,
        "code_examples": 9,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 58,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Optional, Dict\n\n@dataclass\nclass InteractiveHole:\n    \"\"\"Hole with IDE integration\"\"\"\n    name: str\n    expected_type: 'Type'\n    context: Di"
        },
        {
          "language": "python",
          "line_count": 53,
          "complexity": "complex",
          "code": "class GoalDirectedDevelopment:\n    \"\"\"Goal-directed programming using holes\"\"\"\n\n    @staticmethod\n    def workflow_example():\n        \"\"\"\n        Example: Implement map for lists\n\n        Step 1: Writ"
        },
        {
          "language": "python",
          "line_count": 97,
          "complexity": "complex",
          "code": "@dataclass\nclass HoleCommand:\n    \"\"\"IDE command for hole manipulation\"\"\"\n    command_type: str\n    hole_id: str\n    parameters: dict\n\n# Common hole commands\nclass HoleCommands:\n    \"\"\"Standard IDE ho"
        },
        {
          "language": "python",
          "line_count": 87,
          "complexity": "complex",
          "code": "class ProofSearch:\n    \"\"\"Automatic term synthesis for holes\"\"\"\n\n    def __init__(self, max_depth: int = 3):\n        self.max_depth = max_depth\n        self.cache = {}  # Memoization\n\n    def search(s"
        },
        {
          "language": "python",
          "line_count": 109,
          "complexity": "complex",
          "code": "# Idris/Lean style tactics\n@dataclass\nclass Tactic:\n    \"\"\"Tactic: function from goal to term (or new goals)\"\"\"\n    name: str\n    implementation: 'Callable'\n\nclass TacticEngine:\n    \"\"\"Execute tactics"
        },
        {
          "language": "python",
          "line_count": 67,
          "complexity": "complex",
          "code": "class HoleRefinement:\n    \"\"\"Strategies for refining holes\"\"\"\n\n    @staticmethod\n    def by_cases(hole: InteractiveHole, var: str):\n        \"\"\"\n        Refine by case analysis\n\n        Before:\n       "
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "def incremental_development_workflow():\n    \"\"\"\n    1. Write top-level type\n    2. Create hole for implementation\n    3. Inspect hole goal\n    4. Refine hole (case split, construct, etc.)\n    5. Repea"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "medium",
          "code": "def test_generation_from_holes(hole: InteractiveHole):\n    \"\"\"\n    Use hole type to generate tests\n\n    Hole: ?h : Int \u2192 Int\n\n    Generate tests:\n    - ?h 0 = ?result0 : Int\n    - ?h 1 = ?result1 : In"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "def collaborative_proof_with_holes():\n    \"\"\"\n    Multiple developers working on proof\n\n    Developer A: Writes theorem statement, creates hole\n    Developer B: Refines hole into cases\n    Developer C"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "plt/typed-holes-llm.md",
      "category": "plt",
      "skill_name": "typed-holes-llm",
      "frontmatter": {
        "name": "typed-holes-llm",
        "description": "LLM integration with typed holes (OOPSLA 2024) - static context for code synthesis, type-driven prompting, validation, ranking, combining language servers with LLMs"
      },
      "metrics": {
        "line_count": 825,
        "code_line_count": 87,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Optional\n\n# Traditional LLM code completion\nclass NaiveLLMCompletion:\n    \"\"\"\n    Problem with naive LLM completion:\n\n    User types:\n      d"
        },
        {
          "language": "python",
          "line_count": 70,
          "complexity": "complex",
          "code": "@dataclass\nclass TypedHoleContext:\n    \"\"\"\n    Rich context from typed hole\n\n    From OOPSLA 2024: \"Statically Contextualizing Large Language Models\n    with Typed Holes\"\n    \"\"\"\n    hole_id: str\n    "
        },
        {
          "language": "python",
          "line_count": 109,
          "complexity": "complex",
          "code": "class LanguageServerLLMBridge:\n    \"\"\"\n    Bridge between language server and LLM\n\n    Language Server provides:\n    - Type information\n    - Scope information\n    - Available symbols\n    - Diagnostic"
        },
        {
          "language": "python",
          "line_count": 90,
          "complexity": "complex",
          "code": "class TypeDrivenPromptBuilder:\n    \"\"\"\n    Build LLM prompts from type information\n\n    Strategy: More type info \u2192 Better prompts \u2192 Better completions\n    \"\"\"\n\n    def build_prompt(self, hole: TypedHo"
        },
        {
          "language": "python",
          "line_count": 110,
          "complexity": "complex",
          "code": "class CandidateValidator:\n    \"\"\"\n    Validate LLM-generated candidates\n\n    Multi-stage pipeline:\n    1. Parse check: Valid syntax?\n    2. Type check: Correct type?\n    3. Scope check: Only uses avai"
        },
        {
          "language": "python",
          "line_count": 83,
          "complexity": "complex",
          "code": "class InteractiveRefinement:\n    \"\"\"\n    Interactive refinement with LLM\n\n    Workflow:\n    1. User creates hole\n    2. LLM suggests completions\n    3. User picks one or refines hole further\n    4. Re"
        },
        {
          "language": "python",
          "line_count": 82,
          "complexity": "complex",
          "code": "class ContextBuilder:\n    \"\"\"\n    Build rich context for LLM prompts\n\n    Balance:\n    - More context \u2192 Better suggestions\n    - Too much context \u2192 Token limits, noise\n    \"\"\"\n\n    def build_context(s"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "async def type_first_completion_workflow(lsp, llm, position):\n    \"\"\"\n    1. User types partial expression\n    2. LSP infers expected type from context\n    3. Use expected type to guide LLM\n    4. Gen"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "async def iterative_refinement(user, llm, hole):\n    \"\"\"\n    1. LLM suggests initial completions\n    2. User picks one or refines further\n    3. If refinement: LLM suggests for refined hole\n    4. Rep"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "medium",
          "code": "async def example_driven_synthesis(examples, llm):\n    \"\"\"\n    User provides examples, LLM synthesizes code\n\n    Examples:\n      f(0) = 0\n      f(1) = 1\n      f(5) = 120\n\n    Prompt to LLM:\n      \"Wri"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "plt/lambda-calculus.md",
      "category": "plt",
      "skill_name": "lambda-calculus",
      "frontmatter": {
        "name": "lambda-calculus",
        "description": "Lambda calculus including untyped, simply typed, Church encodings, and reduction strategies"
      },
      "metrics": {
        "line_count": 470,
        "code_line_count": 91,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Union\n\n# Abstract syntax tree for \u03bb-terms\n@dataclass\nclass Var:\n    name: str\n    \n    def __repr__(self):\n        return self.name\n\n@dataclass\ncla"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "def free_vars(term: Term) -> set:\n    \"\"\"Compute set of free variables\"\"\"\n    match term:\n        case Var(name):\n            return {name}\n        case Abs(param, body):\n            return free_vars("
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "medium",
          "code": "def substitute(term: Term, var: str, replacement: Term) -> Term:\n    \"\"\"\n    term[var := replacement]\n    Capture-avoiding substitution\n    \"\"\"\n    match term:\n        case Var(name):\n            retu"
        },
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "def is_redex(term: Term) -> bool:\n    \"\"\"Check if term is a \u03b2-redex: (\u03bbx. M) N\"\"\"\n    match term:\n        case App(Abs(_, _), _):\n            return True\n        case _:\n            return False\n\ndef "
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "medium",
          "code": "def church_numeral(n: int) -> Term:\n    \"\"\"\n    n\u0305 = \u03bbf. \u03bbx. f^n x\n    0 = \u03bbf. \u03bbx. x\n    1 = \u03bbf. \u03bbx. f x\n    2 = \u03bbf. \u03bbx. f (f x)\n    \"\"\"\n    body = Var('x')\n    for _ in range(n):\n        body = App(V"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "medium",
          "code": "# true = \u03bbt. \u03bbf. t\n# false = \u03bbt. \u03bbf. f\ntrue = Abs('t', Abs('f', Var('t')))\nfalse = Abs('t', Abs('f', Var('f')))\n\n# if = \u03bbb. \u03bbt. \u03bbf. b t f (identity in \u03bb-calculus!)\nif_then_else = Abs('b', Abs('t', Abs"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "medium",
          "code": "# I = \u03bbx. x (identity)\nI = Abs('x', Var('x'))\n\n# K = \u03bbx. \u03bby. x (constant)\nK = Abs('x', Abs('y', Var('x')))\n\n# S = \u03bbx. \u03bby. \u03bbz. x z (y z)\nS = Abs('x', Abs('y', Abs('z', \n    App(App(Var('x'), Var('z')),"
        },
        {
          "language": "python",
          "line_count": 63,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Union as TUnion\n\n@dataclass\nclass TVar:\n    \"\"\"Type variable\"\"\"\n    name: str\n    \n    def __repr__(self):\n        return self.name\n\n@dataclass\ncla"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Factorial using Y combinator\n# fact = Y (\u03bbf. \u03bbn. if (n = 0) 1 (n * f (n-1)))\n\n# In practice, use recursive definitions with Y:\ndef factorial_lambda():\n    \"\"\"\n    Factorial: F = \u03bbf. \u03bbn. if (n = 0) 1"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Pairs: pair = \u03bbx. \u03bby. \u03bbf. f x y\npair = Abs('x', Abs('y', Abs('f', App(App(Var('f'), Var('x')), Var('y')))))\n\n# fst = \u03bbp. p (\u03bbx. \u03bby. x)\nfst = Abs('p', App(Var('p'), K))\n\n# snd = \u03bbp. p (\u03bbx. \u03bby. y)\nsnd"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "plt/typed-holes-semantics.md",
      "category": "plt",
      "skill_name": "typed-holes-semantics",
      "frontmatter": {
        "name": "typed-holes-semantics",
        "description": "Advanced typed holes semantics - hole closures, pattern matching with holes, type error localization, polymorphism, gradual guarantees, blame tracking"
      },
      "metrics": {
        "line_count": 670,
        "code_line_count": 97,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 54,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Union, Optional, Dict\n\n# Closure representation\n@dataclass\nclass Closure:\n    \"\"\"Value closure: function with captured environment\"\"\"\n    param: st"
        },
        {
          "language": "python",
          "line_count": 75,
          "complexity": "complex",
          "code": "# Patterns with holes\n@dataclass\nclass VarPattern:\n    \"\"\"Variable pattern: x\"\"\"\n    name: str\n\n@dataclass\nclass ConstructorPattern:\n    \"\"\"Constructor: C p\u2081 ... p\u2099\"\"\"\n    constructor: str\n    sub_pat"
        },
        {
          "language": "python",
          "line_count": 60,
          "complexity": "complex",
          "code": "@dataclass\nclass Marked:\n    \"\"\"Marked expression: expression with blame label\"\"\"\n    expr: 'Expr'\n    mark: str  # Blame label\n\n    def __repr__(self):\n        return f\"{self.expr}^{self.mark}\"\n\n# Er"
        },
        {
          "language": "python",
          "line_count": 62,
          "complexity": "complex",
          "code": "# System F-style polymorphism with holes\n@dataclass\nclass TForall:\n    \"\"\"\u2200\u03b1. \u03c4 - polymorphic type\"\"\"\n    type_var: str\n    body: 'Type'\n\n    def __repr__(self):\n        return f\"\u2200{self.type_var}.{sel"
        },
        {
          "language": "python",
          "line_count": 61,
          "complexity": "complex",
          "code": "class GradualGuarantees:\n    \"\"\"\n    Gradual typing guarantees (Siek et al.)\n\n    Applied to typed holes\n    \"\"\"\n\n    @staticmethod\n    def static_gradual_guarantee():\n        \"\"\"\n        Static Gradu"
        },
        {
          "language": "python",
          "line_count": 58,
          "complexity": "complex",
          "code": "@dataclass\nclass BlameLabel:\n    \"\"\"Blame label for tracking hole provenance\"\"\"\n    hole_id: str\n    position: str  # Where in program\n    expected: 'Type'\n    actual: 'Type'\n\n    def __repr__(self):\n"
        },
        {
          "language": "python",
          "line_count": 80,
          "complexity": "complex",
          "code": "@dataclass\nclass Constraint:\n    \"\"\"Type constraint\"\"\"\n    pass\n\n@dataclass\nclass EqualityConstraint(Constraint):\n    \"\"\"\u03c4\u2081 = \u03c4\u2082\"\"\"\n    left: 'Type'\n    right: 'Type'\n\n    def __repr__(self):\n        "
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "def gradual_migration_pattern():\n    \"\"\"\n    Migrate untyped code to typed using holes\n\n    Step 1: Replace all types with holes\n      f(x, y) \u2192 f(x: ?, y: ?) -> ?\n\n    Step 2: Run type inference\n    "
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "medium",
          "code": "def error_recovery_with_localization(program: 'Expr'):\n    \"\"\"\n    Localize type error, insert hole, continue\n\n    Type error: (\u03bbx:Int. x) \"hello\"\n\n    Step 1: Detect inconsistency\n      Argument \"hel"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "medium",
          "code": "def hole_driven_refactoring(old_function: 'Expr', new_signature: 'Type'):\n    \"\"\"\n    Refactor by changing signature, filling holes\n\n    Old: f : Int \u2192 Int\n         f x = x + 1\n\n    New signature: f :"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "plt/hazelnut-calculus.md",
      "category": "plt",
      "skill_name": "hazelnut-calculus",
      "frontmatter": {
        "name": "hazelnut-calculus",
        "description": "Hazelnut structure editor calculus - bidirectionally typed lambda calculus with holes and cursor, edit actions preserving static meaning, zipper structures"
      },
      "metrics": {
        "line_count": 672,
        "code_line_count": 106,
        "code_examples": 11,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Union, Optional\n\n# Traditional text editing\ntext_edit_example = \"\"\"\nUser types: \"if true th\"\nState: Syntactically invalid!\nParser: Error, incomplet"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "# Hazelnut expressions (UExp)\n@dataclass\nclass Num:\n    \"\"\"Number literal\"\"\"\n    value: int\n\n@dataclass\nclass Var:\n    \"\"\"Variable\"\"\"\n    name: str\n\n@dataclass\nclass Lam:\n    \"\"\"Lambda: \u03bbx.e\"\"\"\n    pa"
        },
        {
          "language": "python",
          "line_count": 64,
          "complexity": "complex",
          "code": "@dataclass\nclass ZExp:\n    \"\"\"Expression with cursor (zipper)\"\"\"\n    focus: UExp  # Current expression under cursor\n    context: 'ZContext'  # Surrounding context\n\n# Zipper contexts (one-hole contexts"
        },
        {
          "language": "python",
          "line_count": 73,
          "complexity": "complex",
          "code": "from enum import Enum\n\nclass Direction(Enum):\n    PARENT = \"parent\"\n    CHILD_1 = \"child1\"\n    CHILD_2 = \"child2\"\n\n# Movement actions\ndef move(zexp: ZExp, dir: Direction) -> Optional[ZExp]:\n    \"\"\"\n  "
        },
        {
          "language": "python",
          "line_count": 61,
          "complexity": "complex",
          "code": "# Types (Hazelnut)\n@dataclass\nclass TNum:\n    def __repr__(self):\n        return \"Num\"\n\n@dataclass\nclass TArrow:\n    param: 'Type'\n    result: 'Type'\n    def __repr__(self):\n        return f\"({self.pa"
        },
        {
          "language": "python",
          "line_count": 61,
          "complexity": "complex",
          "code": "def action_type(action: str, zexp: ZExp, ctx_type: Type) -> Type:\n    \"\"\"\n    Type-aware action semantics\n\n    Every action produces typeable result!\n\n    Example: construct lam x\n      Before: \u2987\u2988 : \u03c4"
        },
        {
          "language": "python",
          "line_count": 78,
          "complexity": "complex",
          "code": "class ActionSemantics:\n    \"\"\"\n    Hazelnut action semantics\n\n    Judgment: (e, \u03b3, \u03b1) \u2192 e'\n      Given expression e, context \u03b3, action \u03b1\n      Produces new expression e'\n    \"\"\"\n\n    @staticmethod\n   "
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "@dataclass\nclass GroveAction:\n    \"\"\"\n    Grove: Commutative edit actions for collaboration\n\n    Key idea: Actions commute so concurrent edits merge automatically\n    \"\"\"\n    action_id: str\n    timest"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "def progressive_refinement_example():\n    \"\"\"\n    Build program by refining holes\n\n    1. Start: \u2987\u2988 : Num \u2192 Num\n    2. construct lam x: \u03bbx.\u2987\u2988 : Num \u2192 Num\n    3. move child1 (to body)\n    4. construct "
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "def type_directed_construction(expected_type: Type):\n    \"\"\"\n    Use expected type to guide construction\n\n    Expected: Num \u2192 Num\n    \u2192 Suggest: construct lam (makes lambda)\n\n    Expected: Num\n    \u2192 S"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "medium",
          "code": "def error_recovery_pattern(expr: UExp, expected: Type):\n    \"\"\"\n    When type error: wrap in non-empty hole\n\n    User constructs: \u03bbx.x  (type: ? \u2192 ?)\n    Expected: Num\n\n    Instead of error: \u2987\u03bbx.x\u2988 : "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "plt/type-systems.md",
      "category": "plt",
      "skill_name": "type-systems",
      "frontmatter": {
        "name": "type-systems",
        "description": "Type systems including type checking, inference, polymorphism, subtyping, and soundness"
      },
      "metrics": {
        "line_count": 585,
        "code_line_count": 83,
        "code_examples": 9,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 137,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Union, Optional\nfrom enum import Enum\n\n# Types\n@dataclass\nclass TInt:\n    def __repr__(self):\n        return \"Int\"\n\n@dataclass\nclass TBool:\n    def"
        },
        {
          "language": "python",
          "line_count": 126,
          "complexity": "complex",
          "code": "from typing import Dict, Set\n\n@dataclass\nclass TyVar:\n    \"\"\"Type variable for inference\"\"\"\n    id: int\n    \n    def __repr__(self):\n        return f\"'t{self.id}\"\n\nInferType = Union[TInt, TBool, TFun,"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "@dataclass\nclass ForAll:\n    \"\"\"Polymorphic type: \u2200\u03b1. \u03c4\"\"\"\n    tyvar: str\n    body: Type\n    \n    def __repr__(self):\n        return f\"\u2200{self.tyvar}. {self.body}\"\n\n@dataclass\nclass TyAbs:\n    \"\"\"Type "
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "def is_subtype(t1: Type, t2: Type) -> bool:\n    \"\"\"Check if t1 <: t2\"\"\"\n    # Reflexivity\n    if types_equal(t1, t2):\n        return True\n    \n    match (t1, t2):\n        # Function subtyping (contrav"
        },
        {
          "language": "python",
          "line_count": 72,
          "complexity": "complex",
          "code": "def progress(expr: Expr, ty: Type) -> bool:\n    \"\"\"\n    Progress theorem: well-typed closed term is either value or can step\n    \n    Proof sketch:\n    - Base cases (literals): values, done\n    - Abs:"
        },
        {
          "language": "ocaml",
          "line_count": 4,
          "complexity": "simple",
          "code": "(* OCaml *)\nlet id x = x;;          (* 'a -> 'a *)\nlet const x y = x;;     (* 'a -> 'b -> 'a *)\n"
        },
        {
          "language": "java",
          "line_count": 3,
          "complexity": "simple",
          "code": "<T> T identity(T x) { return x; }\n<T extends Comparable<T>> T max(T a, T b) { ... }\n"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "# Representing sum types\n@dataclass\nclass Option:\n    \"\"\"Option<T> = None | Some(T)\"\"\"\n    pass\n\n@dataclass\nclass None_(Option):\n    pass\n\n@dataclass\nclass Some(Option):\n    value: Type\n\n# Type checki"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "@dataclass\nclass TDynamic:\n    \"\"\"Dynamic type \u22c6\"\"\"\n    def __repr__(self):\n        return \"\u22c6\"\n\ndef consistent(t1: Type, t2: Type) -> bool:\n    \"\"\"\n    Consistency relation: t1 ~ t2\n    More permissiv"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "plt/live-programming-holes.md",
      "category": "plt",
      "skill_name": "live-programming-holes",
      "frontmatter": {
        "name": "live-programming-holes",
        "description": "Live programming with typed holes - Hazel environment, continuous feedback, live evaluation with indeterminate results, incremental bidirectional typing (OOPSLA 2025), collaborative editing (Grove)"
      },
      "metrics": {
        "line_count": 667,
        "code_line_count": 89,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Union, Optional, List\n\nclass LiveEnvironment:\n    \"\"\"\n    Live programming environment characteristics:\n\n    1. Edit freely: All intermediate state"
        },
        {
          "language": "python",
          "line_count": 63,
          "complexity": "complex",
          "code": "@dataclass\nclass HazelState:\n    \"\"\"\n    Hazel system state\n\n    Core components:\n    - Editor: Structure editor (Hazelnut)\n    - Type checker: Bidirectional with holes\n    - Evaluator: Small-step wit"
        },
        {
          "language": "python",
          "line_count": 76,
          "complexity": "complex",
          "code": "@dataclass\nclass DeterminateValue:\n    \"\"\"Concrete value\"\"\"\n    value: any\n\n@dataclass\nclass IndeterminateValue:\n    \"\"\"Value containing holes - we don't know what it is yet\"\"\"\n    hole_id: str\n    ex"
        },
        {
          "language": "python",
          "line_count": 97,
          "complexity": "complex",
          "code": "class IncrementalTypeChecker:\n    \"\"\"\n    Incremental bidirectional type checking\n\n    Based on OOPSLA 2025 work:\n    \"Incremental Bidirectional Typing via Order Maintenance\"\n\n    Key idea: Borrow tec"
        },
        {
          "language": "python",
          "line_count": 53,
          "complexity": "complex",
          "code": "class LivePatternChecker:\n    \"\"\"\n    Live pattern match analysis\n\n    Shows:\n    - Which patterns are redundant\n    - Which cases are missing\n    - Example values that reach each branch\n    \"\"\"\n\n    "
        },
        {
          "language": "python",
          "line_count": 71,
          "complexity": "complex",
          "code": "class GroveCollaboration:\n    \"\"\"\n    Grove: Bidirectionally Typed Structure Editor Calculus (POPL 2025)\n\n    Key innovation: Commutative edit actions\n\n    Traditional conflict:\n      User A: Edit at "
        },
        {
          "language": "python",
          "line_count": 60,
          "complexity": "complex",
          "code": "class PerformanceOptimizations:\n    \"\"\"\n    Optimizations for live programming\n\n    Challenges:\n    - Type check on every keystroke (can't be slow!)\n    - Evaluate continuously (can't block UI)\n    - "
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "medium",
          "code": "def example_driven_pattern():\n    \"\"\"\n    Live programming enables example-driven workflow\n\n    1. Write examples first\n       factorial 0 = 1\n       factorial 3 = 6\n\n    2. See examples fail (holes)\n"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "def visual_debugging():\n    \"\"\"\n    Live evaluation enables visual debugging\n\n    - Click expression: See value\n    - Step through evaluation: See each step\n    - Inspect hole: See why indeterminate\n "
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "def exploratory_pattern():\n    \"\"\"\n    Live environment for exploration\n\n    1. Import library\n    2. Create hole: ?explore\n    3. See available functions (autocomplete)\n    4. Try function: f ?arg\n  "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "plt/structure-editors.md",
      "category": "plt",
      "skill_name": "structure-editors",
      "frontmatter": {
        "name": "structure-editors",
        "description": "Structure editor design patterns - projectional editing, syntax-directed editing, edit actions, cursor management, rendering, text workflow integration"
      },
      "metrics": {
        "line_count": 632,
        "code_line_count": 95,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 74,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Union, List, Optional\n\n# Text editor approach\nclass TextEditor:\n    \"\"\"\n    Traditional text editing:\n\n    1. User types characters\n    2. Editor s"
        },
        {
          "language": "python",
          "line_count": 66,
          "complexity": "complex",
          "code": "from enum import Enum\n\nclass EditAction(Enum):\n    # Movement\n    MOVE_PARENT = \"parent\"\n    MOVE_CHILD_1 = \"child1\"\n    MOVE_CHILD_2 = \"child2\"\n\n    # Construction\n    CONSTRUCT_NUM = \"num\"\n    CONST"
        },
        {
          "language": "python",
          "line_count": 57,
          "complexity": "complex",
          "code": "@dataclass\nclass Zipper:\n    \"\"\"\n    Zipper: Focus on one node, remember path back\n\n    Components:\n    - Focus: Current subtree under cursor\n    - Context: Path back to root (one-hole contexts)\n    \""
        },
        {
          "language": "python",
          "line_count": 62,
          "complexity": "complex",
          "code": "class Renderer:\n    \"\"\"\n    Render AST as text with cursor\n\n    Considerations:\n    - Indentation\n    - Parentheses (minimal)\n    - Highlighting (syntax, types, cursor)\n    - Multi-line layout\n    \"\"\""
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "@dataclass\nclass Selection:\n    \"\"\"\n    Selection in structure editor\n\n    Two approaches:\n    1. Path-based: (start_path, end_path)\n    2. Subtree-based: Select whole subtree\n    \"\"\"\n    root: 'Expr'"
        },
        {
          "language": "python",
          "line_count": 58,
          "complexity": "complex",
          "code": "class HybridEditor:\n    \"\"\"\n    Combine structure editing with text editing\n\n    Modes:\n    1. Structure mode (default): Edit AST\n    2. Text mode: Edit as text, re-parse on commit\n\n    Users can drop"
        },
        {
          "language": "python",
          "line_count": 47,
          "complexity": "complex",
          "code": "class EducationalEditor:\n    \"\"\"\n    Structure editor for teaching programming\n\n    Benefits:\n    - No syntax errors distract from learning\n    - Type-guided construction teaches types\n    - Example-d"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "def progressive_disclosure():\n    \"\"\"\n    Show only relevant actions at each point\n\n    Beginner:\n    - construct num\n    - construct var\n    - construct +\n\n    Intermediate:\n    - + construct if\n    "
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "def template_construction(template_name: str) -> 'Expr':\n    \"\"\"\n    Common patterns as templates\n\n    Templates:\n    - \"if-then-else\" \u2192 if \u2987\u2988 then \u2987\u2988 else \u2987\u2988\n    - \"let-in\" \u2192 let x = \u2987\u2988 in \u2987\u2988\n    - \""
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "medium",
          "code": "def type_directed_palette(expected_type: 'Type', context: dict) -> List[str]:\n    \"\"\"\n    Show only actions that produce expected type\n\n    Expected: Bool\n    Show:\n    - true, false (literals)\n    - "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "plt/curry-howard.md",
      "category": "plt",
      "skill_name": "curry-howard",
      "frontmatter": {
        "name": "curry-howard",
        "description": "Curry-Howard correspondence relating proofs and programs, propositions and types"
      },
      "metrics": {
        "line_count": 454,
        "code_line_count": 114,
        "code_examples": 13,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 86,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Union\n\n# Propositions as types\n@dataclass\nclass Implies:\n    \"\"\"P \u2192 Q\"\"\"\n    premise: 'Prop'\n    conclusion: 'Prop'\n    \n    def __repr__(self):\n  "
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "# P \u2192 Q corresponds to function type P \u2192 Q\n# Proof: \u03bbx:P. M : Q (function taking P to Q)\n\n# Example: Prove A \u2192 A (identity)\n# Proof: \u03bbx. x\n\n# In Lean 4:\n\"\"\"\ntheorem id (A : Prop) : A \u2192 A := fun x => x"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "medium",
          "code": "# P \u2227 Q corresponds to product type P \u00d7 Q\n# Proof: (M, N) where M : P, N : Q\n\n# Example: Prove (A \u2227 B) \u2192 (B \u2227 A) (commutativity)\n# Proof: \u03bbp. (snd p, fst p)\n\n# In Lean 4:\n\"\"\"\ntheorem and_comm (A B : P"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "# P \u2228 Q corresponds to sum type P + Q\n# Proof: inl(M) : P \u2228 Q or inr(N) : P \u2228 Q\n\n# Example: Prove A \u2192 (A \u2228 B)\n# Proof: \u03bbx. inl(x)\n\n# In Lean 4:\n\"\"\"\ntheorem or_intro_left (A B : Prop) : A \u2192 A \u2228 B := by"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "# \u00acP \u2261 P \u2192 \u22a5\n# Proof of \u00acP is a function from P to absurdity\n\n# Example: Prove \u00ac(A \u2227 \u00acA) (non-contradiction)\n# Proof: \u03bbp. (snd p) (fst p)\n\n# In Lean 4:\n\"\"\"\ntheorem not_and_not (A : Prop) : \u00ac(A \u2227 \u00acA) :"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Lean 4 example: Extracting program from constructive proof\n\"\"\"\n-- Prove: \u2203(x:Nat). x > 0\ntheorem exists_positive : \u2203(x:Nat), x > 0 := by\n  use 1\n  norm_num\n\n-- Extract witness:\n#eval (exists_positiv"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "medium",
          "code": "# LEM is NOT provable in intuitionistic logic\n# Cannot construct P \u2228 \u00acP without knowing which one holds\n\n# In classical logic (Lean with Classical axiom):\n\"\"\"\nopen Classical\n\ntheorem lem (P : Prop) : "
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# \u2200(x:A). P(x) corresponds to \u03a0(x:A). P(x)\n# Proof: function from x to proof of P(x)\n\n# Example: Prove \u2200(n:Nat). n = n\n# Proof: \u03bbn. refl\n\n# In Lean 4:\n\"\"\"\ntheorem forall_eq (n : Nat) : n = n := rfl\n\n-"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "# \u2203(x:A). P(x) corresponds to \u03a3(x:A). P(x)\n# Proof: pair (witness, proof that witness satisfies P)\n\n# Example: Prove \u2203(n:Nat). n > 5\n# Proof: (6, proof that 6 > 5)\n\n# In Lean 4:\n\"\"\"\ntheorem exists_gt_"
        },
        {
          "language": "lean",
          "line_count": 6,
          "complexity": "simple",
          "code": "-- Lean 4\ntheorem modus_ponens (P Q : Prop) : (P \u2192 Q) \u2192 P \u2192 Q :=\n  fun f p => f p\n\n-- Program: function application!\n"
        },
        {
          "language": "lean",
          "line_count": 7,
          "complexity": "simple",
          "code": "-- Lean 4\ntheorem curry (A B C : Prop) : ((A \u2227 B) \u2192 C) \u2192 (A \u2192 B \u2192 C) :=\n  fun f a b => f \u27e8a, b\u27e9\n\ntheorem uncurry (A B C : Prop) : (A \u2192 B \u2192 C) \u2192 ((A \u2227 B) \u2192 C) :=\n  fun f \u27e8a, b\u27e9 => f a b\n"
        },
        {
          "language": "lean",
          "line_count": 15,
          "complexity": "simple",
          "code": "-- Lean 4\n-- Intuitionistically valid:\ntheorem de_morgan_1 (A B : Prop) : \u00ac(A \u2228 B) \u2192 \u00acA \u2227 \u00acB := by\n  intro h\n  constructor\n  \u00b7 intro a; apply h; left; exact a\n  \u00b7 intro b; apply h; right; exact b\n\n-- "
        },
        {
          "language": "lean",
          "line_count": 7,
          "complexity": "simple",
          "code": "intro      -- Introduce hypothesis (\u03bb)\nexact      -- Provide exact proof\nconstructor -- Build \u2227 or \u2203\nleft/right -- Build \u2228\ncases      -- Case split on \u2228 or \u2203\napply      -- Function application\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "plt/dependent-types.md",
      "category": "plt",
      "skill_name": "dependent-types",
      "frontmatter": {
        "name": "dependent-types",
        "description": "Dependent types including \u03a0-types, \u03a3-types, indexed families, and proof assistants"
      },
      "metrics": {
        "line_count": 412,
        "code_line_count": 84,
        "code_examples": 10,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Union, Callable\n\n# Dependent types representation (simplified)\n@dataclass\nclass Pi:\n    \"\"\"\u03a0(x:A). B(x) - dependent function type\"\"\"\n    param_name"
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "@dataclass\nclass Sigma:\n    \"\"\"\u03a3(x:A). B(x) - dependent pair type\"\"\"\n    param_name: str\n    param_type: Type\n    result_type: Callable  # Function from value to type\n    \n    def __repr__(self):\n    "
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "# Length-indexed vectors in Python (conceptual)\nclass Vector:\n    \"\"\"Vec A n - vector of length n\"\"\"\n    def __init__(self, elem_type, length, elements):\n        self.elem_type = elem_type\n        sel"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "@dataclass\nclass Eq:\n    \"\"\"Equality type: a =_A b\"\"\"\n    type_: Type\n    lhs: any\n    rhs: any\n    \n    def __repr__(self):\n        return f\"{self.lhs} =_{self.type_} {self.rhs}\"\n\n@dataclass\nclass Re"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "@dataclass\nclass Universe:\n    \"\"\"Type_i - universe at level i\"\"\"\n    level: int\n    \n    def __repr__(self):\n        return f\"Type_{self.level}\"\n\n# Examples:\n# Nat : Type\u2080\n# Type\u2080 : Type\u2081\n# Vec : Typ"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "medium",
          "code": "# Example: head function for non-empty vectors\ndef vec_head(vec):\n    \"\"\"\n    head : \u03a0{n:Nat}. Vec A (n+1) \u2192 A\n    Only defined for non-empty vectors (n \u2265 1)\n    \"\"\"\n    if vec.length == 0:\n        ra"
        },
        {
          "language": "lean",
          "line_count": 11,
          "complexity": "simple",
          "code": "-- Lean 4\ninductive Vector (\u03b1 : Type u) : Nat \u2192 Type u where\n  | nil : Vector \u03b1 0\n  | cons (x : \u03b1) {n : Nat} (xs : Vector \u03b1 n) : Vector \u03b1 (n+1)\n\ndef Vector.append {\u03b1 : Type} {m n : Nat} : Vector \u03b1 m \u2192"
        },
        {
          "language": "lean",
          "line_count": 10,
          "complexity": "simple",
          "code": "-- Lean 4\nstructure Matrix (\u03b1 : Type) (rows cols : Nat) where\n  data : Vector (Vector \u03b1 cols) rows\n\ndef Matrix.multiply {\u03b1 : Type} [Mul \u03b1] [Add \u03b1] [Zero \u03b1] \n    {m n p : Nat} : Matrix \u03b1 m n \u2192 Matrix \u03b1"
        },
        {
          "language": "lean",
          "line_count": 9,
          "complexity": "simple",
          "code": "-- Lean 4\ndef lookup {\u03b1 : Type} (vec : Vector \u03b1 n) (i : Nat) (h : i < n) : \u03b1 := ...\n\n-- h : i < n is a proof that i is valid index\n-- Eliminates runtime bounds checks!\n\nexample : Nat := lookup \u27e83, [1,"
        },
        {
          "language": "lean",
          "line_count": 12,
          "complexity": "simple",
          "code": "-- \u03a0-type\ndef foo (n : Nat) : Vector Bool n := ...\n-- Equivalent to: foo : \u03a0(n:Nat). Vector Bool n\n\n-- \u03a3-type\nstructure Sigma (\u03b1 : Type u) (\u03b2 : \u03b1 \u2192 Type v) where\n  fst : \u03b1\n  snd : \u03b2 fst\n\n-- Equality t"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "10 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "plt/typed-holes-foundations.md",
      "category": "plt",
      "skill_name": "typed-holes-foundations",
      "frontmatter": {
        "name": "typed-holes-foundations",
        "description": "Typed holes fundamentals - incomplete programs with static/dynamic meaning, connection to gradual typing, bidirectional type checking, and theoretical foundations"
      },
      "metrics": {
        "line_count": 561,
        "code_line_count": 95,
        "code_examples": 11,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Union, Optional\n\n# Basic typed hole representation\n@dataclass\nclass Hole:\n    \"\"\"Typed hole: unknown expression with expected type\"\"\"\n    name: str"
        },
        {
          "language": "python",
          "line_count": 47,
          "complexity": "complex",
          "code": "@dataclass\nclass TInt:\n    def __repr__(self):\n        return \"Int\"\n\n@dataclass\nclass TBool:\n    def __repr__(self):\n        return \"Bool\"\n\n@dataclass\nclass TFun:\n    param: 'Type'\n    result: 'Type'\n"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "@dataclass\nclass IndeterminateValue:\n    \"\"\"Result of evaluating a hole: we don't know what it should be\"\"\"\n    hole_name: str\n    expected_type: Type\n\n    def __repr__(self):\n        return f\"\u22a5{self."
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "# Gradual typing perspective\n@dataclass\nclass TUnknown:\n    \"\"\"Unknown type \u2605 from gradual typing\"\"\"\n    def __repr__(self):\n        return \"\u2605\"\n\n# Type consistency (~) instead of equality (=)\ndef cons"
        },
        {
          "language": "python",
          "line_count": 49,
          "complexity": "complex",
          "code": "from enum import Enum\n\nclass Mode(Enum):\n    SYNTHESIS = \"synth\"  # Figure out type from expression\n    CHECKING = \"check\"   # Check expression against expected type\n\ndef bidirectional_type(expr, cont"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "@dataclass\nclass HoleWithContext:\n    \"\"\"Hole with captured environment\"\"\"\n    name: str\n    expected_type: Type\n    environment: dict  # Captured variables\n\n    def available_variables(self):\n       "
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "# Expression hole: ?e\nexpression_hole = Hole(\"e\", expected_type=TInt(), context={})\n\n# Type hole: unknown type\n@dataclass\nclass TypeHole:\n    \"\"\"Hole in type position: we don't know the type\"\"\"\n    na"
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "class HoleSystemProperties:\n    \"\"\"Properties of sound typed hole systems\"\"\"\n\n    @staticmethod\n    def progress_with_holes():\n        \"\"\"\n        Modified Progress:\n        If \u0393 \u22a2 e : \u03c4, then either:"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "# Start with types, fill in holes\ndef goal_directed_example():\n    \"\"\"\n    1. Write type signature first\n    2. Create hole for body\n    3. Inspect hole's expected type\n    4. Refine hole step by step"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "medium",
          "code": "def type_driven_completion(hole: HoleWithContext):\n    \"\"\"\n    Use hole type to suggest completions\n\n    Given: ?h : Bool  with  x : Int, y : Int in scope\n\n    Suggest:\n    - x == y  (uses available I"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "medium",
          "code": "def incremental_type_check(program_with_holes):\n    \"\"\"\n    Type check incomplete programs incrementally\n\n    As user fills holes:\n    1. Re-check only affected parts\n    2. Update hole contexts\n    3"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "11 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "realtime/realtime-sync.md",
      "category": "realtime",
      "skill_name": "realtime-sync",
      "frontmatter": {
        "name": "realtime-realtime-sync",
        "description": "Use real-time sync patterns when you need:"
      },
      "metrics": {
        "line_count": 707,
        "code_line_count": 121,
        "code_examples": 18,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 67,
          "complexity": "complex",
          "code": "// Simple LWW with timestamps\ninterface VersionedData<T> {\n  data: T;\n  version: number;\n  timestamp: number;\n  clientId: string;\n}\n\nclass LWWStore<T> {\n  private data: VersionedData<T> | null = null;"
        },
        {
          "language": "typescript",
          "line_count": 46,
          "complexity": "complex",
          "code": "// LWW-Register CRDT\ninterface LWWRegister<T> {\n  value: T;\n  timestamp: number;\n  clientId: string;\n}\n\nclass LWWRegisterCRDT<T> {\n  private register: LWWRegister<T>;\n\n  constructor(initialValue: T, c"
        },
        {
          "language": "typescript",
          "line_count": 43,
          "complexity": "complex",
          "code": "// G-Set: Elements can only be added, never removed\nclass GSet<T> {\n  private elements: Set<T> = new Set();\n\n  add(element: T): boolean {\n    if (this.elements.has(element)) {\n      return false;\n    "
        },
        {
          "language": "typescript",
          "line_count": 42,
          "complexity": "complex",
          "code": "// 2P-Set: Elements can be added and removed (but only once each)\nclass TwoPhaseSet<T> {\n  private addSet: Set<T> = new Set();\n  private removeSet: Set<T> = new Set();\n\n  add(element: T): boolean {\n  "
        },
        {
          "language": "typescript",
          "line_count": 58,
          "complexity": "complex",
          "code": "// G-Counter: Grow-only counter (increment only)\nclass GCounter {\n  private counts: Map<string, number> = new Map();\n\n  increment(clientId: string, amount: number = 1): void {\n    const current = this"
        },
        {
          "language": "typescript",
          "line_count": 121,
          "complexity": "complex",
          "code": "// Simple OT for text insertion and deletion\ninterface Operation {\n  type: 'insert' | 'delete';\n  position: number;\n  content?: string;\n  length?: number;\n}\n\nclass OperationalTransform {\n  static tran"
        },
        {
          "language": "typescript",
          "line_count": 96,
          "complexity": "complex",
          "code": "interface SyncMessage {\n  type: 'update' | 'sync_request' | 'sync_response';\n  clientId: string;\n  data?: any;\n  version?: number;\n}\n\nclass SyncManager<T> {\n  private ws: WebSocket;\n  private clientId"
        },
        {
          "language": "typescript",
          "line_count": 15,
          "complexity": "simple",
          "code": "// LWW-Register: Single value, last write wins\nconst register = new LWWRegisterCRDT('initial', 'client-1');\n\n// G-Set: Grow-only set (add only)\nconst gset = new GSet<string>();\n\n// 2P-Set: Add and rem"
        },
        {
          "language": "typescript",
          "line_count": 13,
          "complexity": "simple",
          "code": "// Last-Write-Wins: Use timestamp\nif (remote.timestamp > local.timestamp) {\n  local = remote;\n}\n\n// Version Vector: Use vector clock\nif (isGreaterThan(remote.vector, local.vector)) {\n  local = remote;"
        },
        {
          "language": "typescript",
          "line_count": 9,
          "complexity": "simple",
          "code": "// Full state sync\nsend({ type: 'full_sync', state: crdt.getState() });\n\n// Delta sync (changes only)\nsend({ type: 'delta_sync', delta: crdt.getDelta() });\n\n// Operational sync (operations)\nsend({ typ"
        },
        {
          "language": "typescript",
          "line_count": 6,
          "complexity": "simple",
          "code": "// Wrong: Ties cause non-deterministic results\nif (remote.timestamp > local.timestamp) {\n  local = remote;\n}\n// What if timestamps are equal?\n"
        },
        {
          "language": "typescript",
          "line_count": 5,
          "complexity": "simple",
          "code": "if (remote.timestamp > local.timestamp ||\n    (remote.timestamp === local.timestamp && remote.clientId > local.clientId)) {\n  local = remote;\n}\n"
        },
        {
          "language": "typescript",
          "line_count": 3,
          "complexity": "simple",
          "code": "// Wrong: Inefficient for large documents\nsocket.send(JSON.stringify({ type: 'update', data: fullDocument }));\n"
        },
        {
          "language": "typescript",
          "line_count": 3,
          "complexity": "simple",
          "code": "// Send operations or deltas\nsocket.send(JSON.stringify({ type: 'operation', op: { type: 'insert', position: 5, content: 'x' } }));\n"
        },
        {
          "language": "typescript",
          "line_count": 5,
          "complexity": "simple",
          "code": "// Wrong: Blindly overwrite\nfunction update(data) {\n  this.data = data; // No version checking\n}\n"
        },
        {
          "language": "typescript",
          "line_count": 8,
          "complexity": "simple",
          "code": "function update(data, version) {\n  if (version <= this.version) {\n    throw new Error('Conflict detected');\n  }\n  this.data = data;\n  this.version = version;\n}\n"
        },
        {
          "language": "typescript",
          "line_count": 3,
          "complexity": "simple",
          "code": "// Wrong: Blocking merge for large data\nawait merge(largeDocument); // Blocks UI\n"
        },
        {
          "language": "typescript",
          "line_count": 3,
          "complexity": "simple",
          "code": "// Merge in Web Worker or use incremental merging\nworker.postMessage({ type: 'merge', data: largeDocument });\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "anti-slop/references/code-patterns.md",
      "category": "anti-slop",
      "skill_name": "code-patterns",
      "frontmatter": {
        "name": "code-patterns",
        "description": "Reference guide for detecting AI slop patterns in code including generic variable names, obvious comments, and unnecessary abstractions. Use as reference when reviewing code quality."
      },
      "metrics": {
        "line_count": 353,
        "code_line_count": 101,
        "code_examples": 12,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "# Bad\n# Create a user\nuser = User()\n\n# Increment the counter\ncounter += 1\n\n# Return the result\nreturn result\n\n# Loop through the items\nfor item in items:\n    process(item)\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Bad\n# TODO: Implement this function\n# TODO: Add error handling\n# TODO: Optimize this code\n# TODO: Refactor this\n\n# Better\n# TODO(user): Handle case where API returns 429 rate limit\n# TODO(user): Pro"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Bad\n# Check if the user is authenticated by examining the session token\n# and verifying it matches our stored tokens in the database\nif session.token in valid_tokens:\n    # If authenticated, proceed"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Bad\n########################################\n# INITIALIZATION\n########################################\n\n########################################\n# MAIN PROCESSING LOGIC\n#############################"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "# Bad - AI-generated overengineering\nclass UserManagerFactory:\n    def create_user_manager(self):\n        return UserManager()\n\nclass UserManager:\n    def get_user_repository(self):\n        return Use"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Bad\ntry:\n    result = dangerous_operation()\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n    pass  # Continue anyway\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Bad\ntry:\n    risky_operation()\nexcept:\n    pass\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Bad - AI overthinking simple tasks\ndef is_even(n):\n    \"\"\"Check if a number is even using mathematical properties.\"\"\"\n    return (n / 2) == (n // 2)\n\n# Better\ndef is_even(n):\n    return n % 2 == 0\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Bad - optimizing before profiling\n# Using bit manipulation for \"performance\"\ndef multiply_by_two(n):\n    return n << 1\n\n# Better - clear and correct\ndef multiply_by_two(n):\n    return n * 2\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Bad\nif len(input) > 255:\n    raise ValueError()\n\n# Better\nMAX_INPUT_LENGTH = 255  # Database column limit\nif len(input) > MAX_INPUT_LENGTH:\n    raise ValueError(f\"Input exceeds maximum length of {MA"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Bad\ndef process_data(data):\n    \"\"\"Process the data.\n    \n    Args:\n        data: The data to process\n        \n    Returns:\n        The processed data\n    \"\"\"\n    pass\n"
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "# Bad - Internal helper function\ndef _format_date(date_obj):\n    \"\"\"Format a date object into a string.\n    \n    This function takes a date object and formats it according to\n    ISO 8601 standards. I"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "12 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "2 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/lora-peft-techniques.md",
      "category": "ml",
      "skill_name": "lora-peft-techniques",
      "frontmatter": {
        "name": "ml-lora-peft-techniques",
        "description": "Fine-tuning large models with limited GPU memory"
      },
      "metrics": {
        "line_count": 543,
        "code_line_count": 99,
        "code_examples": 13,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "from peft import LoraConfig, get_peft_model\nfrom transformers import AutoModelForCausalLM\n\n# Load base model\nmodel = AutoModelForCausalLM.from_pretrained(\n    \"meta-llama/Llama-3-8b\",\n    device_map=\""
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "from transformers import AutoModelForCausalLM, BitsAndBytesConfig\nfrom peft import LoraConfig, prepare_model_for_kbit_training, get_peft_model\nimport torch\n\n# 4-bit quantization config\nbnb_config = Bi"
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "# Attention-only (memory efficient)\ntarget_modules = [\"q_proj\", \"v_proj\"]\n\n# All attention (good balance)\ntarget_modules = [\"q_proj\", \"k_proj\", \"v_proj\", \"o_proj\"]\n\n# Attention + MLP (best quality)\nta"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Small models (<3B) or simple tasks\nlora_config = LoraConfig(r=8, lora_alpha=16)\n\n# Medium models (7-13B) general tasks\nlora_config = LoraConfig(r=16, lora_alpha=32)\n\n# Large models (30-70B) or compl"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "from peft import PeftModel\n\n# Save LoRA adapter only (~100MB for r=16)\nmodel.save_pretrained(\"./lora-adapters\")\n\n# Load LoRA adapter\nfrom transformers import AutoModelForCausalLM\n\nbase_model = AutoMod"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "from peft import PeftModel\n\n# Load base model once\nbase_model = AutoModelForCausalLM.from_pretrained(\n    \"meta-llama/Llama-3-8b\",\n    device_map=\"auto\"\n)\n\n# Load first adapter\nmodel = PeftModel.from_"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "from peft import PeftModel\n\n# Load base and first adapter\nmodel = PeftModel.from_pretrained(\n    base_model,\n    \"adapters/task1\",\n    adapter_name=\"task1\"\n)\n\n# Load additional adapters\nmodel.load_ada"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "from transformers import Trainer, TrainingArguments\nfrom peft import get_peft_model, LoraConfig\n\n# Configure LoRA\nlora_config = LoraConfig(\n    r=16,\n    lora_alpha=32,\n    target_modules=[\"q_proj\", \""
        },
        {
          "language": "python",
          "line_count": 75,
          "complexity": "complex",
          "code": "import modal\n\napp = modal.App(\"lora-finetune\")\n\nimage = (\n    modal.Image.debian_slim()\n    .pip_install(\n        \"torch\",\n        \"transformers\",\n        \"peft\",\n        \"bitsandbytes\",\n        \"acce"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Common patterns\nlora_alpha = r          # 1:1 ratio (standard)\nlora_alpha = r * 2      # 2:1 ratio (stronger updates)\nlora_alpha = 32         # Fixed at 32 (some practitioners prefer)\n\n# Alpha / r r"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c Bad: Alpha much larger than rank\nlora_config = LoraConfig(r=8, lora_alpha=128)\n\n# \u2705 Good: Alpha = r or 2*r\nlora_config = LoraConfig(r=16, lora_alpha=32)\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# \u2705 Enable gradient checkpointing\nmodel.gradient_checkpointing_enable()\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# \u274c Bad: 4-bit model but fp32 LoRA\n# \u2705 Good: Match compute dtype\nbnb_config = BitsAndBytesConfig(\n    bnb_4bit_compute_dtype=torch.bfloat16\n)\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/dspy-optimizers.md",
      "category": "ml",
      "skill_name": "dspy-optimizers",
      "frontmatter": {
        "name": "dspy-optimizers",
        "description": "Optimizing DSPy programs with teleprompters, BootstrapFewShot, MIPROv2, and compilation"
      },
      "metrics": {
        "line_count": 547,
        "code_line_count": 113,
        "code_examples": 17,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "import dspy\n\n# Configure LM\nlm = dspy.LM(\"openai/gpt-4o-mini\")\ndspy.configure(lm=lm)\n\n# Define module\nqa = dspy.ChainOfThought(\"question -> answer\")\n\n# Prepare training data\ntrainset = [\n    dspy.Exam"
        },
        {
          "language": "python",
          "line_count": 53,
          "complexity": "complex",
          "code": "import dspy\n\n# More sophisticated optimization\nqa = dspy.ChainOfThought(\"question, context -> answer\")\n\ntrainset = [\n    dspy.Example(\n        question=\"What is DSPy?\",\n        context=\"DSPy is a fram"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "import dspy\n\n# Metric with detailed scoring\ndef complex_metric(example, pred, trace=None):\n    \"\"\"Multi-factor metric for comprehensive evaluation.\"\"\"\n    score = 0.0\n\n    # Factor 1: Answer correctne"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "import dspy\n\nclass RAGPipeline(dspy.Module):\n    \"\"\"Retrieval-Augmented Generation pipeline.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.retrieve = dspy.Retrieve(k=3)\n        s"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "import dspy\n\n# Requires fine-tunable model\nteacher = dspy.ChainOfThought(\"question -> answer\")\n\n# Large training dataset\ntrainset = [\n    # Hundreds or thousands of examples\n]\n\n# Generate fine-tuning "
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "import dspy\nfrom dspy.evaluate import Evaluate\n\n# Define program\nprogram = dspy.ChainOfThought(\"question -> answer\")\n\n# Prepare datasets\ntrainset = [...]  # Training examples\nvalset = [...]    # Valid"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "import dspy\n\n# Compile program\noptimizer = dspy.MIPROv2(metric=my_metric)\ncompiled = optimizer.compile(student=program, trainset=trainset)\n\n# Save compiled program\ncompiled.save(\"optimized_qa.json\")\n\n"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "import dspy\n\nprogram = dspy.ChainOfThought(\"question -> answer\")\n\n# Start with simple optimizer\noptimizer1 = dspy.BootstrapFewShot(metric=my_metric)\nv1 = optimizer1.compile(student=program, trainset=t"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "def my_metric(example, pred, trace=None):\n    \"\"\"\n    Args:\n        example: Ground truth example\n        pred: Model prediction\n        trace: Execution trace (optional)\n\n    Returns:\n        float: "
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad\noptimizer.compile(student=program, trainset=testset)  # WRONG!\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Good\ncompiled = optimizer.compile(student=program, trainset=trainset, valset=valset)\nfinal_score = evaluate(compiled, testset)  # Honest evaluation\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad\ndef bad_metric(example, pred, trace=None):\n    return True  # Always returns True, useless!\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Good\ndef good_metric(example, pred, trace=None):\n    return example.answer.lower() == pred.answer.lower()\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad - skip straight to optimization\noptimized = optimizer.compile(...)  # Did it improve? Unknown!\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Good\nbaseline_score = evaluate(program, testset)\noptimized = optimizer.compile(program, trainset)\noptimized_score = evaluate(optimized, testset)\nprint(f\"Improvement: {optimized_score - baseline_scor"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad\ntrainset = [example1, example2]  # Only 2 examples\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Good\ntrainset = [...]  # 50+ examples for BootstrapFewShot, 500+ for MIPROv2\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/dspy-modules.md",
      "category": "ml",
      "skill_name": "dspy-modules",
      "frontmatter": {
        "name": "dspy-modules",
        "description": "Building composable prediction modules with Predict, ChainOfThought, ReAct, and custom modules"
      },
      "metrics": {
        "line_count": 531,
        "code_line_count": 113,
        "code_examples": 16,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "import dspy\n\n# Configure LM\nlm = dspy.LM(\"openai/gpt-4o-mini\")\ndspy.configure(lm=lm)\n\n# Simple prediction\npredictor = dspy.Predict(\"question -> answer\")\n\n# Use module\nresult = predictor(question=\"What"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "import dspy\n\nclass QASignature(dspy.Signature):\n    \"\"\"Answer questions with reasoning.\"\"\"\n    question = dspy.InputField(desc=\"Question to answer\")\n    answer = dspy.OutputField(desc=\"Answer to the q"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "import dspy\n\nclass SearchQA(dspy.Signature):\n    \"\"\"Answer questions using search results.\"\"\"\n    question = dspy.InputField()\n    answer = dspy.OutputField()\n\n# Define tools that ReAct can use\ndef se"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "complex",
          "code": "import dspy\n\nclass MathProblem(dspy.Signature):\n    \"\"\"Solve math problems by generating Python code.\"\"\"\n    problem = dspy.InputField(desc=\"Math problem to solve\")\n    solution = dspy.OutputField(des"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "import dspy\n\nclass RAGModule(dspy.Module):\n    \"\"\"Custom Retrieval-Augmented Generation module.\"\"\"\n\n    def __init__(self, num_passages=3):\n        super().__init__()\n        self.num_passages = num_p"
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "import dspy\n\nclass MultiStepQA(dspy.Module):\n    \"\"\"Answer questions using multi-step reasoning.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n\n        # Step 1: Break down question\n        s"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "import dspy\n\nclass RobustPredictor(dspy.Module):\n    \"\"\"Predictor with automatic retry on failure.\"\"\"\n\n    def __init__(self, signature, max_retries=3):\n        super().__init__()\n        self.predict"
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "import dspy\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass EnsemblePredictor(dspy.Module):\n    \"\"\"Run multiple predictors in parallel and combine results.\"\"\"\n\n    def __init__(self, signatur"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "complex",
          "code": "class MyModule(dspy.Module):\n    def __init__(self):\n        super().__init__()\n        # Define sub-modules\n\n    def forward(self, **kwargs):\n        # Implement logic\n        return dspy.Prediction("
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "# Simple predictor\npred = dspy.Predict(\"input -> output\")\n\n# Reasoning predictor\ncot = dspy.ChainOfThought(\"question -> answer\")\n\n# With tools\nreact = dspy.ReAct(signature, tools=[tool1, tool2])\n\n# Cu"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad - overkill for simple classification\nclassifier = dspy.ChainOfThought(\"text -> category\")\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Good\nclassifier = dspy.Predict(\"text -> category\")\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "complex",
          "code": "# Bad - everything in one module\nclass Monolith(dspy.Module):\n    def forward(self, x):\n        # 100 lines of complex logic\n        pass\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "complex",
          "code": "# Good\nclass Pipeline(dspy.Module):\n    def __init__(self):\n        super().__init__()\n        self.step1 = Module1()\n        self.step2 = Module2()\n        self.step3 = Module3()\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Bad\ndef forward(self, x):\n    result = self.pred(x)\n    return result.answer  # Returns string, not Prediction\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Good\ndef forward(self, x):\n    result = self.pred(x)\n    return dspy.Prediction(answer=result.answer, confidence=0.9)\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "12 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/dspy-signatures.md",
      "category": "ml",
      "skill_name": "dspy-signatures",
      "frontmatter": {
        "name": "dspy-signatures",
        "description": "Defining input/output signatures for DSPy modules and language model tasks"
      },
      "metrics": {
        "line_count": 465,
        "code_line_count": 118,
        "code_examples": 18,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "import dspy\n\n# Basic question answering\nsignature = \"question -> answer\"\n\n# Classification\nsignature = \"text -> category\"\n\n# Summarization\nsignature = \"document -> summary\"\n\n# Use with Predict module\n"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "import dspy\n\n# Multiple inputs\nsignature = \"question, context -> answer\"\n\n# Multiple outputs\nsignature = \"text -> category, confidence\"\n\n# Complex task\nsignature = \"title, author, year -> summary, gen"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "import dspy\n\n# Explicit type annotations\nsignature = \"question: str, context: str -> answer: str, confidence: float\"\n\n# Using with module\nrag = dspy.Predict(\"question: str, context: str -> answer: str"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "import dspy\n\nclass QASignature(dspy.Signature):\n    \"\"\"Answer questions based on provided context.\"\"\"\n\n    # Input fields\n    question = dspy.InputField(desc=\"User's question\")\n    context = dspy.Inpu"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "import dspy\n\nclass SentimentAnalysis(dspy.Signature):\n    \"\"\"Analyze sentiment of text with confidence scoring.\"\"\"\n\n    text = dspy.InputField(desc=\"Text to analyze for sentiment\")\n\n    # Provide hint"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "import dspy\n\nclass ComplexQA(dspy.Signature):\n    \"\"\"Answer complex questions that require reasoning.\"\"\"\n\n    question = dspy.InputField(desc=\"Complex question requiring reasoning\")\n    context = dspy"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "import dspy\n\nclass MultipleChoice(dspy.Signature):\n    \"\"\"Select best answer from multiple choices.\"\"\"\n\n    question = dspy.InputField(desc=\"Question to answer\")\n    choices = dspy.InputField(desc=\"Li"
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "import dspy\n\nclass CodeReview(dspy.Signature):\n    \"\"\"Review code and provide structured feedback.\"\"\"\n\n    code = dspy.InputField(desc=\"Code to review\")\n    language = dspy.InputField(desc=\"Programmin"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Text\nquestion = dspy.InputField(desc=\"Question text\")\n\n# Numeric\nscore: float = dspy.OutputField(desc=\"Score from 0 to 1\")\n\n# Boolean\nis_valid: bool = dspy.OutputField(desc=\"True if valid\")\n\n# List\n"
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Classification\n\"text -> category, confidence: float\"\n\n# QA\n\"question, context -> answer\"\n\n# Summarization\n\"document: str -> summary: str, key_points: list[str]\"\n\n# Sentiment\n\"text -> sentiment, scor"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad\nsignature = \"input -> output\"\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Good\nsignature = \"customer_review -> sentiment_label, confidence_score: float\"\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "complex",
          "code": "# Bad\nclass BadSig(dspy.Signature):\n    text = dspy.InputField()\n    result = dspy.OutputField()\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "complex",
          "code": "# Good\nclass GoodSig(dspy.Signature):\n    \"\"\"Classify text into categories.\"\"\"\n    text = dspy.InputField(desc=\"Text to classify\")\n    category = dspy.OutputField(desc=\"Category: news, sports, or tech"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad - asking for too much at once\nsignature = \"text -> sentiment, category, summary, keywords, language, toxicity\"\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Good - focused tasks\nclassify_sig = \"text -> category, confidence: float\"\nsentiment_sig = \"text -> sentiment, score: float\"\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad - LM might return text instead of number\nsignature = \"text -> score\"\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Good\nsignature = \"text -> score: float, max_score: int\"\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "10 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/graph-rag.md",
      "category": "ml",
      "skill_name": "graph-rag",
      "frontmatter": {
        "name": "graph-rag",
        "description": "Graph-based retrieval-augmented generation with entity extraction, community detection, and multihop reasoning"
      },
      "metrics": {
        "line_count": 697,
        "code_line_count": 74,
        "code_examples": 12,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 169,
          "complexity": "complex",
          "code": "import dspy\nimport networkx as nx\nfrom typing import List, Dict\nimport community as community_louvain  # python-louvain for Leiden\n\nclass EntityExtractor(dspy.Module):\n    \"\"\"Extract entities and rela"
        },
        {
          "language": "python",
          "line_count": 94,
          "complexity": "complex",
          "code": "import dspy\nfrom neo4j import GraphDatabase\n\nclass Neo4jGraphRAG:\n    \"\"\"Graph RAG using Neo4j database.\"\"\"\n\n    def __init__(self, uri: str, user: str, password: str):\n        self.driver = GraphData"
        },
        {
          "language": "python",
          "line_count": 79,
          "complexity": "complex",
          "code": "import dspy\nimport networkx as nx\n\nclass MultihopGraphRAG(dspy.Module):\n    \"\"\"Graph RAG with explicit multihop reasoning.\"\"\"\n\n    def __init__(self, graph: nx.Graph, max_hops=3):\n        super().__in"
        },
        {
          "language": "python",
          "line_count": 64,
          "complexity": "complex",
          "code": "import dspy\n\nclass GraphRAGJudge(dspy.Module):\n    \"\"\"Evaluate Graph RAG answer quality using LLM.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.judge = dspy.ChainOfThought(\n    "
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Bad - graph overhead not worth it\nrag = GraphRAG(builder)\nresult = rag(\"What is Alice's email?\", query_type=\"local\")\n# Vector RAG would be faster and cheaper\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Good - reserve graph for complex queries\nif is_complex_query(question):\n    result = graph_rag(question)\nelse:\n    result = vector_rag(question)\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad - 5 documents, graph is overkill\ndocuments = [\"doc1\", \"doc2\", \"doc3\", \"doc4\", \"doc5\"]\nbuilder.add_documents(documents)  # Expensive entity extraction\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Good - graph valuable for 1000+ documents\nif len(documents) > 100:\n    use_graph_rag()\nelse:\n    use_vector_rag()\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Bad - running Leiden on every query\ndef query(question):\n    communities = detect_communities()  # Expensive!\n    return answer\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Good - detect communities once during build\nbuilder.add_documents(docs)\nbuilder.detect_communities()  # Once\n# ... later\nrag.query(question)  # Uses pre-computed communities\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad - trust graph traversal blindly\nresult = multihop_rag(question, start_entity)\nreturn result.answer  # Is the path correct?\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Good - validate reasoning paths\nresult = multihop_rag(question, start_entity)\njudgment = judge.evaluate(result.reasoning_path, ground_truth)\nif judgment.path_quality > 0.7:\n    return result.answer\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "12 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/dspy-evaluation.md",
      "category": "ml",
      "skill_name": "dspy-evaluation",
      "frontmatter": {
        "name": "dspy-evaluation",
        "description": "Evaluating DSPy programs with metrics, Evaluate class, and performance analysis"
      },
      "metrics": {
        "line_count": 527,
        "code_line_count": 112,
        "code_examples": 17,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "def metric(example, pred, trace=None) -> bool | float:\n    \"\"\"\n    Args:\n        example: Ground truth example with .answer, etc.\n        pred: Prediction object with .answer, .reasoning, etc.\n       "
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "import dspy\n\n# Binary metric: exact match\ndef exact_match(example, pred, trace=None):\n    \"\"\"Return True if prediction exactly matches answer.\"\"\"\n    return example.answer.lower().strip() == pred.answ"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "import dspy\n\ndef fuzzy_match(example, pred, trace=None):\n    \"\"\"Return score based on answer overlap.\"\"\"\n    answer = pred.answer.lower()\n    gold = example.answer.lower()\n\n    # Exact match\n    if an"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "import dspy\nfrom dspy.evaluate import Evaluate\n\n# Define program\nprogram = dspy.ChainOfThought(\"question -> answer\")\n\n# Prepare test set\ntestset = [\n    dspy.Example(question=\"What is 2+2?\", answer=\"4"
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "import dspy\nfrom dspy.evaluate import Evaluate\n\n# Multiple metrics for comprehensive evaluation\ndef accuracy(example, pred, trace=None):\n    return example.answer.lower() in pred.answer.lower()\n\ndef h"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "import dspy\nfrom dspy.evaluate import Evaluate\n\n# Program A: Simple Predict\nprogram_a = dspy.Predict(\"question -> answer\")\n\n# Program B: ChainOfThought\nprogram_b = dspy.ChainOfThought(\"question -> ans"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "import dspy\nfrom dspy.evaluate import Evaluate\n\nprogram = dspy.ChainOfThought(\"question -> answer\")\ntestset = [...]\n\n# Track errors for analysis\nerrors = []\n\ndef accuracy_with_logging(example, pred, t"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "import dspy\n\n# Use LM to evaluate predictions\njudge = dspy.ChainOfThought(\"question, answer, predicted_answer -> score: float, explanation\")\n\ndef llm_judge_metric(example, pred, trace=None):\n    \"\"\"Us"
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "import dspy\nfrom dspy.evaluate import Evaluate\nimport time\n\n# Production program\nprogram = dspy.ChainOfThought(\"question -> answer\")\n\n# Metrics for monitoring\ndef response_quality(example, pred, trace"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "def my_metric(example, pred, trace=None):\n    \"\"\"\n    Evaluate prediction quality.\n\n    Args:\n        example: dspy.Example with ground truth\n        pred: Prediction object from module\n        trace:"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "# Exact match\ndef exact_match(ex, pred, trace=None):\n    return ex.answer == pred.answer\n\n# Contains\ndef contains(ex, pred, trace=None):\n    return ex.answer.lower() in pred.answer.lower()\n\n# Fuzzy ma"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad\nevaluator = Evaluate(devset=trainset, metric=accuracy)  # WRONG!\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Good\nevaluator = Evaluate(devset=testset, metric=accuracy)\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad - only accuracy\nscore = evaluate(program, accuracy)\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Good - comprehensive evaluation\nacc = evaluate(program, accuracy)\nf1 = evaluate(program, f1_score)\nreasoning = evaluate(program, has_reasoning)\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad - just get score, don't investigate\nscore = evaluator(program)\nprint(score)  # Done, but learned nothing\n"
        },
        {
          "language": "python",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Good - investigate failures\nscore = evaluator(program)\nerrors = [ex for ex in testset if not metric(ex, program(ex.question))]\nanalyze_common_patterns(errors)\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/dspy-assertions.md",
      "category": "ml",
      "skill_name": "dspy-assertions",
      "frontmatter": {
        "name": "dspy-assertions",
        "description": "Adding constraints and validation to DSPy programs with assertions and suggestions"
      },
      "metrics": {
        "line_count": 613,
        "code_line_count": 114,
        "code_examples": 16,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "import dspy\n\nclass ValidatedQA(dspy.Module):\n    def __init__(self):\n        super().__init__()\n        self.generate = dspy.ChainOfThought(\"question -> answer\")\n\n    def forward(self, question):\n    "
        },
        {
          "language": "python",
          "line_count": 31,
          "complexity": "complex",
          "code": "import dspy\n\nclass SuggestedQA(dspy.Module):\n    def __init__(self):\n        super().__init__()\n        self.generate = dspy.ChainOfThought(\"question -> answer\")\n\n    def forward(self, question):\n    "
        },
        {
          "language": "python",
          "line_count": 48,
          "complexity": "complex",
          "code": "import dspy\nimport json\n\nclass JSONGenerator(dspy.Module):\n    \"\"\"Generate valid JSON output.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.generate = dspy.ChainOfThought(\n      "
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "import dspy\n\nclass ScoringModule(dspy.Module):\n    \"\"\"Generate scores with validation.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.score = dspy.ChainOfThought(\n            \"tex"
        },
        {
          "language": "python",
          "line_count": 45,
          "complexity": "complex",
          "code": "import dspy\n\nclass SafeContentGenerator(dspy.Module):\n    \"\"\"Generate content with safety checks.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.generate = dspy.ChainOfThought(\"to"
        },
        {
          "language": "python",
          "line_count": 60,
          "complexity": "complex",
          "code": "import dspy\n\nclass EntityExtractor(dspy.Module):\n    \"\"\"Extract entities with validation.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.extract = dspy.ChainOfThought(\n           "
        },
        {
          "language": "python",
          "line_count": 50,
          "complexity": "complex",
          "code": "import dspy\n\ndef is_valid_email(email: str) -> bool:\n    \"\"\"Simple email validation.\"\"\"\n    return \"@\" in email and \".\" in email.split(\"@\")[1]\n\ndef is_valid_phone(phone: str) -> bool:\n    \"\"\"Simple ph"
        },
        {
          "language": "python",
          "line_count": 43,
          "complexity": "complex",
          "code": "import dspy\n\nclass RobustGenerator(dspy.Module):\n    \"\"\"Generator with configurable assertion retries.\"\"\"\n\n    def __init__(self, max_retries=3):\n        super().__init__()\n        self.max_retries = "
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Assert (hard requirement)\ndspy.Assert(\n    condition,\n    \"Error message if condition is False\"\n)\n\n# Suggest (soft requirement with retry)\ndspy.Suggest(\n    condition,\n    \"Feedback message for retr"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Non-empty\ndspy.Assert(len(output.strip()) > 0, \"Output cannot be empty\")\n\n# Length constraint\ndspy.Suggest(len(output.split()) <= 100, \"Keep under 100 words\")\n\n# Numeric range\ndspy.Assert(0.0 <= sco"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Bad - too restrictive\ndspy.Assert(len(output) == 42, \"Must be exactly 42 characters\")\ndspy.Assert(\"the\" in output, \"Must contain 'the'\")\ndspy.Assert(output.startswith(\"Answer:\"), \"Must start with 'A"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Good - essential constraints only\ndspy.Assert(len(output.strip()) > 0, \"Output required\")\ndspy.Suggest(len(output.split()) <= 100, \"Prefer concise answers\")\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad\ndspy.Suggest(condition, \"Invalid\")\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Good\ndspy.Suggest(condition, \"Answer should be 2-3 sentences with specific examples\")\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad\nresult = module(input)  # May raise AssertionError\nreturn result.output\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Good\ntry:\n    result = module(input)\n    return result.output\nexcept AssertionError as e:\n    log_error(e)\n    return fallback_response()\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/diffusion-finetuning.md",
      "category": "ml",
      "skill_name": "diffusion-finetuning",
      "frontmatter": {
        "name": "ml-diffusion-finetuning",
        "description": "Fine-tuning diffusion models for custom styles or subjects"
      },
      "metrics": {
        "line_count": 606,
        "code_line_count": 65,
        "code_examples": 9,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 44,
          "complexity": "complex",
          "code": "from diffusers import StableDiffusionPipeline, DreamBoothTrainer\nfrom diffusers.utils import make_image_grid\nimport torch\n\n# 1. Prepare dataset\n# - instance_images/: Your 10-20 images\n# - class_images"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "accelerate launch train_dreambooth.py \\\n  --pretrained_model_name_or_path=\"runwayml/stable-diffusion-v1-5\" \\\n  --instance_data_dir=\"./instance_images\" \\\n  --class_data_dir=\"./class_images\" \\\n  --outpu"
        },
        {
          "language": "python",
          "line_count": 129,
          "complexity": "complex",
          "code": "import modal\nfrom pathlib import Path\n\n# Modal deployment for LoRA training\napp = modal.App(\"lora-training\")\n\nimage = (\n    modal.Image.debian_slim(python_version=\"3.11\")\n    .pip_install(\n        \"di"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "accelerate launch train_dreambooth_lora.py \\\n  --pretrained_model_name_or_path=\"runwayml/stable-diffusion-v1-5\" \\\n  --instance_data_dir=\"./instance_images\" \\\n  --output_dir=\"./lora_output\" \\\n  --insta"
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "from diffusers import StableDiffusionPipeline\nimport torch\n\n# Load base model\npipe = StableDiffusionPipeline.from_pretrained(\n    \"runwayml/stable-diffusion-v1-5\",\n    torch_dtype=torch.float16,\n).to("
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "from diffusers import StableDiffusionPipeline\nfrom safetensors.torch import load_file\nimport torch\n\npipe = StableDiffusionPipeline.from_pretrained(\n    \"runwayml/stable-diffusion-v1-5\",\n    torch_dtyp"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "# Textual inversion training (simplified)\nfrom diffusers import StableDiffusionPipeline\nimport torch\n\npipe = StableDiffusionPipeline.from_pretrained(\n    \"runwayml/stable-diffusion-v1-5\",\n    torch_dt"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "accelerate launch textual_inversion.py \\\n  --pretrained_model_name_or_path=\"runwayml/stable-diffusion-v1-5\" \\\n  --train_data_dir=\"./instance_images\" \\\n  --learnable_property=\"object\" \\\n  --placeholder"
        },
        {
          "language": "python",
          "line_count": 70,
          "complexity": "complex",
          "code": "from PIL import Image\nimport os\nfrom pathlib import Path\n\ndef prepare_dreambooth_dataset(\n    input_dir: str,\n    output_dir: str,\n    target_size: int = 512,\n    min_images: int = 5,\n):\n    \"\"\"Prepar"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "9 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/rag-reranking-techniques.md",
      "category": "ml",
      "skill_name": "rag-reranking-techniques",
      "frontmatter": {
        "name": "rag-reranking-techniques",
        "description": "Multi-stage retrieval pipelines with cross-encoder and LLM-based reranking for improved RAG precision"
      },
      "metrics": {
        "line_count": 624,
        "code_line_count": 66,
        "code_examples": 13,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 67,
          "complexity": "complex",
          "code": "import dspy\nfrom sentence_transformers import CrossEncoder\n\nclass CrossEncoderReranker(dspy.Module):\n    \"\"\"Two-stage retrieval with cross-encoder reranking.\"\"\"\n\n    def __init__(self, retrieve_k=20, "
        },
        {
          "language": "python",
          "line_count": 59,
          "complexity": "complex",
          "code": "import dspy\nfrom colbert.modeling.checkpoint import Checkpoint\nfrom colbert.infra import ColBERTConfig\n\nclass ColBERTReranker(dspy.Module):\n    \"\"\"Tensor-based late interaction reranking.\"\"\"\n\n    def "
        },
        {
          "language": "python",
          "line_count": 68,
          "complexity": "complex",
          "code": "import dspy\n\nclass LLMReranker(dspy.Module):\n    \"\"\"LLM-based contextual reranking.\"\"\"\n\n    def __init__(self, retrieve_k=20, rerank_k=5):\n        super().__init__()\n        self.retrieve_k = retrieve"
        },
        {
          "language": "python",
          "line_count": 59,
          "complexity": "complex",
          "code": "import dspy\nimport cohere\n\nclass CohereReranker(dspy.Module):\n    \"\"\"Production reranking with Cohere API.\"\"\"\n\n    def __init__(self, api_key: str, retrieve_k=30, rerank_k=5, model=\"rerank-english-v2."
        },
        {
          "language": "python",
          "line_count": 85,
          "complexity": "complex",
          "code": "import dspy\nfrom phoenix.trace import dsl as trace_dsl\nfrom phoenix.evals import RetrievalEvaluator\nimport numpy as np\n\nclass ObservableReranker(dspy.Module):\n    \"\"\"Reranking with Phoenix observabili"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad - too few candidates to rerank\nretrieve = dspy.Retrieve(k=5)  # Not enough!\nreranker = CrossEncoderReranker(retrieve_k=5, rerank_k=3)\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Good - cast wide net, then rerank\nreranker = CrossEncoderReranker(retrieve_k=30, rerank_k=5)\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad - reranking 100 passages with LLM\nfor passage in all_100_passages:\n    score = llm_rerank(query, passage)  # Expensive!\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Good - rerank only top candidates\ncandidates = fast_retrieve(query, k=30)\nreranked = llm_rerank(query, candidates[:10])\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Bad - deploy reranker without evaluation\nreranker = CrossEncoderReranker()\n# Hope it works better?\n"
        },
        {
          "language": "python",
          "line_count": 4,
          "complexity": "simple",
          "code": "# Good - evaluate impact\nresults = evaluate_reranking_impact(reranker, test_set)\n# nDCG improved by 18%\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Bad - LLM reranker for real-time app\nreranker = LLMReranker(retrieve_k=50, rerank_k=10)  # 2-3 seconds!\n"
        },
        {
          "language": "python",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Good - cross-encoder for <500ms latency\nreranker = CrossEncoderReranker(retrieve_k=30, rerank_k=5)  # 200ms\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/huggingface/huggingface-transformers.md",
      "category": "ml",
      "skill_name": "huggingface-transformers",
      "frontmatter": {
        "name": "ml-huggingface-transformers",
        "description": "Loading models, pipelines, inference, and tokenization with transformers library"
      },
      "metrics": {
        "line_count": 565,
        "code_line_count": 117,
        "code_examples": 18,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 6,
          "complexity": "complex",
          "code": "from transformers import AutoModel, AutoTokenizer\n\n# Automatically loads correct classes\nmodel = AutoModel.from_pretrained(\"bert-base-uncased\")\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-unc"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "from transformers import pipeline\n\n# Create pipeline\nclassifier = pipeline(\"text-classification\", model=\"distilbert-base-uncased-finetuned-sst-2-english\")\n\n# Single prediction\nresult = classifier(\"I l"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "from transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-uncased\")\n\n# Encode text\ninputs = tokenizer(\"Hello, world!\", return_tensors=\"pt\")\n# {'input_ids': tensor([["
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "import torch\nfrom transformers import AutoModelForSequenceClassification, AutoTokenizer\n\nmodel = AutoModelForSequenceClassification.from_pretrained(\"distilbert-base-uncased-finetuned-sst-2-english\")\nt"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "from transformers import AutoModel, AutoTokenizer\n\n# Load model and tokenizer\nmodel_name = \"bert-base-uncased\"\nmodel = AutoModel.from_pretrained(model_name)\ntokenizer = AutoTokenizer.from_pretrained(m"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "from transformers import pipeline\n\n# Text generation\ngenerator = pipeline(\"text-generation\", model=\"gpt2\")\noutput = generator(\"Once upon a time\", max_length=50, num_return_sequences=2)\n\n# Question ans"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "complex",
          "code": "import torch\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\n\n# Load model and tokenizer\nmodel = AutoModelForCausalLM.from_pretrained(\"gpt2\")\ntokenizer = AutoTokenizer.from_pretrained(\"gp"
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "from transformers import AutoModelForSequenceClassification, AutoTokenizer\nimport torch\n\nmodel = AutoModelForSequenceClassification.from_pretrained(\"distilbert-base-uncased-finetuned-sst-2-english\")\nt"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "from transformers import AutoModelForCausalLM, BitsAndBytesConfig\n\n# 4-bit quantization config\nquantization_config = BitsAndBytesConfig(\n    load_in_4bit=True,\n    bnb_4bit_compute_dtype=torch.float16"
        },
        {
          "language": "python",
          "line_count": 37,
          "complexity": "complex",
          "code": "from transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-uncased\")\n\n# Basic encoding\ntokens = tokenizer.encode(\"Hello, world!\")\n# [101, 7592, 1010, 2088, 999, 102]\n"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "import torch\nfrom transformers import AutoModel, AutoTokenizer\n\n# Check GPU availability\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# Load model to GPU\nmodel = AutoModel.fr"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "from transformers import AutoConfig, AutoModel\n\n# Load default config\nconfig = AutoConfig.from_pretrained(\"bert-base-uncased\")\n\n# Modify config\nconfig.num_hidden_layers = 6  # Reduce layers\nconfig.hid"
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "from transformers import AutoModelForCausalLM, AutoTokenizer, TextIteratorStreamer\nfrom threading import Thread\n\nmodel = AutoModelForCausalLM.from_pretrained(\"gpt2\")\ntokenizer = AutoTokenizer.from_pre"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u274c NEVER: Load model in loop\nfor text in texts:\n    model = AutoModel.from_pretrained(\"bert-base-uncased\")  # Extremely slow!\n    result = model(text)\n\n# \u2705 CORRECT: Load once, reuse\nmodel = AutoModel"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u274c Don't: Ignore device placement\nmodel = AutoModel.from_pretrained(\"bert-base-uncased\")\ninputs = tokenizer(text, return_tensors=\"pt\").to(\"cuda\")\noutputs = model(**inputs)  # Error: model on CPU, inp"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "# \u274c Don't: Forget no_grad during inference\noutputs = model(**inputs)  # Builds computation graph unnecessarily\n\n# \u2705 Correct: Use no_grad\nwith torch.no_grad():\n    outputs = model(**inputs)\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c Don't: Process items one by one\nresults = []\nfor text in texts:\n    inputs = tokenizer(text, return_tensors=\"pt\")\n    output = model(**inputs)\n    results.append(output)\n\n# \u2705 Correct: Batch proces"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u274c Don't: Forget pad_token_id for generation\noutputs = model.generate(inputs)\n# Warning: Setting `pad_token_id` to `eos_token_id`\n\n# \u2705 Correct: Set explicitly\noutputs = model.generate(\n    inputs,\n  "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "13 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "mobile/swiftui-navigation.md",
      "category": "mobile",
      "skill_name": "swiftui-navigation",
      "frontmatter": {
        "name": "swiftui-navigation",
        "description": "Implementing navigation in iOS 17+ apps"
      },
      "metrics": {
        "line_count": 730,
        "code_line_count": 137,
        "code_examples": 17,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "swift",
          "line_count": 17,
          "complexity": "simple",
          "code": "struct RootView: View {\n    var body: some View {\n        NavigationStack {\n            List {\n                NavigationLink(\"Settings\") {\n                    SettingsView()\n                }\n\n      "
        },
        {
          "language": "swift",
          "line_count": 64,
          "complexity": "complex",
          "code": "@Observable\nfinal class NavigationCoordinator {\n    var path: NavigationPath = NavigationPath()\n\n    func navigateToProfile() {\n        path.append(Route.profile)\n    }\n\n    func navigateToSettings() "
        },
        {
          "language": "swift",
          "line_count": 74,
          "complexity": "complex",
          "code": "// Define navigation routes\nenum AppRoute: Hashable {\n    case home\n    case userList\n    case userDetail(User)\n    case taskList(projectId: UUID)\n    case taskDetail(Task)\n    case settings\n}\n\n@Obser"
        },
        {
          "language": "swift",
          "line_count": 31,
          "complexity": "medium",
          "code": "struct MixedNavigationView: View {\n    @State private var path = NavigationPath()\n\n    var body: some View {\n        NavigationStack(path: $path) {\n            List {\n                Button(\"Show Stri"
        },
        {
          "language": "swift",
          "line_count": 58,
          "complexity": "complex",
          "code": "@Observable\nfinal class DeepLinkHandler {\n    var path: NavigationPath = NavigationPath()\n\n    func handle(_ url: URL) {\n        guard let components = URLComponents(url: url, resolvingAgainstBaseURL:"
        },
        {
          "language": "swift",
          "line_count": 18,
          "complexity": "simple",
          "code": "extension DeepLinkHandler {\n    func handleWithQuery(_ url: URL) {\n        guard let components = URLComponents(url: url, resolvingAgainstBaseURL: true) else {\n            return\n        }\n\n        //"
        },
        {
          "language": "swift",
          "line_count": 49,
          "complexity": "medium",
          "code": "struct TabNavigationView: View {\n    @State private var selectedTab = 0\n    @State private var homePath = NavigationPath()\n    @State private var searchPath = NavigationPath()\n    @State private var p"
        },
        {
          "language": "swift",
          "line_count": 54,
          "complexity": "complex",
          "code": "@Observable\nfinal class TabCoordinator {\n    var selectedTab: Tab = .home\n    var homePath: [Route] = []\n    var searchPath: [Route] = []\n    var profilePath: [Route] = []\n\n    var currentPath: Bindin"
        },
        {
          "language": "swift",
          "line_count": 46,
          "complexity": "medium",
          "code": "struct ContentView: View {\n    @State private var showSettings = false\n    @State private var selectedUser: User?\n\n    var body: some View {\n        NavigationStack {\n            List {\n              "
        },
        {
          "language": "swift",
          "line_count": 16,
          "complexity": "simple",
          "code": "struct MainView: View {\n    @State private var showOnboarding = false\n\n    var body: some View {\n        NavigationStack {\n            ContentView()\n        }\n        .fullScreenCover(isPresented: $sh"
        },
        {
          "language": "swift",
          "line_count": 35,
          "complexity": "medium",
          "code": "struct ActionView: View {\n    @State private var showDeleteAlert = false\n    @State private var showOptions = false\n\n    var body: some View {\n        VStack {\n            Button(\"Delete\") {\n         "
        },
        {
          "language": "swift",
          "line_count": 48,
          "complexity": "complex",
          "code": "@Observable\nfinal class NavigationState {\n    var path: [Route] = []\n\n    func save() {\n        let encoder = JSONEncoder()\n        if let data = try? encoder.encode(path) {\n            UserDefaults.s"
        },
        {
          "language": "swift",
          "line_count": 37,
          "complexity": "complex",
          "code": "import Testing\n\n@Test\nfunc testNavigationToProfile() {\n    let navigator = AppNavigator()\n\n    navigator.navigateToProfile()\n\n    #expect(navigator.path.count == 1)\n    #expect(navigator.path.first =="
        },
        {
          "language": "swift",
          "line_count": 10,
          "complexity": "simple",
          "code": "// \u274c BAD - Deprecated in iOS 16\nNavigationView {\n    List { }\n}\n\n// \u2705 GOOD\nNavigationStack {\n    List { }\n}\n"
        },
        {
          "language": "swift",
          "line_count": 8,
          "complexity": "simple",
          "code": "// \u274c BAD - Hard to maintain\n@State private var path1 = NavigationPath()\n@State private var path2 = NavigationPath()\n@State private var path3 = NavigationPath()\n\n// \u2705 GOOD - Use coordinator\n@State priv"
        },
        {
          "language": "swift",
          "line_count": 14,
          "complexity": "simple",
          "code": "// \u274c BAD - Custom dismissal logic\n@State private var isPresented = false\n\nButton(\"Close\") {\n    isPresented = false  // Parent must manage this\n}\n\n// \u2705 GOOD\n@Environment(\\.dismiss) private var dismiss"
        },
        {
          "language": "swift",
          "line_count": 22,
          "complexity": "medium",
          "code": "// \u274c BAD - Mixing NavigationStack and NavigationLink value\nNavigationStack(path: $path) {\n    NavigationLink(value: route) {  // Good\n        Text(\"Link 1\")\n    }\n\n    NavigationLink(destination: Deta"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "mobile/swiftdata-persistence.md",
      "category": "mobile",
      "skill_name": "swiftdata-persistence",
      "frontmatter": {
        "name": "swiftdata-persistence",
        "description": "Building iOS/macOS apps with local persistence"
      },
      "metrics": {
        "line_count": 814,
        "code_line_count": 168,
        "code_examples": 18,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "swift",
          "line_count": 17,
          "complexity": "complex",
          "code": "import SwiftData\n\n@Model\nfinal class Task {\n    var title: String\n    var isCompleted: Bool\n    var createdAt: Date\n    var dueDate: Date?\n\n    init(title: String, isCompleted: Bool = false, dueDate: "
        },
        {
          "language": "swift",
          "line_count": 43,
          "complexity": "complex",
          "code": "@Model\nfinal class Project {\n    var name: String\n    var createdAt: Date\n\n    // One-to-many: one project has many tasks\n    @Relationship(deleteRule: .cascade, inverse: \\Task.project)\n    var tasks:"
        },
        {
          "language": "swift",
          "line_count": 24,
          "complexity": "complex",
          "code": "@Model\nfinal class User {\n    // Unique constraint\n    @Attribute(.unique) var email: String\n\n    // Spotlight indexing\n    @Attribute(.spotlight) var name: String\n\n    // Prevent from being saved\n   "
        },
        {
          "language": "swift",
          "line_count": 44,
          "complexity": "complex",
          "code": "import SwiftUI\nimport SwiftData\n\n@main\nstruct TaskApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n        }\n        .modelContainer(for: [Task.self, Project.self,"
        },
        {
          "language": "swift",
          "line_count": 36,
          "complexity": "medium",
          "code": "@main\nstruct MultiContainerApp: App {\n    let userContainer: ModelContainer\n    let cacheContainer: ModelContainer\n\n    init() {\n        do {\n            // Persistent user data\n            userContai"
        },
        {
          "language": "swift",
          "line_count": 37,
          "complexity": "medium",
          "code": "struct TaskListView: View {\n    // Fetch all tasks\n    @Query private var tasks: [Task]\n\n    var body: some View {\n        List(tasks) { task in\n            TaskRow(task: task)\n        }\n    }\n}\n\n// W"
        },
        {
          "language": "swift",
          "line_count": 46,
          "complexity": "medium",
          "code": "struct ProjectTasksView: View {\n    let project: Project\n\n    @Query private var tasks: [Task]\n\n    init(project: Project) {\n        self.project = project\n\n        // Filter tasks by project\n        "
        },
        {
          "language": "swift",
          "line_count": 55,
          "complexity": "complex",
          "code": "@Observable\nfinal class TaskViewModel {\n    var tasks: [Task] = []\n    var errorMessage: String?\n\n    private let modelContext: ModelContext\n\n    init(modelContext: ModelContext) {\n        self.modelC"
        },
        {
          "language": "swift",
          "line_count": 62,
          "complexity": "complex",
          "code": "struct TaskEditorView: View {\n    @Environment(\\.modelContext) private var modelContext\n    @State private var title = \"\"\n\n    var body: some View {\n        Form {\n            TextField(\"Task title\", "
        },
        {
          "language": "swift",
          "line_count": 59,
          "complexity": "complex",
          "code": "@Observable\nfinal class TaskManager {\n    private let modelContext: ModelContext\n\n    init(modelContext: ModelContext) {\n        self.modelContext = modelContext\n    }\n\n    func completeAll(in project"
        },
        {
          "language": "swift",
          "line_count": 37,
          "complexity": "complex",
          "code": "@Observable\nfinal class ProjectManager {\n    private let modelContext: ModelContext\n\n    init(modelContext: ModelContext) {\n        self.modelContext = modelContext\n    }\n\n    func createProjectWithTa"
        },
        {
          "language": "swift",
          "line_count": 21,
          "complexity": "complex",
          "code": "@Model\nfinal class Project {\n    var name: String\n\n    // Cascade: deleting project deletes all tasks\n    @Relationship(deleteRule: .cascade)\n    var tasks: [Task] = []\n\n    // Nullify: deleting proje"
        },
        {
          "language": "swift",
          "line_count": 56,
          "complexity": "complex",
          "code": "// Version 1\n@Model\nfinal class Task {\n    var title: String\n    var isCompleted: Bool\n\n    init(title: String) {\n        self.title = title\n        self.isCompleted = false\n    }\n}\n\n// Version 2 - Ad"
        },
        {
          "language": "swift",
          "line_count": 48,
          "complexity": "medium",
          "code": "actor DataImporter {\n    private let modelContainer: ModelContainer\n\n    init(modelContainer: ModelContainer) {\n        self.modelContainer = modelContainer\n    }\n\n    func importTasks(from url: URL) "
        },
        {
          "language": "swift",
          "line_count": 44,
          "complexity": "complex",
          "code": "import Testing\nimport SwiftData\n\n@Test\nfunc testTaskCreation() async throws {\n    // Create in-memory container\n    let config = ModelConfiguration(isStoredInMemoryOnly: true)\n    let container = try "
        },
        {
          "language": "swift",
          "line_count": 14,
          "complexity": "simple",
          "code": "// \u274c BAD - Multiple fetches\nfor projectId in projectIds {\n    let descriptor = FetchDescriptor<Project>(\n        predicate: #Predicate { $0.id == projectId }\n    )\n    let project = try context.fetch("
        },
        {
          "language": "swift",
          "line_count": 13,
          "complexity": "simple",
          "code": "// \u274c BAD - Manual deletion\nfor task in project.tasks {\n    context.delete(task)\n}\ncontext.delete(project)\n\n// \u2705 GOOD - Use cascade\n@Relationship(deleteRule: .cascade)\nvar tasks: [Task] = []\n\n// Then j"
        },
        {
          "language": "swift",
          "line_count": 18,
          "complexity": "simple",
          "code": "// \u274c BAD - Blocks UI\nfunc importData() {\n    for item in largeDataset {\n        let task = Task(title: item.title)\n        modelContext.insert(task)\n    }\n}\n\n// \u2705 GOOD - Background context\nfunc import"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "18 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "15 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "cloud/gcp/gcp-storage.md",
      "category": "cloud",
      "skill_name": "gcp-storage",
      "frontmatter": {
        "name": "cloud-gcp-storage",
        "description": "Google Cloud storage services including Cloud Storage, Persistent Disk, and Filestore"
      },
      "metrics": {
        "line_count": 479,
        "code_line_count": 98,
        "code_examples": 17,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "complex",
          "code": "# Create bucket with Standard storage class\ngsutil mb -c STANDARD -l us-central1 gs://my-app-data\n\n# Create bucket with Nearline for backups\ngsutil mb -c NEARLINE -l us-central1 gs://my-backups\n\n# Upl"
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "from google.cloud import compute_v1\n\ndef create_instance_with_disk(project_id, zone, instance_name):\n    client = compute_v1.InstancesClient()\n\n    # Create instance with balanced persistent disk\n    "
        },
        {
          "language": "json",
          "line_count": 19,
          "complexity": "simple",
          "code": "{\n  \"lifecycle\": {\n    \"rule\": [\n      {\n        \"action\": {\"type\": \"SetStorageClass\", \"storageClass\": \"NEARLINE\"},\n        \"condition\": {\"age\": 30}\n      },\n      {\n        \"action\": {\"type\": \"SetSto"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Apply lifecycle policy to bucket\ngsutil lifecycle set lifecycle.json gs://my-bucket\n"
        },
        {
          "language": "bash",
          "line_count": 14,
          "complexity": "simple",
          "code": "# \u274c Bad: No versioning, data can be permanently lost\ngsutil mb gs://critical-data\n# Accidental overwrite loses data permanently\n\n# \u2705 Good: Enable versioning with retention policy\ngsutil mb gs://critic"
        },
        {
          "language": "bash",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Create regional persistent disk (replicated across 2 zones)\ngcloud compute disks create db-disk \\\n  --size=500GB \\\n  --type=pd-ssd \\\n  --region=us-central1 \\\n  --replica-zones=us-central1-a,us-centr"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "from google.cloud import storage\nfrom datetime import timedelta\n\ndef generate_signed_url(bucket_name, blob_name, expiration_minutes=15):\n    storage_client = storage.Client()\n    bucket = storage_clie"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "complex",
          "code": "from google.cloud import storage\n\ndef resumable_upload(bucket_name, source_file, destination_blob):\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(bucket_name)\n    blob = buc"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Create Filestore instance (1TB, BASIC_HDD tier)\ngcloud filestore instances create shared-storage \\\n  --location=us-central1-a \\\n  --tier=BASIC_HDD \\\n  --file-share=name=data,capacity=1TB \\\n  --netwo"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Create transfer job from AWS S3 to Cloud Storage\ngcloud transfer jobs create s3://source-bucket gs://dest-bucket \\\n  --source-creds-file=aws-creds.json \\\n  --description=\"Migrate production data\" \\\n"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Create Cloud KMS key ring and key\ngcloud kms keyrings create my-keyring --location=us-central1\ngcloud kms keys create storage-key \\\n  --keyring=my-keyring \\\n  --location=us-central1 \\\n  --purpose=en"
        },
        {
          "language": "bash",
          "line_count": 24,
          "complexity": "medium",
          "code": "# Create snapshot of persistent disk\ngcloud compute disks snapshot data-disk \\\n  --snapshot-names=data-disk-2025-10-25 \\\n  --zone=us-central1-a \\\n  --storage-location=us-central1\n\n# Create snapshot sc"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Bucket operations\ngsutil mb -c STANDARD -l LOCATION gs://BUCKET\ngsutil ls gs://BUCKET\ngsutil du -s gs://BUCKET  # Check size\ngsutil rm -r gs://BUCKET\n\n# Object operations\ngsutil cp LOCAL gs://BUCKET"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c NEVER: Lock retention policy without careful consideration\ngsutil retention lock gs://bucket  # IRREVERSIBLE - cannot be unlocked!\n\n# \u2705 CORRECT: Test retention policy first, then lock only if requ"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "# \u274c Don't: Use Archive class for frequently accessed data\nbucket = storage_client.bucket(\"user-uploads\")\nblob = bucket.blob(\"profile.jpg\")\nblob.upload_from_filename(\"profile.jpg\")\nblob.update_storage_"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# \u274c Don't: Attach persistent disk to multiple instances in read-write mode\ngcloud compute instances attach-disk vm-1 --disk=shared-disk --mode=rw\ngcloud compute instances attach-disk vm-2 --disk=share"
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# \u274c Don't: Delete original snapshots when using incremental snapshots\ngcloud compute snapshots delete snapshot-1  # Breaks snapshot chain!\n\n# \u2705 Correct: Keep base snapshot or understand incremental ch"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "17 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ebpf/ebpf-fundamentals.md",
      "category": "ebpf",
      "skill_name": "ebpf-fundamentals",
      "frontmatter": {
        "name": "ebpf-fundamentals",
        "description": "eBPF basics including program types, verifier, maps, BCC vs libbpf toolchains, and loading programs"
      },
      "metrics": {
        "line_count": 556,
        "code_line_count": 127,
        "code_examples": 16,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "c",
          "line_count": 41,
          "complexity": "medium",
          "code": "// Kprobe: Trace kernel function entry\nSEC(\"kprobe/sys_execve\")\nint trace_execve(struct pt_regs *ctx) {\n    char comm[16];\n    bpf_get_current_comm(&comm, sizeof(comm));\n    bpf_printk(\"Process: %s\\n\""
        },
        {
          "language": "c",
          "line_count": 28,
          "complexity": "medium",
          "code": "// \u274c REJECTED: Unbounded loop\nfor (int i = 0; i < n; i++) { // n from packet - verifier rejects\n    // ...\n}\n\n// \u2705 ACCEPTED: Bounded loop\n#pragma unroll\nfor (int i = 0; i < 10; i++) { // Fixed bound\n "
        },
        {
          "language": "c",
          "line_count": 33,
          "complexity": "medium",
          "code": "// Define map in eBPF program\nstruct {\n    __uint(type, BPF_MAP_TYPE_HASH);\n    __uint(max_entries, 10240);\n    __type(key, u32);    // PID\n    __type(value, u64);  // Timestamp\n} start_times SEC(\".ma"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "complex",
          "code": "# Quick prototyping with Python\nfrom bcc import BPF\n\nprogram = \"\"\"\n#include <uapi/linux/ptrace.h>\n\nint trace_open(struct pt_regs *ctx) {\n    bpf_trace_printk(\"open() called\\\\n\");\n    return 0;\n}\n\"\"\"\n\n"
        },
        {
          "language": "c",
          "line_count": 14,
          "complexity": "simple",
          "code": "// Modern approach - portable binaries\n#include <vmlinux.h>\n#include <bpf/bpf_helpers.h>\n\nSEC(\"kprobe/do_sys_open\")\nint BPF_KPROBE(trace_open, int dfd, const char __user *filename) {\n    char fname[25"
        },
        {
          "language": "c",
          "line_count": 29,
          "complexity": "medium",
          "code": "// eBPF program\nstruct event {\n    u32 pid;\n    char comm[16];\n    char filename[256];\n};\n\nstruct {\n    __uint(type, BPF_MAP_TYPE_RINGBUF);\n    __uint(max_entries, 256 * 1024);\n} events SEC(\".maps\");\n"
        },
        {
          "language": "c",
          "line_count": 27,
          "complexity": "medium",
          "code": "// Userspace consumer (C)\n#include <bpf/libbpf.h>\n\nint handle_event(void *ctx, void *data, size_t data_sz) {\n    struct event *e = data;\n    printf(\"PID %d (%s) opened: %s\\n\", e->pid, e->comm, e->file"
        },
        {
          "language": "c",
          "line_count": 23,
          "complexity": "medium",
          "code": "// Allowlist map\nstruct {\n    __uint(type, BPF_MAP_TYPE_HASH);\n    __uint(max_entries, 1024);\n    __type(key, u32);    // PID\n    __type(value, u8);   // Dummy value\n} allowlist SEC(\".maps\");\n\nSEC(\"kp"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "# Userspace control (Python with BCC)\nfrom bcc import BPF\n\nb = BPF(src_file=\"filter.bpf.c\")\nallowlist = b[\"allowlist\"]\n\n# Add PIDs to allowlist\nallowlist[c_uint(1234)] = c_ubyte(1)\nallowlist[c_uint(56"
        },
        {
          "language": "c",
          "line_count": 19,
          "complexity": "simple",
          "code": "struct {\n    __uint(type, BPF_MAP_TYPE_PERCPU_ARRAY);\n    __uint(max_entries, 256);\n    __type(key, u32);\n    __type(value, u64);\n} syscall_counts SEC(\".maps\");\n\nSEC(\"tracepoint/raw_syscalls/sys_enter"
        },
        {
          "language": "c",
          "line_count": 16,
          "complexity": "simple",
          "code": "// Userspace aggregation\nint fd = bpf_map__fd(map);\n__u32 key = 0;\n__u64 values[num_cpus];\n\nfor (key = 0; key < 256; key++) {\n    if (bpf_map_lookup_elem(fd, &key, values) == 0) {\n        __u64 total "
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Load with verbose verifier output\nbpftool prog load program.o /sys/fs/bpf/myprog type kprobe\n\n# Common errors and fixes:\n\n# Error: \"back-edge from insn X to Y\"\n# Fix: Use #pragma unroll or reduce lo"
        },
        {
          "language": "c",
          "line_count": 26,
          "complexity": "medium",
          "code": "// Get current process info\nu32 pid = bpf_get_current_pid_tgid() >> 32;\nu32 tid = bpf_get_current_pid_tgid() & 0xFFFFFFFF;\nu64 uid = bpf_get_current_uid_gid() >> 32;\n\nchar comm[16];\nbpf_get_current_co"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Compile\nclang -O2 -target bpf -c program.bpf.c -o program.bpf.o\n\n# Load and attach\nbpftool prog load program.bpf.o /sys/fs/bpf/myprog\nbpftool prog attach pinned /sys/fs/bpf/myprog kprobe do_sys_open"
        },
        {
          "language": "c",
          "line_count": 16,
          "complexity": "simple",
          "code": "// \u274c NEVER: Unbounded operations\nint count = get_packet_size(); // From network\nfor (int i = 0; i < count; i++) { // REJECTED\n    // Process\n}\n\n// \u2705 CORRECT: Bounded with max\nint count = get_packet_si"
        },
        {
          "language": "c",
          "line_count": 16,
          "complexity": "simple",
          "code": "// \u274c Don't: Forget bounds checking\nvoid *data_end = (void *)(long)ctx->data_end;\nvoid *data = (void *)(long)ctx->data;\nstruct ethhdr *eth = data;\n__u16 proto = eth->h_proto; // REJECTED - no bounds ch"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "16 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "9 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "modal/modal-performance-debugging.md",
      "category": "modal",
      "skill_name": "modal-performance-debugging",
      "frontmatter": {
        "name": "modal-modal-performance-debugging",
        "description": "Modal functions running slower than expected"
      },
      "metrics": {
        "line_count": 647,
        "code_line_count": 111,
        "code_examples": 13,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 14,
          "complexity": "complex",
          "code": "import time\nimport modal\n\n@app.function()\ndef measure_performance():\n    start = time.time()\n\n    # Your code here\n    result = expensive_operation()\n\n    duration = time.time() - start\n    print(f\"Ex"
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "complex",
          "code": "import time\nimport modal\n\napp = modal.App(\"profiling-demo\")\n\n@app.function()\ndef profile_execution():\n    \"\"\"Profile different stages of execution\"\"\"\n    stages = {}\n\n    # Stage 1: Data loading\n    s"
        },
        {
          "language": "python",
          "line_count": 48,
          "complexity": "complex",
          "code": "import modal\n\n# Add nvidia-smi to image\nimage = modal.Image.debian_slim().apt_install(\"nvidia-utils\")\n\n@app.function(gpu=\"A10G\", image=image)\ndef profile_gpu():\n    \"\"\"Monitor GPU utilization during e"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "medium",
          "code": "# \u274c Bad: Large image with unnecessary packages\nimage = modal.Image.debian_slim().uv_pip_install(\n    \"transformers[torch]\",  # Includes all dependencies\n    \"tensorflow\",           # Not needed\n    \"s"
        },
        {
          "language": "python",
          "line_count": 36,
          "complexity": "complex",
          "code": "# \u274c Bad: Import heavy libraries at module level\nimport torch\nimport transformers\nimport numpy as np\n\n@app.function()\ndef inference(text: str):\n    model = transformers.AutoModel.from_pretrained(\"model"
        },
        {
          "language": "python",
          "line_count": 54,
          "complexity": "complex",
          "code": "import modal\n\n# \u274c Bad: Download model every cold start\n@app.function(gpu=\"A10G\")\ndef slow_inference():\n    from transformers import AutoModel\n\n    # Downloads ~2GB every cold start\n    model = AutoMod"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "# \u274c Bad: Containers die after each call\n@app.function(timeout=60)\ndef process():\n    # Container dies after 60s timeout\n    expensive_setup()\n    do_work()\n\n# \u2705 Good: Use keep_warm to maintain pool\n@a"
        },
        {
          "language": "python",
          "line_count": 16,
          "complexity": "simple",
          "code": "# \u274c Bad: One call per container (inefficient)\n@app.function()\ndef handle_request(data):\n    return process(data)\n\n# \u2705 Good: Allow concurrent calls on same container\n@app.function(\n    concurrency_limi"
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "# \u274c Bad: Over-allocated GPU\n@app.function(gpu=\"H100\")  # 80GB VRAM, expensive\ndef small_model_inference():\n    # Only uses 4GB VRAM, wastes 76GB\n    model = load_small_model()\n    return model.predict"
        },
        {
          "language": "python",
          "line_count": 51,
          "complexity": "complex",
          "code": "# \u274c Bad: Process one item at a time\n@app.function(gpu=\"A10G\")\ndef process_items(items: list):\n    results = []\n    for item in items:\n        result = model.predict(item)  # Underutilizes GPU\n        "
        },
        {
          "language": "python",
          "line_count": 26,
          "complexity": "complex",
          "code": "import modal\nimport tracemalloc\n\n@app.function(memory=2048)  # Start with 2GB\ndef profile_memory():\n    \"\"\"Profile memory usage to right-size allocation\"\"\"\n    tracemalloc.start()\n\n    # Your workload"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "# \u274c Bad: Load entire dataset into memory\n@app.function(memory=16384)  # Need 16GB for 10GB file\ndef process_large_file():\n    import pandas as pd\n\n    # Loads entire 10GB file into memory\n    df = pd."
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "# Execution timing\nimport time\nstart = time.time()\nresult = function()\nprint(f\"Duration: {time.time() - start:.2f}s\")\n\n# Memory profiling\nimport tracemalloc\ntracemalloc.start()\nresult = function()\ncur"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "13 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "12 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "modal/modal-gpu-workloads.md",
      "category": "modal",
      "skill_name": "modal-gpu-workloads",
      "frontmatter": {
        "name": "modal-gpu-workloads",
        "description": "Running ML/AI inference on Modal"
      },
      "metrics": {
        "line_count": 513,
        "code_line_count": 134,
        "code_examples": 15,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "import modal\n\napp = modal.App(\"gpu-app\")\n\n# T4 - Budget-friendly, good for inference\n@app.function(gpu=\"t4\")\ndef t4_inference(text: str):\n    # 16GB VRAM, ~$0.50/hour\n    return run_small_model(text)\n"
        },
        {
          "language": "python",
          "line_count": 48,
          "complexity": "complex",
          "code": "image = (\n    modal.Image.debian_slim()\n    .uv_pip_install(\n        \"torch==2.1.0\",\n        \"transformers==4.35.0\"\n    )\n)\n\n@app.cls(gpu=\"l40s\", image=image)\nclass TextGenerator:\n    @modal.enter()\n "
        },
        {
          "language": "python",
          "line_count": 34,
          "complexity": "complex",
          "code": "@app.cls(gpu=\"l40s\", image=image)\nclass BatchInference:\n    @modal.enter()\n    def load_model(self):\n        import torch\n        from transformers import pipeline\n\n        self.classifier = pipeline("
        },
        {
          "language": "python",
          "line_count": 38,
          "complexity": "complex",
          "code": "image = (\n    modal.Image.debian_slim()\n    .uv_pip_install(\n        \"torch==2.1.0\",\n        \"transformers==4.35.0\",\n        \"bitsandbytes==0.41.0\",\n        \"accelerate==0.24.0\"\n    )\n)\n\n@app.cls(gpu="
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "image = (\n    modal.Image.debian_slim()\n    .uv_pip_install(\n        \"torch==2.1.0\",\n        \"transformers==4.35.0\",\n        \"flash-attn==2.3.3\"\n    )\n)\n\n@app.cls(gpu=\"l40s\", image=image)\nclass FastMo"
        },
        {
          "language": "python",
          "line_count": 72,
          "complexity": "complex",
          "code": "image = (\n    modal.Image.debian_slim()\n    .uv_pip_install(\n        \"torch==2.1.0\",\n        \"transformers==4.35.0\",\n        \"datasets==2.14.0\",\n        \"accelerate==0.24.0\"\n    )\n)\n\n@app.function(\n  "
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "@app.function(\n    gpu=\"a100:4\",  # 4 GPUs\n    timeout=7200,\n    image=image\n)\ndef distributed_training():\n    import torch\n    import torch.distributed as dist\n    from transformers import Trainer, T"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "complex",
          "code": "@app.function(gpu=\"l40s\")\ndef monitor_memory():\n    import torch\n\n    print(f\"Allocated: {torch.cuda.memory_allocated() / 1e9:.2f} GB\")\n    print(f\"Reserved: {torch.cuda.memory_reserved() / 1e9:.2f} G"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "complex",
          "code": "@app.function(gpu=\"l40s\", image=image)\ndef train_with_checkpointing():\n    from transformers import AutoModelForCausalLM\n\n    model = AutoModelForCausalLM.from_pretrained(\"gpt2\")\n\n    # Enable gradien"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Timeout after 5 minutes of inactivity\n@app.function(gpu=\"l40s\", timeout=300)\ndef inference_with_timeout(text: str):\n    return generate(text)\n\n# Container idle timeout\n@app.function(\n    gpu=\"l40s\","
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Keep 1 container warm for instant response\n@app.function(\n    gpu=\"l40s\",\n    keep_warm=1\n)\ndef low_latency_inference(text: str):\n    return generate(text)\n"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "complex",
          "code": "@app.function(gpu=\"l40s\" if modal.is_remote() else None)\ndef flexible_inference(text: str):\n    import torch\n\n    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n    print(f\"Using device: {dev"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "# \u274c BAD - Loads model each time (very slow)\n@app.function(gpu=\"l40s\")\ndef bad_inference(text: str):\n    model = load_model()  # Slow!\n    return model(text)\n\n# \u2705 GOOD - Load once per container\n@app.cl"
        },
        {
          "language": "python",
          "line_count": 10,
          "complexity": "simple",
          "code": "# \u274c BAD - H100 for tiny model\n@app.function(gpu=\"h100\")\ndef overkill(text: str):\n    return simple_model(text)  # Wastes $10/hour\n\n# \u2705 GOOD - Match GPU to workload\n@app.function(gpu=\"t4\")\ndef appropri"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# \u274c BAD - Could run forever\n@app.function(gpu=\"a100\")\ndef no_timeout():\n    while True:\n        process()\n\n# \u2705 GOOD - Bounded execution\n@app.function(gpu=\"a100\", timeout=3600)\ndef with_timeout():\n    "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "11 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "data/timely-dataflow.md",
      "category": "data",
      "skill_name": "timely-dataflow",
      "frontmatter": {
        "name": "data-timely-dataflow",
        "description": "Timely dataflow framework for low-latency, high-throughput streaming computation with progress tracking"
      },
      "metrics": {
        "line_count": 544,
        "code_line_count": 84,
        "code_examples": 12,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "rust",
          "line_count": 21,
          "complexity": "medium",
          "code": "// Cargo.toml\n// [dependencies]\n// timely = \"0.12\"\n\nuse timely::dataflow::operators::{Inspect, ToStream};\n\nfn main() {\n    timely::execute_from_args(std::env::args(), |worker| {\n        worker.dataflo"
        },
        {
          "language": "rust",
          "line_count": 40,
          "complexity": "medium",
          "code": "use timely::dataflow::{Scope, Stream};\nuse timely::dataflow::channels::pact::Pipeline;\nuse timely::dataflow::operators::generic::operator::Operator;\n\n// Extension trait for custom operator\ntrait Multi"
        },
        {
          "language": "rust",
          "line_count": 73,
          "complexity": "complex",
          "code": "use timely::dataflow::{Scope, Stream};\nuse timely::dataflow::channels::pact::Exchange;\nuse timely::dataflow::operators::generic::operator::Operator;\nuse std::collections::HashMap;\n\ntrait Aggregate<G: "
        },
        {
          "language": "rust",
          "line_count": 32,
          "complexity": "medium",
          "code": "use timely::dataflow::{Scope, Stream};\nuse timely::dataflow::operators::{Inspect, ToStream, Map, Filter, Feedback, ConnectLoop};\n\nfn main() {\n    timely::execute_from_args(std::env::args(), |worker| {"
        },
        {
          "language": "rust",
          "line_count": 61,
          "complexity": "complex",
          "code": "use timely::dataflow::{Scope, Stream};\nuse timely::dataflow::channels::pact::Pipeline;\nuse timely::dataflow::operators::generic::builder_rc::OperatorBuilder;\nuse std::collections::HashMap;\n\nfn barrier"
        },
        {
          "language": "rust",
          "line_count": 25,
          "complexity": "medium",
          "code": "use timely::dataflow::operators::{Inspect, Probe};\nuse timely::dataflow::operators::input::Handle;\n\nfn main() {\n    timely::execute_from_args(std::env::args(), |worker| {\n        let mut input = Handl"
        },
        {
          "language": "rust",
          "line_count": 11,
          "complexity": "simple",
          "code": "use timely::dataflow::channels::pact::{Pipeline, Exchange};\n\n// Pipeline: No data movement (data stays on same worker)\nstream.unary(Pipeline, \"Op\", |cap, info| { ... })\n\n// Exchange: Partition data by"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Single machine, multiple threads\ncargo run -- -w 4\n\n# Multiple processes (distributed)\ncargo run -- -w 8 -p 2  # 8 workers, 2 processes (4 workers each)\ncargo run -- -w 8 -p 4  # 8 workers, 4 proces"
        },
        {
          "language": "rust",
          "line_count": 25,
          "complexity": "medium",
          "code": "// Configure batch sizes for better throughput\nuse timely::dataflow::operators::Operator;\n\nstream.unary_frontier(\n    Pipeline,\n    \"BatchedOp\",\n    |_capability, _info| {\n        let mut buffer = Vec"
        },
        {
          "language": "rust",
          "line_count": 13,
          "complexity": "simple",
          "code": "// Use capabilities efficiently\nuse timely::progress::Timestamp;\n\n// Downgrade capabilities when possible\ncapability.downgrade(&new_time);\n\n// Drop capabilities when done\ndrop(capability);\n\n// Clean u"
        },
        {
          "language": "rust",
          "line_count": 23,
          "complexity": "medium",
          "code": "use timely::dataflow::operators::*;\n\n// Transform\nstream.map(|x| x * 2)\nstream.flat_map(|x| 0..x)\nstream.filter(|x| *x > 5)\n\n// Inspect (side effects)\nstream.inspect(|x| println!(\"{}\", x))\nstream.insp"
        },
        {
          "language": "rust",
          "line_count": 13,
          "complexity": "simple",
          "code": "// Log operator names and structure\nstd::env::set_var(\"TIMELY_WORKER_LOG_ADDR\", \"localhost:51317\");\n\n// Progress tracking\nstream.inspect_time(|time, data| {\n    eprintln!(\"Time {:?}: {:?}\", time, data"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "12 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "8 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "data/data-validation.md",
      "category": "data",
      "skill_name": "data-validation",
      "frontmatter": {
        "name": "data-data-validation",
        "description": "Validating data schema before processing"
      },
      "metrics": {
        "line_count": 629,
        "code_line_count": 53,
        "code_examples": 7,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 83,
          "complexity": "complex",
          "code": "import pandas as pd\nimport pandera as pa\nfrom pandera import Column, Check, DataFrameSchema\nfrom datetime import datetime\n\n# Define schema with constraints\nuser_schema = DataFrameSchema(\n    columns={"
        },
        {
          "language": "python",
          "line_count": 87,
          "complexity": "complex",
          "code": "import great_expectations as gx\nfrom great_expectations.data_context import DataContext\nfrom great_expectations.checkpoint import SimpleCheckpoint\n\nclass GXValidator:\n    def __init__(self, context_ro"
        },
        {
          "language": "python",
          "line_count": 135,
          "complexity": "complex",
          "code": "import numpy as np\nfrom scipy import stats\nfrom typing import Dict, Any, List\nimport pandas as pd\n\nclass StatisticalValidator:\n    def __init__(self, baseline_stats: Dict[str, Any] = None):\n        \"\""
        },
        {
          "language": "python",
          "line_count": 127,
          "complexity": "complex",
          "code": "from sqlalchemy import create_engine, text\nfrom typing import List, Dict\n\nclass CrossTableValidator:\n    def __init__(self, connection_string: str):\n        self.engine = create_engine(connection_stri"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "medium",
          "code": "# Null checks\ndf['column'].isnull().any()\ndf['column'].notna().all()\n\n# Uniqueness\ndf['column'].is_unique\ndf.duplicated(subset=['col1', 'col2']).any()\n\n# Range checks\ndf['column'].between(min_val, max"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "schema = pa.DataFrameSchema({\n    \"col\": pa.Column(int, checks=pa.Check.greater_than(0)),\n    \"email\": pa.Column(str, checks=pa.Check.str_matches(r'@')),\n    \"status\": pa.Column(str, checks=pa.Check.i"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Initialize\ngreat_expectations init\n\n# Create expectation suite\ngreat_expectations suite new\n\n# Edit expectations\ngreat_expectations suite edit my_suite\n\n# Run checkpoint\ngreat_expectations checkpoin"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "postgresql"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "7 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "data/differential-dataflow.md",
      "category": "data",
      "skill_name": "differential-dataflow",
      "frontmatter": {
        "name": "data-differential-dataflow",
        "description": "Differential computation for incremental updates, maintaining indexed collections and efficient joins"
      },
      "metrics": {
        "line_count": 604,
        "code_line_count": 117,
        "code_examples": 15,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "rust",
          "line_count": 36,
          "complexity": "medium",
          "code": "// Cargo.toml\n// [dependencies]\n// timely = \"0.12\"\n// differential-dataflow = \"0.12\"\n\nuse differential_dataflow::input::Input;\nuse differential_dataflow::operators::{Join, Reduce};\n\nfn main() {\n    ti"
        },
        {
          "language": "rust",
          "line_count": 64,
          "complexity": "complex",
          "code": "use differential_dataflow::input::Input;\nuse differential_dataflow::operators::Join;\n\n#[derive(Clone, Debug, Hash, PartialEq, Eq, PartialOrd, Ord)]\nstruct User {\n    id: u32,\n    name: String,\n}\n\n#[de"
        },
        {
          "language": "rust",
          "line_count": 54,
          "complexity": "complex",
          "code": "use differential_dataflow::input::Input;\nuse differential_dataflow::operators::{Join, Reduce, Threshold, arrange::ArrangeBySelf};\nuse differential_dataflow::operators::arrange::ArrangeByKey;\n\nfn main("
        },
        {
          "language": "rust",
          "line_count": 49,
          "complexity": "medium",
          "code": "use differential_dataflow::input::Input;\nuse differential_dataflow::operators::Reduce;\n\n#[derive(Clone, Debug, Hash, PartialEq, Eq, PartialOrd, Ord)]\nstruct Sale {\n    category: String,\n    amount: i3"
        },
        {
          "language": "rust",
          "line_count": 52,
          "complexity": "complex",
          "code": "use differential_dataflow::input::Input;\nuse differential_dataflow::operators::{Join, Consolidate, Iterate};\n\nfn main() {\n    timely::execute_from_args(std::env::args(), |worker| {\n        let mut inp"
        },
        {
          "language": "rust",
          "line_count": 32,
          "complexity": "medium",
          "code": "use differential_dataflow::input::InputSession;\nuse differential_dataflow::operators::Join;\nuse timely::dataflow::operators::probe::Handle as ProbeHandle;\n\nfn main() {\n    timely::execute_from_args(st"
        },
        {
          "language": "rust",
          "line_count": 17,
          "complexity": "simple",
          "code": "use differential_dataflow::operators::Reduce;\n\n// Top-K items per group\ncollection\n    .map(|(group, value)| (group, value))\n    .reduce(move |_group, values, output| {\n        let k = 10;\n        let"
        },
        {
          "language": "rust",
          "line_count": 13,
          "complexity": "simple",
          "code": "use differential_dataflow::operators::Threshold;\n\n// Remove duplicates (keep diff = 1)\ncollection.distinct()\n\n// Keep only positive diffs\ncollection.threshold(|_, count| if *count > 0 { 1 } else { 0 }"
        },
        {
          "language": "rust",
          "line_count": 7,
          "complexity": "simple",
          "code": "// Three-way join\nlet result = collection1\n    .join(&collection2)\n    .map(|(key, (val1, val2))| ((key, val1), val2))\n    .join(&collection3.map(|(key, val)| ((key, ()), val)))\n    .map(|((key, val1)"
        },
        {
          "language": "rust",
          "line_count": 11,
          "complexity": "simple",
          "code": "// Arrange when:\n// 1. Multiple operators read same data\n// 2. Performing joins\n// 3. Random access needed\n\nlet arranged = collection.arrange_by_key();\n\n// Use arrangement multiple times (zero-copy)\na"
        },
        {
          "language": "rust",
          "line_count": 13,
          "complexity": "simple",
          "code": "// Configure trace compaction\nuse differential_dataflow::trace::implementations::ord::OrdValSpine;\n\nlet trace = collection\n    .arrange_by_key()\n    .trace;\n\n// Compact aggressively (saves memory, cos"
        },
        {
          "language": "rust",
          "line_count": 17,
          "complexity": "simple",
          "code": "use differential_dataflow::input::InputSession;\n\nlet mut input = InputSession::new();\n\n// Buffer insertions\nfor item in large_dataset {\n    input.insert(item);\n\n    // Periodic flush\n    if input.len("
        },
        {
          "language": "rust",
          "line_count": 23,
          "complexity": "medium",
          "code": "// Transform\ncollection.map(|x| x * 2)\ncollection.flat_map(|x| vec![x, x * 2])\ncollection.filter(|x| *x > 10)\n\n// Combine\ncollection1.concat(&collection2)\ncollection.distinct()\ncollection.negate()  //"
        },
        {
          "language": "rust",
          "line_count": 14,
          "complexity": "simple",
          "code": "use differential_dataflow::input::{Input, InputSession};\n\n// Simple input\nlet (mut input, collection) = scope.new_collection();\ninput.insert(data);\ninput.remove(data);\ninput.advance_to(time);\n\n// Sess"
        },
        {
          "language": "rust",
          "line_count": 11,
          "complexity": "simple",
          "code": "// Inspect updates\ncollection.inspect(|(data, time, diff)| {\n    println!(\"Update: {:?} at {:?} with diff {}\", data, time, diff);\n});\n\n// Consolidate before inspection (merge diffs)\ncollection.consoli"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "15 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "typed-holes-refactor/references/HOLE_TYPES.md",
      "category": "typed-holes-refactor",
      "skill_name": "HOLE_TYPES",
      "frontmatter": {
        "name": "hole-types",
        "description": "Reference taxonomy of refactoring hole types including current state holes, architecture holes, and implementation holes. Use as reference during typed holes refactoring for identifying and categorizing unknowns."
      },
      "metrics": {
        "line_count": 419,
        "code_line_count": 124,
        "code_examples": 19,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "inventory = {\n    \"src/module.py\": {\n        \"purpose\": \"Core business logic\",\n        \"dependencies\": [\"config.py\", \"utils.py\"],\n        \"public_api\": [\"process\", \"validate\"],\n        \"dead_code\": [\""
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "coverage = {\n    \"line_coverage\": 0.65,\n    \"branch_coverage\": 0.42,\n    \"uncovered_critical\": [\"auth.py\", \"payment.py\"]\n}\n"
        },
        {
          "language": "python",
          "line_count": 14,
          "complexity": "simple",
          "code": "architecture = {\n    \"layers\": [\"presentation\", \"domain\", \"data\"],\n    \"modules\": {\n        \"presentation\": [\"api\", \"cli\"],\n        \"domain\": [\"core\", \"services\"],\n        \"data\": [\"repositories\", \"mo"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "def test_no_layer_violations():\n    violations = check_architecture_rules()\n    assert len(violations) == 0\n\ndef test_dependency_direction():\n    for module in domain_modules:\n        deps = get_depen"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "modules = {\n    \"auth\": {\n        \"responsibility\": \"Authentication & authorization\",\n        \"public_interface\": [\"authenticate\", \"authorize\"],\n        \"private\": [\"hash_password\", \"validate_token\"]\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "complex",
          "code": "class Repository(Protocol):\n    def get(self, id: str) -> Entity: ...\n    def save(self, entity: Entity) -> None: ...\n\nclass Service(Protocol):\n    def execute(self, command: Command) -> Result: ...\n"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "consolidations = [\n    {\n        \"targets\": [\"parse_v1.py\", \"parse_v2.py\", \"parse_v3.py\"],\n        \"unified\": \"parser.py\",\n        \"reason\": \"Same logic with minor variations\",\n        \"strategy\": \"Si"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "def test_consolidated_equivalence():\n    \"\"\"New unified function equals all old functions\"\"\"\n    for old_func, test_cases in [(parse_v1, cases1), ...]:\n        for case in test_cases:\n            old_"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "extractions = [\n    {\n        \"source\": \"monolith.py:process_and_send\",\n        \"extract\": [\"process\", \"send\"],\n        \"reason\": \"Two responsibilities\",\n        \"new_modules\": [\"processor.py\", \"sende"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "dead_code = [\n    \"old_api.py\",  # Replaced by new_api.py\n    \"legacy_parser.py\",  # No callers\n    \"deprecated_utils.py\"  # Unused for 6 months\n]\n"
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "def test_no_callers():\n    \"\"\"Ensure code marked dead has no callers\"\"\"\n    for dead_file in dead_code:\n        callers = find_callers(dead_file)\n        assert len(callers) == 0, f\"{dead_file} still "
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "strategy = {\n    \"characterization\": {\n        \"coverage\": \"All public APIs\",\n        \"location\": \"tests/characterization/\",\n        \"approach\": \"Capture current behavior as baselines\"\n    },\n    \"ref"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "plan = {\n    \"phase1\": \"Deploy refactored code behind feature flag\",\n    \"phase2\": \"Enable for 10% traffic, monitor\",\n    \"phase3\": \"Ramp to 100% over 2 weeks\",\n    \"rollback\": \"Disable feature flag, "
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "rollback = {\n    \"code\": \"Keep old branch, feature flag controls routing\",\n    \"data\": \"No schema changes during refactor\",\n    \"config\": \"Feature flag toggle takes effect immediately\"\n}\n"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "def test_rollback():\n    \"\"\"Ensure can revert to old version\"\"\"\n    enable_refactor()\n    assert uses_new_code()\n    \n    disable_refactor()\n    assert uses_old_code()\n    \n    # Both versions produce"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "flags = {\n    \"use_refactored_parser\": {\n        \"type\": \"boolean\",\n        \"default\": False,\n        \"rollout_strategy\": \"percentage\",\n        \"monitoring\": [\"error_rate\", \"latency\"]\n    }\n}\n"
        },
        {
          "language": "python",
          "line_count": 7,
          "complexity": "simple",
          "code": "compatibility = {\n    \"api\": \"All endpoints preserve signatures\",\n    \"data\": \"No schema changes\",\n    \"config\": \"All existing configs supported\",\n    \"behavior\": \"Same outputs for same inputs\"\n}\n"
        },
        {
          "language": "python",
          "line_count": 8,
          "complexity": "simple",
          "code": "def test_api_compatibility():\n    \"\"\"All old API calls work identically\"\"\"\n    for endpoint, test_cases in api_tests.items():\n        for case in test_cases:\n            old = call_old_api(endpoint, c"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "monitoring = {\n    \"metrics\": [\n        \"request_latency_p50\",\n        \"request_latency_p99\", \n        \"error_rate\",\n        \"throughput\"\n    ],\n    \"alerts\": [\n        \"error_rate > baseline * 1.1\",\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "19 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 55.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "elegant-design/interactive/diffs-and-logs.md",
      "category": "elegant-design",
      "skill_name": "diffs-and-logs",
      "frontmatter": {},
      "metrics": {
        "line_count": 331,
        "code_line_count": 74,
        "code_examples": 8,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "css",
          "line_count": 41,
          "complexity": "medium",
          "code": ".diff-viewer {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1px;\n  background: var(--color-border);\n  border-radius: 8px;\n  overflow: hidden;\n  font-family: 'JetBrains Mono', monospace;\n "
        },
        {
          "language": "css",
          "line_count": 54,
          "complexity": "complex",
          "code": ".diff-unified {\n  font-family: 'JetBrains Mono', monospace;\n  font-size: 14px;\n  line-height: 1.6;\n}\n\n.diff-line {\n  padding: 2px 8px;\n  display: flex;\n  gap: 1rem;\n}\n\n.diff-line-number {\n  color: var"
        },
        {
          "language": "typescript",
          "line_count": 16,
          "complexity": "complex",
          "code": "import * as Diff from 'diff';\n\nfunction renderWordDiff(oldText: string, newText: string) {\n  const diffs = Diff.diffWords(oldText, newText);\n  \n  return diffs.map((part, index) => {\n    if (part.added"
        },
        {
          "language": "css",
          "line_count": 10,
          "complexity": "simple",
          "code": ".char-added {\n  background: rgba(0, 255, 0, 0.3);\n  text-decoration: none;\n}\n\n.char-removed {\n  background: rgba(255, 0, 0, 0.3);\n  text-decoration: line-through;\n}\n"
        },
        {
          "language": "css",
          "line_count": 67,
          "complexity": "complex",
          "code": ".log-viewer {\n  font-family: 'JetBrains Mono', monospace;\n  font-size: 13px;\n  background: var(--color-background);\n  border: 1px solid var(--color-border);\n  border-radius: 8px;\n  overflow: hidden;\n}"
        },
        {
          "language": "typescript",
          "line_count": 19,
          "complexity": "complex",
          "code": "import { FixedSizeList } from 'react-window';\n\nfunction LogViewer({ logs }: { logs: LogEntry[] }) {\n  return (\n    <FixedSizeList\n      height={600}\n      itemCount={logs.length}\n      itemSize={30}\n "
        },
        {
          "language": "typescript",
          "line_count": 28,
          "complexity": "medium",
          "code": "function LogViewer({ logs }: { logs: LogEntry[] }) {\n  const [filter, setFilter] = useState({\n    levels: ['error', 'warn', 'info', 'debug'],\n    search: '',\n  });\n\n  const filteredLogs = useMemo(() ="
        },
        {
          "language": "typescript",
          "line_count": 19,
          "complexity": "simple",
          "code": "function LogMessage({ message }: { message: string }) {\n  // Try to parse as JSON\n  let parsed: any;\n  try {\n    parsed = JSON.parse(message);\n  } catch {\n    return <span>{message}</span>;\n  }\n\n  ret"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 54.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/set-theory.md",
      "category": "math",
      "skill_name": "set-theory",
      "frontmatter": {
        "name": "set-theory",
        "description": "Set theory including ZFC axioms, ordinals, cardinals, axiom of choice, and forcing"
      },
      "metrics": {
        "line_count": 507,
        "code_line_count": 57,
        "code_examples": 8,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 77,
          "complexity": "complex",
          "code": "# Conceptual representation of ZFC axioms\n\nclass ZFC:\n    \"\"\"\n    ZFC Axioms (informal Python representation):\n    1. Extensionality: Sets equal iff same elements\n    2. Empty Set: \u2203 set with no eleme"
        },
        {
          "language": "python",
          "line_count": 71,
          "complexity": "complex",
          "code": "class Ordinal:\n    \"\"\"Ordinal number implementation\"\"\"\n    \n    def __init__(self, value):\n        \"\"\"\n        For finite ordinals: integer value\n        For \u03c9 and beyond: special representation\n     "
        },
        {
          "language": "python",
          "line_count": 52,
          "complexity": "complex",
          "code": "class Cardinal:\n    \"\"\"Cardinal number representation\"\"\"\n    \n    def __init__(self, name, value=None):\n        self.name = name\n        self.value = value  # Ordinal representation\n    \n    def __lt_"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "medium",
          "code": "def choice_function(family: dict) -> dict:\n    \"\"\"\n    Given family {A_i : i \u2208 I}, construct choice function\n    f: I \u2192 \u22c3 A_i with f(i) \u2208 A_i\n    \n    In constructive math, may not exist without AC\n  "
        },
        {
          "language": "python",
          "line_count": 35,
          "complexity": "medium",
          "code": "def transfinite_induction(property_P, ordinal_limit):\n    \"\"\"\n    Verify property P for all ordinals up to limit\n    \n    property_P: function taking ordinal, returning bool\n    ordinal_limit: maximum"
        },
        {
          "language": "python",
          "line_count": 28,
          "complexity": "medium",
          "code": "def cantors_diagonal():\n    \"\"\"\n    Prove no bijection \u2115 \u2192 (0,1)\n    Given any sequence of reals, construct real not in sequence\n    \"\"\"\n    # Suppose f: \u2115 \u2192 (0,1) is surjective\n    # Represent reals "
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "simple",
          "code": "def continuum_hypothesis():\n    \"\"\"\n    CH: 2^\u2135\u2080 = \u2135\u2081\n    \n    Results:\n    - G\u00f6del (1940): CH consistent with ZFC (using L, constructible universe)\n    - Cohen (1963): \u00acCH consistent with ZFC (using "
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "class BorelHierarchy:\n    \"\"\"\n    Borel sets hierarchy:\n    - \u03a3\u2070\u2081 = open sets\n    - \u03a0\u2070\u2081 = closed sets (complements of \u03a3\u2070\u2081)\n    - \u03a3\u2070\u2082 = countable unions of \u03a0\u2070\u2081\n    - \u03a0\u2070\u2082 = countable intersections of \u03a3\u2070"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 54.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/topology-algebraic.md",
      "category": "math",
      "skill_name": "topology-algebraic",
      "frontmatter": {
        "name": "topology-algebraic",
        "description": "Algebraic topology including fundamental groups, homology, homotopy theory, and computational topology"
      },
      "metrics": {
        "line_count": 445,
        "code_line_count": 57,
        "code_examples": 8,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 59,
          "complexity": "complex",
          "code": "import numpy as np\nfrom collections import defaultdict\n\nclass Loop:\n    \"\"\"Represent a loop in a topological space\"\"\"\n    def __init__(self, path, basepoint):\n        self.path = path  # Function [0,1"
        },
        {
          "language": "python",
          "line_count": 39,
          "complexity": "complex",
          "code": "def van_kampen_example():\n    \"\"\"\n    Figure-eight space (two circles joined at a point)\n    X = S\u00b9 \u2228 S\u00b9 = two circles joined at basepoint\n    \"\"\"\n    # \u03c0\u2081(S\u00b9) \u2245 \u2124 for each circle\n    # A \u2229 B = {basep"
        },
        {
          "language": "python",
          "line_count": 93,
          "complexity": "complex",
          "code": "import numpy as np\nfrom scipy.sparse import lil_matrix\n\nclass SimplicialComplex:\n    \"\"\"Represent simplicial complex for homology computation\"\"\"\n    def __init__(self):\n        self.simplices = {0: se"
        },
        {
          "language": "python",
          "line_count": 12,
          "complexity": "simple",
          "code": "def euler_characteristic(complex):\n    \"\"\"\u03c7 = \u03a3(-1)^i \u00b7 #(i-simplices)\"\"\"\n    chi = 0\n    for dim, simplices in complex.simplices.items():\n        chi += (-1) ** dim * len(simplices)\n    return chi\n\n#"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "complex",
          "code": "# Using gudhi library for computational topology\ntry:\n    import gudhi\nexcept ImportError:\n    print(\"Install: pip install gudhi\")\n\ndef compute_persistent_homology(points, max_dim=2):\n    \"\"\"\n    Comp"
        },
        {
          "language": "python",
          "line_count": 13,
          "complexity": "simple",
          "code": "def fundamental_group_examples():\n    \"\"\"Common fundamental groups\"\"\"\n    examples = {\n        'S\u00b9 (circle)': '\u2124',\n        'S\u00b2 (sphere)': '0 (trivial)',\n        'S\u207f (n\u22652)': '0 (simply connected)',\n   "
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "def mayer_vietoris_torus():\n    \"\"\"\n    Compute H_*(T\u00b2) using Mayer-Vietoris\n    Decompose torus as T\u00b2 = A \u222a B where A, B are cylinders\n    \"\"\"\n    # A \u2229 B \u2243 S\u00b9 \u2228 S\u00b9 (two circles)\n    # A \u2243 S\u00b9, B \u2243 S\u00b9"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "class CWComplex:\n    \"\"\"Represent CW complex structure\"\"\"\n    def __init__(self):\n        self.cells = defaultdict(list)  # dim \u2192 list of cells\n        self.attaching_maps = {}  # cell \u2192 (skeleton, at"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 54.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "build-systems/build-system-selection.md",
      "category": "build-systems",
      "skill_name": "build-system-selection",
      "frontmatter": {
        "name": "build-systems-build-system-selection",
        "description": "Decision matrix for choosing between Make, CMake, Gradle, Maven, Bazel, and other build systems based on project requirements, language, and scale."
      },
      "metrics": {
        "line_count": 606,
        "code_line_count": 59,
        "code_examples": 8,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 1
      },
      "code_examples": [
        {
          "language": "cmake",
          "line_count": 9,
          "complexity": "simple",
          "code": "cmake_minimum_required(VERSION 3.20)\nproject(MyLib VERSION 1.0.0)\n\nadd_library(mylib src/lib.cpp)\ntarget_include_directories(mylib PUBLIC include)\n\n# Works on Windows, macOS, Linux\ninstall(TARGETS myl"
        },
        {
          "language": "xml",
          "line_count": 16,
          "complexity": "simple",
          "code": "<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>3.2.0</version>\n</parent>\n\n<!-- Convention: no plugin config needed -->\n<b"
        },
        {
          "language": "kotlin",
          "line_count": 6,
          "complexity": "simple",
          "code": "// settings.gradle.kts\ninclude(\"core\", \"api\", \"app\")\n\n// Fast incremental builds, parallel execution\n// ./gradlew build --parallel\n"
        },
        {
          "language": "toml",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Cargo.toml\n[package]\nname = \"myapp\"\nversion = \"0.1.0\"\n\n[dependencies]\nserde = \"1.0\"\ntokio = { version = \"1.35\", features = [\"full\"] }\n"
        },
        {
          "language": "go",
          "line_count": 9,
          "complexity": "simple",
          "code": "// go.mod\nmodule github.com/user/project\n\ngo 1.21\n\nrequire (\n    github.com/gorilla/mux v1.8.1\n)\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Before (Makefile)\ngcc -o myapp main.c utils.c -I./include\n\n# After (CMakeLists.txt)\nadd_executable(myapp main.c utils.c)\ntarget_include_directories(myapp PRIVATE include)\n"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Gradle provides migration tool\ngradle init  # Converts existing Maven project\n"
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "# build_selector.py - Choose build system based on project analysis\nimport os\nimport json\n\ndef analyze_project():\n    \"\"\"Analyze project to recommend build system.\"\"\"\n    languages = set()\n\n    # Dete"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [
        "toml"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (toml), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 54.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "plt/operational-semantics.md",
      "category": "plt",
      "skill_name": "operational-semantics",
      "frontmatter": {
        "name": "operational-semantics",
        "description": "Operational semantics including small-step, big-step, evaluation strategies, and reduction systems"
      },
      "metrics": {
        "line_count": 463,
        "code_line_count": 71,
        "code_examples": 8,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 134,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Union, Optional\n\n# Language syntax\n@dataclass\nclass IntLit:\n    value: int\n\n@dataclass\nclass BoolLit:\n    value: bool\n\n@dataclass\nclass Var:\n    na"
        },
        {
          "language": "python",
          "line_count": 54,
          "complexity": "complex",
          "code": "def big_step(expr: Expr, env: dict = None) -> Expr:\n    \"\"\"\n    Big-step evaluation: e \u21d3 v\n    Directly evaluate to value (no intermediate steps)\n    \"\"\"\n    env = env or {}\n    \n    match expr:\n     "
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "def cbv_step(expr: Expr) -> Optional[Expr]:\n    \"\"\"Call-by-value reduction\"\"\"\n    match expr:\n        case App(Abs(param, body), arg) if is_value(arg):\n            # Argument is value, reduce\n        "
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "simple",
          "code": "def cbn_step(expr: Expr) -> Optional[Expr]:\n    \"\"\"Call-by-name reduction\"\"\"\n    match expr:\n        case App(Abs(param, body), arg):\n            # Substitute immediately, don't evaluate arg\n         "
        },
        {
          "language": "python",
          "line_count": 41,
          "complexity": "complex",
          "code": "class Thunk:\n    \"\"\"Delayed computation with memoization\"\"\"\n    def __init__(self, expr: Expr, env: dict):\n        self.expr = expr\n        self.env = env\n        self.value = None\n    \n    def force("
        },
        {
          "language": "python",
          "line_count": 64,
          "complexity": "complex",
          "code": "@dataclass\nclass Hole:\n    \"\"\"Evaluation context hole []\"\"\"\n    pass\n\n@dataclass\nclass CtxApp1:\n    \"\"\"E e (context in function position)\"\"\"\n    context: 'Context'\n    arg: Expr\n\n@dataclass\nclass CtxA"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "def is_deterministic(expr: Expr) -> bool:\n    \"\"\"\n    Check if semantics is deterministic:\n    If e \u2192 e\u2081 and e \u2192 e\u2082, then e\u2081 = e\u2082\n    \"\"\"\n    # For our CBV semantics, this always holds\n    # Prove by "
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "def is_confluent(expr: Expr) -> bool:\n    \"\"\"\n    Church-Rosser property:\n    If e \u2192* e\u2081 and e \u2192* e\u2082, then \u2203e\u2083: e\u2081 \u2192* e\u2083 and e\u2082 \u2192* e\u2083\n    \"\"\"\n    # For pure \u03bb-calculus, this holds\n    # For CBV, deter"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 54.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "data/streaming-aggregations.md",
      "category": "data",
      "skill_name": "streaming-aggregations",
      "frontmatter": {
        "name": "data-streaming-aggregations",
        "description": "Windowing, sessionization, time-series aggregation, and late data handling for streaming systems"
      },
      "metrics": {
        "line_count": 759,
        "code_line_count": 82,
        "code_examples": 8,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "rust",
          "line_count": 52,
          "complexity": "complex",
          "code": "use timely::dataflow::operators::{ToStream, Map, Inspect};\nuse differential_dataflow::input::Input;\nuse differential_dataflow::operators::{Reduce, Consolidate};\nuse differential_dataflow::operators::a"
        },
        {
          "language": "python",
          "line_count": 74,
          "complexity": "complex",
          "code": "import time\nfrom collections import deque\nfrom dataclasses import dataclass\nfrom typing import Deque, Dict\nimport threading\n\n@dataclass\nclass Event:\n    timestamp: float\n    user_id: str\n    value: fl"
        },
        {
          "language": "go",
          "line_count": 98,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"fmt\"\n    \"sort\"\n    \"time\"\n)\n\ntype Event struct {\n    UserID    string\n    Timestamp time.Time\n    Value     int\n}\n\ntype Session struct {\n    UserID string\n    Start  time."
        },
        {
          "language": "python",
          "line_count": 110,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Dict, List, Optional\nimport heapq\n\n@dataclass\nclass Event:\n    timestamp: int  # Event time\n    key: str\n    value: int\n\n@dataclass\nclass Window:\n "
        },
        {
          "language": "python",
          "line_count": 112,
          "complexity": "complex",
          "code": "import numpy as np\nfrom dataclasses import dataclass\nfrom typing import Dict, List\nfrom collections import defaultdict\n\n@dataclass\nclass TimeSeriesPoint:\n    timestamp: int\n    metric: str\n    value: "
        },
        {
          "language": "rust",
          "line_count": 90,
          "complexity": "complex",
          "code": "use std::collections::BinaryHeap;\nuse std::cmp::Reverse;\n\n#[derive(Debug, Clone, Eq, PartialEq)]\nstruct Item {\n    key: String,\n    count: usize,\n}\n\nimpl Ord for Item {\n    fn cmp(&self, other: &Self)"
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Bounded delay\nwatermark = max_timestamp - fixed_delay\n\n# Percentile-based\nwatermark = percentile(timestamps, 99)  # Allow 1% late\n\n# Heuristic\nwatermark = max_timestamp - 2 * stddev(inter_arrival_ti"
        },
        {
          "language": "rust",
          "line_count": 11,
          "complexity": "simple",
          "code": "// Extract event time from data\nlet event_time = |event: &Event| event.timestamp;\n\n// Assign to window\nlet window_id = event.timestamp / window_size;\n\n// Session gap check\nif current_time - last_event"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "8 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 54.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "anti-slop/CLAUDE_MD_UPDATES.md",
      "category": "anti-slop",
      "skill_name": "CLAUDE_MD_UPDATES",
      "frontmatter": {},
      "metrics": {
        "line_count": 371,
        "code_line_count": 38,
        "code_examples": 7,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "xml",
          "line_count": 113,
          "complexity": "complex",
          "code": "<anti_slop_awareness>\nClaude actively avoids \"AI slop\" patterns - telltale signs of generic, low-quality AI-generated content. These patterns include overused phrases, excessive buzzwords, unnecessary"
        },
        {
          "language": "xml",
          "line_count": 12,
          "complexity": "simple",
          "code": "<avoiding_generic_patterns>\nClaude is mindful of patterns that signal generic AI-generated content. While maintaining its helpful and clear communication style, Claude:\n\n- Skips meta-commentary about "
        },
        {
          "language": "xml",
          "line_count": 41,
          "complexity": "medium",
          "code": "<file_creation_advice>\nWhen creating files, Claude ensures high-quality, authentic content by:\n\n**For documents (docx, md, reports):**\n- Leading with actual content, not meta-commentary\n- Using specif"
        },
        {
          "language": "xml",
          "line_count": 12,
          "complexity": "simple",
          "code": "<skill>\n<name>\nanti-slop\n</name>\n<description>\nComprehensive toolkit for detecting and eliminating \"AI slop\" - generic, low-quality AI-generated patterns in natural language, code, and design. Use whe"
        },
        {
          "language": "xml",
          "line_count": 24,
          "complexity": "medium",
          "code": "<artifact_quality_standards>\nAll artifacts should meet high quality standards, avoiding generic AI-generated patterns:\n\n**Content quality:**\n- No meta-commentary (\"In this document, we'll discuss...\")"
        },
        {
          "language": "python",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Process the data\ndef process_data(data):\n    # Get the result\n    result = []\n    # Loop through items\n    for item in data:\n        # Handle the item\n        result.append(handle_item(item))\n    # "
        },
        {
          "language": "python",
          "line_count": 6,
          "complexity": "simple",
          "code": "def filter_valid_transactions(transactions):\n    return [\n        txn for txn in transactions \n        if txn.amount > 0 and txn.status == 'completed'\n    ]\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "consul"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": true
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "7 code examples could be extracted to standalone files",
          "priority": "medium"
        }
      ],
      "priority_score": 53.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "mobile/react-native-setup.md",
      "category": "mobile",
      "skill_name": "react-native-setup",
      "frontmatter": {
        "name": "mobile-react-native-setup",
        "description": "Starting a new React Native project for iOS development"
      },
      "metrics": {
        "line_count": 418,
        "code_line_count": 66,
        "code_examples": 7,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 2
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Create new Expo project\nnpx create-expo-app@latest MyApp --template blank-typescript\ncd MyApp\n\n# Install dependencies\nnpm install\n\n# Start development server\nnpx expo start\n\n# Run on iOS simulator\nn"
        },
        {
          "language": "bash",
          "line_count": 16,
          "complexity": "simple",
          "code": "# Create new React Native project\nnpx react-native@latest init MyApp --template react-native-template-typescript\ncd MyApp\n\n# Install iOS dependencies\ncd ios && pod install && cd ..\n\n# Start Metro bund"
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Create Expo bare workflow project\nnpx create-expo-app@latest MyApp --template bare-minimum\ncd MyApp\n\n# Install dependencies and pods\nnpm install\ncd ios && pod install && cd ..\n\n# Prebuild native pro"
        },
        {
          "language": "json",
          "line_count": 27,
          "complexity": "medium",
          "code": "// tsconfig.json\n{\n  \"extends\": \"expo/tsconfig.base\",\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"target\": \"ES2022\",\n    \"lib\": [\"ES2022\"],\n    \"jsx\": \"react-native\",\n    \"moduleResolution\": \"node"
        },
        {
          "language": "javascript",
          "line_count": 24,
          "complexity": "medium",
          "code": "// metro.config.js\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\n// Add custom asset extensions\nconfig.resolver.assetExts.push('db', 'json', "
        },
        {
          "language": "json",
          "line_count": 35,
          "complexity": "medium",
          "code": "{\n  \"name\": \"MyApp\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"expo start\",\n    \"ios\": \"expo start --ios\",\n    \"android\": \"expo start --android\",\n    \"web\": \"expo start --web\",\n    \"lint\": \"e"
        },
        {
          "language": "bash",
          "line_count": 39,
          "complexity": "medium",
          "code": "#!/bin/bash\n# check-setup.sh - Verify React Native environment\n\necho \"Checking React Native iOS setup...\"\n\n# Node.js version\necho -n \"Node.js: \"\nnode --version\n\n# npm version\necho -n \"npm: \"\nnpm --ver"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "jest"
      ],
      "config_snippets": [
        "json",
        "json"
      ],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "add_validation_scripts",
          "reason": "Config snippets found (json), could add validators",
          "priority": "medium"
        },
        {
          "type": "extract_examples",
          "reason": "7 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 53.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/multi-model-orchestration.md",
      "category": "ml",
      "skill_name": "multi-model-orchestration",
      "frontmatter": {
        "name": "ml-multi-model-orchestration",
        "description": "Coordinating multiple LLMs in pipelines, ensembles, and cascading workflows"
      },
      "metrics": {
        "line_count": 722,
        "code_line_count": 52,
        "code_examples": 6,
        "external_refs": 0,
        "tools_mentioned": 2,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 92,
          "complexity": "complex",
          "code": "import openai\nfrom typing import Dict, Any\n\nclass CodeGenerationPipeline:\n    \"\"\"Multi-stage pipeline: planning -> coding -> review\"\"\"\n\n    def __init__(self):\n        self.planner_model = \"gpt-4o\"\n  "
        },
        {
          "language": "python",
          "line_count": 91,
          "complexity": "complex",
          "code": "import asyncio\nfrom typing import List, Dict\nfrom collections import Counter\n\nclass EnsembleOrchestrator:\n    \"\"\"Run multiple models in parallel and vote on results\"\"\"\n\n    def __init__(self, models: "
        },
        {
          "language": "python",
          "line_count": 94,
          "complexity": "complex",
          "code": "import re\nfrom typing import Optional, Dict, Any\n\nclass CascadeOrchestrator:\n    \"\"\"Start with cheap model, escalate to expensive if uncertain\"\"\"\n\n    def __init__(\n        self,\n        fast_model: s"
        },
        {
          "language": "python",
          "line_count": 97,
          "complexity": "complex",
          "code": "from typing import List, Dict, Any\n\nclass SpecialistOrchestrator:\n    \"\"\"Route subtasks to specialist models\"\"\"\n\n    def __init__(self):\n        self.specialists = {\n            \"code\": \"claude-3-5-so"
        },
        {
          "language": "python",
          "line_count": 106,
          "complexity": "complex",
          "code": "import phoenix as px\nfrom phoenix.trace import using_project\nfrom opentelemetry import trace\n\n# Start Phoenix\npx.launch_app()\n\ntracer = trace.get_tracer(__name__)\n\n@using_project(\"multi-model-orchestr"
        },
        {
          "language": "python",
          "line_count": 32,
          "complexity": "medium",
          "code": "# Pattern 1: Fallback chain\ntry:\n    response = call_model(\"claude-3-5-sonnet\", prompt)\nexcept Exception:\n    try:\n        response = call_model(\"gpt-4o\", prompt)\n    except Exception:\n        respons"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "jwt",
        "redis"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "6 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 52.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "elegant-design/implementation/performance.md",
      "category": "elegant-design",
      "skill_name": "performance",
      "frontmatter": {},
      "metrics": {
        "line_count": 143,
        "code_line_count": 54,
        "code_examples": 6,
        "external_refs": 1,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 10,
          "complexity": "complex",
          "code": "// Next.js\nimport dynamic from 'next/dynamic';\n\nconst DashboardWidget = dynamic(() => import('./DashboardWidget'), {\n  loading: () => <Skeleton />,\n});\n\n// React Router\nconst Dashboard = lazy(() => im"
        },
        {
          "language": "typescript",
          "line_count": 12,
          "complexity": "complex",
          "code": "import { lazy, Suspense } from 'react';\n\nconst HeavyChart = lazy(() => import('./HeavyChart'));\n\nfunction Analytics() {\n  return (\n    <Suspense fallback={<Skeleton />}>\n      <HeavyChart data={data} "
        },
        {
          "language": "tsx",
          "line_count": 21,
          "complexity": "complex",
          "code": "// Next.js Image component\nimport Image from 'next/image';\n\n<Image\n  src=\"/image.jpg\"\n  alt=\"Description\"\n  width={800}\n  height={600}\n  loading=\"lazy\"\n  placeholder=\"blur\"\n/>\n\n// Native responsive im"
        },
        {
          "language": "css",
          "line_count": 15,
          "complexity": "simple",
          "code": "/* Good - uses GPU */\n.element {\n  transition: transform 0.2s, opacity 0.2s;\n}\n\n.element:hover {\n  transform: scale(1.05);\n  opacity: 0.8;\n}\n\n/* Bad - triggers layout/paint */\n.element {\n  transition:"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Analyze bundle\nnpm run build -- --analyze\n\n# Remove unused code\nnpm install -D webpack-bundle-analyzer\n"
        },
        {
          "language": "html",
          "line_count": 9,
          "complexity": "simple",
          "code": "<!-- Preload critical fonts -->\n<link rel=\"preload\" href=\"/fonts/geist.woff2\" as=\"font\" type=\"font/woff2\" crossorigin>\n\n<!-- Preconnect to external domains -->\n<link rel=\"preconnect\" href=\"https://api"
        }
      ],
      "external_refs": [
        {
          "type": "example",
          "url": "https://api.example.com\">"
        }
      ],
      "tools_mentioned": [
        "webpack"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "6 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "3 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 51.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "elegant-design/interactive/chat-and-messaging.md",
      "category": "elegant-design",
      "skill_name": "chat-and-messaging",
      "frontmatter": {},
      "metrics": {
        "line_count": 296,
        "code_line_count": 50,
        "code_examples": 7,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "typescript",
          "line_count": 8,
          "complexity": "simple",
          "code": "interface Message {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n  status?: 'sending' | 'sent' | 'error';\n  attachments?: Attachment[];\n}\n"
        },
        {
          "language": "css",
          "line_count": 35,
          "complexity": "medium",
          "code": ".chat-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: var(--space-4);\n  display: flex;\n  flex-direction: column;\n  gap: var(--space-4);\n}\n\n.message {\n  display: flex;\n  gap: var(--space-3"
        },
        {
          "language": "css",
          "line_count": 24,
          "complexity": "medium",
          "code": "/* Sending state - subtle opacity */\n.message-sending {\n  opacity: 0.6;\n  transition: opacity 0.2s;\n}\n\n/* Error state - clear but not alarming */\n.message-error {\n  border-left: 3px solid var(--color-"
        },
        {
          "language": "typescript",
          "line_count": 38,
          "complexity": "medium",
          "code": "const ChatInput = () => {\n  const [message, setMessage] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const adj"
        },
        {
          "language": "typescript",
          "line_count": 43,
          "complexity": "medium",
          "code": "function ChatMessages({ messages }: { messages: Message[] }) {\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [isUserScrollin"
        },
        {
          "language": "typescript",
          "line_count": 36,
          "complexity": "complex",
          "code": "import ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeSanitize from 'rehype-sanitize';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimp"
        },
        {
          "language": "typescript",
          "line_count": 35,
          "complexity": "medium",
          "code": "function StreamingMessage({ stream }: { stream: ReadableStream }) {\n  const [content, setContent] = useState('');\n  const [isComplete, setIsComplete] = useState(false);\n\n  useEffect(() => {\n    const "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "7 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "6 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 51.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "elegant-design/reference/tools-and-libraries.md",
      "category": "elegant-design",
      "skill_name": "tools-and-libraries",
      "frontmatter": {},
      "metrics": {
        "line_count": 155,
        "code_line_count": 0,
        "code_examples": 0,
        "external_refs": 40,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [],
      "external_refs": [
        {
          "type": "external",
          "url": "https://figma.com"
        },
        {
          "type": "external",
          "url": "https://sketch.com"
        },
        {
          "type": "external",
          "url": "https://excalidraw.com"
        },
        {
          "type": "external",
          "url": "https://mermaid.js.org"
        },
        {
          "type": "external",
          "url": "https://vercel.com/font"
        },
        {
          "type": "external",
          "url": "https://jetbrains.com/mono"
        },
        {
          "type": "external",
          "url": "https://fonts.google.com"
        },
        {
          "type": "external",
          "url": "https://modernfontstacks.com"
        },
        {
          "type": "external",
          "url": "https://typescale.com"
        },
        {
          "type": "external",
          "url": "https://modularscale.com"
        },
        {
          "type": "external",
          "url": "https://coolors.co"
        },
        {
          "type": "external",
          "url": "https://huemint.com"
        },
        {
          "type": "external",
          "url": "https://color.adobe.com"
        },
        {
          "type": "external",
          "url": "https://realtimecolors.com"
        },
        {
          "type": "external",
          "url": "https://webaim.org/resources/contrastchecker"
        },
        {
          "type": "external",
          "url": "https://color.review"
        },
        {
          "type": "external",
          "url": "https://colorable.jxnblk.com"
        },
        {
          "type": "external",
          "url": "https://framer.com/motion"
        },
        {
          "type": "external",
          "url": "https://greensock.com/gsap"
        },
        {
          "type": "external",
          "url": "https://react-spring.dev"
        },
        {
          "type": "external",
          "url": "https://cubic-bezier.com"
        },
        {
          "type": "external",
          "url": "https://easings.net"
        },
        {
          "type": "external",
          "url": "https://lucide.dev"
        },
        {
          "type": "external",
          "url": "https://heroicons.com"
        },
        {
          "type": "external",
          "url": "https://phosphoricons.com"
        },
        {
          "type": "external",
          "url": "https://feathericons.com"
        },
        {
          "type": "external",
          "url": "https://shiki.style"
        },
        {
          "type": "external",
          "url": "https://prismjs.com"
        },
        {
          "type": "external",
          "url": "https://highlightjs.org"
        },
        {
          "type": "external",
          "url": "https://microsoft.github.io/monaco-editor"
        },
        {
          "type": "external",
          "url": "https://codemirror.net"
        },
        {
          "type": "github",
          "url": "https://github.com/remarkjs/react-markdown"
        },
        {
          "type": "external",
          "url": "https://mdxjs.com"
        },
        {
          "type": "external",
          "url": "https://tanstack.com/query"
        },
        {
          "type": "external",
          "url": "https://swr.vercel.app"
        },
        {
          "type": "external",
          "url": "https://socket.io"
        },
        {
          "type": "github",
          "url": "https://github.com/bvaughn/react-window"
        },
        {
          "type": "external",
          "url": "https://tanstack.com/virtual"
        },
        {
          "type": "external",
          "url": "https://webpagetest.org"
        },
        {
          "type": "external",
          "url": "https://react-hook-form.com"
        }
      ],
      "tools_mentioned": [
        "jest",
        "vite",
        "webpack"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        }
      ],
      "priority_score": 51.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "networking/nat-traversal.md",
      "category": "networking",
      "skill_name": "nat-traversal",
      "frontmatter": {
        "name": "nat-traversal",
        "description": "Building peer-to-peer applications"
      },
      "metrics": {
        "line_count": 224,
        "code_line_count": 58,
        "code_examples": 7,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 11,
          "complexity": "complex",
          "code": "import stun\n\n# Discover public IP/port\nnat_type, external_ip, external_port = stun.get_ip_info()\n\nprint(f\"NAT Type: {nat_type}\")\nprint(f\"External IP: {external_ip}\")\nprint(f\"External Port: {external_p"
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "# Using public STUN server\nSTUN_SERVER = \"stun.l.google.com:19302\"\n\nimport socket\nimport struct\n\ndef stun_request(server, port=19302):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n    "
        },
        {
          "language": "python",
          "line_count": 18,
          "complexity": "complex",
          "code": "# When direct connection fails, use TURN relay\nimport asyncio\nfrom aioice import Candidate, Connection\n\nasync def connect_with_turn():\n    connection = Connection(ice_controlling=True)\n\n    # Add TURN"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "import asyncio\nfrom aiortc import RTCPeerConnection, RTCConfiguration, RTCIceServer\n\nasync def create_peer_connection():\n    config = RTCConfiguration(\n        iceServers=[\n            RTCIceServer(ur"
        },
        {
          "language": "python",
          "line_count": 21,
          "complexity": "complex",
          "code": "import socket\nimport threading\n\ndef udp_hole_punch(peer_addr, local_port=0):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.bind(('0.0.0.0', local_port))\n\n    # Send empty packet"
        },
        {
          "language": "python",
          "line_count": 48,
          "complexity": "complex",
          "code": "import asyncio\nimport websockets\nimport json\n\npeers = {}\n\nasync def signaling_handler(websocket, path):\n    peer_id = None\n\n    try:\n        async for message in websocket:\n            data = json.loa"
        },
        {
          "language": "python",
          "line_count": 17,
          "complexity": "complex",
          "code": "def detect_nat_type():\n    # Full cone NAT: Port mapping same for all destinations\n    # Restricted cone: IP filtering\n    # Port restricted: IP+Port filtering\n    # Symmetric: Different mapping per d"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "7 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 51.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/differential-equations.md",
      "category": "math",
      "skill_name": "differential-equations",
      "frontmatter": {
        "name": "differential-equations",
        "description": "Differential equations including ODEs, PDEs, analytical methods, numerical solutions"
      },
      "metrics": {
        "line_count": 294,
        "code_line_count": 48,
        "code_examples": 7,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 20,
          "complexity": "complex",
          "code": "import numpy as np\nfrom scipy.integrate import solve_ivp\nimport matplotlib.pyplot as plt\n\n# Example: dy/dx = -2xy, y(0) = 1\n# Analytical solution: y = exp(-x\u00b2)\n\ndef exponential_decay(x, y):\n    return"
        },
        {
          "language": "python",
          "line_count": 20,
          "complexity": "simple",
          "code": "def harmonic_oscillator(t, y):\n    \"\"\"\n    d\u00b2x/dt\u00b2 + 2\u03b6\u03c9\u2080(dx/dt) + \u03c9\u2080\u00b2x = 0\n    Damped harmonic oscillator\n    State: [x, dx/dt]\n    \"\"\"\n    omega_0 = 2.0  # Natural frequency\n    zeta = 0.1     # Dam"
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "from scipy.sparse import diags\nfrom scipy.sparse.linalg import spsolve\n\ndef solve_heat_equation_1d(L, T, nx, nt, alpha=1.0):\n    \"\"\"\n    Solve \u2202u/\u2202t = \u03b1\u2202\u00b2u/\u2202x\u00b2 on [0,L] \u00d7 [0,T]\n    Using finite differ"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "medium",
          "code": "def rk4_step(f, x, y, h):\n    \"\"\"Single RK4 step\"\"\"\n    k1 = f(x, y)\n    k2 = f(x + h/2, y + h*k1/2)\n    k3 = f(x + h/2, y + h*k2/2)\n    k4 = f(x + h, y + h*k3)\n\n    return y + h * (k1 + 2*k2 + 2*k3 +"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "medium",
          "code": "def phase_plane_example():\n    \"\"\"Lotka-Volterra predator-prey model\"\"\"\n    def lotka_volterra(t, z):\n        x, y = z  # x=prey, y=predator\n        alpha, beta, delta, gamma = 1.0, 0.1, 0.075, 1.5\n\n "
        },
        {
          "language": "python",
          "line_count": 2,
          "complexity": "simple",
          "code": "# Heat equation: u(x,t) = \u03a3 c_n\u00b7sin(n\u03c0x/L)\u00b7exp(-n\u00b2\u03c0\u00b2\u03b1t/L\u00b2)\n"
        },
        {
          "language": "python",
          "line_count": 24,
          "complexity": "complex",
          "code": "from scipy.sparse import lil_matrix\nfrom scipy.sparse.linalg import spsolve\n\ndef fem_1d_poisson(n_elements, f):\n    \"\"\"-u'' = f on [0,1], u(0)=u(1)=0\"\"\"\n    n = n_elements + 1\n    h = 1.0 / n_elements"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "7 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 51.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "plt/program-verification.md",
      "category": "plt",
      "skill_name": "program-verification",
      "frontmatter": {
        "name": "program-verification",
        "description": "Program verification including Hoare logic, SMT-based verification, refinement types, and proof-carrying code"
      },
      "metrics": {
        "line_count": 463,
        "code_line_count": 56,
        "code_examples": 7,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 124,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import Union, Callable\n\n# Assertions (predicates on program state)\nAssertion = Callable[[dict], bool]\n\n# Commands\n@dataclass\nclass Skip:\n    \"\"\"skip - do "
        },
        {
          "language": "python",
          "line_count": 44,
          "complexity": "medium",
          "code": "def weakest_precondition(cmd: Command, Q: Assertion) -> Assertion:\n    \"\"\"\n    Compute wp(C, Q) - weakest precondition\n    \"\"\"\n    match cmd:\n        case Skip():\n            # wp(skip, Q) = Q\n       "
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "@dataclass\nclass RefinementType:\n    \"\"\"Refinement type: {x:\u03c4 | P(x)}\"\"\"\n    base_type: type\n    predicate: Callable[[any], bool]\n    \n    def check(self, value):\n        \"\"\"Check if value satisfies r"
        },
        {
          "language": "python",
          "line_count": 40,
          "complexity": "complex",
          "code": "try:\n    from z3 import Int, Solver, sat, And, Or, Not\n    \n    def verify_program_z3():\n        \"\"\"\n        Verify: {x \u2265 0} if x < 10 then y := x else y := 10 {y < 11}\n        Using Z3 SMT solver\n   "
        },
        {
          "language": "python",
          "line_count": 42,
          "complexity": "complex",
          "code": "@dataclass\nclass PointsTo:\n    \"\"\"x \u21a6 v - heap location x contains value v\"\"\"\n    location: str\n    value: any\n\n@dataclass\nclass SeparatingConjunction:\n    \"\"\"P * Q - P and Q hold on disjoint heaps\"\"\""
        },
        {
          "language": "python",
          "line_count": 15,
          "complexity": "simple",
          "code": "def verify_loop_invariant():\n    \"\"\"\n    Verify: {n \u2265 0} i := 0; s := 0; while i < n do (s := s + i; i := i + 1) {s = n*(n-1)/2}\n    \n    Loop invariant: s = i*(i-1)/2 \u2227 i \u2264 n\n    \"\"\"\n    # Preconditi"
        },
        {
          "language": "python",
          "line_count": 19,
          "complexity": "simple",
          "code": "def generate_verification_conditions(cmd: Command, Q: Assertion) -> list:\n    \"\"\"\n    Generate verification conditions (VCs) for program\n    VCs are formulas to prove for correctness\n    \"\"\"\n    vcs ="
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "7 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 51.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/diffusion-model-basics.md",
      "category": "ml",
      "skill_name": "diffusion-model-basics",
      "frontmatter": {
        "name": "ml-diffusion-model-basics",
        "description": "Understanding diffusion model theory and mechanics (forward/reverse process)"
      },
      "metrics": {
        "line_count": 453,
        "code_line_count": 56,
        "code_examples": 7,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "from diffusers import StableDiffusionPipeline\nimport torch\n\n# Load pipeline\npipe = StableDiffusionPipeline.from_pretrained(\n    \"runwayml/stable-diffusion-v1-5\",\n    torch_dtype=torch.float16,\n    saf"
        },
        {
          "language": "python",
          "line_count": 29,
          "complexity": "complex",
          "code": "from diffusers import StableDiffusionXLPipeline\nimport torch\n\n# SDXL has better text understanding and higher resolution\npipe = StableDiffusionXLPipeline.from_pretrained(\n    \"stabilityai/stable-diffu"
        },
        {
          "language": "python",
          "line_count": 33,
          "complexity": "complex",
          "code": "from diffusers import (\n    StableDiffusionPipeline,\n    DDIMScheduler,\n    DPMSolverMultistepScheduler,\n    EulerAncestralDiscreteScheduler,\n    UniPCMultistepScheduler,\n)\nimport torch\n\npipe = Stable"
        },
        {
          "language": "python",
          "line_count": 30,
          "complexity": "complex",
          "code": "import torch\nfrom diffusers import StableDiffusionPipeline\n\npipe = StableDiffusionPipeline.from_pretrained(\n    \"runwayml/stable-diffusion-v1-5\",\n    torch_dtype=torch.float16,\n).to(\"cuda\")\n\nprompt = "
        },
        {
          "language": "python",
          "line_count": 22,
          "complexity": "complex",
          "code": "from diffusers import StableDiffusionPipeline\nimport torch\n\npipe = StableDiffusionPipeline.from_pretrained(\n    \"runwayml/stable-diffusion-v1-5\",\n    torch_dtype=torch.float16,\n).to(\"cuda\")\n\nprompt = "
        },
        {
          "language": "python",
          "line_count": 27,
          "complexity": "complex",
          "code": "from diffusers import StableDiffusionImg2ImgPipeline\nfrom PIL import Image\nimport torch\n\n# Load img2img pipeline\npipe = StableDiffusionImg2ImgPipeline.from_pretrained(\n    \"runwayml/stable-diffusion-v"
        },
        {
          "language": "python",
          "line_count": 25,
          "complexity": "complex",
          "code": "from diffusers import StableDiffusionInpaintPipeline\nfrom PIL import Image\nimport torch\n\npipe = StableDiffusionInpaintPipeline.from_pretrained(\n    \"runwayml/stable-diffusion-inpainting\",\n    torch_dt"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "7 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "7 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 51.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "elegant-design/SKILL.md",
      "category": "elegant-design",
      "skill_name": "SKILL",
      "frontmatter": {
        "name": "elegant-design",
        "description": "Create world-class, accessible, responsive interfaces with sophisticated interactive elements including chat, terminals, code display, and streaming content. Use when building user interfaces that need professional polish and developer-focused features."
      },
      "metrics": {
        "line_count": 303,
        "code_line_count": 7,
        "code_examples": 1,
        "external_refs": 13,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Create flow diagrams with Graphviz\ncat > user-flow.dot << 'EOF'\ndigraph UserFlow {\n  Start -> \"Observe State\"\n  \"Observe State\" -> \"Orient Understanding\"\n  \"Orient Understanding\" -> \"Decide Action\"\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://ui.shadcn.com"
        },
        {
          "type": "external",
          "url": "https://daisyui.com"
        },
        {
          "type": "external",
          "url": "https://heroui.com"
        },
        {
          "type": "external",
          "url": "https://ui.shadcn.com"
        },
        {
          "type": "external",
          "url": "https://daisyui.com"
        },
        {
          "type": "external",
          "url": "https://heroui.com"
        },
        {
          "type": "external",
          "url": "https://vercel.com/font"
        },
        {
          "type": "external",
          "url": "https://jetbrains.com/mono"
        },
        {
          "type": "external",
          "url": "https://vercel.com"
        },
        {
          "type": "external",
          "url": "https://hex.tech"
        },
        {
          "type": "documentation",
          "url": "https://docs.baseten.co"
        },
        {
          "type": "external",
          "url": "https://wunderground.com"
        },
        {
          "type": "external",
          "url": "https://ghostty.org"
        }
      ],
      "tools_mentioned": [
        "ssl"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "create_reference_file",
          "reason": "Many external references, could create REFERENCE.md",
          "priority": "low"
        }
      ],
      "priority_score": 50.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "product/prd-structure-templates.md",
      "category": "product",
      "skill_name": "prd-structure-templates",
      "frontmatter": {
        "name": "product-prd-structure-templates",
        "description": "PRD document structure, templates, and best practices for product requirements documentation"
      },
      "metrics": {
        "line_count": 469,
        "code_line_count": 44,
        "code_examples": 6,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "markdown",
          "line_count": 32,
          "complexity": "medium",
          "code": "# [Feature Name] - PRD One-Pager\n\n**Author**: [Name] | **Date**: 2025-10-25 | **Status**: Draft\n\n## Problem\nWhat user problem are we solving? Why is this important now?\n\n[2-3 sentences maximum]\n\n## So"
        },
        {
          "language": "markdown",
          "line_count": 64,
          "complexity": "complex",
          "code": "# [Feature Name] - PRD\n\n**Author**: [Name] | **Reviewers**: [Names] | **Date**: 2025-10-25\n**Status**: Draft | Review | Approved\n\n## Problem Statement\nWhat problem exists today? Who experiences it? Wh"
        },
        {
          "language": "markdown",
          "line_count": 144,
          "complexity": "complex",
          "code": "# [Product/Feature Name] - Comprehensive PRD\n\n## Document Metadata\n- **Author**: [Name, Role]\n- **Stakeholders**: [List all reviewers and approvers]\n- **Created**: 2025-10-25\n- **Last Updated**: 2025-"
        },
        {
          "language": "markdown",
          "line_count": 12,
          "complexity": "simple",
          "code": "## Version History\n\n| Version | Date | Author | Changes |\n|---------|------|--------|---------|\n| 1.2 | 2025-10-25 | [Name] | Updated success metrics based on eng feedback |\n| 1.1 | 2025-10-24 | [Name"
        },
        {
          "language": "markdown",
          "line_count": 13,
          "complexity": "simple",
          "code": "# \u274c NEVER:\n## What We're Building\nWe're adding a real-time chat feature to the dashboard.\n\n# \u2705 CORRECT:\n## Problem Statement\nUsers currently wait 24+ hours for email responses to time-sensitive questi"
        },
        {
          "language": "markdown",
          "line_count": 9,
          "complexity": "simple",
          "code": "# \u274c Don't: Omit out-of-scope section\n[No mention of what's NOT included]\n\n# \u2705 Correct: Explicitly call out scope boundaries\n## Out of Scope\n- Real-time collaborative editing (defer to Q2)\n- Mobile app"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "6 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "3 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 48.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "data/pipeline-orchestration.md",
      "category": "data",
      "skill_name": "pipeline-orchestration",
      "frontmatter": {
        "name": "data-pipeline-orchestration",
        "description": "Coordinating complex multi-step data workflows"
      },
      "metrics": {
        "line_count": 733,
        "code_line_count": 39,
        "code_examples": 5,
        "external_refs": 0,
        "tools_mentioned": 1,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 112,
          "complexity": "complex",
          "code": "from prefect import flow, task\nfrom prefect.task_runners import ConcurrentTaskRunner\nfrom prefect.deployments import Deployment\nfrom prefect.server.schemas.schedules import CronSchedule\nfrom datetime "
        },
        {
          "language": "python",
          "line_count": 183,
          "complexity": "complex",
          "code": "import json\nfrom pathlib import Path\nfrom datetime import datetime\nfrom typing import Dict, Any, Optional\nfrom enum import Enum\n\nclass PipelineState(Enum):\n    PENDING = \"pending\"\n    RUNNING = \"runni"
        },
        {
          "language": "python",
          "line_count": 91,
          "complexity": "complex",
          "code": "from datetime import datetime, timedelta\nfrom typing import Callable, Any\nfrom enum import Enum\nimport time\n\nclass CircuitState(Enum):\n    CLOSED = \"closed\"      # Normal operation\n    OPEN = \"open\"  "
        },
        {
          "language": "python",
          "line_count": 139,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Optional\nfrom datetime import datetime, timedelta\nimport smtplib\nfrom email.message import EmailMessage\n\n@dataclass\nclass PipelineMetrics:\n  "
        },
        {
          "language": "python",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Exponential backoff\nretry_delays = [60, 120, 300, 600, 1200]  # 1m, 2m, 5m, 10m, 20m\n\n# Linear backoff\nretry_delays = [60] * 5  # 1m each time\n\n# Fibonacci backoff\nretry_delays = [60, 60, 120, 180, "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "apache"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "5 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 47.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "research/research-writing.md",
      "category": "research",
      "skill_name": "research-writing",
      "frontmatter": {
        "name": "research-research-writing",
        "description": "Master academic and research writing including structure, citations, reporting standards, and peer review processes"
      },
      "metrics": {
        "line_count": 768,
        "code_line_count": 46,
        "code_examples": 5,
        "external_refs": 1,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 177,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Optional\n\n@dataclass\nclass PaperSection:\n    \"\"\"Define paper section structure\"\"\"\n    title: str\n    purpose: str\n    key_elements: List[str]"
        },
        {
          "language": "python",
          "line_count": 111,
          "complexity": "complex",
          "code": "from typing import Dict, Any\n\nclass StatisticalReporter:\n    \"\"\"Format statistical results in APA style\"\"\"\n\n    @staticmethod\n    def t_test(result: Dict[str, Any]) -> str:\n        \"\"\"Format t-test re"
        },
        {
          "language": "python",
          "line_count": 127,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Optional\nfrom enum import Enum\n\nclass CitationStyle(Enum):\n    APA = \"apa\"\n    MLA = \"mla\"\n    CHICAGO = \"chicago\"\n\n@dataclass\nclass Referenc"
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "@dataclass\nclass ArgumentStructure:\n    \"\"\"Structure for academic argument\"\"\"\n    claim: str\n    evidence: List[str]\n    reasoning: str\n    counterargument: Optional[str] = None\n    rebuttal: Optional"
        },
        {
          "language": "python",
          "line_count": 94,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass ReviewComment:\n    \"\"\"Represent reviewer comment\"\"\"\n    reviewer: str\n    comment_number: int\n    comment: str\n    response:"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://doi.org/{ref.doi}\""
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "5 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 46.5,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "skill-repo-planning.md",
      "category": "root",
      "skill_name": "skill-repo-planning",
      "frontmatter": {
        "name": "skill-repo-planning",
        "description": "Skill for skill repo planning"
      },
      "metrics": {
        "line_count": 684,
        "code_line_count": 79,
        "code_examples": 12,
        "external_refs": 0,
        "tools_mentioned": 9,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Find custom imports\ngrep -r \"from internal\\.\" --include=\"*.py\" | cut -d: -f2 | sort | uniq -c | sort -rn\n\n# Find internal package usage\ngrep -r \"@company/\" --include=\"*.ts\" | cut -d: -f2 | sort | un"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Find repeated error handling\ngrep -rn \"try:\" --include=\"*.py\" -A 10 | grep -E \"(except|finally)\" | wc -l\n\n# Find repeated API patterns\ngrep -rn \"requests\\.(get|post)\" --include=\"*.py\" | cut -d: -f1 "
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Find custom scripts\nls scripts/*.{sh,py,js} | xargs -I {} basename {}\n\n# Find Makefile/Justfile targets\ngrep \"^[a-z-]*:\" Makefile Justfile 2>/dev/null\n\n# Find GitHub Actions workflows\nls .github/wor"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Find service integrations\ngrep -rE \"(import.*stripe|import.*twilio|import.*sendgrid)\" --include=\"*.py\"\n\n# Find Redis + Celery patterns\ngrep -r \"celery\" --include=\"*.py\" | grep -l \"redis\"\n\n# Find Kaf"
        },
        {
          "language": "bash",
          "line_count": 3,
          "complexity": "simple",
          "code": "# Use skill-repo-discovery.md to catalog repository\n# Output: List of technologies, frameworks, patterns\n"
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# List existing skills\nls /Users/rand/.claude/skills/*.md | xargs basename -s .md\n\n# Check for gaps\n# Example: Found \"FastAPI\" in repo, but no fastapi-*.md skills\n"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Custom libraries\ngrep -r \"from (internal|company|custom)\" --include=\"*.py\" | cut -d: -f2 | sort | uniq\n\n# Repeated imports (high usage = candidate)\ngrep -rh \"^import\\|^from\" --include=\"*.py\" | sort "
        },
        {
          "language": "markdown",
          "line_count": 43,
          "complexity": "medium",
          "code": "## Gap Analysis Report\n\n### Repository: [name]\n### Date: [YYYY-MM-DD]\n### Analyzer: [name]\n\n### Technologies Found (from skill-repo-discovery.md)\n- Python 3.11, FastAPI, SQLAlchemy, Redis, Celery, Pyt"
        },
        {
          "language": "markdown",
          "line_count": 25,
          "complexity": "medium",
          "code": "## Proposed Skill\n\n**Filename**: [domain-topic.md]\n**Target Lines**: 250-400\n**Priority**: HIGH/MEDIUM/LOW\n\n**Sections**:\n1. Overview (what/when to use)\n2. Core Concepts (3-5 key ideas)\n3. Common Patt"
        },
        {
          "language": "markdown",
          "line_count": 31,
          "complexity": "medium",
          "code": "## Proposed Skill\n\n**Filename**: redis-caching-strategies.md\n**Target Lines**: 350 lines\n**Priority**: HIGH\n\n**Sections**:\n1. Overview - When to cache, cache types\n2. Core Concepts - TTL, eviction, se"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Step 1: Discovery\n# Use skill-repo-discovery.md\n\n# Step 2: Find patterns\ngrep -rh \"^import\\|^from\" --include=\"*.py\" | sort | uniq -c | sort -rn | head -20\n\n# Step 3: Scope skills\n# Use template abov"
        },
        {
          "language": "bash",
          "line_count": 35,
          "complexity": "complex",
          "code": "# Step 1: Discovery\n# Output: Python 3.11, FastAPI, SQLAlchemy, Stripe, Redis, Celery, Pytest\n\n# Step 2: Find patterns\ngrep -rh \"^from\\|^import\" --include=\"*.py\" src/ | sort | uniq -c | sort -rn | hea"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "kubernetes",
        "pytest",
        "postgres",
        "ssl",
        "jwt",
        "redis",
        "consul",
        "vite",
        "docker"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "12 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 45.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "skill-repo-discovery.md",
      "category": "root",
      "skill_name": "skill-repo-discovery",
      "frontmatter": {
        "name": "skill-repo-discovery",
        "description": "Starting work on an unfamiliar repository or codebase"
      },
      "metrics": {
        "line_count": 546,
        "code_line_count": 129,
        "code_examples": 19,
        "external_refs": 0,
        "tools_mentioned": 13,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# View all gateway skills\nls -d skills/discover-*\n\n# Read catalog with all gateways\ncat skills/README.md\n"
        },
        {
          "language": "bash",
          "line_count": 13,
          "complexity": "simple",
          "code": "# Search for Python package managers\ncd /path/to/repo\nls pyproject.toml requirements.txt poetry.lock Pipfile 2>/dev/null\n\n# Analyze dependencies\ngrep -E \"^(fastapi|django|flask|modal)\" requirements.tx"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Check Node package manager\nls package.json pnpm-lock.yaml yarn.lock package-lock.json 2>/dev/null\n\n# Analyze key dependencies\ncat package.json | grep -A 20 '\"dependencies\"' | grep -E \"(next|react|vu"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Check Rust package file\nls Cargo.toml Cargo.lock 2>/dev/null\n\n# Analyze dependencies\ngrep -A 50 '\\[dependencies\\]' Cargo.toml | grep -E \"(tokio|axum|ratatui|serde)\"\n\n# Map to skills\n# tokio \u2192 rust-a"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Check Go module file\nls go.mod go.sum 2>/dev/null\n\n# Analyze dependencies\ngrep -E \"(bubbletea|cobra|gin|echo)\" go.mod\n\n# Map to skills\n# bubbletea \u2192 bubbletea-*.md, tui-*.md\n# cobra \u2192 cli-*.md\n# gin"
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Check Zig build files\nls build.zig build.zig.zon 2>/dev/null\n\n# Analyze build configuration\ngrep -E \"(exe|lib|test)\" build.zig\n\n# Map to skills\n# Any build.zig \u2192 zig-*.md (all Zig skills)\n# Specific"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "complex",
          "code": "# Check Swift package/dependency files\nls Package.swift Podfile *.xcodeproj/project.pbxproj 2>/dev/null\n\n# For SwiftUI projects, check for SwiftUI imports\nfind . -name \"*.swift\" -type f -exec grep -l "
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# Check for monorepo\nls pnpm-workspace.yaml lerna.json nx.json turbo.json 2>/dev/null\n# \u2192 monorepo-*.md skills\n\n# Check for microservices\nls services/ apps/ packages/ 2>/dev/null\nfind . -name \"docker-"
        },
        {
          "language": "bash",
          "line_count": 12,
          "complexity": "simple",
          "code": "# Find test directories\nfind . -type d -name \"test*\" -o -name \"__test__\" -o -name \"spec\" | grep -v node_modules\n\n# Identify test frameworks\ngrep -r \"pytest\\|unittest\\|vitest\\|jest\\|cargo test\\|go test"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "complex",
          "code": "# Check for Modal usage\ngrep -r \"import modal\\|from modal\" --include=\"*.py\" | head -5\nls modal.toml .modal.toml 2>/dev/null\ngrep -r \"@app\\\\.function\\|@app\\\\.cls\" --include=\"*.py\" | head -3\n\n# Activate"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Check for Vercel deployment\nls vercel.json .vercel/ 2>/dev/null\ngrep \"vercel\" package.json\n\n# Activate skills\n# \u2192 vercel-*.md, nextjs-*.md (Vercel optimized)\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Check for Cloudflare Workers\nls wrangler.toml 2>/dev/null\ngrep \"workers\\\\.dev\\|@cloudflare/workers\" package.json\n\n# Activate skills\n# \u2192 cloudflare-*.md, workers-*.md\n"
        },
        {
          "language": "bash",
          "line_count": 7,
          "complexity": "simple",
          "code": "# Check for AWS Lambda\nls serverless.yml sam.yaml template.yaml 2>/dev/null\ngrep -r \"aws-lambda\\|@aws-sdk\" --include=\"*.json\" --include=\"*.py\"\n\n# Activate skills\n# \u2192 aws-lambda-*.md, serverless-*.md\n"
        },
        {
          "language": "bash",
          "line_count": 18,
          "complexity": "simple",
          "code": "# Postgres\ngrep -r \"psycopg2\\|asyncpg\\|pg\\|postgres\" requirements.txt package.json Cargo.toml go.mod\nls migrations/ alembic/ 2>/dev/null\n# \u2192 postgres-*.md, database-*.md\n\n# SQLite\nfind . -name \"*.db\" "
        },
        {
          "language": "bash",
          "line_count": 17,
          "complexity": "simple",
          "code": "# SQLAlchemy (Python)\ngrep \"sqlalchemy\" requirements.txt pyproject.toml\n# \u2192 sqlalchemy-*.md, orm-*.md\n\n# Prisma (TypeScript)\ngrep \"prisma\" package.json\nls prisma/schema.prisma 2>/dev/null\n# \u2192 prisma-*"
        },
        {
          "language": "bash",
          "line_count": 11,
          "complexity": "simple",
          "code": "# Check for GitHub Actions workflows\nls .github/workflows/*.yml .github/workflows/*.yaml 2>/dev/null\n\n# Analyze workflow content\ngrep -h \"name:\\|uses:\\|run:\" .github/workflows/*.yml | head -20\n\n# Map "
        },
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Check for Docker usage\nls Dockerfile docker-compose.yml .dockerignore 2>/dev/null\nfind . -name \"Dockerfile*\" | wc -l\n\n# Activate skills\n# \u2192 docker-*.md, containerization-*.md\n# Multi-stage builds \u2192 "
        },
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "simple",
          "code": "# Look for Beads state\nls .beads/issues.jsonl 2>/dev/null\ngrep -r \"bd create\\|bd update\\|bd close\" --include=\"*.sh\" --include=\"*.md\"\n\n# Activate skills\n# \u2192 beads-workflow.md\n# \u2192 beads-context-strategi"
        },
        {
          "language": "bash",
          "line_count": 22,
          "complexity": "medium",
          "code": "# Complete repository analysis\ncd /path/to/repo\n\n# 1. Identify languages\nfind . -type f \\( -name \"*.py\" -o -name \"*.ts\" -o -name \"*.tsx\" -o -name \"*.go\" -o -name \"*.rs\" -o -name \"*.zig\" -o -name \"*.sw"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "vault",
        "pytest",
        "webpack",
        "postgres",
        "jest",
        "ssl",
        "mongodb",
        "cargo test",
        "redis",
        "terraform",
        "vite",
        "docker",
        "go test"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "19 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "3 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 45.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "research/research-synthesis.md",
      "category": "research",
      "skill_name": "research-synthesis",
      "frontmatter": {
        "name": "research-synthesis",
        "description": "Master information synthesis, literature review, meta-analysis, and knowledge integration across sources"
      },
      "metrics": {
        "line_count": 522,
        "code_line_count": 39,
        "code_examples": 5,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "markdown",
          "line_count": 21,
          "complexity": "medium",
          "code": "## Research Question\nHow does X influence Y in Z contexts?\n\n## Synthesis Findings\n\n### Theme 1: Direct Effects\n- Study A (2023): Found positive correlation (r=0.65, p<0.01)\n- Study B (2022): Confirmed"
        },
        {
          "language": "python",
          "line_count": 129,
          "complexity": "complex",
          "code": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\nclass MetaAnalysis:\n    \"\"\"Fixed and random effects meta-analysis\"\"\"\n\n    def __init__(self, effect_size"
        },
        {
          "language": "python",
          "line_count": 113,
          "complexity": "complex",
          "code": "from collections import defaultdict\nimport pandas as pd\n\nclass ThematicSynthesis:\n    \"\"\"Synthesize themes across qualitative studies\"\"\"\n\n    def __init__(self):\n        self.studies = []\n        self"
        },
        {
          "language": "python",
          "line_count": 69,
          "complexity": "complex",
          "code": "import networkx as nx\nimport matplotlib.pyplot as plt\n\nclass EvidenceMap:\n    \"\"\"Create evidence map of research domain\"\"\"\n\n    def __init__(self):\n        self.graph = nx.DiGraph()\n\n    def add_study"
        },
        {
          "language": "markdown",
          "line_count": 5,
          "complexity": "simple",
          "code": "| Study | Year | Design | N | Population | Outcome | Effect Size | Quality |\n|-------|------|--------|---|------------|---------|-------------|---------|\n| A     | 2023 | RCT    |100| Adults     | Anx"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "5 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 45.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "research/data-analysis.md",
      "category": "research",
      "skill_name": "data-analysis",
      "frontmatter": {
        "name": "research-data-analysis",
        "description": "Master data analysis techniques including coding, statistical tests, visualization, interpretation, and reporting findings"
      },
      "metrics": {
        "line_count": 806,
        "code_line_count": 46,
        "code_examples": 5,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 155,
          "complexity": "complex",
          "code": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nclass DescriptiveAnalysis:\n    \"\"\"Comprehensive descriptive statistics\"\"\"\n\n    def"
        },
        {
          "language": "python",
          "line_count": 200,
          "complexity": "complex",
          "code": "from scipy import stats\nimport pandas as pd\nimport numpy as np\nfrom typing import Tuple, Dict\n\nclass InferentialAnalysis:\n    \"\"\"Statistical inference with proper reporting\"\"\"\n\n    @staticmethod\n    d"
        },
        {
          "language": "python",
          "line_count": 188,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Dict, Optional\nfrom collections import defaultdict\nimport pandas as pd\n\n@dataclass\nclass Code:\n    \"\"\"Represent a qualitative code\"\"\"\n    nam"
        },
        {
          "language": "python",
          "line_count": 88,
          "complexity": "complex",
          "code": "class ThematicDevelopment:\n    \"\"\"Develop and refine themes from codes\"\"\"\n\n    def __init__(self, coding: QualitativeCoding):\n        self.coding = coding\n        self.themes = {}\n\n    def create_them"
        },
        {
          "language": "python",
          "line_count": 61,
          "complexity": "complex",
          "code": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\nclass VisualizationGuide:\n    \"\"\"Create publication-ready visualizations\"\"\"\n\n    @staticmethod\n    def set_publication_style():\n        \"\"\"Set co"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "5 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 45.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "zig/zig-memory-management.md",
      "category": "zig",
      "skill_name": "zig-memory-management",
      "frontmatter": {
        "name": "zig-memory-management",
        "description": "Managing memory in Zig"
      },
      "metrics": {
        "line_count": 122,
        "code_line_count": 38,
        "code_examples": 5,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "zig",
          "line_count": 14,
          "complexity": "simple",
          "code": "const std = @import(\"std\");\n\npub fn main() !void {\n    var gpa = std.heap.GeneralPurposeAllocator(.{}){};\n    defer _ = gpa.deinit();\n    const allocator = gpa.allocator();\n\n    // Allocate memory\n   "
        },
        {
          "language": "zig",
          "line_count": 17,
          "complexity": "simple",
          "code": "// General Purpose Allocator (recommended for most cases)\nvar gpa = std.heap.GeneralPurposeAllocator(.{}){};\nconst allocator = gpa.allocator();\n\n// Arena Allocator (free all at once)\nvar arena = std.h"
        },
        {
          "language": "zig",
          "line_count": 20,
          "complexity": "simple",
          "code": "fn processFile(path: []const u8) !void {\n    const file = try std.fs.cwd().openFile(path, .{});\n    defer file.close();  // Always runs\n\n    const content = try file.readToEndAlloc(allocator, 1024 * 1"
        },
        {
          "language": "zig",
          "line_count": 15,
          "complexity": "simple",
          "code": "// \u2705 GOOD - Explicit ownership\nfn createBuffer(allocator: std.mem.Allocator) ![]u8 {\n    return try allocator.alloc(u8, 100);\n}\n\n// Caller owns and must free\nconst buf = try createBuffer(allocator);\nd"
        },
        {
          "language": "zig",
          "line_count": 10,
          "complexity": "simple",
          "code": "var list = std.ArrayList(i32).init(allocator);\ndefer list.deinit();\n\ntry list.append(42);\ntry list.append(43);\n\nfor (list.items) |item| {\n    std.debug.print(\"{}\\n\", .{item});\n}\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "5 code examples could be extracted to standalone files",
          "priority": "medium"
        }
      ],
      "priority_score": 45.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "zig/zig-package-management.md",
      "category": "zig",
      "skill_name": "zig-package-management",
      "frontmatter": {
        "name": "zig-package-management",
        "description": "Adding dependencies to Zig projects"
      },
      "metrics": {
        "line_count": 88,
        "code_line_count": 27,
        "code_examples": 4,
        "external_refs": 2,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "zig",
          "line_count": 16,
          "complexity": "simple",
          "code": ".{\n    .name = \"my-project\",\n    .version = \"0.1.0\",\n    .dependencies = .{\n        .@\"some-package\" = .{\n            .url = \"https://github.com/user/package/archive/main.tar.gz\",\n            .hash = "
        },
        {
          "language": "bash",
          "line_count": 6,
          "complexity": "simple",
          "code": "# Zig will prompt for hash on first build\nzig build\n\n# Or fetch manually\nzig fetch --save https://github.com/user/package/archive/main.tar.gz\n"
        },
        {
          "language": "zig",
          "line_count": 22,
          "complexity": "medium",
          "code": "pub fn build(b: *std.Build) void {\n    const target = b.standardTargetOptions(.{});\n    const optimize = b.standardOptimizeOption(.{});\n\n    const exe = b.addExecutable(.{\n        .name = \"my-app\",\n  "
        },
        {
          "language": "zig",
          "line_count": 7,
          "complexity": "simple",
          "code": "const std = @import(\"std\");\nconst pkg = @import(\"pkg\");\n\npub fn main() !void {\n    pkg.doSomething();\n}\n"
        }
      ],
      "external_refs": [
        {
          "type": "github",
          "url": "https://github.com/user/package/archive/main.tar.gz\""
        },
        {
          "type": "github",
          "url": "https://github.com/user/package/archive/main.tar.gz"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "4 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 45.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "tui/bubbletea-components.md",
      "category": "tui",
      "skill_name": "bubbletea-components",
      "frontmatter": {
        "name": "bubbletea-components",
        "description": "Building UIs with pre-made components"
      },
      "metrics": {
        "line_count": 171,
        "code_line_count": 51,
        "code_examples": 5,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "go",
          "line_count": 26,
          "complexity": "complex",
          "code": "import \"github.com/charmbracelet/bubbles/textinput\"\n\ntype model struct {\n    textInput textinput.Model\n}\n\nfunc initialModel() model {\n    ti := textinput.New()\n    ti.Placeholder = \"Enter your name\"\n "
        },
        {
          "language": "go",
          "line_count": 21,
          "complexity": "complex",
          "code": "import \"github.com/charmbracelet/bubbles/list\"\n\ntype item struct {\n    title, desc string\n}\n\nfunc (i item) Title() string       { return i.title }\nfunc (i item) Description() string { return i.desc }\n"
        },
        {
          "language": "go",
          "line_count": 29,
          "complexity": "complex",
          "code": "import \"github.com/charmbracelet/bubbles/viewport\"\n\ntype model struct {\n    viewport viewport.Model\n    ready    bool\n}\n\nfunc (m model) Init() tea.Cmd {\n    return nil\n}\n\nfunc (m model) Update(msg tea"
        },
        {
          "language": "go",
          "line_count": 29,
          "complexity": "complex",
          "code": "import \"github.com/charmbracelet/bubbles/spinner\"\n\ntype model struct {\n    spinner spinner.Model\n    loading bool\n}\n\nfunc initialModel() model {\n    s := spinner.New()\n    s.Spinner = spinner.Dot\n    "
        },
        {
          "language": "go",
          "line_count": 25,
          "complexity": "complex",
          "code": "import \"github.com/charmbracelet/lipgloss\"\n\nvar (\n    titleStyle = lipgloss.NewStyle().\n        Bold(true).\n        Foreground(lipgloss.Color(\"5\")).\n        MarginBottom(1)\n\n    boxStyle = lipgloss.Ne"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "5 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 45.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "data/dataflow-coordination.md",
      "category": "data",
      "skill_name": "dataflow-coordination",
      "frontmatter": {
        "name": "data-dataflow-coordination",
        "description": "Coordination patterns for distributed dataflow systems including barriers, epochs, and distributed snapshots"
      },
      "metrics": {
        "line_count": 759,
        "code_line_count": 54,
        "code_examples": 5,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "rust",
          "line_count": 76,
          "complexity": "complex",
          "code": "use timely::dataflow::{Scope, Stream};\nuse timely::dataflow::channels::pact::Pipeline;\nuse timely::dataflow::operators::generic::operator::Operator;\nuse std::collections::HashMap;\n\n// Barrier that emi"
        },
        {
          "language": "go",
          "line_count": 97,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n\n// EpochCoordinator manages epoch transitions across workers\ntype EpochCoordinator struct {\n    currentEpoch int64\n    numWorkers   int\n    ba"
        },
        {
          "language": "python",
          "line_count": 127,
          "complexity": "complex",
          "code": "import threading\nimport queue\nfrom dataclasses import dataclass\nfrom typing import Dict, List, Set\nfrom enum import Enum\n\nclass MessageType(Enum):\n    DATA = 1\n    MARKER = 2\n\n@dataclass\nclass Message"
        },
        {
          "language": "python",
          "line_count": 123,
          "complexity": "complex",
          "code": "import asyncio\nfrom dataclasses import dataclass\nfrom typing import Optional\nimport time\n\n@dataclass\nclass Watermark:\n    \"\"\"Progress indicator for backpressure\"\"\"\n    timestamp: int\n    worker_id: in"
        },
        {
          "language": "go",
          "line_count": 171,
          "complexity": "complex",
          "code": "package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\n// VectorClock tracks causal relationships\ntype VectorClock map[int]int\n\nfunc (vc VectorClock) Copy() VectorClock {\n    copy := make(VectorClock)\n    for"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "5 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "5 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 45.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "research/data-collection.md",
      "category": "research",
      "skill_name": "data-collection",
      "frontmatter": {
        "name": "research-data-collection",
        "description": "Master data collection methods including survey design, interview protocols, observation techniques, and measurement instruments"
      },
      "metrics": {
        "line_count": 776,
        "code_line_count": 35,
        "code_examples": 4,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 158,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Optional, Dict\nfrom enum import Enum\n\nclass QuestionType(Enum):\n    LIKERT = \"likert\"\n    MULTIPLE_CHOICE = \"multiple_choice\"\n    OPEN_ENDED "
        },
        {
          "language": "python",
          "line_count": 191,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Dict\nimport json\n\n@dataclass\nclass InterviewQuestion:\n    \"\"\"Define interview question with probes\"\"\"\n    question: str\n    purpose: str\n    "
        },
        {
          "language": "python",
          "line_count": 166,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import List, Optional\nfrom enum import Enum\n\nclass ObservationType(Enum):\n    PARTICIPANT = \"participant\"\n    NON_PARTICIPAN"
        },
        {
          "language": "python",
          "line_count": 145,
          "complexity": "complex",
          "code": "import pandas as pd\nimport numpy as np\nfrom typing import List, Dict\n\nclass DataQualityControl:\n    \"\"\"Implement data quality checks\"\"\"\n\n    def __init__(self, data: pd.DataFrame):\n        self.data ="
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "4 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 42.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "research/qualitative-methods.md",
      "category": "research",
      "skill_name": "qualitative-methods",
      "frontmatter": {
        "name": "research-qualitative-methods",
        "description": "Master qualitative research methods including interviews, ethnography, case studies, grounded theory, and thematic analysis"
      },
      "metrics": {
        "line_count": 631,
        "code_line_count": 38,
        "code_examples": 4,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 84,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Optional\nfrom datetime import datetime\n\n@dataclass\nclass InterviewProtocol:\n    \"\"\"Structure for interview guide\"\"\"\n    research_question: st"
        },
        {
          "language": "python",
          "line_count": 173,
          "complexity": "complex",
          "code": "import pandas as pd\nfrom collections import defaultdict\nfrom typing import List, Dict, Set\n\nclass ThematicAnalysis:\n    \"\"\"Conduct rigorous thematic analysis\"\"\"\n\n    def __init__(self):\n        self.t"
        },
        {
          "language": "python",
          "line_count": 136,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Optional, Dict\nfrom enum import Enum\n\nclass CodingLevel(Enum):\n    OPEN = \"open\"\n    AXIAL = \"axial\"\n    SELECTIVE = \"selective\"\n\n@dataclass\n"
        },
        {
          "language": "python",
          "line_count": 109,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Dict\nfrom enum import Enum\n\nclass CaseType(Enum):\n    SINGLE = \"single\"\n    MULTIPLE = \"multiple\"\n    EMBEDDED = \"embedded\"\n\nclass DataSource"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "4 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 42.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "research/quantitative-methods.md",
      "category": "research",
      "skill_name": "quantitative-methods",
      "frontmatter": {
        "name": "research-quantitative-methods",
        "description": "Master quantitative research methods including statistical analysis, surveys, experiments, and hypothesis testing"
      },
      "metrics": {
        "line_count": 541,
        "code_line_count": 36,
        "code_examples": 4,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 55,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Optional\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\n\n@dataclass\nclass ExperimentDesign:\n    \"\"\"Define experimental design"
        },
        {
          "language": "python",
          "line_count": 93,
          "complexity": "complex",
          "code": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\n\nclass SurveyAnalysis:\n    \"\"\"Analyze survey data with proper weighting and missing data\"\"\"\n\n    def __init__(self, data: pd.DataFrame):\n"
        },
        {
          "language": "python",
          "line_count": 117,
          "complexity": "complex",
          "code": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom typing import Tuple\n\nclass HypothesisTests:\n    \"\"\"Common hypothesis tests with effect sizes\"\"\"\n\n    @staticmethod\n    def t_test_in"
        },
        {
          "language": "python",
          "line_count": 134,
          "complexity": "complex",
          "code": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom scipy import stats\n\nclass RegressionAnalysis:\n   "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "4 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 42.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "research/research-design.md",
      "category": "research",
      "skill_name": "research-design",
      "frontmatter": {
        "name": "research-research-design",
        "description": "Master research study design including hypothesis formation, validity, sampling strategies, and experimental control"
      },
      "metrics": {
        "line_count": 636,
        "code_line_count": 34,
        "code_examples": 4,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 48,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Optional\nfrom enum import Enum\n\nclass HypothesisType(Enum):\n    DIRECTIONAL = \"directional\"\n    NON_DIRECTIONAL = \"non-directional\"\n    NULL "
        },
        {
          "language": "python",
          "line_count": 88,
          "complexity": "complex",
          "code": "from typing import List, Dict\nfrom enum import Enum\n\nclass ValidityThreat(Enum):\n    # Internal validity\n    HISTORY = \"history\"\n    MATURATION = \"maturation\"\n    TESTING = \"testing\"\n    INSTRUMENTATI"
        },
        {
          "language": "python",
          "line_count": 140,
          "complexity": "complex",
          "code": "from enum import Enum\nimport numpy as np\nfrom typing import Optional\n\nclass SamplingMethod(Enum):\n    # Probability sampling\n    SIMPLE_RANDOM = \"simple_random\"\n    SYSTEMATIC = \"systematic\"\n    STRAT"
        },
        {
          "language": "python",
          "line_count": 125,
          "complexity": "complex",
          "code": "from dataclasses import dataclass\nfrom typing import List, Dict, Optional\nfrom enum import Enum\n\nclass ControlMethod(Enum):\n    RANDOMIZATION = \"randomization\"\n    MATCHING = \"matching\"\n    BLOCKING ="
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "4 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 42.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "zig/zig-c-interop.md",
      "category": "zig",
      "skill_name": "zig-c-interop",
      "frontmatter": {
        "name": "zig-c-interop",
        "description": "Calling C libraries from Zig"
      },
      "metrics": {
        "line_count": 107,
        "code_line_count": 35,
        "code_examples": 4,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "zig",
          "line_count": 28,
          "complexity": "medium",
          "code": "const std = @import(\"std\");\n\npub fn build(b: *std.Build) void {\n    const exe = b.addExecutable(.{\n        .name = \"app\",\n        .root_source_file = .{ .path = \"src/main.zig\" },\n        .target = tar"
        },
        {
          "language": "zig",
          "line_count": 19,
          "complexity": "simple",
          "code": "const c = @cImport({\n    @cInclude(\"stdio.h\");\n    @cInclude(\"sqlite3.h\");\n});\n\npub fn main() !void {\n    // Call C function\n    _ = c.printf(\"Hello from C!\\n\");\n\n    // Use C types\n    var db: ?*c.sq"
        },
        {
          "language": "zig",
          "line_count": 13,
          "complexity": "simple",
          "code": "// C integer types\nc_int       // int\nc_uint      // unsigned int\nc_long      // long\nc_ulong     // unsigned long\n\n// Pointers\n[*c]u8      // C pointer (nullable, can be null)\n[*]u8       // Zig many"
        },
        {
          "language": "zig",
          "line_count": 8,
          "complexity": "simple",
          "code": "// Export function for C\nexport fn add(a: c_int, b: c_int) c_int {\n    return a + b;\n}\n\n// Use from C:\n// extern int add(int a, int b);\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "4 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 42.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "zig/zig-testing.md",
      "category": "zig",
      "skill_name": "zig-testing",
      "frontmatter": {
        "name": "zig-testing",
        "description": "Writing unit tests in Zig"
      },
      "metrics": {
        "line_count": 88,
        "code_line_count": 36,
        "code_examples": 4,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "zig",
          "line_count": 16,
          "complexity": "simple",
          "code": "const std = @import(\"std\");\nconst testing = std.testing;\n\nfn add(a: i32, b: i32) i32 {\n    return a + b;\n}\n\ntest \"addition\" {\n    try testing.expect(add(2, 2) == 4);\n    try testing.expectEqual(@as(i3"
        },
        {
          "language": "zig",
          "line_count": 16,
          "complexity": "simple",
          "code": "// src/math.zig\npub fn multiply(a: i32, b: i32) i32 {\n    return a * b;\n}\n\ntest \"multiply\" {\n    try testing.expectEqual(@as(i32, 6), multiply(2, 3));\n}\n\n// tests/test.zig\nconst math = @import(\"math\")"
        },
        {
          "language": "bash",
          "line_count": 9,
          "complexity": "simple",
          "code": "# Run all tests\nzig build test\n\n# Run specific test file\nzig test src/main.zig\n\n# Run with optimization\nzig build test -Doptimize=ReleaseFast\n"
        },
        {
          "language": "zig",
          "line_count": 10,
          "complexity": "simple",
          "code": "test \"allocator test\" {\n    var arena = std.heap.ArenaAllocator.init(testing.allocator);\n    defer arena.deinit();\n    const allocator = arena.allocator();\n\n    const list = try allocator.alloc(i32, 1"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "4 code examples could be extracted to standalone files",
          "priority": "medium"
        }
      ],
      "priority_score": 42.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "zig/zig-build-system.md",
      "category": "zig",
      "skill_name": "zig-build-system",
      "frontmatter": {
        "name": "zig-build-system",
        "description": "Configuring build.zig"
      },
      "metrics": {
        "line_count": 91,
        "code_line_count": 36,
        "code_examples": 4,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "zig",
          "line_count": 22,
          "complexity": "medium",
          "code": "const std = @import(\"std\");\n\npub fn build(b: *std.Build) void {\n    const target = b.standardTargetOptions(.{});\n    const optimize = b.standardOptimizeOption(.{});\n\n    const exe = b.addExecutable(.{"
        },
        {
          "language": "bash",
          "line_count": 15,
          "complexity": "simple",
          "code": "# Build project\nzig build\n\n# Run project\nzig build run\n\n# Build and run tests\nzig build test\n\n# Clean build artifacts\nrm -rf zig-out zig-cache\n\n# Build for release\nzig build -Doptimize=ReleaseFast\n"
        },
        {
          "language": "zig",
          "line_count": 13,
          "complexity": "simple",
          "code": "// In build.zig - specify target\nconst target = b.resolveTargetQuery(.{\n    .cpu_arch = .x86_64,\n    .os_tag = .linux,\n});\n\nconst exe = b.addExecutable(.{\n    .name = \"my-app\",\n    .root_source_file ="
        },
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "# Cross-compile for different targets\nzig build -Dtarget=x86_64-linux\nzig build -Dtarget=aarch64-macos\nzig build -Dtarget=x86_64-windows\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "4 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 42.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "math/graph/graph-applications.md",
      "category": "math",
      "skill_name": "graph-applications",
      "frontmatter": {
        "name": "Graph Theory Applications",
        "description": "Real-world applications of graph algorithms including social networks, routing, dependency resolution, recommendation systems, and network analysis"
      },
      "metrics": {
        "line_count": 636,
        "code_line_count": 33,
        "code_examples": 4,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 143,
          "complexity": "complex",
          "code": "from typing import List, Set, Dict, Tuple\nfrom collections import defaultdict, deque\nimport heapq\n\nclass SocialNetwork:\n    \"\"\"Social network graph with user relationships\"\"\"\n\n    def __init__(self):\n"
        },
        {
          "language": "python",
          "line_count": 173,
          "complexity": "complex",
          "code": "import math\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n@dataclass\nclass Location:\n    \"\"\"Geographic location\"\"\"\n    id: int\n    name: str\n    lat: float  # Latitude\n    lon: float "
        },
        {
          "language": "python",
          "line_count": 115,
          "complexity": "complex",
          "code": "class DependencyResolver:\n    \"\"\"Build system dependency resolution\"\"\"\n\n    def __init__(self):\n        # DAG: task -> [dependencies]\n        self.dependencies: Dict[str, Set[str]] = defaultdict(set)\n"
        },
        {
          "language": "python",
          "line_count": 94,
          "complexity": "complex",
          "code": "class CollaborativeFilteringGraph:\n    \"\"\"Recommendation system using graph-based collaborative filtering\"\"\"\n\n    def __init__(self):\n        # Bipartite graph: users and items\n        self.user_items"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "4 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 42.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "ml/llm-model-selection.md",
      "category": "ml",
      "skill_name": "llm-model-selection",
      "frontmatter": {
        "name": "ml-llm-model-selection",
        "description": "Choosing the right LLM based on capabilities, benchmarks, pricing, and use cases"
      },
      "metrics": {
        "line_count": 552,
        "code_line_count": 38,
        "code_examples": 4,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 74,
          "complexity": "complex",
          "code": "from enum import Enum\nfrom typing import Optional\n\nclass TaskComplexity(Enum):\n    SIMPLE = \"simple\"  # Factual, short\n    MODERATE = \"moderate\"  # Multi-step, some reasoning\n    COMPLEX = \"complex\"  "
        },
        {
          "language": "python",
          "line_count": 78,
          "complexity": "complex",
          "code": "import pandas as pd\n\n# 2025 benchmark data\nbenchmark_data = {\n    \"model\": [\n        \"gpt-4o\",\n        \"claude-3.5-sonnet\",\n        \"gemini-2.5-flash\",\n        \"gpt-4o-mini\",\n        \"deepseek-v3\",\n  "
        },
        {
          "language": "python",
          "line_count": 46,
          "complexity": "complex",
          "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Plot cost vs quality for model selection\nmodels = df.copy()\nmodels[\"quality_score\"] = models[[\"mmlu\", \"humaneval\"]].mean(axis=1)\n\nplt.figure(figsi"
        },
        {
          "language": "python",
          "line_count": 104,
          "complexity": "complex",
          "code": "from typing import Dict, List\nfrom dataclasses import dataclass\n\n@dataclass\nclass ModelConfig:\n    name: str\n    cost_per_1k: float\n    strength: str\n    use_cases: List[str]\n\nclass ModelPortfolio:\n  "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "4 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "validate_examples",
          "reason": "4 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 42.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "skill-creation.md",
      "category": "root",
      "skill_name": "skill-creation",
      "frontmatter": {
        "name": "skill-creation",
        "description": "Creating new atomic skills for the skills system"
      },
      "metrics": {
        "line_count": 711,
        "code_line_count": 100,
        "code_examples": 19,
        "external_refs": 0,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "markdown",
          "line_count": 35,
          "complexity": "medium",
          "code": "# [Skill Name]\n\n**Scope**: One-line description of what this skill covers\n**Lines**: ~[estimated line count]\n**Last Updated**: YYYY-MM-DD\n\n## When to Use This Skill\n\nActivate this skill when:\n- [Speci"
        },
        {
          "language": "markdown",
          "line_count": 23,
          "complexity": "medium",
          "code": "# [Skill Name]\n\n## Core Concepts (2-4 concepts)\n- Concept 1: [Mental model]\n- Concept 2: [Key principle]\n\n## Patterns (4-8 patterns)\n- Pattern 1: [Common use case]\n- Pattern 2: [Alternative approach]\n"
        },
        {
          "language": "typescript",
          "line_count": 17,
          "complexity": "simple",
          "code": "// \u274c Bad: No error handling\nasync function fetchUser(id: string) {\n  const response = await fetch(`/api/users/${id}`);\n  return response.json();\n}\n\n// \u2705 Good: Proper error handling\nasync function fetc"
        },
        {
          "language": "markdown",
          "line_count": 2,
          "complexity": "simple",
          "code": "| `new-skill.md` | Brief description of use case | ~300 |\n"
        },
        {
          "language": "markdown",
          "line_count": 3,
          "complexity": "simple",
          "code": "**Common workflows:**\n- New workflow: `new-skill.md` \u2192 `existing-skill.md`\n"
        },
        {
          "language": "markdown",
          "line_count": 2,
          "complexity": "simple",
          "code": "**New Category**: Search `new-*.md`, `category-*.md`\n"
        },
        {
          "language": "markdown",
          "line_count": 5,
          "complexity": "simple",
          "code": "### New Workflow Name\n1. `skill-1.md` - Purpose\n2. `new-skill.md` - Purpose\n3. `skill-3.md` - Purpose\n"
        },
        {
          "language": "markdown",
          "line_count": 2,
          "complexity": "simple",
          "code": "| New task | new-skill.md, related-skill.md | 1\u21922 |\n"
        },
        {
          "language": "markdown",
          "line_count": 5,
          "complexity": "simple",
          "code": "**Total Skills**: [new count]\n\n### By Category Breakdown\n- [Category]: [new count] skills\n"
        },
        {
          "language": "markdown",
          "line_count": 3,
          "complexity": "simple",
          "code": "**Advanced Categories** ([new count] skills):\n- **New Category** ([count]): Skill 1, Skill 2, Skill 3\n"
        },
        {
          "language": "markdown",
          "line_count": 2,
          "complexity": "simple",
          "code": "New Category:   new-*.md ([count]) | category-*.md ([count])\n"
        },
        {
          "language": "markdown",
          "line_count": 3,
          "complexity": "simple",
          "code": "ls skills/new-*.md\nls skills/category/*.md\n"
        },
        {
          "language": "markdown",
          "line_count": 2,
          "complexity": "simple",
          "code": "### Skills Catalog ([new total] Total)\n"
        },
        {
          "language": "markdown",
          "line_count": 5,
          "complexity": "simple",
          "code": "\u274c \"When you are working on implementing authentication and authorization\n    for your API endpoints, you should consider using this skill.\"\n\n\u2705 \"Implementing API authentication and authorization\"\n"
        },
        {
          "language": "markdown",
          "line_count": 3,
          "complexity": "simple",
          "code": "\u274c \"This helps with databases\"\n\u2705 \"Optimizing slow Postgres queries with EXPLAIN plans and indexes\"\n"
        },
        {
          "language": "markdown",
          "line_count": 3,
          "complexity": "simple",
          "code": "\u274c \"Configure your settings appropriately\"\n\u2705\n"
        },
        {
          "language": "javascript",
          "line_count": 5,
          "complexity": "simple",
          "code": "// No context, unclear purpose\nfunction process(x) {\n  return x.map(y => y * 2);\n}\n"
        },
        {
          "language": "typescript",
          "line_count": 12,
          "complexity": "simple",
          "code": "// Transform user data for API response\ninterface User {\n  id: string;\n  email: string;\n  password: string; // Never send to client\n}\n\nfunction sanitizeUser(user: User) {\n  const { password, ...safeUs"
        },
        {
          "language": "markdown",
          "line_count": 30,
          "complexity": "medium",
          "code": "# Skill Name\n\n**Scope**: One-line description\n**Lines**: ~300\n**Last Updated**: 2025-10-18\n\n## When to Use This Skill\n\n- Trigger 1\n- Trigger 2\n\n## Core Concepts\n\n### Concept 1\n\n## Patterns\n\n### Patter"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "postgresql",
        "kubernetes"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "create_resources_dir",
          "reason": "Many examples/references could be extracted to Resources",
          "priority": "high"
        },
        {
          "type": "extract_examples",
          "reason": "19 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "3 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 41.0,
      "priority_tier": "MEDIUM"
    },
    {
      "file_path": "elegant-design/reference/design-systems.md",
      "category": "elegant-design",
      "skill_name": "design-systems",
      "frontmatter": {},
      "metrics": {
        "line_count": 112,
        "code_line_count": 9,
        "code_examples": 3,
        "external_refs": 3,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 5,
          "complexity": "simple",
          "code": "npx shadcn-ui@latest init\nnpx shadcn-ui@latest add button\nnpx shadcn-ui@latest add card\nnpx shadcn-ui@latest add dialog\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "npm install -D daisyui\n"
        },
        {
          "language": "bash",
          "line_count": 2,
          "complexity": "simple",
          "code": "npm install @heroui/react\n"
        }
      ],
      "external_refs": [
        {
          "type": "external",
          "url": "https://ui.shadcn.com"
        },
        {
          "type": "external",
          "url": "https://daisyui.com"
        },
        {
          "type": "external",
          "url": "https://heroui.com"
        }
      ],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [],
      "priority_score": 33.5,
      "priority_tier": "LOW"
    },
    {
      "file_path": "skill-prompt-discovery.md",
      "category": "root",
      "skill_name": "skill-prompt-discovery",
      "frontmatter": {
        "name": "skill-prompt-discovery",
        "description": "User makes a request involving specific technologies or frameworks"
      },
      "metrics": {
        "line_count": 437,
        "code_line_count": 27,
        "code_examples": 4,
        "external_refs": 0,
        "tools_mentioned": 5,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "python",
          "line_count": 33,
          "complexity": "medium",
          "code": "# Conceptual pattern (not actual code)\ndef extract_tech_signals(prompt: str) -> list[str]:\n    \"\"\"Extract technology keywords from user prompt\"\"\"\n\n    tech_keywords = {\n        # Frameworks\n        \"n"
        },
        {
          "language": "markdown",
          "line_count": 20,
          "complexity": "simple",
          "code": "# Build intent\n\"Build a REST API\" \u2192\n  1. rest-api-design.md (architecture)\n  2. api-authentication.md (implementation)\n  3. postgres-schema-design.md (data layer)\n  4. unit-testing-patterns.md (qualit"
        },
        {
          "language": "markdown",
          "line_count": 21,
          "complexity": "medium",
          "code": "# Decision tree for skill discovery\n\nUser prompt received\n  \u2193\nIs it a common task? (check _INDEX.md Quick Reference Table)\n  \u251c\u2500 YES: Read listed skills directly\n  \u2514\u2500 NO: Continue analysis\n      \u2193\nIden"
        },
        {
          "language": "python",
          "line_count": 23,
          "complexity": "complex",
          "code": "# Track conversation state\nclass ConversationContext:\n    active_skills: set[str] = set()\n    tech_stack: set[str] = set()\n    current_phase: str = \"unknown\"  # setup, implementation, debugging, deplo"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [
        "kubernetes",
        "postgresql",
        "postgres",
        "terraform",
        "docker"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "extract_examples",
          "reason": "4 code examples could be extracted to standalone files",
          "priority": "medium"
        },
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        },
        {
          "type": "validate_examples",
          "reason": "3 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 32.0,
      "priority_tier": "LOW"
    },
    {
      "file_path": "zig/zig-project-setup.md",
      "category": "zig",
      "skill_name": "zig-project-setup",
      "frontmatter": {
        "name": "zig-project-setup",
        "description": "Initializing new Zig projects"
      },
      "metrics": {
        "line_count": 59,
        "code_line_count": 15,
        "code_examples": 2,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 8,
          "complexity": "simple",
          "code": "# Create executable project\nzig init-exe\n# Creates: src/main.zig, build.zig, build.zig.zon\n\n# Create library project\nzig init-lib\n# Creates: src/root.zig, build.zig, build.zig.zon\n"
        },
        {
          "language": "zig",
          "line_count": 7,
          "complexity": "simple",
          "code": "const std = @import(\"std\");\n\npub fn main() !void {\n    const stdout = std.io.getStdOut().writer();\n    try stdout.print(\"Hello, {s}!\\n\", .{\"World\"});\n}\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [],
      "priority_score": 26.0,
      "priority_tier": "LOW"
    },
    {
      "file_path": "tui/ratatui-architecture.md",
      "category": "tui",
      "skill_name": "ratatui-architecture",
      "frontmatter": {
        "name": "ratatui-architecture",
        "description": "Building terminal UIs in Rust"
      },
      "metrics": {
        "line_count": 115,
        "code_line_count": 13,
        "code_examples": 2,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "rust",
          "line_count": 66,
          "complexity": "complex",
          "code": "use crossterm::{\n    event::{self, Event, KeyCode},\n    execute,\n    terminal::{disable_raw_mode, enable_raw_mode, EnterAlternateScreen, LeaveAlternateScreen},\n};\nuse ratatui::{\n    backend::Crossterm"
        },
        {
          "language": "rust",
          "line_count": 20,
          "complexity": "simple",
          "code": "use crossterm::event::{self, Event, KeyCode};\nuse std::time::Duration;\n\nfn run_app(terminal: &mut Terminal<impl Backend>, app: &mut App) -> io::Result<()> {\n    loop {\n        terminal.draw(|f| ui(f, "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 26.0,
      "priority_tier": "LOW"
    },
    {
      "file_path": "tui/ratatui-widgets.md",
      "category": "tui",
      "skill_name": "ratatui-widgets",
      "frontmatter": {
        "name": "ratatui-widgets",
        "description": "Using Ratatui's built-in widgets"
      },
      "metrics": {
        "line_count": 78,
        "code_line_count": 16,
        "code_examples": 2,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "rust",
          "line_count": 32,
          "complexity": "medium",
          "code": "use ratatui::{\n    layout::{Constraint, Direction, Layout},\n    widgets::{Block, Borders, List, ListItem, Paragraph, Table, Row, Cell},\n};\n\nfn ui(f: &mut Frame, app: &App) {\n    let chunks = Layout::d"
        },
        {
          "language": "rust",
          "line_count": 18,
          "complexity": "simple",
          "code": "use ratatui::widgets::{Table, Row, Cell};\n\nlet rows = vec![\n    Row::new(vec![\"Name\", \"Age\", \"City\"]),\n    Row::new(vec![\"Alice\", \"30\", \"NYC\"]),\n    Row::new(vec![\"Bob\", \"25\", \"SF\"]),\n];\n\nlet table = "
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 26.0,
      "priority_tier": "LOW"
    },
    {
      "file_path": "elegant-design/reference/anti-patterns.md",
      "category": "elegant-design",
      "skill_name": "anti-patterns",
      "frontmatter": {},
      "metrics": {
        "line_count": 171,
        "code_line_count": 8,
        "code_examples": 1,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "css",
          "line_count": 8,
          "complexity": "simple",
          "code": "@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [],
      "priority_score": 23.0,
      "priority_tier": "LOW"
    },
    {
      "file_path": "workflow/beads-context-strategies.md",
      "category": "workflow",
      "skill_name": "beads-context-strategies",
      "frontmatter": {
        "name": "beads-context-strategies",
        "description": "Skill for beads context strategies"
      },
      "metrics": {
        "line_count": 406,
        "code_line_count": 9,
        "code_examples": 1,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [
        {
          "language": "bash",
          "line_count": 10,
          "complexity": "complex",
          "code": "# 1. Import latest state\nbd import -i .beads/issues.jsonl\n\n# 2. Find last worked issue\nbd list --status in_progress --json\n\n# 3. Reconstruct context\nbd dep tree bd-X\n/context \"Resuming bd-X: [reconstr"
        }
      ],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "validate_examples",
          "reason": "1 complex examples should be validated",
          "priority": "high"
        }
      ],
      "priority_score": 23.0,
      "priority_tier": "LOW"
    },
    {
      "file_path": "elegant-design/implementation/testing-and-qa.md",
      "category": "elegant-design",
      "skill_name": "testing-and-qa",
      "frontmatter": {},
      "metrics": {
        "line_count": 68,
        "code_line_count": 0,
        "code_examples": 0,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [],
      "priority_score": 20.0,
      "priority_tier": "LOW"
    },
    {
      "file_path": "tui/tui-best-practices.md",
      "category": "tui",
      "skill_name": "tui-best-practices",
      "frontmatter": {
        "name": "tui-best-practices",
        "description": "Designing terminal user interfaces"
      },
      "metrics": {
        "line_count": 81,
        "code_line_count": 0,
        "code_examples": 0,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [],
      "priority_score": 20.0,
      "priority_tier": "LOW"
    },
    {
      "file_path": "anti-slop/references/text-patterns.md",
      "category": "anti-slop",
      "skill_name": "text-patterns",
      "frontmatter": {
        "name": "text-patterns",
        "description": "Reference guide for detecting AI slop patterns in natural language text including overused phrases, buzzwords, and meta-commentary. Use as reference when reviewing text content for quality."
      },
      "metrics": {
        "line_count": 203,
        "code_line_count": 0,
        "code_examples": 0,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [],
      "priority_score": 20.0,
      "priority_tier": "LOW"
    },
    {
      "file_path": "anti-slop/references/design-patterns.md",
      "category": "anti-slop",
      "skill_name": "design-patterns",
      "frontmatter": {
        "name": "design-patterns",
        "description": "Reference guide for detecting AI slop patterns in visual and UX design including generic gradients, cookie-cutter layouts, and buzzword-heavy copy. Use as reference when reviewing design quality."
      },
      "metrics": {
        "line_count": 343,
        "code_line_count": 0,
        "code_examples": 0,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [],
      "priority_score": 20.0,
      "priority_tier": "LOW"
    },
    {
      "file_path": "skill-prompt-planning.md",
      "category": "root",
      "skill_name": "skill-prompt-planning",
      "frontmatter": {
        "name": "skill-prompt-planning",
        "description": "Skill for skill prompt planning"
      },
      "metrics": {
        "line_count": 814,
        "code_line_count": 0,
        "code_examples": 0,
        "external_refs": 0,
        "tools_mentioned": 3,
        "config_snippets": 0
      },
      "code_examples": [],
      "external_refs": [],
      "tools_mentioned": [
        "postgres",
        "kubernetes",
        "docker"
      ],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [
        {
          "type": "add_test_scripts",
          "reason": "Mentions testable tools, could add Docker-based integration tests",
          "priority": "high"
        }
      ],
      "priority_score": 6.0,
      "priority_tier": "LOW"
    },
    {
      "file_path": "_SKILL_TEMPLATE.md",
      "category": "root",
      "skill_name": "_SKILL_TEMPLATE",
      "frontmatter": {
        "name": "category-skill-name",
        "description": "Brief one-line description of what this skill covers"
      },
      "metrics": {
        "line_count": 165,
        "code_line_count": 0,
        "code_examples": 0,
        "external_refs": 0,
        "tools_mentioned": 0,
        "config_snippets": 0
      },
      "code_examples": [],
      "external_refs": [],
      "tools_mentioned": [],
      "config_snippets": [],
      "has_resources": {
        "resources_dir": false,
        "scripts_dir": false
      },
      "opportunities": [],
      "priority_score": 0.0,
      "priority_tier": "LOW"
    }
  ]
}